
Summary:

        postcode:app.py__*__MODULE

        

Summary:

        postcode:app.py__*__MODULE__*__FUNCTION-main

        None, 
Imported code block (postcode:updaters:graph_db_updater.py__*__MODULE) code content:


class GraphDBUpdater:
    """
    Graph DB based updater.

    Updates parses the files in a directory, saves the models as JSON, in the graph database, and in a ChromaDB collection.

    Args:
        - directory (str): The directory of the project to update.
        - output_directory (str): The directory to save the JSON files.
        - graph_connector (ArangoDBConnector): The ArangoDB connector to use for connecting to the graph database.
            - default: ArangoDBConnector() - instantiates a new ArangoDBConnector with its default values

    Example:
        ```Python
        from postcode.databases.arangodb.arangodb_connector import ArangoDBConnector
        from postcode.updaters.graph_db_updater import GraphDBUpdater

        # Create the ArangoDB connector.
        arango_connector = ArangoDBConnector()

        # Create the GraphDBUpdater.
        graph_updater = GraphDBUpdater(directory, output_directory, arango_connector)

        # Update all the models for the project and setup Chroma.
        chroma__collection_manager = graph_updater.update_all()
        ```
    """

    def __init__(
        self,
        directory: str,
        output_directory: str,
        graph_connector: ArangoDBConnector = ArangoDBConnector(),
    ) -> None:
        self.directory: str = directory
        self.output_directory: str = output_directory
        self.graph_connector: ArangoDBConnector = graph_connector

        self.graph_manager = ArangoDBManager(graph_connector)

    def update_all(self) -> ChromaCollectionManager:
        """
        Updates all the models for a project using the graph database.

        Note:
            This method will delete all the existing collections in the graph database, summarize every code block in the project,
            and save the new models in the graph database and as JSON. Use with caution as it is expensive with respect to time, resources,
            and money.

        Args:
            - directory (str): The directory of the project to update.
            - output_directory (str): The directory to save the JSON files.

        Returns:
            - chroma_collection_manager (ChromaDBCollectionManager): The ChromaDB collection manager.

        Raises:
            - Exception: If no finalized models are returned from summarization.

        Example:
            ```Python
            graph_updater = GraphDBUpdater(directory, output_directory)

            # Update all the models for the project and setup Chroma.
            chroma_manager = graph_updater.update_all()
            ```
        """

        self.graph_connector.delete_all_collections()
        self.graph_connector.ensure_collections()

        process_files_return: VisitorManagerProcessFilesReturn = (
            self._visit_and_parse_files(self.directory)
        )
        models_tuple: tuple[ModelType, ...] = process_files_return.models_tuple

        self._upsert_models_to_graph_db(models_tuple)

        finalized_models: list[ModelType] | None = self._map_and_summarize_models(
            models_tuple
        )

        if not finalized_models:
            raise Exception("No finalized models returned from summarization.")

        json_manager = JSONHandler(
            self.directory,
            process_files_return.directory_modules,
            self.output_directory,
        )
        self._save_json(finalized_models, json_manager)
        self._upsert_models_to_graph_db(tuple(finalized_models))

        return chroma_setup.setup_chroma(finalized_models)

    def _visit_and_parse_files(
        self, directory: str
    ) -> VisitorManagerProcessFilesReturn:
        """Visits and parses the files in the directory."""

        logging.info("Starting the directory parsing.")
        visitor