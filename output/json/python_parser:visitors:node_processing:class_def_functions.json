{
    "file_path": "./python_parser/visitors/node_processing/class_def_functions.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Sequence",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": null,
                    "local_block_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "DecoratorModel",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-DecoratorModel"
                },
                {
                    "name": "ClassKeywordModel",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-ClassKeywordModel"
                }
            ],
            "imported_from": "models.models",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "extract_code_content",
                    "as_name": null,
                    "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_code_content"
                },
                {
                    "name": "extract_stripped_code_content",
                    "as_name": null,
                    "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_stripped_code_content"
                },
                {
                    "name": "extract_decorators",
                    "as_name": null,
                    "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_decorators"
                }
            ],
            "imported_from": "visitors.node_processing.common_functions",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "PositionData",
                    "as_name": null,
                    "local_block_id": ".:python_parser:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData"
                }
            ],
            "imported_from": "utilities.processing_context",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:utilities:processing_context.py__*__MODULE"
        }
    ],
    "id": ".:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 111,
    "code_content": "from typing import Sequence\n\nimport libcst\n\nfrom model_builders.class_model_builder import ClassModelBuilder\n\nfrom models.models import ClassKeywordModel, DecoratorModel\nfrom visitors.node_processing.common_functions import (\n    extract_code_content,\n    extract_stripped_code_content,\n    extract_decorators,\n)\nfrom utilities.processing_context import PositionData\n\n\ndef process_class_def(\n    node: libcst.ClassDef,\n    position_data: PositionData,\n    builder: ClassModelBuilder,\n) -> None:\n    \"\"\"\n    Processes a libcst.ClassDef node to build a class model.\n\n    Extracts various components of a class definition such as its docstring, code content, base classes, decorators, and keywords, and updates the provided ClassModelBuilder with these details.\n\n    Args:\n        node (libcst.ClassDef): The class definition node from the CST.\n        position_data (PositionData): Positional data for the class in the source code.\n        builder (ClassModelBuilder): The builder used to construct the class model.\n\n    Example:\n        >>> class_builder = ClassModelBuilder(id=\"class1\", ...)\n        >>> process_class_def(class_node, position_data, class_builder)\n        # Processes the class definition and updates the class builder.\n    \"\"\"\n\n    docstring: str | None = node.get_docstring()\n    code_content: str = extract_code_content(node)\n    bases: list[str] | None = _extract_bases(node.bases)\n    keywords: list[ClassKeywordModel] | None = _extract_keywords(node.keywords)\n    decorators: list[DecoratorModel] | None = extract_decorators(node.decorators)\n\n    (\n        builder.set_docstring(docstring)\n        .set_code_content(code_content)\n        .set_start_line_num(position_data.start)\n        .set_end_line_num(position_data.end)\n    )\n    builder.set_bases(bases).set_decorators(decorators).set_keywords(keywords)\n\n\ndef _extract_bases(bases: Sequence[libcst.Arg]) -> list[str] | None:\n    \"\"\"\n    Extracts the base classes from a sequence of libcst.Arg representing class bases.\n\n    Args:\n        bases (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class base classes.\n\n    Returns:\n        list[str] | None: A list of base class names, or None if there are no bases.\n\n    Example:\n        >>> class_bases = _extract_bases(class_node.bases)\n        # Returns a list of base class names from the class definition.\n    \"\"\"\n\n    bases_list: list[str] = []\n    for base in bases:\n        if (\n            isinstance(base, libcst.Arg)\n            and isinstance(base.value, libcst.Name)\n            and base.value.value\n        ):\n            bases_list.append(base.value.value)\n    return bases_list if bases_list else None\n\n\ndef _extract_keywords(\n    keywords: Sequence[libcst.Arg],\n) -> list[ClassKeywordModel] | None:\n    \"\"\"\n    Extracts class keywords (like metaclass) from a sequence of libcst.Arg representing class keywords.\n\n    Args:\n        keywords (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class keywords.\n\n    Returns:\n        list[ClassKeywordModel] | None: A list of ClassKeywordModel objects representing each keyword, or None if there are no keywords.\n\n    Example:\n        >>> class_keywords = _extract_keywords(class_node.keywords)\n        # Returns a list of ClassKeywordModel objects for each keyword in the class definition.\n    \"\"\"\n\n    keywords_list: list[ClassKeywordModel] = []\n\n    for keyword in keywords:\n        if keyword.keyword is not None:\n            keyword_name: str = keyword.keyword.value\n            args: str | None = (\n                extract_stripped_code_content(keyword.value) if keyword.value else None\n            )\n            content: str = extract_stripped_code_content(keyword)\n\n            keyword_model = ClassKeywordModel(\n                content=content, keyword_name=keyword_name, args=args\n            )\n            keywords_list.append(keyword_model)\n\n    return keywords_list if keywords_list else None\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\n\\nCODE:\\n```Python\\nfrom typing import Sequence\\n\\nimport libcst\\n\\nfrom model_builders.class_model_builder import ClassModelBuilder\\n\\nfrom models.models import ClassKeywordModel, DecoratorModel\\nfrom visitors.node_processing.common_functions import (\\n    extract_code_content,\\n    extract_stripped_code_content,\\n    extract_decorators,\\n)\\nfrom utilities.processing_context import PositionData\\n\\n\\ndef process_class_def(\\n    node: libcst.ClassDef,\\n    position_data: PositionData,\\n    builder: ClassModelBuilder,\\n) -> None:\\n    \"\"\"\\n    Processes a libcst.ClassDef node to build a class model.\\n\\n    Extracts various components of a class definition such as its docstring, code content, base classes, decorators, and keywords, and updates the provided ClassModelBuilder with these details.\\n\\n    Args:\\n        node (libcst.ClassDef): The class definition node from the CST.\\n        position_data (PositionData): Positional data for the class in the source code.\\n        builder (ClassModelBuilder): The builder used to construct the class model.\\n\\n    Example:\\n        >>> class_builder = ClassModelBuilder(id=\"class1\", ...)\\n        >>> process_class_def(class_node, position_data, class_builder)\\n        # Processes the class definition and updates the class builder.\\n    \"\"\"\\n\\n    docstring: str | None = node.get_docstring()\\n    code_content: str = extract_code_content(node)\\n    bases: list[str] | None = _extract_bases(node.bases)\\n    keywords: list[ClassKeywordModel] | None = _extract_keywords(node.keywords)\\n    decorators: list[DecoratorModel] | None = extract_decorators(node.decorators)\\n\\n    (\\n        builder.set_docstring(docstring)\\n        .set_code_content(code_content)\\n        .set_start_line_num(position_data.start)\\n        .set_end_line_num(position_data.end)\\n    )\\n    builder.set_bases(bases).set_decorators(decorators).set_keywords(keywords)\\n\\n\\ndef _extract_bases(bases: Sequence[libcst.Arg]) -> list[str] | None:\\n    \"\"\"\\n    Extracts the base classes from a sequence of libcst.Arg representing class bases.\\n\\n    Args:\\n        bases (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class base classes.\\n\\n    Returns:\\n        list[str] | None: A list of base class names, or None if there are no bases.\\n\\n    Example:\\n        >>> class_bases = _extract_bases(class_node.bases)\\n        # Returns a list of base class names from the class definition.\\n    \"\"\"\\n\\n    bases_list: list[str] = []\\n    for base in bases:\\n        if (\\n            isinstance(base, libcst.Arg)\\n            and isinstance(base.value, libcst.Name)\\n            and base.value.value\\n        ):\\n            bases_list.append(base.value.value)\\n    return bases_list if bases_list else None\\n\\n\\ndef _extract_keywords(\\n    keywords: Sequence[libcst.Arg],\\n) -> list[ClassKeywordModel] | None:\\n    \"\"\"\\n    Extracts class keywords (like metaclass) from a sequence of libcst.Arg representing class keywords.\\n\\n    Args:\\n        keywords (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class keywords.\\n\\n    Returns:\\n        list[ClassKeywordModel] | None: A list of ClassKeywordModel objects representing each keyword, or None if there are no keywords.\\n\\n    Example:\\n        >>> class_keywords = _extract_keywords(class_node.keywords)\\n        # Returns a list of ClassKeywordModel objects for each keyword in the class definition.\\n    \"\"\"\\n\\n    keywords_list: list[ClassKeywordModel] = []\\n\\n    for keyword in keywords:\\n        if keyword.keyword is not None:\\n            keyword_name: str = keyword.keyword.value\\n            args: str | None = (\\n                extract_stripped_code_content(keyword.value) if keyword.value else None\\n            )\\n            content: str = extract_stripped_code_content(keyword)\\n\\n            keyword_model = ClassKeywordModel(\\n                content=content, keyword_name=keyword_name, args=args\\n            )\\n            keywords_list.append(keyword_model)\\n\\n    return keywords_list if keywords_list else None\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\n\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\n\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\npartitioning logic.\"\\\\n\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\n\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\'s content.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\n\\\\nBelow the code are summaries, `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the code block\\\\\\'s that the `CODE` depends on. Use these summaries to \\\\nhelp you write your summary.\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef process_class_def(\\\\n    node: libcst.ClassDef,\\\\n    position_data: PositionData,\\\\n    builder: ClassModelBuilder,\\\\n) -> None:\\\\n    \"\"\"\\\\n    Processes a libcst.ClassDef node to build a class model.\\\\n\\\\n    Extracts various components of a class definition such as its docstring, code content, base classes, decorators, and keywords, and updates the provided ClassModelBuilder with these details.\\\\n\\\\n    Args:\\\\n        node (libcst.ClassDef): The class definition node from the CST.\\\\n        position_data (PositionData): Positional data for the class in the source code.\\\\n        builder (ClassModelBuilder): The builder used to construct the class model.\\\\n\\\\n    Example:\\\\n        >>> class_builder = ClassModelBuilder(id=\"class1\", ...)\\\\n        >>> process_class_def(class_node, position_data, class_builder)\\\\n        # Processes the class definition and updates the class builder.\\\\n    \"\"\"\\\\n\\\\n    docstring: str | None = node.get_docstring()\\\\n    code_content: str = extract_code_content(node)\\\\n    bases: list[str] | None = _extract_bases(node.bases)\\\\n    keywords: list[ClassKeywordModel] | None = _extract_keywords(node.keywords)\\\\n    decorators: list[DecoratorModel] | None = extract_decorators(node.decorators)\\\\n\\\\n    (\\\\n        builder.set_docstring(docstring)\\\\n        .set_code_content(code_content)\\\\n        .set_start_line_num(position_data.start)\\\\n        .set_end_line_num(position_data.end)\\\\n    )\\\\n    builder.set_bases(bases).set_decorators(decorators).set_keywords(keywords)\\\\n\\\\n```\\\\n\\\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\n\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\n\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\npartitioning logic.\"\\\\\\\\n\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\n\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\'s content.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\n\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES` and `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the children in the `CODE` and code blocks\\\\\\\\nthe `CODE` depends upon. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n\\\\\\\\nclass ClassModelBuilder(BaseModelBuilder):\\\\\\\\n    \"\"\"\\\\\\\\n    A builder class for constructing a model of a Python class.\\\\\\\\n\\\\\\\\n    This class extends BaseModelBuilder and is specialized for building a model of a Python class, capturing details such as decorators, base classes, documentation strings, class attributes, and class-specific keywords.\\\\\\\\n\\\\\\\\n    Attributes:\\\\\\\\n        class_attributes (ClassSpecificAttributes): An instance containing attributes specific to a class, like name, decorators, bases, etc.\\\\\\\\n\\\\\\\\n    Args:\\\\\\\\n        id (str): The unique identifier for the class model.\\\\\\\\n        class_name (str): The name of the class.\\\\\\\\n        parent_id (str): The identifier of the parent model (e.g., module or class containing this class).\\\\\\\\n    \"\"\"\\\\\\\\n\\\\\\\\n    def __init__(self, id: str, class_name: str, parent_id: str) -> None:\\\\\\\\n        super().__init__(id=id, block_type=BlockType.CLASS, parent_id=parent_id)\\\\\\\\n\\\\\\\\n        self.class_attributes = ClassSpecificAttributes(\\\\\\\\n            class_name=class_name,\\\\\\\\n            decorators=None,\\\\\\\\n            bases=None,\\\\\\\\n            docstring=None,\\\\\\\\n            attributes=None,\\\\\\\\n            keywords=None,\\\\\\\\n        )\\\\\\\\n\\\\\\\\n    def set_decorators(\\\\\\\\n        self, decorators: list[DecoratorModel] | None\\\\\\\\n    ) -> \"ClassModelBuilder\":\\\\\\\\n        \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\\\\\\\\n        if decorators:\\\\\\\\n            self.class_attributes.decorators = decorators\\\\\\\\n        else:\\\\\\\\n            self.class_attributes.decorators = None\\\\\\\\n        return self\\\\\\\\n\\\\\\\\n    def set_bases(self, base_classes: list[str] | None) -> \"ClassModelBuilder\":\\\\\\\\n        \"\"\"Sets the list of base classes to the class model.\"\"\"\\\\\\\\n        self.class_attributes.bases = base_classes\\\\\\\\n        return self\\\\\\\\n\\\\\\\\n    def set_docstring(self, docstring: str | None) -> \"ClassModelBuilder\":\\\\\\\\n        \"\"\"Sets the docstring of the class in the model.\"\"\"\\\\\\\\n        self.class_attributes.docstring = docstring\\\\\\\\n        return self\\\\\\\\n\\\\\\\\n    # TODO: Add attribute model\\\\\\\\n    def add_attribute(self, attribute) -> \"ClassModelBuilder\":\\\\\\\\n        \"\"\"Adds an attribute of the class in the model.\"\"\"\\\\\\\\n        if not self.class_attributes.attributes:\\\\\\\\n            self.class_attributes.attributes = []\\\\\\\\n        self.class_attributes.attributes.append(attribute)\\\\\\\\n        return self\\\\\\\\n\\\\\\\\n    def set_keywords(\\\\\\\\n        self, keyword_list: list[ClassKeywordModel] | None\\\\\\\\n    ) -> \"ClassModelBuilder\":\\\\\\\\n        \"\"\"Sets the list of keywords to the class model.\"\"\"\\\\\\\\n        self.class_attributes.keywords = keyword_list\\\\\\\\n        return self\\\\\\\\n\\\\\\\\n    def _get_class_specific_attributes(self) -> dict[str, Any]:\\\\\\\\n        \"\"\"Gets the class specific attributes.\"\"\"\\\\\\\\n        return self.class_attributes.model_dump()\\\\\\\\n\\\\\\\\n    @logging_decorator(message=\"Building ClassModel\")\\\\\\\\n    def build(self) -> ClassModel:\\\\\\\\n        \"\"\"Creates a ClassModel instance after building and setting the children models.\"\"\"\\\\\\\\n        self.build_and_set_children()\\\\\\\\n        return ClassModel(\\\\\\\\n            **self._get_common_attributes(),\\\\\\\\n            **self._get_class_specific_attributes(),\\\\\\\\n        )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n\\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef __init__(self, id: str, class_name: str, parent_id: str) -> None:\\\\\\\\\\\\\\\\n    super().__init__(id=id, block_type=BlockType.CLASS, parent_id=parent_id)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    self.class_attributes = ClassSpecificAttributes(\\\\\\\\\\\\\\\\n        class_name=class_name,\\\\\\\\\\\\\\\\n        decorators=None,\\\\\\\\\\\\\\\\n        bases=None,\\\\\\\\\\\\\\\\n        docstring=None,\\\\\\\\\\\\\\\\n        attributes=None,\\\\\\\\\\\\\\\\n        keywords=None,\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef set_decorators(\\\\\\\\\\\\\\\\n    self, decorators: list[DecoratorModel] | None\\\\\\\\\\\\\\\\n) -> \"ClassModelBuilder\":\\\\\\\\\\\\\\\\n    \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\\\\\\\\\\\\\\\\n    if decorators:\\\\\\\\\\\\\\\\n        self.class_attributes.decorators = decorators\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\n        self.class_attributes.decorators = None\\\\\\\\\\\\\\\\n    return self\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef set_bases(self, base_classes: list[str] | None) -> \"ClassModelBuilder\":\\\\\\\\\\\\\\\\n    \"\"\"Sets the list of base classes to the class model.\"\"\"\\\\\\\\\\\\\\\\n    self.class_attributes.bases = base_classes\\\\\\\\\\\\\\\\n    return self\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef set_docstring(self, docstring: str | None) -> \"ClassModelBuilder\":\\\\\\\\\\\\\\\\n    \"\"\"Sets the docstring of the class in the model.\"\"\"\\\\\\\\\\\\\\\\n    self.class_attributes.docstring = docstring\\\\\\\\\\\\\\\\n    return self\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n# TODO: Add attribute model\\\\\\\\\\\\\\\\ndef add_attribute(self, attribute) -> \"ClassModelBuilder\":\\\\\\\\\\\\\\\\n    \"\"\"Adds an attribute of the class in the model.\"\"\"\\\\\\\\\\\\\\\\n    if not self.class_attributes.attributes:\\\\\\\\\\\\\\\\n        self.class_attributes.attributes = []\\\\\\\\\\\\\\\\n    self.class_attributes.attributes.append(attribute)\\\\\\\\\\\\\\\\n    return self\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef set_keywords(\\\\\\\\\\\\\\\\n    self, keyword_list: list[ClassKeywordModel] | None\\\\\\\\\\\\\\\\n) -> \"ClassModelBuilder\":\\\\\\\\\\\\\\\\n    \"\"\"Sets the list of keywords to the class model.\"\"\"\\\\\\\\\\\\\\\\n    self.class_attributes.keywords = keyword_list\\\\\\\\\\\\\\\\n    return self\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef _get_class_specific_attributes(self) -> dict[str, Any]:\\\\\\\\\\\\\\\\n    \"\"\"Gets the class specific attributes.\"\"\"\\\\\\\\\\\\\\\\n    return self.class_attributes.model_dump()\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n@logging_decorator(message=\"Building ClassModel\")\\\\\\\\\\\\\\\\ndef build(self) -> ClassModel:\\\\\\\\\\\\\\\\n    \"\"\"Creates a ClassModel instance after building and setting the children models.\"\"\"\\\\\\\\\\\\\\\\n    self.build_and_set_children()\\\\\\\\\\\\\\\\n    return ClassModel(\\\\\\\\\\\\\\\\n        **self._get_common_attributes(),\\\\\\\\\\\\\\\\n        **self._get_class_specific_attributes(),\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\n\\\\\\\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\\\\\n\\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nChain of Density Steps:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\\\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\\\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\\\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\\\\\\\\\npartitioning logic.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\\\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\\\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s content.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nGuidelines:\\\\\\\\\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s functionality.\\\\\\\\\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s main functionality.\\\\\\\\\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n```Python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef logging_decorator(\\\\\\\\\\\\\\\\n    level=logging.DEBUG,\\\\\\\\\\\\\\\\n    *,\\\\\\\\\\\\\\\\n    message: str | None = None,\\\\\\\\\\\\\\\\n    syntax_highlighting: bool = False,\\\\\\\\\\\\\\\\n) -> Callable:\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\n    A decorator for adding enhanced logging to functions, with optional syntax highlighting.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    This decorator logs the call to the decorated function at the specified logging level. If syntax_highlighting is enabled and the first argument of the function is a libcst.CSTNode, the decorator logs the node\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s content with syntax highlighting.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\n        level (int): The logging level. Defaults to logging.DEBUG.\\\\\\\\\\\\\\\\n        message (str | None): Custom log message. If None, a default message is generated.\\\\\\\\\\\\\\\\n        syntax_highlighting (bool): If True, enables syntax highlighting for libcst.CSTNode arguments.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\n        Callable: The decorated function with enhanced logging capability.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    Example:\\\\\\\\\\\\\\\\n        >>> @logging_decorator(level=logging.INFO, message=\"Function start\", syntax_highlighting=True)\\\\\\\\\\\\\\\\n        >>> def sample_function(arg1):\\\\\\\\\\\\\\\\n        >>>     pass\\\\\\\\\\\\\\\\n        # This decorates \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'sample_function\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' with enhanced logging at INFO level.\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    def decorator(func):\\\\\\\\\\\\\\\\n        @wraps(func)\\\\\\\\\\\\\\\\n        def wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\n            log_message: str = (\\\\\\\\\\\\\\\\n                message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\n            )\\\\\\\\\\\\\\\\n            frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\n            caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\n            code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\n            logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n            _handle_logging(\\\\\\\\\\\\\\\\n                logger,\\\\\\\\\\\\\\\\n                caller_info,\\\\\\\\\\\\\\\\n                level,\\\\\\\\\\\\\\\\n                log_message,\\\\\\\\\\\\\\\\n                syntax_highlighting,\\\\\\\\\\\\\\\\n                code_content,\\\\\\\\\\\\\\\\n            )\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n            return func(*args, **kwargs)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        return wrapper\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    return decorator\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nSummary:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        [{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nChain of Density Steps:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\npartitioning logic.\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nGuidelines:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s functionality.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s main functionality.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```Python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef decorator(func):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    @wraps(func)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    def wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        log_message: str = (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        _handle_logging(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            logger,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            caller_info,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            level,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            log_message,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            syntax_highlighting,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            code_content,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return func(*args, **kwargs)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return wrapper\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSummary:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        [{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@wraps(func)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    log_message: str = (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    _handle_logging(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logger,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        caller_info,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        level,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        log_message,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        syntax_highlighting,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        code_content,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return func(*args, **kwargs)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nclass ClassSpecificAttributes(BaseModel):\\\\\\\\\\\\\\\\n    \"\"\"Class specific attributes.\"\"\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    class_name: str = Field(min_length=1)\\\\\\\\\\\\\\\\n    decorators: list[DecoratorModel] | None = None\\\\\\\\\\\\\\\\n    bases: list[str] | None = None\\\\\\\\\\\\\\\\n    docstring: str | None = None\\\\\\\\\\\\\\\\n    attributes: list[dict] | None = None\\\\\\\\\\\\\\\\n    keywords: list[ClassKeywordModel] | None = None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nclass ClassSpecificAttributes(BaseModel):\\\\\\\\\\\\\\\\n    \"\"\"Class specific attributes.\"\"\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    class_name: str = Field(min_length=1)\\\\\\\\\\\\\\\\n    decorators: list[DecoratorModel] | None = None\\\\\\\\\\\\\\\\n    bases: list[str] | None = None\\\\\\\\\\\\\\\\n    docstring: str | None = None\\\\\\\\\\\\\\\\n    attributes: list[dict] | None = None\\\\\\\\\\\\\\\\n    keywords: list[ClassKeywordModel] | None = None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nChain of Density Steps:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\\\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\\\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\\\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\\\\\\\\\npartitioning logic.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\\\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\\\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s content.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nGuidelines:\\\\\\\\\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s functionality.\\\\\\\\\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s main functionality.\\\\\\\\\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n```Python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nclass BlockType(Enum):\\\\\\\\\\\\\\\\n    \"\"\"Enum of code block types.\"\"\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    STANDALONE_CODE_BLOCK = \"STANDALONE_BLOCK\"\\\\\\\\\\\\\\\\n    IMPORT_BLOCK = \"IMPORT_BLOCK\"\\\\\\\\\\\\\\\\n    CLASS = \"CLASS\"\\\\\\\\\\\\\\\\n    FUNCTION = \"FUNCTION\"\\\\\\\\\\\\\\\\n    MODULE = \"MODULE\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    def __str__(self) -> str:\\\\\\\\\\\\\\\\n        return self.value\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nSummary:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        [{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef __str__(self) -> str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return self.value\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\n\\\\\\\\ndef extract_code_content(\\\\\\\\n    node: libcst.CSTNode,\\\\\\\\n) -> str:\\\\\\\\n    \"\"\"\\\\\\\\n    Extracts the code content from a given CST node.\\\\\\\\n\\\\\\\\n    This function converts a CST node to its string representation, maintaining the original code format.\\\\\\\\n\\\\\\\\n    Args:\\\\\\\\n        node (libcst.CSTNode): The CST node to extract code from.\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n        str: The string representation of the code for the given CST node.\\\\\\\\n\\\\\\\\n    Example:\\\\\\\\n        >>> extract_code_content(some_cst_node)\\\\\\\\n        # Returns the code content as a string.\\\\\\\\n    \"\"\"\\\\\\\\n\\\\\\\\n    return libcst.Module([]).code_for_node(node)\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\n\\\\\\\\ndef extract_code_content(\\\\\\\\n    node: libcst.CSTNode,\\\\\\\\n) -> str:\\\\\\\\n    \"\"\"\\\\\\\\n    Extracts the code content from a given CST node.\\\\\\\\n\\\\\\\\n    This function converts a CST node to its string representation, maintaining the original code format.\\\\\\\\n\\\\\\\\n    Args:\\\\\\\\n        node (libcst.CSTNode): The CST node to extract code from.\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n        str: The string representation of the code for the given CST node.\\\\\\\\n\\\\\\\\n    Example:\\\\\\\\n        >>> extract_code_content(some_cst_node)\\\\\\\\n        # Returns the code content as a string.\\\\\\\\n    \"\"\"\\\\\\\\n\\\\\\\\n    return libcst.Module([]).code_for_node(node)\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\n\\\\\\\\n@dataclass\\\\\\\\nclass PositionData:\\\\\\\\n    \"\"\"Positional data for a node in the syntax tree.\"\"\"\\\\\\\\n\\\\\\\\n    start: int\\\\\\\\n    end: int\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\n\\\\ndef _extract_bases(bases: Sequence[libcst.Arg]) -> list[str] | None:\\\\n    \"\"\"\\\\n    Extracts the base classes from a sequence of libcst.Arg representing class bases.\\\\n\\\\n    Args:\\\\n        bases (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class base classes.\\\\n\\\\n    Returns:\\\\n        list[str] | None: A list of base class names, or None if there are no bases.\\\\n\\\\n    Example:\\\\n        >>> class_bases = _extract_bases(class_node.bases)\\\\n        # Returns a list of base class names from the class definition.\\\\n    \"\"\"\\\\n\\\\n    bases_list: list[str] = []\\\\n    for base in bases:\\\\n        if (\\\\n            isinstance(base, libcst.Arg)\\\\n            and isinstance(base.value, libcst.Name)\\\\n            and base.value.value\\\\n        ):\\\\n            bases_list.append(base.value.value)\\\\n    return bases_list if bases_list else None\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\n\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\n\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\npartitioning logic.\"\\\\n\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\n\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\'s content.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\n\\\\nBelow the code are summaries, `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the code block\\\\\\'s that the `CODE` depends on. Use these summaries to \\\\nhelp you write your summary.\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _extract_keywords(\\\\n    keywords: Sequence[libcst.Arg],\\\\n) -> list[ClassKeywordModel] | None:\\\\n    \"\"\"\\\\n    Extracts class keywords (like metaclass) from a sequence of libcst.Arg representing class keywords.\\\\n\\\\n    Args:\\\\n        keywords (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class keywords.\\\\n\\\\n    Returns:\\\\n        list[ClassKeywordModel] | None: A list of ClassKeywordModel objects representing each keyword, or None if there are no keywords.\\\\n\\\\n    Example:\\\\n        >>> class_keywords = _extract_keywords(class_node.keywords)\\\\n        # Returns a list of ClassKeywordModel objects for each keyword in the class definition.\\\\n    \"\"\"\\\\n\\\\n    keywords_list: list[ClassKeywordModel] = []\\\\n\\\\n    for keyword in keywords:\\\\n        if keyword.keyword is not None:\\\\n            keyword_name: str = keyword.keyword.value\\\\n            args: str | None = (\\\\n                extract_stripped_code_content(keyword.value) if keyword.value else None\\\\n            )\\\\n            content: str = extract_stripped_code_content(keyword)\\\\n\\\\n            keyword_model = ClassKeywordModel(\\\\n                content=content, keyword_name=keyword_name, args=args\\\\n            )\\\\n            keywords_list.append(keyword_model)\\\\n\\\\n    return keywords_list if keywords_list else None\\\\n\\\\n```\\\\n\\\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\n\\\\\\\\ndef extract_code_content(\\\\\\\\n    node: libcst.CSTNode,\\\\\\\\n) -> str:\\\\\\\\n    \"\"\"\\\\\\\\n    Extracts the code content from a given CST node.\\\\\\\\n\\\\\\\\n    This function converts a CST node to its string representation, maintaining the original code format.\\\\\\\\n\\\\\\\\n    Args:\\\\\\\\n        node (libcst.CSTNode): The CST node to extract code from.\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n        str: The string representation of the code for the given CST node.\\\\\\\\n\\\\\\\\n    Example:\\\\\\\\n        >>> extract_code_content(some_cst_node)\\\\\\\\n        # Returns the code content as a string.\\\\\\\\n    \"\"\"\\\\\\\\n\\\\\\\\n    return libcst.Module([]).code_for_node(node)\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "function_name": "process_class_def",
            "docstring": "Processes a libcst.ClassDef node to build a class model.\n\nExtracts various components of a class definition such as its docstring, code content, base classes, decorators, and keywords, and updates the provided ClassModelBuilder with these details.\n\nArgs:\n    node (libcst.ClassDef): The class definition node from the CST.\n    position_data (PositionData): Positional data for the class in the source code.\n    builder (ClassModelBuilder): The builder used to construct the class model.\n\nExample:\n    >>> class_builder = ClassModelBuilder(id=\"class1\", ...)\n    >>> process_class_def(class_node, position_data, class_builder)\n    # Processes the class definition and updates the class builder.",
            "decorators": null,
            "parameters": null,
            "returns": "None",
            "is_method": false,
            "is_async": false,
            "id": ".:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-process_class_def",
            "parent_id": ".:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 14,
            "end_line_num": 50,
            "code_content": "\n\ndef process_class_def(\n    node: libcst.ClassDef,\n    position_data: PositionData,\n    builder: ClassModelBuilder,\n) -> None:\n    \"\"\"\n    Processes a libcst.ClassDef node to build a class model.\n\n    Extracts various components of a class definition such as its docstring, code content, base classes, decorators, and keywords, and updates the provided ClassModelBuilder with these details.\n\n    Args:\n        node (libcst.ClassDef): The class definition node from the CST.\n        position_data (PositionData): Positional data for the class in the source code.\n        builder (ClassModelBuilder): The builder used to construct the class model.\n\n    Example:\n        >>> class_builder = ClassModelBuilder(id=\"class1\", ...)\n        >>> process_class_def(class_node, position_data, class_builder)\n        # Processes the class definition and updates the class builder.\n    \"\"\"\n\n    docstring: str | None = node.get_docstring()\n    code_content: str = extract_code_content(node)\n    bases: list[str] | None = _extract_bases(node.bases)\n    keywords: list[ClassKeywordModel] | None = _extract_keywords(node.keywords)\n    decorators: list[DecoratorModel] | None = extract_decorators(node.decorators)\n\n    (\n        builder.set_docstring(docstring)\n        .set_code_content(code_content)\n        .set_start_line_num(position_data.start)\n        .set_end_line_num(position_data.end)\n    )\n    builder.set_bases(bases).set_decorators(decorators).set_keywords(keywords)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-_extract_bases"
                },
                {
                    "code_block_id": ".:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-_extract_keywords"
                },
                {
                    "import_names": [
                        {
                            "name": "ClassKeywordModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ClassKeywordModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ClassModelBuilder",
                            "as_name": null,
                            "local_block_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                        }
                    ],
                    "imported_from": "model_builders.class_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "extract_code_content",
                            "as_name": null,
                            "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_code_content"
                        },
                        {
                            "name": "extract_stripped_code_content",
                            "as_name": null,
                            "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_stripped_code_content"
                        },
                        {
                            "name": "extract_decorators",
                            "as_name": null,
                            "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_decorators"
                        }
                    ],
                    "imported_from": "visitors.node_processing.common_functions",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "extract_code_content",
                            "as_name": null,
                            "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_code_content"
                        },
                        {
                            "name": "extract_stripped_code_content",
                            "as_name": null,
                            "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_stripped_code_content"
                        },
                        {
                            "name": "extract_decorators",
                            "as_name": null,
                            "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_decorators"
                        }
                    ],
                    "imported_from": "visitors.node_processing.common_functions",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "PositionData",
                            "as_name": null,
                            "local_block_id": ".:python_parser:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData"
                        }
                    ],
                    "imported_from": "utilities.processing_context",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:utilities:processing_context.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the code block\\'s that the `CODE` depends on. Use these summaries to \\nhelp you write your summary.\\n\\nCODE:\\n```Python\\n\\n\\ndef process_class_def(\\n    node: libcst.ClassDef,\\n    position_data: PositionData,\\n    builder: ClassModelBuilder,\\n) -> None:\\n    \"\"\"\\n    Processes a libcst.ClassDef node to build a class model.\\n\\n    Extracts various components of a class definition such as its docstring, code content, base classes, decorators, and keywords, and updates the provided ClassModelBuilder with these details.\\n\\n    Args:\\n        node (libcst.ClassDef): The class definition node from the CST.\\n        position_data (PositionData): Positional data for the class in the source code.\\n        builder (ClassModelBuilder): The builder used to construct the class model.\\n\\n    Example:\\n        >>> class_builder = ClassModelBuilder(id=\"class1\", ...)\\n        >>> process_class_def(class_node, position_data, class_builder)\\n        # Processes the class definition and updates the class builder.\\n    \"\"\"\\n\\n    docstring: str | None = node.get_docstring()\\n    code_content: str = extract_code_content(node)\\n    bases: list[str] | None = _extract_bases(node.bases)\\n    keywords: list[ClassKeywordModel] | None = _extract_keywords(node.keywords)\\n    decorators: list[DecoratorModel] | None = extract_decorators(node.decorators)\\n\\n    (\\n        builder.set_docstring(docstring)\\n        .set_code_content(code_content)\\n        .set_start_line_num(position_data.start)\\n        .set_end_line_num(position_data.end)\\n    )\\n    builder.set_bases(bases).set_decorators(decorators).set_keywords(keywords)\\n\\n```\\n\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\n\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\n\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\npartitioning logic.\"\\\\n\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\n\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\'s content.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\n\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES` and `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the children in the `CODE` and code blocks\\\\nthe `CODE` depends upon. Use these summaries to help you write your summary of the `CODE`.\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass ClassModelBuilder(BaseModelBuilder):\\\\n    \"\"\"\\\\n    A builder class for constructing a model of a Python class.\\\\n\\\\n    This class extends BaseModelBuilder and is specialized for building a model of a Python class, capturing details such as decorators, base classes, documentation strings, class attributes, and class-specific keywords.\\\\n\\\\n    Attributes:\\\\n        class_attributes (ClassSpecificAttributes): An instance containing attributes specific to a class, like name, decorators, bases, etc.\\\\n\\\\n    Args:\\\\n        id (str): The unique identifier for the class model.\\\\n        class_name (str): The name of the class.\\\\n        parent_id (str): The identifier of the parent model (e.g., module or class containing this class).\\\\n    \"\"\"\\\\n\\\\n    def __init__(self, id: str, class_name: str, parent_id: str) -> None:\\\\n        super().__init__(id=id, block_type=BlockType.CLASS, parent_id=parent_id)\\\\n\\\\n        self.class_attributes = ClassSpecificAttributes(\\\\n            class_name=class_name,\\\\n            decorators=None,\\\\n            bases=None,\\\\n            docstring=None,\\\\n            attributes=None,\\\\n            keywords=None,\\\\n        )\\\\n\\\\n    def set_decorators(\\\\n        self, decorators: list[DecoratorModel] | None\\\\n    ) -> \"ClassModelBuilder\":\\\\n        \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\\\\n        if decorators:\\\\n            self.class_attributes.decorators = decorators\\\\n        else:\\\\n            self.class_attributes.decorators = None\\\\n        return self\\\\n\\\\n    def set_bases(self, base_classes: list[str] | None) -> \"ClassModelBuilder\":\\\\n        \"\"\"Sets the list of base classes to the class model.\"\"\"\\\\n        self.class_attributes.bases = base_classes\\\\n        return self\\\\n\\\\n    def set_docstring(self, docstring: str | None) -> \"ClassModelBuilder\":\\\\n        \"\"\"Sets the docstring of the class in the model.\"\"\"\\\\n        self.class_attributes.docstring = docstring\\\\n        return self\\\\n\\\\n    # TODO: Add attribute model\\\\n    def add_attribute(self, attribute) -> \"ClassModelBuilder\":\\\\n        \"\"\"Adds an attribute of the class in the model.\"\"\"\\\\n        if not self.class_attributes.attributes:\\\\n            self.class_attributes.attributes = []\\\\n        self.class_attributes.attributes.append(attribute)\\\\n        return self\\\\n\\\\n    def set_keywords(\\\\n        self, keyword_list: list[ClassKeywordModel] | None\\\\n    ) -> \"ClassModelBuilder\":\\\\n        \"\"\"Sets the list of keywords to the class model.\"\"\"\\\\n        self.class_attributes.keywords = keyword_list\\\\n        return self\\\\n\\\\n    def _get_class_specific_attributes(self) -> dict[str, Any]:\\\\n        \"\"\"Gets the class specific attributes.\"\"\"\\\\n        return self.class_attributes.model_dump()\\\\n\\\\n    @logging_decorator(message=\"Building ClassModel\")\\\\n    def build(self) -> ClassModel:\\\\n        \"\"\"Creates a ClassModel instance after building and setting the children models.\"\"\"\\\\n        self.build_and_set_children()\\\\n        return ClassModel(\\\\n            **self._get_common_attributes(),\\\\n            **self._get_class_specific_attributes(),\\\\n        )\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef __init__(self, id: str, class_name: str, parent_id: str) -> None:\\\\\\\\n    super().__init__(id=id, block_type=BlockType.CLASS, parent_id=parent_id)\\\\\\\\n\\\\\\\\n    self.class_attributes = ClassSpecificAttributes(\\\\\\\\n        class_name=class_name,\\\\\\\\n        decorators=None,\\\\\\\\n        bases=None,\\\\\\\\n        docstring=None,\\\\\\\\n        attributes=None,\\\\\\\\n        keywords=None,\\\\\\\\n    )\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef set_decorators(\\\\\\\\n    self, decorators: list[DecoratorModel] | None\\\\\\\\n) -> \"ClassModelBuilder\":\\\\\\\\n    \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\\\\\\\\n    if decorators:\\\\\\\\n        self.class_attributes.decorators = decorators\\\\\\\\n    else:\\\\\\\\n        self.class_attributes.decorators = None\\\\\\\\n    return self\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef set_bases(self, base_classes: list[str] | None) -> \"ClassModelBuilder\":\\\\\\\\n    \"\"\"Sets the list of base classes to the class model.\"\"\"\\\\\\\\n    self.class_attributes.bases = base_classes\\\\\\\\n    return self\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef set_docstring(self, docstring: str | None) -> \"ClassModelBuilder\":\\\\\\\\n    \"\"\"Sets the docstring of the class in the model.\"\"\"\\\\\\\\n    self.class_attributes.docstring = docstring\\\\\\\\n    return self\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\n# TODO: Add attribute model\\\\\\\\ndef add_attribute(self, attribute) -> \"ClassModelBuilder\":\\\\\\\\n    \"\"\"Adds an attribute of the class in the model.\"\"\"\\\\\\\\n    if not self.class_attributes.attributes:\\\\\\\\n        self.class_attributes.attributes = []\\\\\\\\n    self.class_attributes.attributes.append(attribute)\\\\\\\\n    return self\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef set_keywords(\\\\\\\\n    self, keyword_list: list[ClassKeywordModel] | None\\\\\\\\n) -> \"ClassModelBuilder\":\\\\\\\\n    \"\"\"Sets the list of keywords to the class model.\"\"\"\\\\\\\\n    self.class_attributes.keywords = keyword_list\\\\\\\\n    return self\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef _get_class_specific_attributes(self) -> dict[str, Any]:\\\\\\\\n    \"\"\"Gets the class specific attributes.\"\"\"\\\\\\\\n    return self.class_attributes.model_dump()\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\n@logging_decorator(message=\"Building ClassModel\")\\\\\\\\ndef build(self) -> ClassModel:\\\\\\\\n    \"\"\"Creates a ClassModel instance after building and setting the children models.\"\"\"\\\\\\\\n    self.build_and_set_children()\\\\\\\\n    return ClassModel(\\\\\\\\n        **self._get_common_attributes(),\\\\\\\\n        **self._get_class_specific_attributes(),\\\\\\\\n    )\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\n\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\n\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\npartitioning logic.\"\\\\\\\\n\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\n\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\'s content.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\n\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n\\\\\\\\ndef logging_decorator(\\\\\\\\n    level=logging.DEBUG,\\\\\\\\n    *,\\\\\\\\n    message: str | None = None,\\\\\\\\n    syntax_highlighting: bool = False,\\\\\\\\n) -> Callable:\\\\\\\\n    \"\"\"\\\\\\\\n    A decorator for adding enhanced logging to functions, with optional syntax highlighting.\\\\\\\\n\\\\\\\\n    This decorator logs the call to the decorated function at the specified logging level. If syntax_highlighting is enabled and the first argument of the function is a libcst.CSTNode, the decorator logs the node\\\\\\\\\\\\\\'s content with syntax highlighting.\\\\\\\\n\\\\\\\\n    Args:\\\\\\\\n        level (int): The logging level. Defaults to logging.DEBUG.\\\\\\\\n        message (str | None): Custom log message. If None, a default message is generated.\\\\\\\\n        syntax_highlighting (bool): If True, enables syntax highlighting for libcst.CSTNode arguments.\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n        Callable: The decorated function with enhanced logging capability.\\\\\\\\n\\\\\\\\n    Example:\\\\\\\\n        >>> @logging_decorator(level=logging.INFO, message=\"Function start\", syntax_highlighting=True)\\\\\\\\n        >>> def sample_function(arg1):\\\\\\\\n        >>>     pass\\\\\\\\n        # This decorates \\\\\\\\\\\\\\'sample_function\\\\\\\\\\\\\\' with enhanced logging at INFO level.\\\\\\\\n    \"\"\"\\\\\\\\n\\\\\\\\n    def decorator(func):\\\\\\\\n        @wraps(func)\\\\\\\\n        def wrapper(*args, **kwargs):\\\\\\\\n            log_message: str = (\\\\\\\\n                message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\n            )\\\\\\\\n            frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\n            caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\n            code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\n            logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\n\\\\\\\\n            _handle_logging(\\\\\\\\n                logger,\\\\\\\\n                caller_info,\\\\\\\\n                level,\\\\\\\\n                log_message,\\\\\\\\n                syntax_highlighting,\\\\\\\\n                code_content,\\\\\\\\n            )\\\\\\\\n\\\\\\\\n            return func(*args, **kwargs)\\\\\\\\n\\\\\\\\n        return wrapper\\\\\\\\n\\\\\\\\n    return decorator\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n\\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nChain of Density Steps:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\\\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\\\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\\\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\\\\\\\\\npartitioning logic.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\\\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\\\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s content.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nGuidelines:\\\\\\\\\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s functionality.\\\\\\\\\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s main functionality.\\\\\\\\\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n```Python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef decorator(func):\\\\\\\\\\\\\\\\n    @wraps(func)\\\\\\\\\\\\\\\\n    def wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\n        log_message: str = (\\\\\\\\\\\\\\\\n            message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\n        frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\n        caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\n        code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\n        logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        _handle_logging(\\\\\\\\\\\\\\\\n            logger,\\\\\\\\\\\\\\\\n            caller_info,\\\\\\\\\\\\\\\\n            level,\\\\\\\\\\\\\\\\n            log_message,\\\\\\\\\\\\\\\\n            syntax_highlighting,\\\\\\\\\\\\\\\\n            code_content,\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        return func(*args, **kwargs)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    return wrapper\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nSummary:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        [{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@wraps(func)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    log_message: str = (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    _handle_logging(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logger,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        caller_info,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        level,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        log_message,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        syntax_highlighting,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        code_content,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return func(*args, **kwargs)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\n\\\\\\\\nclass ClassSpecificAttributes(BaseModel):\\\\\\\\n    \"\"\"Class specific attributes.\"\"\"\\\\\\\\n\\\\\\\\n    class_name: str = Field(min_length=1)\\\\\\\\n    decorators: list[DecoratorModel] | None = None\\\\\\\\n    bases: list[str] | None = None\\\\\\\\n    docstring: str | None = None\\\\\\\\n    attributes: list[dict] | None = None\\\\\\\\n    keywords: list[ClassKeywordModel] | None = None\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\n\\\\\\\\nclass ClassSpecificAttributes(BaseModel):\\\\\\\\n    \"\"\"Class specific attributes.\"\"\"\\\\\\\\n\\\\\\\\n    class_name: str = Field(min_length=1)\\\\\\\\n    decorators: list[DecoratorModel] | None = None\\\\\\\\n    bases: list[str] | None = None\\\\\\\\n    docstring: str | None = None\\\\\\\\n    attributes: list[dict] | None = None\\\\\\\\n    keywords: list[ClassKeywordModel] | None = None\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\n\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\n\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\npartitioning logic.\"\\\\\\\\n\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\n\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\'s content.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\n\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n\\\\\\\\nclass BlockType(Enum):\\\\\\\\n    \"\"\"Enum of code block types.\"\"\"\\\\\\\\n\\\\\\\\n    STANDALONE_CODE_BLOCK = \"STANDALONE_BLOCK\"\\\\\\\\n    IMPORT_BLOCK = \"IMPORT_BLOCK\"\\\\\\\\n    CLASS = \"CLASS\"\\\\\\\\n    FUNCTION = \"FUNCTION\"\\\\\\\\n    MODULE = \"MODULE\"\\\\\\\\n\\\\\\\\n    def __str__(self) -> str:\\\\\\\\n        return self.value\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n\\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef __str__(self) -> str:\\\\\\\\\\\\\\\\n    return self.value\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\n\\\\ndef extract_code_content(\\\\n    node: libcst.CSTNode,\\\\n) -> str:\\\\n    \"\"\"\\\\n    Extracts the code content from a given CST node.\\\\n\\\\n    This function converts a CST node to its string representation, maintaining the original code format.\\\\n\\\\n    Args:\\\\n        node (libcst.CSTNode): The CST node to extract code from.\\\\n\\\\n    Returns:\\\\n        str: The string representation of the code for the given CST node.\\\\n\\\\n    Example:\\\\n        >>> extract_code_content(some_cst_node)\\\\n        # Returns the code content as a string.\\\\n    \"\"\"\\\\n\\\\n    return libcst.Module([]).code_for_node(node)\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\n\\\\ndef extract_code_content(\\\\n    node: libcst.CSTNode,\\\\n) -> str:\\\\n    \"\"\"\\\\n    Extracts the code content from a given CST node.\\\\n\\\\n    This function converts a CST node to its string representation, maintaining the original code format.\\\\n\\\\n    Args:\\\\n        node (libcst.CSTNode): The CST node to extract code from.\\\\n\\\\n    Returns:\\\\n        str: The string representation of the code for the given CST node.\\\\n\\\\n    Example:\\\\n        >>> extract_code_content(some_cst_node)\\\\n        # Returns the code content as a string.\\\\n    \"\"\"\\\\n\\\\n    return libcst.Module([]).code_for_node(node)\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\n\\\\n@dataclass\\\\nclass PositionData:\\\\n    \"\"\"Positional data for a node in the syntax tree.\"\"\"\\\\n\\\\n    start: int\\\\n    end: int\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_extract_bases",
            "docstring": "Extracts the base classes from a sequence of libcst.Arg representing class bases.\n\nArgs:\n    bases (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class base classes.\n\nReturns:\n    list[str] | None: A list of base class names, or None if there are no bases.\n\nExample:\n    >>> class_bases = _extract_bases(class_node.bases)\n    # Returns a list of base class names from the class definition.",
            "decorators": null,
            "parameters": null,
            "returns": "list[str] | None",
            "is_method": false,
            "is_async": false,
            "id": ".:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-_extract_bases",
            "parent_id": ".:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 50,
            "end_line_num": 76,
            "code_content": "\n\ndef _extract_bases(bases: Sequence[libcst.Arg]) -> list[str] | None:\n    \"\"\"\n    Extracts the base classes from a sequence of libcst.Arg representing class bases.\n\n    Args:\n        bases (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class base classes.\n\n    Returns:\n        list[str] | None: A list of base class names, or None if there are no bases.\n\n    Example:\n        >>> class_bases = _extract_bases(class_node.bases)\n        # Returns a list of base class names from the class definition.\n    \"\"\"\n\n    bases_list: list[str] = []\n    for base in bases:\n        if (\n            isinstance(base, libcst.Arg)\n            and isinstance(base.value, libcst.Name)\n            and base.value.value\n        ):\n            bases_list.append(base.value.value)\n    return bases_list if bases_list else None\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "Sequence",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\n\\ndef _extract_bases(bases: Sequence[libcst.Arg]) -> list[str] | None:\\n    \"\"\"\\n    Extracts the base classes from a sequence of libcst.Arg representing class bases.\\n\\n    Args:\\n        bases (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class base classes.\\n\\n    Returns:\\n        list[str] | None: A list of base class names, or None if there are no bases.\\n\\n    Example:\\n        >>> class_bases = _extract_bases(class_node.bases)\\n        # Returns a list of base class names from the class definition.\\n    \"\"\"\\n\\n    bases_list: list[str] = []\\n    for base in bases:\\n        if (\\n            isinstance(base, libcst.Arg)\\n            and isinstance(base.value, libcst.Name)\\n            and base.value.value\\n        ):\\n            bases_list.append(base.value.value)\\n    return bases_list if bases_list else None\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_extract_keywords",
            "docstring": "Extracts class keywords (like metaclass) from a sequence of libcst.Arg representing class keywords.\n\nArgs:\n    keywords (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class keywords.\n\nReturns:\n    list[ClassKeywordModel] | None: A list of ClassKeywordModel objects representing each keyword, or None if there are no keywords.\n\nExample:\n    >>> class_keywords = _extract_keywords(class_node.keywords)\n    # Returns a list of ClassKeywordModel objects for each keyword in the class definition.",
            "decorators": null,
            "parameters": null,
            "returns": "list[ClassKeywordModel] | None",
            "is_method": false,
            "is_async": false,
            "id": ".:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-_extract_keywords",
            "parent_id": ".:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 76,
            "end_line_num": 111,
            "code_content": "\n\ndef _extract_keywords(\n    keywords: Sequence[libcst.Arg],\n) -> list[ClassKeywordModel] | None:\n    \"\"\"\n    Extracts class keywords (like metaclass) from a sequence of libcst.Arg representing class keywords.\n\n    Args:\n        keywords (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class keywords.\n\n    Returns:\n        list[ClassKeywordModel] | None: A list of ClassKeywordModel objects representing each keyword, or None if there are no keywords.\n\n    Example:\n        >>> class_keywords = _extract_keywords(class_node.keywords)\n        # Returns a list of ClassKeywordModel objects for each keyword in the class definition.\n    \"\"\"\n\n    keywords_list: list[ClassKeywordModel] = []\n\n    for keyword in keywords:\n        if keyword.keyword is not None:\n            keyword_name: str = keyword.keyword.value\n            args: str | None = (\n                extract_stripped_code_content(keyword.value) if keyword.value else None\n            )\n            content: str = extract_stripped_code_content(keyword)\n\n            keyword_model = ClassKeywordModel(\n                content=content, keyword_name=keyword_name, args=args\n            )\n            keywords_list.append(keyword_model)\n\n    return keywords_list if keywords_list else None\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "ClassKeywordModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Sequence",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "extract_code_content",
                            "as_name": null,
                            "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_code_content"
                        },
                        {
                            "name": "extract_stripped_code_content",
                            "as_name": null,
                            "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_stripped_code_content"
                        },
                        {
                            "name": "extract_decorators",
                            "as_name": null,
                            "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_decorators"
                        }
                    ],
                    "imported_from": "visitors.node_processing.common_functions",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the code block\\'s that the `CODE` depends on. Use these summaries to \\nhelp you write your summary.\\n\\nCODE:\\n```Python\\n\\n\\ndef _extract_keywords(\\n    keywords: Sequence[libcst.Arg],\\n) -> list[ClassKeywordModel] | None:\\n    \"\"\"\\n    Extracts class keywords (like metaclass) from a sequence of libcst.Arg representing class keywords.\\n\\n    Args:\\n        keywords (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class keywords.\\n\\n    Returns:\\n        list[ClassKeywordModel] | None: A list of ClassKeywordModel objects representing each keyword, or None if there are no keywords.\\n\\n    Example:\\n        >>> class_keywords = _extract_keywords(class_node.keywords)\\n        # Returns a list of ClassKeywordModel objects for each keyword in the class definition.\\n    \"\"\"\\n\\n    keywords_list: list[ClassKeywordModel] = []\\n\\n    for keyword in keywords:\\n        if keyword.keyword is not None:\\n            keyword_name: str = keyword.keyword.value\\n            args: str | None = (\\n                extract_stripped_code_content(keyword.value) if keyword.value else None\\n            )\\n            content: str = extract_stripped_code_content(keyword)\\n\\n            keyword_model = ClassKeywordModel(\\n                content=content, keyword_name=keyword_name, args=args\\n            )\\n            keywords_list.append(keyword_model)\\n\\n    return keywords_list if keywords_list else None\\n\\n```\\n\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\n\\\\ndef extract_code_content(\\\\n    node: libcst.CSTNode,\\\\n) -> str:\\\\n    \"\"\"\\\\n    Extracts the code content from a given CST node.\\\\n\\\\n    This function converts a CST node to its string representation, maintaining the original code format.\\\\n\\\\n    Args:\\\\n        node (libcst.CSTNode): The CST node to extract code from.\\\\n\\\\n    Returns:\\\\n        str: The string representation of the code for the given CST node.\\\\n\\\\n    Example:\\\\n        >>> extract_code_content(some_cst_node)\\\\n        # Returns the code content as a string.\\\\n    \"\"\"\\\\n\\\\n    return libcst.Module([]).code_for_node(node)\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        }
    ]
}