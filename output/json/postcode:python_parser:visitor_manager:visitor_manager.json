{
    "file_path": "postcode/python_parser/visitor_manager/visitor_manager.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "dataclass",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "dataclasses",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Path",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "pathlib",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ModuleModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.module_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "logging_decorator",
                    "as_name": null,
                    "local_block_id": "postcode:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator"
                }
            ],
            "imported_from": "postcode.utilities.logger.decorators",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:utilities:logger:decorators.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "PythonParser",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:parsers:python_parser.py__*__MODULE__*__CLASS-PythonParser"
                }
            ],
            "imported_from": "postcode.python_parser.parsers.python_parser",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:parsers:python_parser.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ImportAndDependencyUpdater",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportAndDependencyUpdater"
                }
            ],
            "imported_from": "postcode.python_parser.visitor_manager.import_and_dependency_updater",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ModuleModel"
                }
            ],
            "imported_from": "postcode.python_parser.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "Summarizer",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:summarizer_protocol.py__*__MODULE__*__CLASS-Summarizer"
                }
            ],
            "imported_from": "postcode.ai_services.summarizer_protocol",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:summarizer_protocol.py__*__MODULE"
        }
    ],
    "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 175,
    "code_content": "from dataclasses import dataclass\nimport logging\nfrom pathlib import Path\n\nfrom postcode.python_parser.model_builders.module_model_builder import (\n    ModuleModelBuilder,\n)\nfrom postcode.utilities.logger.decorators import logging_decorator\n\nfrom postcode.python_parser.parsers.python_parser import PythonParser\nfrom postcode.python_parser.visitor_manager.import_and_dependency_updater import (\n    ImportAndDependencyUpdater,\n)\nfrom postcode.python_parser.models.models import ModuleModel\n\nfrom postcode.ai_services.summarizer_protocol import Summarizer\n\nEXCLUDED_DIRECTORIES: set[str] = {\".venv\", \"node_modules\", \"__pycache__\", \".git\"}\n\n\n@dataclass\nclass VisitorManagerProcessFilesReturn:\n    \"\"\"\n    Represents the return value of the VisitorManager.process_files() method.\n\n    Attributes:\n        models_tuple (tuple[ModuleModel, ...]): A tuple of ModuleModel objects representing the parsed modules.\n        directory_modules (dict[str, list[str]]): A dictionary mapping directory paths to lists of module names.\n            This is used to keep track of the modules present in each directory.\n    \"\"\"\n\n    models_tuple: tuple[ModuleModel, ...]\n    directory_modules: dict[str, list[str]]\n\n\nclass VisitorManager:\n    \"\"\"\n    Manages the visiting and processing of Python files in a given directory.\n\n    This class scans a specified directory, filters for Python files, parses them, and saves the parsed data in a structured JSON format. It also maintains a mapping of directories to the Python files they contain.\n\n    Attributes:\n        directory (str): The root directory to scan for Python files.\n        output_directory (str): The directory where output JSON files will be saved.\n        directory_modules (dict): A mapping of directories to their contained Python files.\n\n    Example:\n        >>> visitor_manager = VisitorManager(\"/path/to/python/code\", \"output\")\n        >>> visitor_manager.process_files()\n        # This will process all Python files in /path/to/python/code and save their parsed data in the output directory.\n    \"\"\"\n\n    @logging_decorator(message=\"Initializing VisitorManager\")\n    def __init__(\n        self, summarizer: Summarizer, directory: str, output_directory: str = \"output\"\n    ) -> None:\n        self.directory: str = directory\n        self.output_directory: str = output_directory\n        self.directory_modules: dict[str, list[str]] = {}\n\n        self.summarizer: Summarizer = summarizer\n\n    def process_files(self) -> VisitorManagerProcessFilesReturn:\n        \"\"\"\n        Process the files in the directory and return the module models.\n\n        This function iterates through all the Python files in the directory, processes each file,\n        updates the imports, and builds module models for each file. It returns a tuple of module models\n        and a dictionary of directory modules.\n\n        Returns:\n            A named tuple (VisitorManagerProcessFilesReturn) containing:\n            - models_tuple (tuple[ModuleModel, ...]): A tuple of module models.\n            - directory_modules (dict[str, ModuleModel]): A dictionary of directory modules.\n\n        Examples:\n            >>> visitor_manager = VisitorManager()\n            >>> result = visitor_manager.process_files()\n            >>> print(result.models_tuple)\n            (ModuleModel(file_path='/path/to/file1.py'), ModuleModel(file_path='/path/to/file2.py'))\n            >>> print(result.directory_modules)\n            {'/path/to/directory1': ModuleModel(file_path='/path/to/directory1/__init__.py')}\n        \"\"\"\n\n        logging.info(\"Processing files\")\n        python_files: list[str] = self._get_python_files()\n        model_builder_list: list[ModuleModelBuilder] = []\n        for file_path in python_files:\n            if model_builder := self._process_file(file_path):\n                model_builder_list.append((model_builder))\n\n        logging.info(\"File processing completed\")\n        logging.info(\"Updating imports\")\n\n        # TODO: Test making this a tuple of tuples, see if that solves the double update import issue\n        model_builder_tuple: tuple[ModuleModelBuilder, ...] = tuple(model_builder_list)\n\n        import_and_dependency_updater = ImportAndDependencyUpdater(model_builder_tuple)\n        import_and_dependency_updater.update_imports()\n        logging.info(\"Updated imports\")\n\n        module_models_list: list[ModuleModel] = []\n        for module_model_builder in model_builder_tuple:\n            module_model: ModuleModel = self._build_module_model(module_model_builder)\n            module_models_list.append(module_model)\n\n        module_models_tuple: tuple[ModuleModel, ...] = tuple(module_models_list)\n\n        return VisitorManagerProcessFilesReturn(\n            models_tuple=module_models_tuple, directory_modules=self.directory_modules\n        )\n\n    def _walk_directories(self) -> list[str]:\n        \"\"\"Walks the specified directory and returns a list of all files.\"\"\"\n\n        all_files: list[str] = []\n        for file_path in Path(self.directory).rglob(\"*\"):\n            if not any(\n                excluded in file_path.parts for excluded in EXCLUDED_DIRECTORIES\n            ):\n                all_files.append(str(file_path))\n        return all_files\n\n    def _filter_python_files(self, files: list[str]) -> list[str]:\n        \"\"\"Filters a list of files to only include Python files.\"\"\"\n\n        return [file for file in files if file.endswith(\".py\")]\n\n    @logging_decorator(message=\"Getting Python files\")\n    def _get_python_files(self) -> list[str]:\n        \"\"\"Gets all Python files in the specified directory.\"\"\"\n\n        all_files: list[str] = self._walk_directories()\n        return self._filter_python_files(all_files)\n\n    def _process_file(self, file_path: str) -> ModuleModelBuilder | None:\n        \"\"\"Processes a single Python file.\"\"\"\n\n        file_path_obj = Path(file_path)\n        root = str(file_path_obj.parent)\n        self.directory_modules.setdefault(root, []).append(file_path_obj.name)\n        return self._parse_file(file_path)\n\n    @logging_decorator(message=\"Processing file\")\n    def _parse_file(self, file_path: str) -> ModuleModelBuilder | None:\n        \"\"\"Parses a Python file and saves the parsed data as JSON.\"\"\"\n\n        parser = PythonParser(file_path)\n        code: str = parser.open_file()\n        module_model_builder: ModuleModelBuilder | None = parser.parse(code)\n\n        return module_model_builder\n\n    def _build_module_model(\n        self, visitor_stack: ModuleModelBuilder | None\n    ) -> ModuleModel:\n        \"\"\"\n        Builds a module model from the provided module builder.\n\n        Args:\n            visitor_stack (ModuleModelBuilder): The module builder to build the model from.\n\n        Returns:\n            ModuleModel: A structured module model.\n\n        Example:\n            >>> module_model = python_parser.build_module_model(visitor_stack)\n            # Builds a module model from the provided module builder.\n        \"\"\"\n\n        if not isinstance(visitor_stack, ModuleModelBuilder):\n            raise TypeError(\"Expected the first builder to be a ModuleModelBuilder\")\n\n        return visitor_stack.build()\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nfrom dataclasses import dataclass\\nimport logging\\nfrom pathlib import Path\\n\\nfrom postcode.python_parser.model_builders.module_model_builder import (\\n    ModuleModelBuilder,\\n)\\nfrom postcode.utilities.logger.decorators import logging_decorator\\n\\nfrom postcode.python_parser.parsers.python_parser import PythonParser\\nfrom postcode.python_parser.visitor_manager.import_and_dependency_updater import (\\n    ImportAndDependencyUpdater,\\n)\\nfrom postcode.python_parser.models.models import ModuleModel\\n\\nfrom postcode.ai_services.summarizer_protocol import Summarizer\\n\\nEXCLUDED_DIRECTORIES: set[str] = {\".venv\", \"node_modules\", \"__pycache__\", \".git\"}\\n\\n\\n@dataclass\\nclass VisitorManagerProcessFilesReturn:\\n    \"\"\"\\n    Represents the return value of the VisitorManager.process_files() method.\\n\\n    Attributes:\\n        models_tuple (tuple[ModuleModel, ...]): A tuple of ModuleModel objects representing the parsed modules.\\n        directory_modules (dict[str, list[str]]): A dictionary mapping directory paths to lists of module names.\\n            This is used to keep track of the modules present in each directory.\\n    \"\"\"\\n\\n    models_tuple: tuple[ModuleModel, ...]\\n    directory_modules: dict[str, list[str]]\\n\\n\\nclass VisitorManager:\\n    \"\"\"\\n    Manages the visiting and processing of Python files in a given directory.\\n\\n    This class scans a specified directory, filters for Python files, parses them, and saves the parsed data in a structured JSON format. It also maintains a mapping of directories to the Python files they contain.\\n\\n    Attributes:\\n        directory (str): The root directory to scan for Python files.\\n        output_directory (str): The directory where output JSON files will be saved.\\n        directory_modules (dict): A mapping of directories to their contained Python files.\\n\\n    Example:\\n        >>> visitor_manager = VisitorManager(\"/path/to/python/code\", \"output\")\\n        >>> visitor_manager.process_files()\\n        # This will process all Python files in /path/to/python/code and save their parsed data in the output directory.\\n    \"\"\"\\n\\n    @logging_decorator(message=\"Initializing VisitorManager\")\\n    def __init__(\\n        self, summarizer: Summarizer, directory: str, output_directory: str = \"output\"\\n    ) -> None:\\n        self.directory: str = directory\\n        self.output_directory: str = output_directory\\n        self.directory_modules: dict[str, list[str]] = {}\\n\\n        self.summarizer: Summarizer = summarizer\\n\\n    def process_files(self) -> VisitorManagerProcessFilesReturn:\\n        \"\"\"\\n        Process the files in the directory and return the module models.\\n\\n        This function iterates through all the Python files in the directory, processes each file,\\n        updates the imports, and builds module models for each file. It returns a tuple of module models\\n        and a dictionary of directory modules.\\n\\n        Returns:\\n            A named tuple (VisitorManagerProcessFilesReturn) containing:\\n            - models_tuple (tuple[ModuleModel, ...]): A tuple of module models.\\n            - directory_modules (dict[str, ModuleModel]): A dictionary of directory modules.\\n\\n        Examples:\\n            >>> visitor_manager = VisitorManager()\\n            >>> result = visitor_manager.process_files()\\n            >>> print(result.models_tuple)\\n            (ModuleModel(file_path=\\'/path/to/file1.py\\'), ModuleModel(file_path=\\'/path/to/file2.py\\'))\\n            >>> print(result.directory_modules)\\n            {\\'/path/to/directory1\\': ModuleModel(file_path=\\'/path/to/directory1/__init__.py\\')}\\n        \"\"\"\\n\\n        logging.info(\"Processing files\")\\n        python_files: list[str] = self._get_python_files()\\n        model_builder_list: list[ModuleModelBuilder] = []\\n        for file_path in python_files:\\n            if model_builder := self._process_file(file_path):\\n                model_builder_list.append((model_builder))\\n\\n        logging.info(\"File processing completed\")\\n        logging.info(\"Updating imports\")\\n\\n        # TODO: Test making this a tuple of tuples, see if that solves the double update import issue\\n        model_builder_tuple: tuple[ModuleModelBuilder, ...] = tuple(model_builder_list)\\n\\n        import_and_dependency_updater = ImportAndDependencyUpdater(model_builder_tuple)\\n        import_and_dependency_updater.update_imports()\\n        logging.info(\"Updated imports\")\\n\\n        module_models_list: list[ModuleModel] = []\\n        for module_model_builder in model_builder_tuple:\\n            module_model: ModuleModel = self._build_module_model(module_model_builder)\\n            module_models_list.append(module_model)\\n\\n        module_models_tuple: tuple[ModuleModel, ...] = tuple(module_models_list)\\n\\n        return VisitorManagerProcessFilesReturn(\\n            models_tuple=module_models_tuple, directory_modules=self.directory_modules\\n        )\\n\\n    def _walk_directories(self) -> list[str]:\\n        \"\"\"Walks the specified directory and returns a list of all files.\"\"\"\\n\\n        all_files: list[str] = []\\n        for file_path in Path(self.directory).rglob(\"*\"):\\n            if not any(\\n                excluded in file_path.parts for excluded in EXCLUDED_DIRECTORIES\\n            ):\\n                all_files.append(str(file_path))\\n        return all_files\\n\\n    def _filter_python_files(self, files: list[str]) -> list[str]:\\n        \"\"\"Filters a list of files to only include Python files.\"\"\"\\n\\n        return [file for file in files if file.endswith(\".py\")]\\n\\n    @logging_decorator(message=\"Getting Python files\")\\n    def _get_python_files(self) -> list[str]:\\n        \"\"\"Gets all Python files in the specified directory.\"\"\"\\n\\n        all_files: list[str] = self._walk_directories()\\n        return self._filter_python_files(all_files)\\n\\n    def _process_file(self, file_path: str) -> ModuleModelBuilder | None:\\n        \"\"\"Processes a single Python file.\"\"\"\\n\\n        file_path_obj = Path(file_path)\\n        root = str(file_path_obj.parent)\\n        self.directory_modules.setdefault(root, []).append(file_path_obj.name)\\n        return self._parse_file(file_path)\\n\\n    @logging_decorator(message=\"Processing file\")\\n    def _parse_file(self, file_path: str) -> ModuleModelBuilder | None:\\n        \"\"\"Parses a Python file and saves the parsed data as JSON.\"\"\"\\n\\n        parser = PythonParser(file_path)\\n        code: str = parser.open_file()\\n        module_model_builder: ModuleModelBuilder | None = parser.parse(code)\\n\\n        return module_model_builder\\n\\n    def _build_module_model(\\n        self, visitor_stack: ModuleModelBuilder | None\\n    ) -> ModuleModel:\\n        \"\"\"\\n        Builds a module model from the provided module builder.\\n\\n        Args:\\n            visitor_stack (ModuleModelBuilder): The module builder to build the model from.\\n\\n        Returns:\\n            ModuleModel: A structured module model.\\n\\n        Example:\\n            >>> module_model = python_parser.build_module_model(visitor_stack)\\n            # Builds a module model from the provided module builder.\\n        \"\"\"\\n\\n        if not isinstance(visitor_stack, ModuleModelBuilder):\\n            raise TypeError(\"Expected the first builder to be a ModuleModelBuilder\")\\n\\n        return visitor_stack.build()\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\nEXCLUDED_DIRECTORIES: set[str] = {\".venv\", \"node_modules\", \"__pycache__\", \".git\"}\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\n@dataclass\\\\nclass VisitorManagerProcessFilesReturn:\\\\n    \"\"\"\\\\n    Represents the return value of the VisitorManager.process_files() method.\\\\n\\\\n    Attributes:\\\\n        models_tuple (tuple[ModuleModel, ...]): A tuple of ModuleModel objects representing the parsed modules.\\\\n        directory_modules (dict[str, list[str]]): A dictionary mapping directory paths to lists of module names.\\\\n            This is used to keep track of the modules present in each directory.\\\\n    \"\"\"\\\\n\\\\n    models_tuple: tuple[ModuleModel, ...]\\\\n    directory_modules: dict[str, list[str]]\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom dataclasses import dataclass\\\\nfrom postcode.python_parser.models.models import ModuleModel\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass VisitorManager:\\\\n    \"\"\"\\\\n    Manages the visiting and processing of Python files in a given directory.\\\\n\\\\n    This class scans a specified directory, filters for Python files, parses them, and saves the parsed data in a structured JSON format. It also maintains a mapping of directories to the Python files they contain.\\\\n\\\\n    Attributes:\\\\n        directory (str): The root directory to scan for Python files.\\\\n        output_directory (str): The directory where output JSON files will be saved.\\\\n        directory_modules (dict): A mapping of directories to their contained Python files.\\\\n\\\\n    Example:\\\\n        >>> visitor_manager = VisitorManager(\"/path/to/python/code\", \"output\")\\\\n        >>> visitor_manager.process_files()\\\\n        # This will process all Python files in /path/to/python/code and save their parsed data in the output directory.\\\\n    \"\"\"\\\\n\\\\n    @logging_decorator(message=\"Initializing VisitorManager\")\\\\n    def __init__(\\\\n        self, summarizer: Summarizer, directory: str, output_directory: str = \"output\"\\\\n    ) -> None:\\\\n        self.directory: str = directory\\\\n        self.output_directory: str = output_directory\\\\n        self.directory_modules: dict[str, list[str]] = {}\\\\n\\\\n        self.summarizer: Summarizer = summarizer\\\\n\\\\n    def process_files(self) -> VisitorManagerProcessFilesReturn:\\\\n        \"\"\"\\\\n        Process the files in the directory and return the module models.\\\\n\\\\n        This function iterates through all the Python files in the directory, processes each file,\\\\n        updates the imports, and builds module models for each file. It returns a tuple of module models\\\\n        and a dictionary of directory modules.\\\\n\\\\n        Returns:\\\\n            A named tuple (VisitorManagerProcessFilesReturn) containing:\\\\n            - models_tuple (tuple[ModuleModel, ...]): A tuple of module models.\\\\n            - directory_modules (dict[str, ModuleModel]): A dictionary of directory modules.\\\\n\\\\n        Examples:\\\\n            >>> visitor_manager = VisitorManager()\\\\n            >>> result = visitor_manager.process_files()\\\\n            >>> print(result.models_tuple)\\\\n            (ModuleModel(file_path=\\\\\\'/path/to/file1.py\\\\\\'), ModuleModel(file_path=\\\\\\'/path/to/file2.py\\\\\\'))\\\\n            >>> print(result.directory_modules)\\\\n            {\\\\\\'/path/to/directory1\\\\\\': ModuleModel(file_path=\\\\\\'/path/to/directory1/__init__.py\\\\\\')}\\\\n        \"\"\"\\\\n\\\\n        logging.info(\"Processing files\")\\\\n        python_files: list[str] = self._get_python_files()\\\\n        model_builder_list: list[ModuleModelBuilder] = []\\\\n        for file_path in python_files:\\\\n            if model_builder := self._process_file(file_path):\\\\n                model_builder_list.append((model_builder))\\\\n\\\\n        logging.info(\"File processing completed\")\\\\n        logging.info(\"Updating imports\")\\\\n\\\\n        # TODO: Test making this a tuple of tuples, see if that solves the double update import issue\\\\n        model_builder_tuple: tuple[ModuleModelBuilder, ...] = tuple(model_builder_list)\\\\n\\\\n        import_and_dependency_updater = ImportAndDependencyUpdater(model_builder_tuple)\\\\n        import_and_dependency_updater.update_imports()\\\\n        logging.info(\"Updated imports\")\\\\n\\\\n        module_models_list: list[ModuleModel] = []\\\\n        for module_model_builder in model_builder_tuple:\\\\n            module_model: ModuleModel = self._build_module_model(module_model_builder)\\\\n            module_models_list.append(module_model)\\\\n\\\\n        module_models_tuple: tuple[ModuleModel, ...] = tuple(module_models_list)\\\\n\\\\n        return VisitorManagerProcessFilesReturn(\\\\n            models_tuple=module_models_tuple, directory_modules=self.directory_modules\\\\n        )\\\\n\\\\n    def _walk_directories(self) -> list[str]:\\\\n        \"\"\"Walks the specified directory and returns a list of all files.\"\"\"\\\\n\\\\n        all_files: list[str] = []\\\\n        for file_path in Path(self.directory).rglob(\"*\"):\\\\n            if not any(\\\\n                excluded in file_path.parts for excluded in EXCLUDED_DIRECTORIES\\\\n            ):\\\\n                all_files.append(str(file_path))\\\\n        return all_files\\\\n\\\\n    def _filter_python_files(self, files: list[str]) -> list[str]:\\\\n        \"\"\"Filters a list of files to only include Python files.\"\"\"\\\\n\\\\n        return [file for file in files if file.endswith(\".py\")]\\\\n\\\\n    @logging_decorator(message=\"Getting Python files\")\\\\n    def _get_python_files(self) -> list[str]:\\\\n        \"\"\"Gets all Python files in the specified directory.\"\"\"\\\\n\\\\n        all_files: list[str] = self._walk_directories()\\\\n        return self._filter_python_files(all_files)\\\\n\\\\n    def _process_file(self, file_path: str) -> ModuleModelBuilder | None:\\\\n        \"\"\"Processes a single Python file.\"\"\"\\\\n\\\\n        file_path_obj = Path(file_path)\\\\n        root = str(file_path_obj.parent)\\\\n        self.directory_modules.setdefault(root, []).append(file_path_obj.name)\\\\n        return self._parse_file(file_path)\\\\n\\\\n    @logging_decorator(message=\"Processing file\")\\\\n    def _parse_file(self, file_path: str) -> ModuleModelBuilder | None:\\\\n        \"\"\"Parses a Python file and saves the parsed data as JSON.\"\"\"\\\\n\\\\n        parser = PythonParser(file_path)\\\\n        code: str = parser.open_file()\\\\n        module_model_builder: ModuleModelBuilder | None = parser.parse(code)\\\\n\\\\n        return module_model_builder\\\\n\\\\n    def _build_module_model(\\\\n        self, visitor_stack: ModuleModelBuilder | None\\\\n    ) -> ModuleModel:\\\\n        \"\"\"\\\\n        Builds a module model from the provided module builder.\\\\n\\\\n        Args:\\\\n            visitor_stack (ModuleModelBuilder): The module builder to build the model from.\\\\n\\\\n        Returns:\\\\n            ModuleModel: A structured module model.\\\\n\\\\n        Example:\\\\n            >>> module_model = python_parser.build_module_model(visitor_stack)\\\\n            # Builds a module model from the provided module builder.\\\\n        \"\"\"\\\\n\\\\n        if not isinstance(visitor_stack, ModuleModelBuilder):\\\\n            raise TypeError(\"Expected the first builder to be a ModuleModelBuilder\")\\\\n\\\\n        return visitor_stack.build()\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n@logging_decorator(message=\"Initializing VisitorManager\")\\\\\\\\ndef __init__(\\\\\\\\n    self, summarizer: Summarizer, directory: str, output_directory: str = \"output\"\\\\\\\\n) -> None:\\\\\\\\n    self.directory: str = directory\\\\\\\\n    self.output_directory: str = output_directory\\\\\\\\n    self.directory_modules: dict[str, list[str]] = {}\\\\\\\\n\\\\\\\\n    self.summarizer: Summarizer = summarizer\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef process_files(self) -> VisitorManagerProcessFilesReturn:\\\\\\\\n    \"\"\"\\\\\\\\n        Process the files in the directory and return the module models.\\\\\\\\n\\\\\\\\n        This function iterates through all the Python files in the directory, processes each file,\\\\\\\\n        updates the imports, and builds module models for each file. It returns a tuple of module models\\\\\\\\n        and a dictionary of directory modules.\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            A named tuple (VisitorManagerProcessFilesReturn) containing:\\\\\\\\n            - models_tuple (tuple[ModuleModel, ...]): A tuple of module models.\\\\\\\\n            - directory_modules (dict[str, ModuleModel]): A dictionary of directory modules.\\\\\\\\n\\\\\\\\n        Examples:\\\\\\\\n            >>> visitor_manager = VisitorManager()\\\\\\\\n            >>> result = visitor_manager.process_files()\\\\\\\\n            >>> print(result.models_tuple)\\\\\\\\n            (ModuleModel(file_path=\\\\\\\\\\\\\\'/path/to/file1.py\\\\\\\\\\\\\\'), ModuleModel(file_path=\\\\\\\\\\\\\\'/path/to/file2.py\\\\\\\\\\\\\\'))\\\\\\\\n            >>> print(result.directory_modules)\\\\\\\\n            {\\\\\\\\\\\\\\'/path/to/directory1\\\\\\\\\\\\\\': ModuleModel(file_path=\\\\\\\\\\\\\\'/path/to/directory1/__init__.py\\\\\\\\\\\\\\')}\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    logging.info(\"Processing files\")\\\\\\\\n    python_files: list[str] = self._get_python_files()\\\\\\\\n    model_builder_list: list[ModuleModelBuilder] = []\\\\\\\\n    for file_path in python_files:\\\\\\\\n        if model_builder := self._process_file(file_path):\\\\\\\\n            model_builder_list.append((model_builder))\\\\\\\\n\\\\\\\\n    logging.info(\"File processing completed\")\\\\\\\\n    logging.info(\"Updating imports\")\\\\\\\\n\\\\\\\\n    # TODO: Test making this a tuple of tuples, see if that solves the double update import issue\\\\\\\\n    model_builder_tuple: tuple[ModuleModelBuilder, ...] = tuple(model_builder_list)\\\\\\\\n\\\\\\\\n    import_and_dependency_updater = ImportAndDependencyUpdater(model_builder_tuple)\\\\\\\\n    import_and_dependency_updater.update_imports()\\\\\\\\n    logging.info(\"Updated imports\")\\\\\\\\n\\\\\\\\n    module_models_list: list[ModuleModel] = []\\\\\\\\n    for module_model_builder in model_builder_tuple:\\\\\\\\n        module_model: ModuleModel = self._build_module_model(module_model_builder)\\\\\\\\n        module_models_list.append(module_model)\\\\\\\\n\\\\\\\\n    module_models_tuple: tuple[ModuleModel, ...] = tuple(module_models_list)\\\\\\\\n\\\\\\\\n    return VisitorManagerProcessFilesReturn(\\\\\\\\n        models_tuple=module_models_tuple, directory_modules=self.directory_modules\\\\\\\\n    )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _walk_directories(self) -> list[str]:\\\\\\\\n    \"\"\"Walks the specified directory and returns a list of all files.\"\"\"\\\\\\\\n\\\\\\\\n    all_files: list[str] = []\\\\\\\\n    for file_path in Path(self.directory).rglob(\"*\"):\\\\\\\\n        if not any(\\\\\\\\n            excluded in file_path.parts for excluded in EXCLUDED_DIRECTORIES\\\\\\\\n        ):\\\\\\\\n            all_files.append(str(file_path))\\\\\\\\n    return all_files\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _filter_python_files(self, files: list[str]) -> list[str]:\\\\\\\\n    \"\"\"Filters a list of files to only include Python files.\"\"\"\\\\\\\\n\\\\\\\\n    return [file for file in files if file.endswith(\".py\")]\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n@logging_decorator(message=\"Getting Python files\")\\\\\\\\ndef _get_python_files(self) -> list[str]:\\\\\\\\n    \"\"\"Gets all Python files in the specified directory.\"\"\"\\\\\\\\n\\\\\\\\n    all_files: list[str] = self._walk_directories()\\\\\\\\n    return self._filter_python_files(all_files)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _process_file(self, file_path: str) -> ModuleModelBuilder | None:\\\\\\\\n    \"\"\"Processes a single Python file.\"\"\"\\\\\\\\n\\\\\\\\n    file_path_obj = Path(file_path)\\\\\\\\n    root = str(file_path_obj.parent)\\\\\\\\n    self.directory_modules.setdefault(root, []).append(file_path_obj.name)\\\\\\\\n    return self._parse_file(file_path)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n@logging_decorator(message=\"Processing file\")\\\\\\\\ndef _parse_file(self, file_path: str) -> ModuleModelBuilder | None:\\\\\\\\n    \"\"\"Parses a Python file and saves the parsed data as JSON.\"\"\"\\\\\\\\n\\\\\\\\n    parser = PythonParser(file_path)\\\\\\\\n    code: str = parser.open_file()\\\\\\\\n    module_model_builder: ModuleModelBuilder | None = parser.parse(code)\\\\\\\\n\\\\\\\\n    return module_model_builder\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _build_module_model(\\\\\\\\n    self, visitor_stack: ModuleModelBuilder | None\\\\\\\\n) -> ModuleModel:\\\\\\\\n    \"\"\"\\\\\\\\n        Builds a module model from the provided module builder.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            visitor_stack (ModuleModelBuilder): The module builder to build the model from.\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            ModuleModel: A structured module model.\\\\\\\\n\\\\\\\\n        Example:\\\\\\\\n            >>> module_model = python_parser.build_module_model(visitor_stack)\\\\\\\\n            # Builds a module model from the provided module builder.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    if not isinstance(visitor_stack, ModuleModelBuilder):\\\\\\\\n        raise TypeError(\"Expected the first builder to be a ModuleModelBuilder\")\\\\\\\\n\\\\\\\\n    return visitor_stack.build()\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport logging\\\\nfrom pathlib import Path\\\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\\\nfrom postcode.utilities.logger.decorators import logging_decorator\\\\nfrom postcode.python_parser.parsers.python_parser import PythonParser\\\\nfrom postcode.python_parser.visitor_manager.import_and_dependency_updater import ImportAndDependencyUpdater\\\\nfrom postcode.python_parser.models.models import ModuleModel\\\\nfrom postcode.ai_services.summarizer_protocol import Summarizer\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom dataclasses import dataclass\\nimport logging\\nfrom pathlib import Path\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\nfrom postcode.utilities.logger.decorators import logging_decorator\\nfrom postcode.python_parser.parsers.python_parser import PythonParser\\nfrom postcode.python_parser.visitor_manager.import_and_dependency_updater import ImportAndDependencyUpdater\\nfrom postcode.python_parser.models.models import ModuleModel\\nfrom postcode.ai_services.summarizer_protocol import Summarizer\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "variable_assignments": [
                "EXCLUDED_DIRECTORIES: set[str] = {\".venv\", \"node_modules\", \"__pycache__\", \".git\"}"
            ],
            "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__STANDALONE_BLOCK-1",
            "parent_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE",
            "block_type": "STANDALONE_BLOCK",
            "start_line_num": 17,
            "end_line_num": 19,
            "code_content": "EXCLUDED_DIRECTORIES: set[str] = {\".venv\", \"node_modules\", \"__pycache__\", \".git\"}\n",
            "important_comments": null,
            "dependencies": [],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nEXCLUDED_DIRECTORIES: set[str] = {\".venv\", \"node_modules\", \"__pycache__\", \".git\"}\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "class_name": "VisitorManagerProcessFilesReturn",
            "decorators": [
                {
                    "content": "@dataclass",
                    "decorator_name": "dataclass",
                    "decorator_args": null
                }
            ],
            "bases": null,
            "docstring": "Represents the return value of the VisitorManager.process_files() method.\n\nAttributes:\n    models_tuple (tuple[ModuleModel, ...]): A tuple of ModuleModel objects representing the parsed modules.\n    directory_modules (dict[str, list[str]]): A dictionary mapping directory paths to lists of module names.\n        This is used to keep track of the modules present in each directory.",
            "attributes": null,
            "keywords": null,
            "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManagerProcessFilesReturn",
            "parent_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 19,
            "end_line_num": 34,
            "code_content": "\n\n@dataclass\nclass VisitorManagerProcessFilesReturn:\n    \"\"\"\n    Represents the return value of the VisitorManager.process_files() method.\n\n    Attributes:\n        models_tuple (tuple[ModuleModel, ...]): A tuple of ModuleModel objects representing the parsed modules.\n        directory_modules (dict[str, list[str]]): A dictionary mapping directory paths to lists of module names.\n            This is used to keep track of the modules present in each directory.\n    \"\"\"\n\n    models_tuple: tuple[ModuleModel, ...]\n    directory_modules: dict[str, list[str]]\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager"
                },
                {
                    "import_names": [
                        {
                            "name": "dataclass",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "dataclasses",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ModuleModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ModuleModel"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\n@dataclass\\nclass VisitorManagerProcessFilesReturn:\\n    \"\"\"\\n    Represents the return value of the VisitorManager.process_files() method.\\n\\n    Attributes:\\n        models_tuple (tuple[ModuleModel, ...]): A tuple of ModuleModel objects representing the parsed modules.\\n        directory_modules (dict[str, list[str]]): A dictionary mapping directory paths to lists of module names.\\n            This is used to keep track of the modules present in each directory.\\n    \"\"\"\\n\\n    models_tuple: tuple[ModuleModel, ...]\\n    directory_modules: dict[str, list[str]]\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom dataclasses import dataclass\\nfrom postcode.python_parser.models.models import ModuleModel\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "class_name": "VisitorManager",
            "decorators": null,
            "bases": null,
            "docstring": "Manages the visiting and processing of Python files in a given directory.\n\nThis class scans a specified directory, filters for Python files, parses them, and saves the parsed data in a structured JSON format. It also maintains a mapping of directories to the Python files they contain.\n\nAttributes:\n    directory (str): The root directory to scan for Python files.\n    output_directory (str): The directory where output JSON files will be saved.\n    directory_modules (dict): A mapping of directories to their contained Python files.\n\nExample:\n    >>> visitor_manager = VisitorManager(\"/path/to/python/code\", \"output\")\n    >>> visitor_manager.process_files()\n    # This will process all Python files in /path/to/python/code and save their parsed data in the output directory.",
            "attributes": null,
            "keywords": null,
            "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager",
            "parent_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 34,
            "end_line_num": 175,
            "code_content": "\n\nclass VisitorManager:\n    \"\"\"\n    Manages the visiting and processing of Python files in a given directory.\n\n    This class scans a specified directory, filters for Python files, parses them, and saves the parsed data in a structured JSON format. It also maintains a mapping of directories to the Python files they contain.\n\n    Attributes:\n        directory (str): The root directory to scan for Python files.\n        output_directory (str): The directory where output JSON files will be saved.\n        directory_modules (dict): A mapping of directories to their contained Python files.\n\n    Example:\n        >>> visitor_manager = VisitorManager(\"/path/to/python/code\", \"output\")\n        >>> visitor_manager.process_files()\n        # This will process all Python files in /path/to/python/code and save their parsed data in the output directory.\n    \"\"\"\n\n    @logging_decorator(message=\"Initializing VisitorManager\")\n    def __init__(\n        self, summarizer: Summarizer, directory: str, output_directory: str = \"output\"\n    ) -> None:\n        self.directory: str = directory\n        self.output_directory: str = output_directory\n        self.directory_modules: dict[str, list[str]] = {}\n\n        self.summarizer: Summarizer = summarizer\n\n    def process_files(self) -> VisitorManagerProcessFilesReturn:\n        \"\"\"\n        Process the files in the directory and return the module models.\n\n        This function iterates through all the Python files in the directory, processes each file,\n        updates the imports, and builds module models for each file. It returns a tuple of module models\n        and a dictionary of directory modules.\n\n        Returns:\n            A named tuple (VisitorManagerProcessFilesReturn) containing:\n            - models_tuple (tuple[ModuleModel, ...]): A tuple of module models.\n            - directory_modules (dict[str, ModuleModel]): A dictionary of directory modules.\n\n        Examples:\n            >>> visitor_manager = VisitorManager()\n            >>> result = visitor_manager.process_files()\n            >>> print(result.models_tuple)\n            (ModuleModel(file_path='/path/to/file1.py'), ModuleModel(file_path='/path/to/file2.py'))\n            >>> print(result.directory_modules)\n            {'/path/to/directory1': ModuleModel(file_path='/path/to/directory1/__init__.py')}\n        \"\"\"\n\n        logging.info(\"Processing files\")\n        python_files: list[str] = self._get_python_files()\n        model_builder_list: list[ModuleModelBuilder] = []\n        for file_path in python_files:\n            if model_builder := self._process_file(file_path):\n                model_builder_list.append((model_builder))\n\n        logging.info(\"File processing completed\")\n        logging.info(\"Updating imports\")\n\n        # TODO: Test making this a tuple of tuples, see if that solves the double update import issue\n        model_builder_tuple: tuple[ModuleModelBuilder, ...] = tuple(model_builder_list)\n\n        import_and_dependency_updater = ImportAndDependencyUpdater(model_builder_tuple)\n        import_and_dependency_updater.update_imports()\n        logging.info(\"Updated imports\")\n\n        module_models_list: list[ModuleModel] = []\n        for module_model_builder in model_builder_tuple:\n            module_model: ModuleModel = self._build_module_model(module_model_builder)\n            module_models_list.append(module_model)\n\n        module_models_tuple: tuple[ModuleModel, ...] = tuple(module_models_list)\n\n        return VisitorManagerProcessFilesReturn(\n            models_tuple=module_models_tuple, directory_modules=self.directory_modules\n        )\n\n    def _walk_directories(self) -> list[str]:\n        \"\"\"Walks the specified directory and returns a list of all files.\"\"\"\n\n        all_files: list[str] = []\n        for file_path in Path(self.directory).rglob(\"*\"):\n            if not any(\n                excluded in file_path.parts for excluded in EXCLUDED_DIRECTORIES\n            ):\n                all_files.append(str(file_path))\n        return all_files\n\n    def _filter_python_files(self, files: list[str]) -> list[str]:\n        \"\"\"Filters a list of files to only include Python files.\"\"\"\n\n        return [file for file in files if file.endswith(\".py\")]\n\n    @logging_decorator(message=\"Getting Python files\")\n    def _get_python_files(self) -> list[str]:\n        \"\"\"Gets all Python files in the specified directory.\"\"\"\n\n        all_files: list[str] = self._walk_directories()\n        return self._filter_python_files(all_files)\n\n    def _process_file(self, file_path: str) -> ModuleModelBuilder | None:\n        \"\"\"Processes a single Python file.\"\"\"\n\n        file_path_obj = Path(file_path)\n        root = str(file_path_obj.parent)\n        self.directory_modules.setdefault(root, []).append(file_path_obj.name)\n        return self._parse_file(file_path)\n\n    @logging_decorator(message=\"Processing file\")\n    def _parse_file(self, file_path: str) -> ModuleModelBuilder | None:\n        \"\"\"Parses a Python file and saves the parsed data as JSON.\"\"\"\n\n        parser = PythonParser(file_path)\n        code: str = parser.open_file()\n        module_model_builder: ModuleModelBuilder | None = parser.parse(code)\n\n        return module_model_builder\n\n    def _build_module_model(\n        self, visitor_stack: ModuleModelBuilder | None\n    ) -> ModuleModel:\n        \"\"\"\n        Builds a module model from the provided module builder.\n\n        Args:\n            visitor_stack (ModuleModelBuilder): The module builder to build the model from.\n\n        Returns:\n            ModuleModel: A structured module model.\n\n        Example:\n            >>> module_model = python_parser.build_module_model(visitor_stack)\n            # Builds a module model from the provided module builder.\n        \"\"\"\n\n        if not isinstance(visitor_stack, ModuleModelBuilder):\n            raise TypeError(\"Expected the first builder to be a ModuleModelBuilder\")\n\n        return visitor_stack.build()\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManagerProcessFilesReturn"
                },
                {
                    "import_names": [
                        {
                            "name": "logging",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Path",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "pathlib",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ModuleModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.module_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "logging_decorator",
                            "as_name": null,
                            "local_block_id": "postcode:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator"
                        }
                    ],
                    "imported_from": "postcode.utilities.logger.decorators",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:utilities:logger:decorators.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "PythonParser",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:parsers:python_parser.py__*__MODULE__*__CLASS-PythonParser"
                        }
                    ],
                    "imported_from": "postcode.python_parser.parsers.python_parser",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:parsers:python_parser.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportAndDependencyUpdater",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportAndDependencyUpdater"
                        }
                    ],
                    "imported_from": "postcode.python_parser.visitor_manager.import_and_dependency_updater",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ModuleModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ModuleModel"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "Summarizer",
                            "as_name": null,
                            "local_block_id": "postcode:ai_services:summarizer_protocol.py__*__MODULE__*__CLASS-Summarizer"
                        }
                    ],
                    "imported_from": "postcode.ai_services.summarizer_protocol",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:ai_services:summarizer_protocol.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\nclass VisitorManager:\\n    \"\"\"\\n    Manages the visiting and processing of Python files in a given directory.\\n\\n    This class scans a specified directory, filters for Python files, parses them, and saves the parsed data in a structured JSON format. It also maintains a mapping of directories to the Python files they contain.\\n\\n    Attributes:\\n        directory (str): The root directory to scan for Python files.\\n        output_directory (str): The directory where output JSON files will be saved.\\n        directory_modules (dict): A mapping of directories to their contained Python files.\\n\\n    Example:\\n        >>> visitor_manager = VisitorManager(\"/path/to/python/code\", \"output\")\\n        >>> visitor_manager.process_files()\\n        # This will process all Python files in /path/to/python/code and save their parsed data in the output directory.\\n    \"\"\"\\n\\n    @logging_decorator(message=\"Initializing VisitorManager\")\\n    def __init__(\\n        self, summarizer: Summarizer, directory: str, output_directory: str = \"output\"\\n    ) -> None:\\n        self.directory: str = directory\\n        self.output_directory: str = output_directory\\n        self.directory_modules: dict[str, list[str]] = {}\\n\\n        self.summarizer: Summarizer = summarizer\\n\\n    def process_files(self) -> VisitorManagerProcessFilesReturn:\\n        \"\"\"\\n        Process the files in the directory and return the module models.\\n\\n        This function iterates through all the Python files in the directory, processes each file,\\n        updates the imports, and builds module models for each file. It returns a tuple of module models\\n        and a dictionary of directory modules.\\n\\n        Returns:\\n            A named tuple (VisitorManagerProcessFilesReturn) containing:\\n            - models_tuple (tuple[ModuleModel, ...]): A tuple of module models.\\n            - directory_modules (dict[str, ModuleModel]): A dictionary of directory modules.\\n\\n        Examples:\\n            >>> visitor_manager = VisitorManager()\\n            >>> result = visitor_manager.process_files()\\n            >>> print(result.models_tuple)\\n            (ModuleModel(file_path=\\'/path/to/file1.py\\'), ModuleModel(file_path=\\'/path/to/file2.py\\'))\\n            >>> print(result.directory_modules)\\n            {\\'/path/to/directory1\\': ModuleModel(file_path=\\'/path/to/directory1/__init__.py\\')}\\n        \"\"\"\\n\\n        logging.info(\"Processing files\")\\n        python_files: list[str] = self._get_python_files()\\n        model_builder_list: list[ModuleModelBuilder] = []\\n        for file_path in python_files:\\n            if model_builder := self._process_file(file_path):\\n                model_builder_list.append((model_builder))\\n\\n        logging.info(\"File processing completed\")\\n        logging.info(\"Updating imports\")\\n\\n        # TODO: Test making this a tuple of tuples, see if that solves the double update import issue\\n        model_builder_tuple: tuple[ModuleModelBuilder, ...] = tuple(model_builder_list)\\n\\n        import_and_dependency_updater = ImportAndDependencyUpdater(model_builder_tuple)\\n        import_and_dependency_updater.update_imports()\\n        logging.info(\"Updated imports\")\\n\\n        module_models_list: list[ModuleModel] = []\\n        for module_model_builder in model_builder_tuple:\\n            module_model: ModuleModel = self._build_module_model(module_model_builder)\\n            module_models_list.append(module_model)\\n\\n        module_models_tuple: tuple[ModuleModel, ...] = tuple(module_models_list)\\n\\n        return VisitorManagerProcessFilesReturn(\\n            models_tuple=module_models_tuple, directory_modules=self.directory_modules\\n        )\\n\\n    def _walk_directories(self) -> list[str]:\\n        \"\"\"Walks the specified directory and returns a list of all files.\"\"\"\\n\\n        all_files: list[str] = []\\n        for file_path in Path(self.directory).rglob(\"*\"):\\n            if not any(\\n                excluded in file_path.parts for excluded in EXCLUDED_DIRECTORIES\\n            ):\\n                all_files.append(str(file_path))\\n        return all_files\\n\\n    def _filter_python_files(self, files: list[str]) -> list[str]:\\n        \"\"\"Filters a list of files to only include Python files.\"\"\"\\n\\n        return [file for file in files if file.endswith(\".py\")]\\n\\n    @logging_decorator(message=\"Getting Python files\")\\n    def _get_python_files(self) -> list[str]:\\n        \"\"\"Gets all Python files in the specified directory.\"\"\"\\n\\n        all_files: list[str] = self._walk_directories()\\n        return self._filter_python_files(all_files)\\n\\n    def _process_file(self, file_path: str) -> ModuleModelBuilder | None:\\n        \"\"\"Processes a single Python file.\"\"\"\\n\\n        file_path_obj = Path(file_path)\\n        root = str(file_path_obj.parent)\\n        self.directory_modules.setdefault(root, []).append(file_path_obj.name)\\n        return self._parse_file(file_path)\\n\\n    @logging_decorator(message=\"Processing file\")\\n    def _parse_file(self, file_path: str) -> ModuleModelBuilder | None:\\n        \"\"\"Parses a Python file and saves the parsed data as JSON.\"\"\"\\n\\n        parser = PythonParser(file_path)\\n        code: str = parser.open_file()\\n        module_model_builder: ModuleModelBuilder | None = parser.parse(code)\\n\\n        return module_model_builder\\n\\n    def _build_module_model(\\n        self, visitor_stack: ModuleModelBuilder | None\\n    ) -> ModuleModel:\\n        \"\"\"\\n        Builds a module model from the provided module builder.\\n\\n        Args:\\n            visitor_stack (ModuleModelBuilder): The module builder to build the model from.\\n\\n        Returns:\\n            ModuleModel: A structured module model.\\n\\n        Example:\\n            >>> module_model = python_parser.build_module_model(visitor_stack)\\n            # Builds a module model from the provided module builder.\\n        \"\"\"\\n\\n        if not isinstance(visitor_stack, ModuleModelBuilder):\\n            raise TypeError(\"Expected the first builder to be a ModuleModelBuilder\")\\n\\n        return visitor_stack.build()\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n@logging_decorator(message=\"Initializing VisitorManager\")\\\\ndef __init__(\\\\n    self, summarizer: Summarizer, directory: str, output_directory: str = \"output\"\\\\n) -> None:\\\\n    self.directory: str = directory\\\\n    self.output_directory: str = output_directory\\\\n    self.directory_modules: dict[str, list[str]] = {}\\\\n\\\\n    self.summarizer: Summarizer = summarizer\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef process_files(self) -> VisitorManagerProcessFilesReturn:\\\\n    \"\"\"\\\\n        Process the files in the directory and return the module models.\\\\n\\\\n        This function iterates through all the Python files in the directory, processes each file,\\\\n        updates the imports, and builds module models for each file. It returns a tuple of module models\\\\n        and a dictionary of directory modules.\\\\n\\\\n        Returns:\\\\n            A named tuple (VisitorManagerProcessFilesReturn) containing:\\\\n            - models_tuple (tuple[ModuleModel, ...]): A tuple of module models.\\\\n            - directory_modules (dict[str, ModuleModel]): A dictionary of directory modules.\\\\n\\\\n        Examples:\\\\n            >>> visitor_manager = VisitorManager()\\\\n            >>> result = visitor_manager.process_files()\\\\n            >>> print(result.models_tuple)\\\\n            (ModuleModel(file_path=\\\\\\'/path/to/file1.py\\\\\\'), ModuleModel(file_path=\\\\\\'/path/to/file2.py\\\\\\'))\\\\n            >>> print(result.directory_modules)\\\\n            {\\\\\\'/path/to/directory1\\\\\\': ModuleModel(file_path=\\\\\\'/path/to/directory1/__init__.py\\\\\\')}\\\\n        \"\"\"\\\\n\\\\n    logging.info(\"Processing files\")\\\\n    python_files: list[str] = self._get_python_files()\\\\n    model_builder_list: list[ModuleModelBuilder] = []\\\\n    for file_path in python_files:\\\\n        if model_builder := self._process_file(file_path):\\\\n            model_builder_list.append((model_builder))\\\\n\\\\n    logging.info(\"File processing completed\")\\\\n    logging.info(\"Updating imports\")\\\\n\\\\n    # TODO: Test making this a tuple of tuples, see if that solves the double update import issue\\\\n    model_builder_tuple: tuple[ModuleModelBuilder, ...] = tuple(model_builder_list)\\\\n\\\\n    import_and_dependency_updater = ImportAndDependencyUpdater(model_builder_tuple)\\\\n    import_and_dependency_updater.update_imports()\\\\n    logging.info(\"Updated imports\")\\\\n\\\\n    module_models_list: list[ModuleModel] = []\\\\n    for module_model_builder in model_builder_tuple:\\\\n        module_model: ModuleModel = self._build_module_model(module_model_builder)\\\\n        module_models_list.append(module_model)\\\\n\\\\n    module_models_tuple: tuple[ModuleModel, ...] = tuple(module_models_list)\\\\n\\\\n    return VisitorManagerProcessFilesReturn(\\\\n        models_tuple=module_models_tuple, directory_modules=self.directory_modules\\\\n    )\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _walk_directories(self) -> list[str]:\\\\n    \"\"\"Walks the specified directory and returns a list of all files.\"\"\"\\\\n\\\\n    all_files: list[str] = []\\\\n    for file_path in Path(self.directory).rglob(\"*\"):\\\\n        if not any(\\\\n            excluded in file_path.parts for excluded in EXCLUDED_DIRECTORIES\\\\n        ):\\\\n            all_files.append(str(file_path))\\\\n    return all_files\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _filter_python_files(self, files: list[str]) -> list[str]:\\\\n    \"\"\"Filters a list of files to only include Python files.\"\"\"\\\\n\\\\n    return [file for file in files if file.endswith(\".py\")]\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n@logging_decorator(message=\"Getting Python files\")\\\\ndef _get_python_files(self) -> list[str]:\\\\n    \"\"\"Gets all Python files in the specified directory.\"\"\"\\\\n\\\\n    all_files: list[str] = self._walk_directories()\\\\n    return self._filter_python_files(all_files)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _process_file(self, file_path: str) -> ModuleModelBuilder | None:\\\\n    \"\"\"Processes a single Python file.\"\"\"\\\\n\\\\n    file_path_obj = Path(file_path)\\\\n    root = str(file_path_obj.parent)\\\\n    self.directory_modules.setdefault(root, []).append(file_path_obj.name)\\\\n    return self._parse_file(file_path)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n@logging_decorator(message=\"Processing file\")\\\\ndef _parse_file(self, file_path: str) -> ModuleModelBuilder | None:\\\\n    \"\"\"Parses a Python file and saves the parsed data as JSON.\"\"\"\\\\n\\\\n    parser = PythonParser(file_path)\\\\n    code: str = parser.open_file()\\\\n    module_model_builder: ModuleModelBuilder | None = parser.parse(code)\\\\n\\\\n    return module_model_builder\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _build_module_model(\\\\n    self, visitor_stack: ModuleModelBuilder | None\\\\n) -> ModuleModel:\\\\n    \"\"\"\\\\n        Builds a module model from the provided module builder.\\\\n\\\\n        Args:\\\\n            visitor_stack (ModuleModelBuilder): The module builder to build the model from.\\\\n\\\\n        Returns:\\\\n            ModuleModel: A structured module model.\\\\n\\\\n        Example:\\\\n            >>> module_model = python_parser.build_module_model(visitor_stack)\\\\n            # Builds a module model from the provided module builder.\\\\n        \"\"\"\\\\n\\\\n    if not isinstance(visitor_stack, ModuleModelBuilder):\\\\n        raise TypeError(\"Expected the first builder to be a ModuleModelBuilder\")\\\\n\\\\n    return visitor_stack.build()\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport logging\\nfrom pathlib import Path\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\nfrom postcode.utilities.logger.decorators import logging_decorator\\nfrom postcode.python_parser.parsers.python_parser import PythonParser\\nfrom postcode.python_parser.visitor_manager.import_and_dependency_updater import ImportAndDependencyUpdater\\nfrom postcode.python_parser.models.models import ModuleModel\\nfrom postcode.ai_services.summarizer_protocol import Summarizer\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": [
                        {
                            "content": "@logging_decorator(message=\"Initializing VisitorManager\")",
                            "decorator_name": "logging_decorator",
                            "decorator_args": [
                                "message=\"Initializing VisitorManager\""
                            ]
                        }
                    ],
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-__init__",
                    "parent_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 52,
                    "end_line_num": 62,
                    "code_content": "\n@logging_decorator(message=\"Initializing VisitorManager\")\ndef __init__(\n    self, summarizer: Summarizer, directory: str, output_directory: str = \"output\"\n) -> None:\n    self.directory: str = directory\n    self.output_directory: str = output_directory\n    self.directory_modules: dict[str, list[str]] = {}\n\n    self.summarizer: Summarizer = summarizer\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n@logging_decorator(message=\"Initializing VisitorManager\")\\ndef __init__(\\n    self, summarizer: Summarizer, directory: str, output_directory: str = \"output\"\\n) -> None:\\n    self.directory: str = directory\\n    self.output_directory: str = output_directory\\n    self.directory_modules: dict[str, list[str]] = {}\\n\\n    self.summarizer: Summarizer = summarizer\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "process_files",
                    "docstring": "Process the files in the directory and return the module models.\n\nThis function iterates through all the Python files in the directory, processes each file,\nupdates the imports, and builds module models for each file. It returns a tuple of module models\nand a dictionary of directory modules.\n\nReturns:\n    A named tuple (VisitorManagerProcessFilesReturn) containing:\n    - models_tuple (tuple[ModuleModel, ...]): A tuple of module models.\n    - directory_modules (dict[str, ModuleModel]): A dictionary of directory modules.\n\nExamples:\n    >>> visitor_manager = VisitorManager()\n    >>> result = visitor_manager.process_files()\n    >>> print(result.models_tuple)\n    (ModuleModel(file_path='/path/to/file1.py'), ModuleModel(file_path='/path/to/file2.py'))\n    >>> print(result.directory_modules)\n    {'/path/to/directory1': ModuleModel(file_path='/path/to/directory1/__init__.py')}",
                    "decorators": null,
                    "parameters": null,
                    "returns": "VisitorManagerProcessFilesReturn",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-process_files",
                    "parent_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 62,
                    "end_line_num": 112,
                    "code_content": "\ndef process_files(self) -> VisitorManagerProcessFilesReturn:\n    \"\"\"\n        Process the files in the directory and return the module models.\n\n        This function iterates through all the Python files in the directory, processes each file,\n        updates the imports, and builds module models for each file. It returns a tuple of module models\n        and a dictionary of directory modules.\n\n        Returns:\n            A named tuple (VisitorManagerProcessFilesReturn) containing:\n            - models_tuple (tuple[ModuleModel, ...]): A tuple of module models.\n            - directory_modules (dict[str, ModuleModel]): A dictionary of directory modules.\n\n        Examples:\n            >>> visitor_manager = VisitorManager()\n            >>> result = visitor_manager.process_files()\n            >>> print(result.models_tuple)\n            (ModuleModel(file_path='/path/to/file1.py'), ModuleModel(file_path='/path/to/file2.py'))\n            >>> print(result.directory_modules)\n            {'/path/to/directory1': ModuleModel(file_path='/path/to/directory1/__init__.py')}\n        \"\"\"\n\n    logging.info(\"Processing files\")\n    python_files: list[str] = self._get_python_files()\n    model_builder_list: list[ModuleModelBuilder] = []\n    for file_path in python_files:\n        if model_builder := self._process_file(file_path):\n            model_builder_list.append((model_builder))\n\n    logging.info(\"File processing completed\")\n    logging.info(\"Updating imports\")\n\n    # TODO: Test making this a tuple of tuples, see if that solves the double update import issue\n    model_builder_tuple: tuple[ModuleModelBuilder, ...] = tuple(model_builder_list)\n\n    import_and_dependency_updater = ImportAndDependencyUpdater(model_builder_tuple)\n    import_and_dependency_updater.update_imports()\n    logging.info(\"Updated imports\")\n\n    module_models_list: list[ModuleModel] = []\n    for module_model_builder in model_builder_tuple:\n        module_model: ModuleModel = self._build_module_model(module_model_builder)\n        module_models_list.append(module_model)\n\n    module_models_tuple: tuple[ModuleModel, ...] = tuple(module_models_list)\n\n    return VisitorManagerProcessFilesReturn(\n        models_tuple=module_models_tuple, directory_modules=self.directory_modules\n    )\n",
                    "important_comments": [
                        {
                            "content": "# TODO: Test making this a tuple of tuples, see if that solves the double update import issue",
                            "comment_types": [
                                "TODO"
                            ]
                        }
                    ],
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef process_files(self) -> VisitorManagerProcessFilesReturn:\\n    \"\"\"\\n        Process the files in the directory and return the module models.\\n\\n        This function iterates through all the Python files in the directory, processes each file,\\n        updates the imports, and builds module models for each file. It returns a tuple of module models\\n        and a dictionary of directory modules.\\n\\n        Returns:\\n            A named tuple (VisitorManagerProcessFilesReturn) containing:\\n            - models_tuple (tuple[ModuleModel, ...]): A tuple of module models.\\n            - directory_modules (dict[str, ModuleModel]): A dictionary of directory modules.\\n\\n        Examples:\\n            >>> visitor_manager = VisitorManager()\\n            >>> result = visitor_manager.process_files()\\n            >>> print(result.models_tuple)\\n            (ModuleModel(file_path=\\'/path/to/file1.py\\'), ModuleModel(file_path=\\'/path/to/file2.py\\'))\\n            >>> print(result.directory_modules)\\n            {\\'/path/to/directory1\\': ModuleModel(file_path=\\'/path/to/directory1/__init__.py\\')}\\n        \"\"\"\\n\\n    logging.info(\"Processing files\")\\n    python_files: list[str] = self._get_python_files()\\n    model_builder_list: list[ModuleModelBuilder] = []\\n    for file_path in python_files:\\n        if model_builder := self._process_file(file_path):\\n            model_builder_list.append((model_builder))\\n\\n    logging.info(\"File processing completed\")\\n    logging.info(\"Updating imports\")\\n\\n    # TODO: Test making this a tuple of tuples, see if that solves the double update import issue\\n    model_builder_tuple: tuple[ModuleModelBuilder, ...] = tuple(model_builder_list)\\n\\n    import_and_dependency_updater = ImportAndDependencyUpdater(model_builder_tuple)\\n    import_and_dependency_updater.update_imports()\\n    logging.info(\"Updated imports\")\\n\\n    module_models_list: list[ModuleModel] = []\\n    for module_model_builder in model_builder_tuple:\\n        module_model: ModuleModel = self._build_module_model(module_model_builder)\\n        module_models_list.append(module_model)\\n\\n    module_models_tuple: tuple[ModuleModel, ...] = tuple(module_models_list)\\n\\n    return VisitorManagerProcessFilesReturn(\\n        models_tuple=module_models_tuple, directory_modules=self.directory_modules\\n    )\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_walk_directories",
                    "docstring": "Walks the specified directory and returns a list of all files.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "list[str]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_walk_directories",
                    "parent_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 112,
                    "end_line_num": 123,
                    "code_content": "\ndef _walk_directories(self) -> list[str]:\n    \"\"\"Walks the specified directory and returns a list of all files.\"\"\"\n\n    all_files: list[str] = []\n    for file_path in Path(self.directory).rglob(\"*\"):\n        if not any(\n            excluded in file_path.parts for excluded in EXCLUDED_DIRECTORIES\n        ):\n            all_files.append(str(file_path))\n    return all_files\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _walk_directories(self) -> list[str]:\\n    \"\"\"Walks the specified directory and returns a list of all files.\"\"\"\\n\\n    all_files: list[str] = []\\n    for file_path in Path(self.directory).rglob(\"*\"):\\n        if not any(\\n            excluded in file_path.parts for excluded in EXCLUDED_DIRECTORIES\\n        ):\\n            all_files.append(str(file_path))\\n    return all_files\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_filter_python_files",
                    "docstring": "Filters a list of files to only include Python files.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "list[str]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_filter_python_files",
                    "parent_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 123,
                    "end_line_num": 128,
                    "code_content": "\ndef _filter_python_files(self, files: list[str]) -> list[str]:\n    \"\"\"Filters a list of files to only include Python files.\"\"\"\n\n    return [file for file in files if file.endswith(\".py\")]\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _filter_python_files(self, files: list[str]) -> list[str]:\\n    \"\"\"Filters a list of files to only include Python files.\"\"\"\\n\\n    return [file for file in files if file.endswith(\".py\")]\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_get_python_files",
                    "docstring": "Gets all Python files in the specified directory.",
                    "decorators": [
                        {
                            "content": "@logging_decorator(message=\"Getting Python files\")",
                            "decorator_name": "logging_decorator",
                            "decorator_args": [
                                "message=\"Getting Python files\""
                            ]
                        }
                    ],
                    "parameters": null,
                    "returns": "list[str]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_get_python_files",
                    "parent_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 128,
                    "end_line_num": 135,
                    "code_content": "\n@logging_decorator(message=\"Getting Python files\")\ndef _get_python_files(self) -> list[str]:\n    \"\"\"Gets all Python files in the specified directory.\"\"\"\n\n    all_files: list[str] = self._walk_directories()\n    return self._filter_python_files(all_files)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n@logging_decorator(message=\"Getting Python files\")\\ndef _get_python_files(self) -> list[str]:\\n    \"\"\"Gets all Python files in the specified directory.\"\"\"\\n\\n    all_files: list[str] = self._walk_directories()\\n    return self._filter_python_files(all_files)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_process_file",
                    "docstring": "Processes a single Python file.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "ModuleModelBuilder | None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_process_file",
                    "parent_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 135,
                    "end_line_num": 143,
                    "code_content": "\ndef _process_file(self, file_path: str) -> ModuleModelBuilder | None:\n    \"\"\"Processes a single Python file.\"\"\"\n\n    file_path_obj = Path(file_path)\n    root = str(file_path_obj.parent)\n    self.directory_modules.setdefault(root, []).append(file_path_obj.name)\n    return self._parse_file(file_path)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _process_file(self, file_path: str) -> ModuleModelBuilder | None:\\n    \"\"\"Processes a single Python file.\"\"\"\\n\\n    file_path_obj = Path(file_path)\\n    root = str(file_path_obj.parent)\\n    self.directory_modules.setdefault(root, []).append(file_path_obj.name)\\n    return self._parse_file(file_path)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_parse_file",
                    "docstring": "Parses a Python file and saves the parsed data as JSON.",
                    "decorators": [
                        {
                            "content": "@logging_decorator(message=\"Processing file\")",
                            "decorator_name": "logging_decorator",
                            "decorator_args": [
                                "message=\"Processing file\""
                            ]
                        }
                    ],
                    "parameters": null,
                    "returns": "ModuleModelBuilder | None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_parse_file",
                    "parent_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 143,
                    "end_line_num": 153,
                    "code_content": "\n@logging_decorator(message=\"Processing file\")\ndef _parse_file(self, file_path: str) -> ModuleModelBuilder | None:\n    \"\"\"Parses a Python file and saves the parsed data as JSON.\"\"\"\n\n    parser = PythonParser(file_path)\n    code: str = parser.open_file()\n    module_model_builder: ModuleModelBuilder | None = parser.parse(code)\n\n    return module_model_builder\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n@logging_decorator(message=\"Processing file\")\\ndef _parse_file(self, file_path: str) -> ModuleModelBuilder | None:\\n    \"\"\"Parses a Python file and saves the parsed data as JSON.\"\"\"\\n\\n    parser = PythonParser(file_path)\\n    code: str = parser.open_file()\\n    module_model_builder: ModuleModelBuilder | None = parser.parse(code)\\n\\n    return module_model_builder\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_build_module_model",
                    "docstring": "Builds a module model from the provided module builder.\n\nArgs:\n    visitor_stack (ModuleModelBuilder): The module builder to build the model from.\n\nReturns:\n    ModuleModel: A structured module model.\n\nExample:\n    >>> module_model = python_parser.build_module_model(visitor_stack)\n    # Builds a module model from the provided module builder.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "ModuleModel",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_build_module_model",
                    "parent_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 153,
                    "end_line_num": 175,
                    "code_content": "\ndef _build_module_model(\n    self, visitor_stack: ModuleModelBuilder | None\n) -> ModuleModel:\n    \"\"\"\n        Builds a module model from the provided module builder.\n\n        Args:\n            visitor_stack (ModuleModelBuilder): The module builder to build the model from.\n\n        Returns:\n            ModuleModel: A structured module model.\n\n        Example:\n            >>> module_model = python_parser.build_module_model(visitor_stack)\n            # Builds a module model from the provided module builder.\n        \"\"\"\n\n    if not isinstance(visitor_stack, ModuleModelBuilder):\n        raise TypeError(\"Expected the first builder to be a ModuleModelBuilder\")\n\n    return visitor_stack.build()\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _build_module_model(\\n    self, visitor_stack: ModuleModelBuilder | None\\n) -> ModuleModel:\\n    \"\"\"\\n        Builds a module model from the provided module builder.\\n\\n        Args:\\n            visitor_stack (ModuleModelBuilder): The module builder to build the model from.\\n\\n        Returns:\\n            ModuleModel: A structured module model.\\n\\n        Example:\\n            >>> module_model = python_parser.build_module_model(visitor_stack)\\n            # Builds a module model from the provided module builder.\\n        \"\"\"\\n\\n    if not isinstance(visitor_stack, ModuleModelBuilder):\\n        raise TypeError(\"Expected the first builder to be a ModuleModelBuilder\")\\n\\n    return visitor_stack.build()\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        }
    ]
}