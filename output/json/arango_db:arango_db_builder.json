{
    "file_path": "./arango_db/arango_db_builder.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "json",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "os",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Result",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "arango.result",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Json",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "arango.typings",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Any",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        }
    ],
    "id": ".:arango_db:arango_db_builder.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 170,
    "code_content": "import json\nimport os\nfrom arango.result import Result\nfrom arango.typings import Json\n\nfrom typing import Any\n\n# from arango_db_manager import ArangoDBManager\n\n# NOTE: Remember, when adding logic to connect dependencies, the `from` the external dependency `to` the internal definition using it\n\n\nclass GraphDBBuilder:\n    def __init__(self, db_manager: ArangoDBManager) -> None:\n        self.db_manager: ArangoDBManager = db_manager\n\n    def process_json_directory(self, directory_path: str) -> None:\n        for filename in os.listdir(directory_path):\n            if filename.endswith(\".json\"):\n                file_path: str = os.path.join(directory_path, filename)\n                print(f\"Processing file: {file_path}\")\n                try:\n                    with open(file_path, \"r\") as file:\n                        json_data = json.load(file)\n                        self.process_json_data(json_data)\n                except Exception as e:\n                    print(f\"Error processing file {file_path}: {e}\")\n\n    def process_json_data(self, json_data: dict[str, Any]) -> None:\n        if json_data.get(\"block_type\") == \"MODULE\":\n            module_id: str | None = json_data.get(\"id\")\n            self.create_vertex_for_module(json_data)\n            if module_id:\n                self.process_children(json_data, module_id)\n\n    def process_children(self, parent_data: dict[str, Any], parent_key: str) -> None:\n        for child in parent_data.get(\"children\", []):\n            if child.get(\"block_type\") == \"CLASS\":\n                self.create_vertex_for_class(child, parent_key)\n            if child.get(\"block_type\") == \"FUNCTION\":\n                self.create_vertex_for_function(child, parent_key)\n            if child.get(\"block_type\") == \"STANDALONE_BLOCK\":\n                self.create_vertex_for_standalone_block(child, parent_key)\n\n    def create_vertex_for_module(self, module_data: dict[str, Any]) -> None:\n        if \"_key\" not in module_data and \"id\" in module_data:\n            module_data[\"_key\"] = module_data[\"id\"]\n\n        print(f\"Creating module vertex with attributes: {module_data['_key']}\")\n        try:\n            response: Result[bool | Json] = self.db_manager.db.collection(\n                \"modules\"\n            ).insert(module_data)\n            # print(f\"Module vertex created, response: {response}\")\n        except Exception as e:\n            print(f\"Error inserting module vertex: {e}\")\n\n    def create_vertex_for_class(\n        self, class_data: dict[str, Any], parent_key: str\n    ) -> None:\n        class_key: str | None = class_data.get(\"id\")\n        block_type: str = self.get_block_type_from_id(class_key)\n        if \"_key\" not in class_data and class_key:\n            class_data[\"_key\"] = class_key\n        class_data[\"parent_id\"] = parent_key\n        parent_type: str = self.get_block_type_from_id(parent_key)\n\n        print(f\"Creating class vertex with attributes: {class_data['_key']}\")\n        try:\n            self.db_manager.ensure_collection(\"classes\")\n            self.db_manager.db.collection(\"classes\").insert(class_data)\n            print(f\"Class vertex created for {class_key}\")\n\n            if class_key:\n                self.create_edge(class_key, parent_key, block_type, parent_type)\n        except Exception as e:\n            print(f\"Error inserting class vertex: {e}\")\n\n    def create_vertex_for_function(\n        self, function_data: dict[str, Any], parent_key: str\n    ) -> None:\n        function_key: str | None = function_data.get(\"id\")\n        block_type: str = self.get_block_type_from_id(function_key)\n        if \"_key\" not in function_data and function_key:\n            function_data[\"_key\"] = function_key\n        function_data[\"parent_id\"] = parent_key\n        parent_type: str = self.get_block_type_from_id(parent_key)\n\n        print(f\"Creating function vertex with attributes: {function_data['_key']}\")\n        try:\n            self.db_manager.ensure_collection(\"functions\")\n            self.db_manager.db.collection(\"functions\").insert(function_data)\n            print(f\"Function vertex created for {function_key}\")\n\n            if function_key:\n                self.create_edge(function_key, parent_key, block_type, parent_type)\n        except Exception as e:\n            print(f\"Error inserting function vertex: {e}\")\n\n    def create_vertex_for_standalone_block(\n        self, standalone_block_data: dict[str, Any], parent_key: str\n    ) -> None:\n        standalone_block_key: str | None = standalone_block_data.get(\"id\")\n        block_type: str = self.get_block_type_from_id(standalone_block_key)\n        if \"_key\" not in standalone_block_data and standalone_block_key:\n            standalone_block_data[\"_key\"] = standalone_block_key\n        standalone_block_data[\"parent_id\"] = parent_key\n        parent_type: str = self.get_block_type_from_id(parent_key)\n\n        print(\n            f\"Creating standalone block vertex with attributes: {standalone_block_data['_key']}\"\n        )\n        try:\n            self.db_manager.ensure_collection(\"standalone_code_blocks\")\n            self.db_manager.db.collection(\"standalone_code_blocks\").insert(\n                standalone_block_data\n            )\n            print(f\"Standalone block vertex created for {standalone_block_key}\")\n\n            if standalone_block_key:\n                self.create_edge(\n                    standalone_block_key, parent_key, block_type, parent_type\n                )\n        except Exception as e:\n            print(f\"Error inserting standalone block vertex: {e}\")\n\n    def create_edge(\n        self, from_key: str, to_key: str, source_type: str, target_type: str\n    ) -> None:\n        edge_data: dict[str, str] = {\n            \"_from\": f\"{source_type}s/{from_key}\",\n            \"_to\": f\"{target_type}s/{to_key}\",\n            \"source_type\": source_type,\n            \"target_type\": target_type,\n        }\n        try:\n            self.db_manager.ensure_edge_collection(\"code_edges\")\n            self.db_manager.db.collection(\"code_edges\").insert(edge_data)\n            print(f\"Edge created between {from_key} and {to_key}\")\n        except Exception as e:\n            print(f\"Error creating edge: {e}\")\n\n    def get_block_type_from_id(self, block_id) -> str:\n        block_id_parts: list[str] = block_id.split(\"__*__\")\n\n        block_type_part: str = block_id_parts[-1]\n        if block_type_part.startswith(\"MODULE\"):\n            return \"module\"\n        elif block_type_part.startswith(\"CLASS\"):\n            return \"class\"\n        elif block_type_part.startswith(\"FUNCTION\"):\n            return \"function\"\n        elif block_type_part.startswith(\"STANDALONE_BLOCK\"):\n            return \"standalone_code_block\"\n        else:\n            return \"unknown\"\n\n\n# Example usage\ndb_manager = ArangoDBManager()\ndb_manager.delete_all_collections()  # Delete all collections in the database\ndb_manager.setup_collections()  # Create the required collections\ngraph_builder = GraphDBBuilder(db_manager)\n\n# Directory containing JSON files\njson_directory = \"/Users/evanschultz/Documents/Code/post-code/output/json/\"\n\n# Process all JSON files in the directory\ngraph_builder.process_json_directory(json_directory)\n",
    "important_comments": [
        {
            "content": "# Create the required collections",
            "comment_types": [
                "Q"
            ]
        }
    ],
    "dependencies": null,
    "summary": null,
    "children": [
        {
            "variable_assignments": [
                "db_manager = ArangoDBManager()",
                "graph_builder = GraphDBBuilder(db_manager)",
                "json_directory = \"/Users/evanschultz/Documents/Code/post-code/output/json/\""
            ],
            "id": ".:arango_db:arango_db_builder.py__*__MODULE__*__STANDALONE_BLOCK-1",
            "parent_id": ".:arango_db:arango_db_builder.py__*__MODULE",
            "block_type": "STANDALONE_BLOCK",
            "start_line_num": 157,
            "end_line_num": 170,
            "code_content": "# Example usage\ndb_manager = ArangoDBManager()\ndb_manager.delete_all_collections()  # Delete all collections in the database\ndb_manager.setup_collections()  # Create the required collections\ngraph_builder = GraphDBBuilder(db_manager)\n# Directory containing JSON files\njson_directory = \"/Users/evanschultz/Documents/Code/post-code/output/json/\"\n# Process all JSON files in the directory\ngraph_builder.process_json_directory(json_directory)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder"
                },
                {
                    "import_names": [
                        {
                            "name": "json",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "os",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                }
            ],
            "summary": null,
            "children": null
        },
        {
            "class_name": "GraphDBBuilder",
            "decorators": null,
            "bases": null,
            "docstring": null,
            "attributes": null,
            "keywords": null,
            "id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
            "parent_id": ".:arango_db:arango_db_builder.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 7,
            "end_line_num": 157,
            "code_content": "\n# from arango_db_manager import ArangoDBManager\n\n# NOTE: Remember, when adding logic to connect dependencies, the `from` the external dependency `to` the internal definition using it\n\n\nclass GraphDBBuilder:\n    def __init__(self, db_manager: ArangoDBManager) -> None:\n        self.db_manager: ArangoDBManager = db_manager\n\n    def process_json_directory(self, directory_path: str) -> None:\n        for filename in os.listdir(directory_path):\n            if filename.endswith(\".json\"):\n                file_path: str = os.path.join(directory_path, filename)\n                print(f\"Processing file: {file_path}\")\n                try:\n                    with open(file_path, \"r\") as file:\n                        json_data = json.load(file)\n                        self.process_json_data(json_data)\n                except Exception as e:\n                    print(f\"Error processing file {file_path}: {e}\")\n\n    def process_json_data(self, json_data: dict[str, Any]) -> None:\n        if json_data.get(\"block_type\") == \"MODULE\":\n            module_id: str | None = json_data.get(\"id\")\n            self.create_vertex_for_module(json_data)\n            if module_id:\n                self.process_children(json_data, module_id)\n\n    def process_children(self, parent_data: dict[str, Any], parent_key: str) -> None:\n        for child in parent_data.get(\"children\", []):\n            if child.get(\"block_type\") == \"CLASS\":\n                self.create_vertex_for_class(child, parent_key)\n            if child.get(\"block_type\") == \"FUNCTION\":\n                self.create_vertex_for_function(child, parent_key)\n            if child.get(\"block_type\") == \"STANDALONE_BLOCK\":\n                self.create_vertex_for_standalone_block(child, parent_key)\n\n    def create_vertex_for_module(self, module_data: dict[str, Any]) -> None:\n        if \"_key\" not in module_data and \"id\" in module_data:\n            module_data[\"_key\"] = module_data[\"id\"]\n\n        print(f\"Creating module vertex with attributes: {module_data['_key']}\")\n        try:\n            response: Result[bool | Json] = self.db_manager.db.collection(\n                \"modules\"\n            ).insert(module_data)\n            # print(f\"Module vertex created, response: {response}\")\n        except Exception as e:\n            print(f\"Error inserting module vertex: {e}\")\n\n    def create_vertex_for_class(\n        self, class_data: dict[str, Any], parent_key: str\n    ) -> None:\n        class_key: str | None = class_data.get(\"id\")\n        block_type: str = self.get_block_type_from_id(class_key)\n        if \"_key\" not in class_data and class_key:\n            class_data[\"_key\"] = class_key\n        class_data[\"parent_id\"] = parent_key\n        parent_type: str = self.get_block_type_from_id(parent_key)\n\n        print(f\"Creating class vertex with attributes: {class_data['_key']}\")\n        try:\n            self.db_manager.ensure_collection(\"classes\")\n            self.db_manager.db.collection(\"classes\").insert(class_data)\n            print(f\"Class vertex created for {class_key}\")\n\n            if class_key:\n                self.create_edge(class_key, parent_key, block_type, parent_type)\n        except Exception as e:\n            print(f\"Error inserting class vertex: {e}\")\n\n    def create_vertex_for_function(\n        self, function_data: dict[str, Any], parent_key: str\n    ) -> None:\n        function_key: str | None = function_data.get(\"id\")\n        block_type: str = self.get_block_type_from_id(function_key)\n        if \"_key\" not in function_data and function_key:\n            function_data[\"_key\"] = function_key\n        function_data[\"parent_id\"] = parent_key\n        parent_type: str = self.get_block_type_from_id(parent_key)\n\n        print(f\"Creating function vertex with attributes: {function_data['_key']}\")\n        try:\n            self.db_manager.ensure_collection(\"functions\")\n            self.db_manager.db.collection(\"functions\").insert(function_data)\n            print(f\"Function vertex created for {function_key}\")\n\n            if function_key:\n                self.create_edge(function_key, parent_key, block_type, parent_type)\n        except Exception as e:\n            print(f\"Error inserting function vertex: {e}\")\n\n    def create_vertex_for_standalone_block(\n        self, standalone_block_data: dict[str, Any], parent_key: str\n    ) -> None:\n        standalone_block_key: str | None = standalone_block_data.get(\"id\")\n        block_type: str = self.get_block_type_from_id(standalone_block_key)\n        if \"_key\" not in standalone_block_data and standalone_block_key:\n            standalone_block_data[\"_key\"] = standalone_block_key\n        standalone_block_data[\"parent_id\"] = parent_key\n        parent_type: str = self.get_block_type_from_id(parent_key)\n\n        print(\n            f\"Creating standalone block vertex with attributes: {standalone_block_data['_key']}\"\n        )\n        try:\n            self.db_manager.ensure_collection(\"standalone_code_blocks\")\n            self.db_manager.db.collection(\"standalone_code_blocks\").insert(\n                standalone_block_data\n            )\n            print(f\"Standalone block vertex created for {standalone_block_key}\")\n\n            if standalone_block_key:\n                self.create_edge(\n                    standalone_block_key, parent_key, block_type, parent_type\n                )\n        except Exception as e:\n            print(f\"Error inserting standalone block vertex: {e}\")\n\n    def create_edge(\n        self, from_key: str, to_key: str, source_type: str, target_type: str\n    ) -> None:\n        edge_data: dict[str, str] = {\n            \"_from\": f\"{source_type}s/{from_key}\",\n            \"_to\": f\"{target_type}s/{to_key}\",\n            \"source_type\": source_type,\n            \"target_type\": target_type,\n        }\n        try:\n            self.db_manager.ensure_edge_collection(\"code_edges\")\n            self.db_manager.db.collection(\"code_edges\").insert(edge_data)\n            print(f\"Edge created between {from_key} and {to_key}\")\n        except Exception as e:\n            print(f\"Error creating edge: {e}\")\n\n    def get_block_type_from_id(self, block_id) -> str:\n        block_id_parts: list[str] = block_id.split(\"__*__\")\n\n        block_type_part: str = block_id_parts[-1]\n        if block_type_part.startswith(\"MODULE\"):\n            return \"module\"\n        elif block_type_part.startswith(\"CLASS\"):\n            return \"class\"\n        elif block_type_part.startswith(\"FUNCTION\"):\n            return \"function\"\n        elif block_type_part.startswith(\"STANDALONE_BLOCK\"):\n            return \"standalone_code_block\"\n        else:\n            return \"unknown\"\n",
            "important_comments": [
                {
                    "content": "# NOTE: Remember, when adding logic to connect dependencies, the `from` the external dependency `to` the internal definition using it",
                    "comment_types": [
                        "NOTE"
                    ]
                }
            ],
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "json",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "os",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Result",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "arango.result",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Json",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "arango.typings",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Any",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                }
            ],
            "summary": null,
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-__init__",
                    "parent_id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 14,
                    "end_line_num": 16,
                    "code_content": "def __init__(self, db_manager: ArangoDBManager) -> None:\n    self.db_manager: ArangoDBManager = db_manager\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "process_json_directory",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-process_json_directory",
                    "parent_id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 16,
                    "end_line_num": 28,
                    "code_content": "\ndef process_json_directory(self, directory_path: str) -> None:\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".json\"):\n            file_path: str = os.path.join(directory_path, filename)\n            print(f\"Processing file: {file_path}\")\n            try:\n                with open(file_path, \"r\") as file:\n                    json_data = json.load(file)\n                    self.process_json_data(json_data)\n            except Exception as e:\n                print(f\"Error processing file {file_path}: {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "process_json_data",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-process_json_data",
                    "parent_id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 28,
                    "end_line_num": 35,
                    "code_content": "\ndef process_json_data(self, json_data: dict[str, Any]) -> None:\n    if json_data.get(\"block_type\") == \"MODULE\":\n        module_id: str | None = json_data.get(\"id\")\n        self.create_vertex_for_module(json_data)\n        if module_id:\n            self.process_children(json_data, module_id)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "process_children",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-process_children",
                    "parent_id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 35,
                    "end_line_num": 44,
                    "code_content": "\ndef process_children(self, parent_data: dict[str, Any], parent_key: str) -> None:\n    for child in parent_data.get(\"children\", []):\n        if child.get(\"block_type\") == \"CLASS\":\n            self.create_vertex_for_class(child, parent_key)\n        if child.get(\"block_type\") == \"FUNCTION\":\n            self.create_vertex_for_function(child, parent_key)\n        if child.get(\"block_type\") == \"STANDALONE_BLOCK\":\n            self.create_vertex_for_standalone_block(child, parent_key)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "create_vertex_for_module",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-create_vertex_for_module",
                    "parent_id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 44,
                    "end_line_num": 57,
                    "code_content": "\ndef create_vertex_for_module(self, module_data: dict[str, Any]) -> None:\n    if \"_key\" not in module_data and \"id\" in module_data:\n        module_data[\"_key\"] = module_data[\"id\"]\n\n    print(f\"Creating module vertex with attributes: {module_data['_key']}\")\n    try:\n        response: Result[bool | Json] = self.db_manager.db.collection(\n            \"modules\"\n        ).insert(module_data)\n        # print(f\"Module vertex created, response: {response}\")\n    except Exception as e:\n        print(f\"Error inserting module vertex: {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "create_vertex_for_class",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-create_vertex_for_class",
                    "parent_id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 57,
                    "end_line_num": 78,
                    "code_content": "\ndef create_vertex_for_class(\n    self, class_data: dict[str, Any], parent_key: str\n) -> None:\n    class_key: str | None = class_data.get(\"id\")\n    block_type: str = self.get_block_type_from_id(class_key)\n    if \"_key\" not in class_data and class_key:\n        class_data[\"_key\"] = class_key\n    class_data[\"parent_id\"] = parent_key\n    parent_type: str = self.get_block_type_from_id(parent_key)\n\n    print(f\"Creating class vertex with attributes: {class_data['_key']}\")\n    try:\n        self.db_manager.ensure_collection(\"classes\")\n        self.db_manager.db.collection(\"classes\").insert(class_data)\n        print(f\"Class vertex created for {class_key}\")\n\n        if class_key:\n            self.create_edge(class_key, parent_key, block_type, parent_type)\n    except Exception as e:\n        print(f\"Error inserting class vertex: {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "create_vertex_for_function",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-create_vertex_for_function",
                    "parent_id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 78,
                    "end_line_num": 99,
                    "code_content": "\ndef create_vertex_for_function(\n    self, function_data: dict[str, Any], parent_key: str\n) -> None:\n    function_key: str | None = function_data.get(\"id\")\n    block_type: str = self.get_block_type_from_id(function_key)\n    if \"_key\" not in function_data and function_key:\n        function_data[\"_key\"] = function_key\n    function_data[\"parent_id\"] = parent_key\n    parent_type: str = self.get_block_type_from_id(parent_key)\n\n    print(f\"Creating function vertex with attributes: {function_data['_key']}\")\n    try:\n        self.db_manager.ensure_collection(\"functions\")\n        self.db_manager.db.collection(\"functions\").insert(function_data)\n        print(f\"Function vertex created for {function_key}\")\n\n        if function_key:\n            self.create_edge(function_key, parent_key, block_type, parent_type)\n    except Exception as e:\n        print(f\"Error inserting function vertex: {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "create_vertex_for_standalone_block",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-create_vertex_for_standalone_block",
                    "parent_id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 99,
                    "end_line_num": 126,
                    "code_content": "\ndef create_vertex_for_standalone_block(\n    self, standalone_block_data: dict[str, Any], parent_key: str\n) -> None:\n    standalone_block_key: str | None = standalone_block_data.get(\"id\")\n    block_type: str = self.get_block_type_from_id(standalone_block_key)\n    if \"_key\" not in standalone_block_data and standalone_block_key:\n        standalone_block_data[\"_key\"] = standalone_block_key\n    standalone_block_data[\"parent_id\"] = parent_key\n    parent_type: str = self.get_block_type_from_id(parent_key)\n\n    print(\n        f\"Creating standalone block vertex with attributes: {standalone_block_data['_key']}\"\n    )\n    try:\n        self.db_manager.ensure_collection(\"standalone_code_blocks\")\n        self.db_manager.db.collection(\"standalone_code_blocks\").insert(\n            standalone_block_data\n        )\n        print(f\"Standalone block vertex created for {standalone_block_key}\")\n\n        if standalone_block_key:\n            self.create_edge(\n                standalone_block_key, parent_key, block_type, parent_type\n            )\n    except Exception as e:\n        print(f\"Error inserting standalone block vertex: {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "create_edge",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-create_edge",
                    "parent_id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 126,
                    "end_line_num": 142,
                    "code_content": "\ndef create_edge(\n    self, from_key: str, to_key: str, source_type: str, target_type: str\n) -> None:\n    edge_data: dict[str, str] = {\n        \"_from\": f\"{source_type}s/{from_key}\",\n        \"_to\": f\"{target_type}s/{to_key}\",\n        \"source_type\": source_type,\n        \"target_type\": target_type,\n    }\n    try:\n        self.db_manager.ensure_edge_collection(\"code_edges\")\n        self.db_manager.db.collection(\"code_edges\").insert(edge_data)\n        print(f\"Edge created between {from_key} and {to_key}\")\n    except Exception as e:\n        print(f\"Error creating edge: {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "get_block_type_from_id",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-get_block_type_from_id",
                    "parent_id": ".:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 142,
                    "end_line_num": 157,
                    "code_content": "\ndef get_block_type_from_id(self, block_id) -> str:\n    block_id_parts: list[str] = block_id.split(\"__*__\")\n\n    block_type_part: str = block_id_parts[-1]\n    if block_type_part.startswith(\"MODULE\"):\n        return \"module\"\n    elif block_type_part.startswith(\"CLASS\"):\n        return \"class\"\n    elif block_type_part.startswith(\"FUNCTION\"):\n        return \"function\"\n    elif block_type_part.startswith(\"STANDALONE_BLOCK\"):\n        return \"standalone_code_block\"\n    else:\n        return \"unknown\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                }
            ]
        }
    ]
}