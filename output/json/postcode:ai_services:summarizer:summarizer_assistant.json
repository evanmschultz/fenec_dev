{
    "file_path": "postcode/ai_services/summarizer/summarizer_assistant.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "time",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "OpenAI",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Assistant",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.beta.assistant",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Thread",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.beta.thread",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Run",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.beta.threads.run",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ThreadMessage",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Content",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.beta.threads.thread_message",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "MessageContentText",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.beta.threads.message_content_text",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Tool",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.beta.assistant_create_params",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "NotGiven",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "NOT_GIVEN",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai._types",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "SyncCursorPage",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.pagination",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "code_example",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "temp",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:summarizer:temp.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "SUMMARIZER_DEFAULT_DESCRIPTION",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "summary_prompt_list",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.ai_services.summarizer.prompts.summarization_prompts",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:summarizer:prompts:summarization_prompts.py__*__MODULE"
        }
    ],
    "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 157,
    "code_content": "import time\nfrom openai import OpenAI\nfrom openai.types.beta.assistant import Assistant\nfrom openai.types.beta.thread import Thread\nfrom openai.types.beta.threads.run import Run\nfrom openai.types.beta.threads.thread_message import ThreadMessage, Content\nfrom openai.types.beta.threads.message_content_text import MessageContentText\nfrom openai.types.beta.assistant_create_params import Tool\nfrom openai._types import NotGiven, NOT_GIVEN\nfrom openai.pagination import SyncCursorPage\n\nfrom temp import code_example\nfrom postcode.ai_services.summarizer.prompts.summarization_prompts import (\n    SUMMARIZER_DEFAULT_INSTRUCTIONS,\n    SUMMARIZER_DEFAULT_DESCRIPTION,\n    summary_prompt_list,\n)\n\n\nclass SummarizerAssistant:\n    def __init__(\n        self,\n        assistant: Assistant | None = None,\n    ) -> None:\n        self.client = OpenAI()\n        self.prompt_list: list[str] = summary_prompt_list\n        self.default_prompt: str = self.prompt_list[0]\n        self.assistant: Assistant = assistant if assistant else self._create_assistant()\n        self.assistant_id: str = self.assistant.id\n\n    def _create_assistant(\n        self,\n        *,\n        name: str = \"Python Code Summarizer\",\n        model: str = \"gpt-4-1106-preview\",\n        instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\n        description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\n        tools: list[Tool] | NotGiven = NOT_GIVEN,\n    ) -> Assistant:\n        try:\n            return self.client.beta.assistants.create(\n                name=name,\n                model=model,\n                instructions=instructions,\n                description=description,\n                tools=tools,\n            )\n        except Exception as e:\n            raise Exception(f\"Error creating assistant (OpenAI): {e}\")\n\n    def _delete_assistant(self) -> None:\n        try:\n            self.client.beta.assistants.delete(self.assistant_id)\n        except Exception as e:\n            print(f\"Error deleting assistant (OpenAI): {e}\")\n\n    def _create_thread(self) -> Thread:\n        return self.client.beta.threads.create()\n\n    def _delete_thread(self, thread_id: str) -> None:\n        try:\n            self.client.beta.threads.delete(thread_id)\n        except Exception as e:\n            print(f\"Error deleting thread (OpenAI): {e}\")\n\n    def _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\n        \"\"\"\n        Returns the prompt for the code snippet.\n\n        Args:\n            code (str): The code snippet.\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\n\n        Returns:\n            str: The formatted prompt.\n\n        Notes:\n            - If custom_prompt is not provided, the default prompt will be used.\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\n        \"\"\"\n\n        if not custom_prompt:\n            return self.default_prompt.format(code=code)\n\n        else:\n            if \"{code}\" in custom_prompt:\n                return custom_prompt.format(code=code)\n            else:\n                return f\"{custom_prompt}\\n\\n{code}\"\n\n    def _add_message_to_thread(self, thread_id: str, message: str) -> None:\n        try:\n            self.client.beta.threads.messages.create(\n                thread_id, content=message, role=\"user\"\n            )\n        except Exception as e:\n            raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\n\n    def _run_thread(self, thread_id: str) -> Run:\n        try:\n            return self.client.beta.threads.runs.create(\n                thread_id, assistant_id=self.assistant_id\n            )\n        except Exception as e:\n            raise Exception(f\"Error running thread (OpenAI): {e}\")\n\n    def _get_response(self, thread_id: str, run_id: str) -> list[str]:\n        run: Run = self._run_thread(thread_id)\n\n        while True:\n            run_retrieval: Run = self.client.beta.threads.runs.retrieve(\n                thread_id=thread_id, run_id=run.id\n            )\n            print(f\"Run status: {run_retrieval.status}\")\n            if run_retrieval.status == \"completed\":\n                break\n            time.sleep(1)\n\n        messages: SyncCursorPage[\n            ThreadMessage\n        ] = self.client.beta.threads.messages.list(thread_id=thread_id)\n        return [\n            item.text.value\n            for content in messages\n            for item in content.content\n            if type(item) == MessageContentText and content.role == \"assistant\"\n        ]\n\n    def summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\n        try:\n            thread: Thread = self._create_thread()\n            self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\n            summary: list[str] = self._get_response(thread.id, code)\n            self._delete_thread(thread.id)\n            return summary\n        except Exception as e:\n            return f\"An error occurred while summarizing '{file_path}' (OpenAI): {e}\"\n\n    def print_assistants_list(self) -> None:\n        print(f\"Assistants list: {self.client.beta.assistants.list()}\")\n\n\n# Instantiate Summarizer\nsummarizer = SummarizerAssistant()\n\n# Test Summarize Code\ntry:\n    summary_list: list[str] | str | None = summarizer.summarize_code(\n        code_example, \"test_code.py\"\n    )\n    if isinstance(summary_list, list):\n        for summary in summary_list:\n            print(summary)\nexcept Exception as e:\n    print(\"An error occurred:\", e)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nimport time\\nfrom openai import OpenAI\\nfrom openai.types.beta.assistant import Assistant\\nfrom openai.types.beta.thread import Thread\\nfrom openai.types.beta.threads.run import Run\\nfrom openai.types.beta.threads.thread_message import ThreadMessage, Content\\nfrom openai.types.beta.threads.message_content_text import MessageContentText\\nfrom openai.types.beta.assistant_create_params import Tool\\nfrom openai._types import NotGiven, NOT_GIVEN\\nfrom openai.pagination import SyncCursorPage\\n\\nfrom temp import code_example\\nfrom postcode.ai_services.summarizer.prompts.summarization_prompts import (\\n    SUMMARIZER_DEFAULT_INSTRUCTIONS,\\n    SUMMARIZER_DEFAULT_DESCRIPTION,\\n    summary_prompt_list,\\n)\\n\\n\\nclass SummarizerAssistant:\\n    def __init__(\\n        self,\\n        assistant: Assistant | None = None,\\n    ) -> None:\\n        self.client = OpenAI()\\n        self.prompt_list: list[str] = summary_prompt_list\\n        self.default_prompt: str = self.prompt_list[0]\\n        self.assistant: Assistant = assistant if assistant else self._create_assistant()\\n        self.assistant_id: str = self.assistant.id\\n\\n    def _create_assistant(\\n        self,\\n        *,\\n        name: str = \"Python Code Summarizer\",\\n        model: str = \"gpt-4-1106-preview\",\\n        instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\\n        description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\\n        tools: list[Tool] | NotGiven = NOT_GIVEN,\\n    ) -> Assistant:\\n        try:\\n            return self.client.beta.assistants.create(\\n                name=name,\\n                model=model,\\n                instructions=instructions,\\n                description=description,\\n                tools=tools,\\n            )\\n        except Exception as e:\\n            raise Exception(f\"Error creating assistant (OpenAI): {e}\")\\n\\n    def _delete_assistant(self) -> None:\\n        try:\\n            self.client.beta.assistants.delete(self.assistant_id)\\n        except Exception as e:\\n            print(f\"Error deleting assistant (OpenAI): {e}\")\\n\\n    def _create_thread(self) -> Thread:\\n        return self.client.beta.threads.create()\\n\\n    def _delete_thread(self, thread_id: str) -> None:\\n        try:\\n            self.client.beta.threads.delete(thread_id)\\n        except Exception as e:\\n            print(f\"Error deleting thread (OpenAI): {e}\")\\n\\n    def _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\\n        \"\"\"\\n        Returns the prompt for the code snippet.\\n\\n        Args:\\n            code (str): The code snippet.\\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\\n\\n        Returns:\\n            str: The formatted prompt.\\n\\n        Notes:\\n            - If custom_prompt is not provided, the default prompt will be used.\\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\\n        \"\"\"\\n\\n        if not custom_prompt:\\n            return self.default_prompt.format(code=code)\\n\\n        else:\\n            if \"{code}\" in custom_prompt:\\n                return custom_prompt.format(code=code)\\n            else:\\n                return f\"{custom_prompt}\\\\n\\\\n{code}\"\\n\\n    def _add_message_to_thread(self, thread_id: str, message: str) -> None:\\n        try:\\n            self.client.beta.threads.messages.create(\\n                thread_id, content=message, role=\"user\"\\n            )\\n        except Exception as e:\\n            raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\\n\\n    def _run_thread(self, thread_id: str) -> Run:\\n        try:\\n            return self.client.beta.threads.runs.create(\\n                thread_id, assistant_id=self.assistant_id\\n            )\\n        except Exception as e:\\n            raise Exception(f\"Error running thread (OpenAI): {e}\")\\n\\n    def _get_response(self, thread_id: str, run_id: str) -> list[str]:\\n        run: Run = self._run_thread(thread_id)\\n\\n        while True:\\n            run_retrieval: Run = self.client.beta.threads.runs.retrieve(\\n                thread_id=thread_id, run_id=run.id\\n            )\\n            print(f\"Run status: {run_retrieval.status}\")\\n            if run_retrieval.status == \"completed\":\\n                break\\n            time.sleep(1)\\n\\n        messages: SyncCursorPage[\\n            ThreadMessage\\n        ] = self.client.beta.threads.messages.list(thread_id=thread_id)\\n        return [\\n            item.text.value\\n            for content in messages\\n            for item in content.content\\n            if type(item) == MessageContentText and content.role == \"assistant\"\\n        ]\\n\\n    def summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\\n        try:\\n            thread: Thread = self._create_thread()\\n            self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\\n            summary: list[str] = self._get_response(thread.id, code)\\n            self._delete_thread(thread.id)\\n            return summary\\n        except Exception as e:\\n            return f\"An error occurred while summarizing \\'{file_path}\\' (OpenAI): {e}\"\\n\\n    def print_assistants_list(self) -> None:\\n        print(f\"Assistants list: {self.client.beta.assistants.list()}\")\\n\\n\\n# Instantiate Summarizer\\nsummarizer = SummarizerAssistant()\\n\\n# Test Summarize Code\\ntry:\\n    summary_list: list[str] | str | None = summarizer.summarize_code(\\n        code_example, \"test_code.py\"\\n    )\\n    if isinstance(summary_list, list):\\n        for summary in summary_list:\\n            print(summary)\\nexcept Exception as e:\\n    print(\"An error occurred:\", e)\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n# Instantiate Summarizer\\\\nsummarizer = SummarizerAssistant()\\\\n# Test Summarize Code\\\\ntry:\\\\n    summary_list: list[str] | str | None = summarizer.summarize_code(\\\\n        code_example, \"test_code.py\"\\\\n    )\\\\n    if isinstance(summary_list, list):\\\\n        for summary in summary_list:\\\\n            print(summary)\\\\nexcept Exception as e:\\\\n    print(\"An error occurred:\", e)\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom openai.types.beta.assistant import Assistant\\\\nfrom temp import code_example\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass SummarizerAssistant:\\\\n    def __init__(\\\\n        self,\\\\n        assistant: Assistant | None = None,\\\\n    ) -> None:\\\\n        self.client = OpenAI()\\\\n        self.prompt_list: list[str] = summary_prompt_list\\\\n        self.default_prompt: str = self.prompt_list[0]\\\\n        self.assistant: Assistant = assistant if assistant else self._create_assistant()\\\\n        self.assistant_id: str = self.assistant.id\\\\n\\\\n    def _create_assistant(\\\\n        self,\\\\n        *,\\\\n        name: str = \"Python Code Summarizer\",\\\\n        model: str = \"gpt-4-1106-preview\",\\\\n        instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\\\\n        description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\\\\n        tools: list[Tool] | NotGiven = NOT_GIVEN,\\\\n    ) -> Assistant:\\\\n        try:\\\\n            return self.client.beta.assistants.create(\\\\n                name=name,\\\\n                model=model,\\\\n                instructions=instructions,\\\\n                description=description,\\\\n                tools=tools,\\\\n            )\\\\n        except Exception as e:\\\\n            raise Exception(f\"Error creating assistant (OpenAI): {e}\")\\\\n\\\\n    def _delete_assistant(self) -> None:\\\\n        try:\\\\n            self.client.beta.assistants.delete(self.assistant_id)\\\\n        except Exception as e:\\\\n            print(f\"Error deleting assistant (OpenAI): {e}\")\\\\n\\\\n    def _create_thread(self) -> Thread:\\\\n        return self.client.beta.threads.create()\\\\n\\\\n    def _delete_thread(self, thread_id: str) -> None:\\\\n        try:\\\\n            self.client.beta.threads.delete(thread_id)\\\\n        except Exception as e:\\\\n            print(f\"Error deleting thread (OpenAI): {e}\")\\\\n\\\\n    def _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\\\\n        \"\"\"\\\\n        Returns the prompt for the code snippet.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet.\\\\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\\\\n\\\\n        Returns:\\\\n            str: The formatted prompt.\\\\n\\\\n        Notes:\\\\n            - If custom_prompt is not provided, the default prompt will be used.\\\\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\\\\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\\\\n        \"\"\"\\\\n\\\\n        if not custom_prompt:\\\\n            return self.default_prompt.format(code=code)\\\\n\\\\n        else:\\\\n            if \"{code}\" in custom_prompt:\\\\n                return custom_prompt.format(code=code)\\\\n            else:\\\\n                return f\"{custom_prompt}\\\\\\\\n\\\\\\\\n{code}\"\\\\n\\\\n    def _add_message_to_thread(self, thread_id: str, message: str) -> None:\\\\n        try:\\\\n            self.client.beta.threads.messages.create(\\\\n                thread_id, content=message, role=\"user\"\\\\n            )\\\\n        except Exception as e:\\\\n            raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\\\\n\\\\n    def _run_thread(self, thread_id: str) -> Run:\\\\n        try:\\\\n            return self.client.beta.threads.runs.create(\\\\n                thread_id, assistant_id=self.assistant_id\\\\n            )\\\\n        except Exception as e:\\\\n            raise Exception(f\"Error running thread (OpenAI): {e}\")\\\\n\\\\n    def _get_response(self, thread_id: str, run_id: str) -> list[str]:\\\\n        run: Run = self._run_thread(thread_id)\\\\n\\\\n        while True:\\\\n            run_retrieval: Run = self.client.beta.threads.runs.retrieve(\\\\n                thread_id=thread_id, run_id=run.id\\\\n            )\\\\n            print(f\"Run status: {run_retrieval.status}\")\\\\n            if run_retrieval.status == \"completed\":\\\\n                break\\\\n            time.sleep(1)\\\\n\\\\n        messages: SyncCursorPage[\\\\n            ThreadMessage\\\\n        ] = self.client.beta.threads.messages.list(thread_id=thread_id)\\\\n        return [\\\\n            item.text.value\\\\n            for content in messages\\\\n            for item in content.content\\\\n            if type(item) == MessageContentText and content.role == \"assistant\"\\\\n        ]\\\\n\\\\n    def summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\\\\n        try:\\\\n            thread: Thread = self._create_thread()\\\\n            self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\\\\n            summary: list[str] = self._get_response(thread.id, code)\\\\n            self._delete_thread(thread.id)\\\\n            return summary\\\\n        except Exception as e:\\\\n            return f\"An error occurred while summarizing \\\\\\'{file_path}\\\\\\' (OpenAI): {e}\"\\\\n\\\\n    def print_assistants_list(self) -> None:\\\\n        print(f\"Assistants list: {self.client.beta.assistants.list()}\")\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\ndef __init__(\\\\\\\\n    self,\\\\\\\\n    assistant: Assistant | None = None,\\\\\\\\n) -> None:\\\\\\\\n    self.client = OpenAI()\\\\\\\\n    self.prompt_list: list[str] = summary_prompt_list\\\\\\\\n    self.default_prompt: str = self.prompt_list[0]\\\\\\\\n    self.assistant: Assistant = assistant if assistant else self._create_assistant()\\\\\\\\n    self.assistant_id: str = self.assistant.id\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _create_assistant(\\\\\\\\n    self,\\\\\\\\n    *,\\\\\\\\n    name: str = \"Python Code Summarizer\",\\\\\\\\n    model: str = \"gpt-4-1106-preview\",\\\\\\\\n    instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\\\\\\\\n    description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\\\\\\\\n    tools: list[Tool] | NotGiven = NOT_GIVEN,\\\\\\\\n) -> Assistant:\\\\\\\\n    try:\\\\\\\\n        return self.client.beta.assistants.create(\\\\\\\\n            name=name,\\\\\\\\n            model=model,\\\\\\\\n            instructions=instructions,\\\\\\\\n            description=description,\\\\\\\\n            tools=tools,\\\\\\\\n        )\\\\\\\\n    except Exception as e:\\\\\\\\n        raise Exception(f\"Error creating assistant (OpenAI): {e}\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _delete_assistant(self) -> None:\\\\\\\\n    try:\\\\\\\\n        self.client.beta.assistants.delete(self.assistant_id)\\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error deleting assistant (OpenAI): {e}\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _create_thread(self) -> Thread:\\\\\\\\n    return self.client.beta.threads.create()\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _delete_thread(self, thread_id: str) -> None:\\\\\\\\n    try:\\\\\\\\n        self.client.beta.threads.delete(thread_id)\\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error deleting thread (OpenAI): {e}\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\\\\\\\\n    \"\"\"\\\\\\\\n        Returns the prompt for the code snippet.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            code (str): The code snippet.\\\\\\\\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            str: The formatted prompt.\\\\\\\\n\\\\\\\\n        Notes:\\\\\\\\n            - If custom_prompt is not provided, the default prompt will be used.\\\\\\\\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\\\\\\\\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    if not custom_prompt:\\\\\\\\n        return self.default_prompt.format(code=code)\\\\\\\\n\\\\\\\\n    else:\\\\\\\\n        if \"{code}\" in custom_prompt:\\\\\\\\n            return custom_prompt.format(code=code)\\\\\\\\n        else:\\\\\\\\n            return f\"{custom_prompt}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n{code}\"\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _add_message_to_thread(self, thread_id: str, message: str) -> None:\\\\\\\\n    try:\\\\\\\\n        self.client.beta.threads.messages.create(\\\\\\\\n            thread_id, content=message, role=\"user\"\\\\\\\\n        )\\\\\\\\n    except Exception as e:\\\\\\\\n        raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _run_thread(self, thread_id: str) -> Run:\\\\\\\\n    try:\\\\\\\\n        return self.client.beta.threads.runs.create(\\\\\\\\n            thread_id, assistant_id=self.assistant_id\\\\\\\\n        )\\\\\\\\n    except Exception as e:\\\\\\\\n        raise Exception(f\"Error running thread (OpenAI): {e}\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _get_response(self, thread_id: str, run_id: str) -> list[str]:\\\\\\\\n    run: Run = self._run_thread(thread_id)\\\\\\\\n\\\\\\\\n    while True:\\\\\\\\n        run_retrieval: Run = self.client.beta.threads.runs.retrieve(\\\\\\\\n            thread_id=thread_id, run_id=run.id\\\\\\\\n        )\\\\\\\\n        print(f\"Run status: {run_retrieval.status}\")\\\\\\\\n        if run_retrieval.status == \"completed\":\\\\\\\\n            break\\\\\\\\n        time.sleep(1)\\\\\\\\n\\\\\\\\n    messages: SyncCursorPage[\\\\\\\\n        ThreadMessage\\\\\\\\n    ] = self.client.beta.threads.messages.list(thread_id=thread_id)\\\\\\\\n    return [\\\\\\\\n        item.text.value\\\\\\\\n        for content in messages\\\\\\\\n        for item in content.content\\\\\\\\n        if type(item) == MessageContentText and content.role == \"assistant\"\\\\\\\\n    ]\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\\\\\\\\n    try:\\\\\\\\n        thread: Thread = self._create_thread()\\\\\\\\n        self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\\\\\\\\n        summary: list[str] = self._get_response(thread.id, code)\\\\\\\\n        self._delete_thread(thread.id)\\\\\\\\n        return summary\\\\\\\\n    except Exception as e:\\\\\\\\n        return f\"An error occurred while summarizing \\\\\\\\\\\\\\'{file_path}\\\\\\\\\\\\\\' (OpenAI): {e}\"\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef print_assistants_list(self) -> None:\\\\\\\\n    print(f\"Assistants list: {self.client.beta.assistants.list()}\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport time\\\\nfrom openai import OpenAI\\\\nfrom openai.types.beta.assistant import Assistant\\\\nfrom openai.types.beta.thread import Thread\\\\nfrom openai.types.beta.threads.run import Run\\\\nfrom openai.types.beta.threads.thread_message import ThreadMessage, Content\\\\nfrom openai.types.beta.threads.thread_message import ThreadMessage, Content\\\\nfrom openai.types.beta.threads.message_content_text import MessageContentText\\\\nfrom openai.types.beta.assistant_create_params import Tool\\\\nfrom openai._types import NotGiven, NOT_GIVEN\\\\nfrom openai._types import NotGiven, NOT_GIVEN\\\\nfrom openai.pagination import SyncCursorPage\\\\nfrom postcode.ai_services.summarizer.prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, SUMMARIZER_DEFAULT_DESCRIPTION, summary_prompt_list\\\\nfrom postcode.ai_services.summarizer.prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, SUMMARIZER_DEFAULT_DESCRIPTION, summary_prompt_list\\\\nfrom postcode.ai_services.summarizer.prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, SUMMARIZER_DEFAULT_DESCRIPTION, summary_prompt_list\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport time\\nfrom openai import OpenAI\\nfrom openai.types.beta.assistant import Assistant\\nfrom openai.types.beta.thread import Thread\\nfrom openai.types.beta.threads.run import Run\\nfrom openai.types.beta.threads.thread_message import ThreadMessage, Content\\nfrom openai.types.beta.threads.message_content_text import MessageContentText\\nfrom openai.types.beta.assistant_create_params import Tool\\nfrom openai._types import NotGiven, NOT_GIVEN\\nfrom openai.pagination import SyncCursorPage\\nfrom temp import code_example\\nfrom postcode.ai_services.summarizer.prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, SUMMARIZER_DEFAULT_DESCRIPTION, summary_prompt_list\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "variable_assignments": [
                "summarizer = SummarizerAssistant()"
            ],
            "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__STANDALONE_BLOCK-1",
            "parent_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE",
            "block_type": "STANDALONE_BLOCK",
            "start_line_num": 142,
            "end_line_num": 157,
            "code_content": "# Instantiate Summarizer\nsummarizer = SummarizerAssistant()\n# Test Summarize Code\ntry:\n    summary_list: list[str] | str | None = summarizer.summarize_code(\n        code_example, \"test_code.py\"\n    )\n    if isinstance(summary_list, list):\n        for summary in summary_list:\n            print(summary)\nexcept Exception as e:\n    print(\"An error occurred:\", e)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant"
                },
                {
                    "import_names": [
                        {
                            "name": "Assistant",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.beta.assistant",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "code_example",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "temp",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:ai_services:summarizer:temp.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n# Instantiate Summarizer\\nsummarizer = SummarizerAssistant()\\n# Test Summarize Code\\ntry:\\n    summary_list: list[str] | str | None = summarizer.summarize_code(\\n        code_example, \"test_code.py\"\\n    )\\n    if isinstance(summary_list, list):\\n        for summary in summary_list:\\n            print(summary)\\nexcept Exception as e:\\n    print(\"An error occurred:\", e)\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom openai.types.beta.assistant import Assistant\\nfrom temp import code_example\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "class_name": "SummarizerAssistant",
            "decorators": null,
            "bases": null,
            "docstring": null,
            "attributes": null,
            "keywords": null,
            "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant",
            "parent_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 18,
            "end_line_num": 142,
            "code_content": "\n\nclass SummarizerAssistant:\n    def __init__(\n        self,\n        assistant: Assistant | None = None,\n    ) -> None:\n        self.client = OpenAI()\n        self.prompt_list: list[str] = summary_prompt_list\n        self.default_prompt: str = self.prompt_list[0]\n        self.assistant: Assistant = assistant if assistant else self._create_assistant()\n        self.assistant_id: str = self.assistant.id\n\n    def _create_assistant(\n        self,\n        *,\n        name: str = \"Python Code Summarizer\",\n        model: str = \"gpt-4-1106-preview\",\n        instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\n        description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\n        tools: list[Tool] | NotGiven = NOT_GIVEN,\n    ) -> Assistant:\n        try:\n            return self.client.beta.assistants.create(\n                name=name,\n                model=model,\n                instructions=instructions,\n                description=description,\n                tools=tools,\n            )\n        except Exception as e:\n            raise Exception(f\"Error creating assistant (OpenAI): {e}\")\n\n    def _delete_assistant(self) -> None:\n        try:\n            self.client.beta.assistants.delete(self.assistant_id)\n        except Exception as e:\n            print(f\"Error deleting assistant (OpenAI): {e}\")\n\n    def _create_thread(self) -> Thread:\n        return self.client.beta.threads.create()\n\n    def _delete_thread(self, thread_id: str) -> None:\n        try:\n            self.client.beta.threads.delete(thread_id)\n        except Exception as e:\n            print(f\"Error deleting thread (OpenAI): {e}\")\n\n    def _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\n        \"\"\"\n        Returns the prompt for the code snippet.\n\n        Args:\n            code (str): The code snippet.\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\n\n        Returns:\n            str: The formatted prompt.\n\n        Notes:\n            - If custom_prompt is not provided, the default prompt will be used.\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\n        \"\"\"\n\n        if not custom_prompt:\n            return self.default_prompt.format(code=code)\n\n        else:\n            if \"{code}\" in custom_prompt:\n                return custom_prompt.format(code=code)\n            else:\n                return f\"{custom_prompt}\\n\\n{code}\"\n\n    def _add_message_to_thread(self, thread_id: str, message: str) -> None:\n        try:\n            self.client.beta.threads.messages.create(\n                thread_id, content=message, role=\"user\"\n            )\n        except Exception as e:\n            raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\n\n    def _run_thread(self, thread_id: str) -> Run:\n        try:\n            return self.client.beta.threads.runs.create(\n                thread_id, assistant_id=self.assistant_id\n            )\n        except Exception as e:\n            raise Exception(f\"Error running thread (OpenAI): {e}\")\n\n    def _get_response(self, thread_id: str, run_id: str) -> list[str]:\n        run: Run = self._run_thread(thread_id)\n\n        while True:\n            run_retrieval: Run = self.client.beta.threads.runs.retrieve(\n                thread_id=thread_id, run_id=run.id\n            )\n            print(f\"Run status: {run_retrieval.status}\")\n            if run_retrieval.status == \"completed\":\n                break\n            time.sleep(1)\n\n        messages: SyncCursorPage[\n            ThreadMessage\n        ] = self.client.beta.threads.messages.list(thread_id=thread_id)\n        return [\n            item.text.value\n            for content in messages\n            for item in content.content\n            if type(item) == MessageContentText and content.role == \"assistant\"\n        ]\n\n    def summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\n        try:\n            thread: Thread = self._create_thread()\n            self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\n            summary: list[str] = self._get_response(thread.id, code)\n            self._delete_thread(thread.id)\n            return summary\n        except Exception as e:\n            return f\"An error occurred while summarizing '{file_path}' (OpenAI): {e}\"\n\n    def print_assistants_list(self) -> None:\n        print(f\"Assistants list: {self.client.beta.assistants.list()}\")\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "time",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "OpenAI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Assistant",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.beta.assistant",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Thread",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.beta.thread",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Run",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.beta.threads.run",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ThreadMessage",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Content",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.beta.threads.thread_message",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ThreadMessage",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Content",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.beta.threads.thread_message",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "MessageContentText",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.beta.threads.message_content_text",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Tool",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.beta.assistant_create_params",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "NotGiven",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "NOT_GIVEN",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai._types",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "NotGiven",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "NOT_GIVEN",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai._types",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "SyncCursorPage",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.pagination",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "SUMMARIZER_DEFAULT_DESCRIPTION",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "summary_prompt_list",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.ai_services.summarizer.prompts.summarization_prompts",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:ai_services:summarizer:prompts:summarization_prompts.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "SUMMARIZER_DEFAULT_DESCRIPTION",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "summary_prompt_list",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.ai_services.summarizer.prompts.summarization_prompts",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:ai_services:summarizer:prompts:summarization_prompts.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "SUMMARIZER_DEFAULT_DESCRIPTION",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "summary_prompt_list",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.ai_services.summarizer.prompts.summarization_prompts",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:ai_services:summarizer:prompts:summarization_prompts.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\nclass SummarizerAssistant:\\n    def __init__(\\n        self,\\n        assistant: Assistant | None = None,\\n    ) -> None:\\n        self.client = OpenAI()\\n        self.prompt_list: list[str] = summary_prompt_list\\n        self.default_prompt: str = self.prompt_list[0]\\n        self.assistant: Assistant = assistant if assistant else self._create_assistant()\\n        self.assistant_id: str = self.assistant.id\\n\\n    def _create_assistant(\\n        self,\\n        *,\\n        name: str = \"Python Code Summarizer\",\\n        model: str = \"gpt-4-1106-preview\",\\n        instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\\n        description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\\n        tools: list[Tool] | NotGiven = NOT_GIVEN,\\n    ) -> Assistant:\\n        try:\\n            return self.client.beta.assistants.create(\\n                name=name,\\n                model=model,\\n                instructions=instructions,\\n                description=description,\\n                tools=tools,\\n            )\\n        except Exception as e:\\n            raise Exception(f\"Error creating assistant (OpenAI): {e}\")\\n\\n    def _delete_assistant(self) -> None:\\n        try:\\n            self.client.beta.assistants.delete(self.assistant_id)\\n        except Exception as e:\\n            print(f\"Error deleting assistant (OpenAI): {e}\")\\n\\n    def _create_thread(self) -> Thread:\\n        return self.client.beta.threads.create()\\n\\n    def _delete_thread(self, thread_id: str) -> None:\\n        try:\\n            self.client.beta.threads.delete(thread_id)\\n        except Exception as e:\\n            print(f\"Error deleting thread (OpenAI): {e}\")\\n\\n    def _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\\n        \"\"\"\\n        Returns the prompt for the code snippet.\\n\\n        Args:\\n            code (str): The code snippet.\\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\\n\\n        Returns:\\n            str: The formatted prompt.\\n\\n        Notes:\\n            - If custom_prompt is not provided, the default prompt will be used.\\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\\n        \"\"\"\\n\\n        if not custom_prompt:\\n            return self.default_prompt.format(code=code)\\n\\n        else:\\n            if \"{code}\" in custom_prompt:\\n                return custom_prompt.format(code=code)\\n            else:\\n                return f\"{custom_prompt}\\\\n\\\\n{code}\"\\n\\n    def _add_message_to_thread(self, thread_id: str, message: str) -> None:\\n        try:\\n            self.client.beta.threads.messages.create(\\n                thread_id, content=message, role=\"user\"\\n            )\\n        except Exception as e:\\n            raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\\n\\n    def _run_thread(self, thread_id: str) -> Run:\\n        try:\\n            return self.client.beta.threads.runs.create(\\n                thread_id, assistant_id=self.assistant_id\\n            )\\n        except Exception as e:\\n            raise Exception(f\"Error running thread (OpenAI): {e}\")\\n\\n    def _get_response(self, thread_id: str, run_id: str) -> list[str]:\\n        run: Run = self._run_thread(thread_id)\\n\\n        while True:\\n            run_retrieval: Run = self.client.beta.threads.runs.retrieve(\\n                thread_id=thread_id, run_id=run.id\\n            )\\n            print(f\"Run status: {run_retrieval.status}\")\\n            if run_retrieval.status == \"completed\":\\n                break\\n            time.sleep(1)\\n\\n        messages: SyncCursorPage[\\n            ThreadMessage\\n        ] = self.client.beta.threads.messages.list(thread_id=thread_id)\\n        return [\\n            item.text.value\\n            for content in messages\\n            for item in content.content\\n            if type(item) == MessageContentText and content.role == \"assistant\"\\n        ]\\n\\n    def summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\\n        try:\\n            thread: Thread = self._create_thread()\\n            self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\\n            summary: list[str] = self._get_response(thread.id, code)\\n            self._delete_thread(thread.id)\\n            return summary\\n        except Exception as e:\\n            return f\"An error occurred while summarizing \\'{file_path}\\' (OpenAI): {e}\"\\n\\n    def print_assistants_list(self) -> None:\\n        print(f\"Assistants list: {self.client.beta.assistants.list()}\")\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\ndef __init__(\\\\n    self,\\\\n    assistant: Assistant | None = None,\\\\n) -> None:\\\\n    self.client = OpenAI()\\\\n    self.prompt_list: list[str] = summary_prompt_list\\\\n    self.default_prompt: str = self.prompt_list[0]\\\\n    self.assistant: Assistant = assistant if assistant else self._create_assistant()\\\\n    self.assistant_id: str = self.assistant.id\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _create_assistant(\\\\n    self,\\\\n    *,\\\\n    name: str = \"Python Code Summarizer\",\\\\n    model: str = \"gpt-4-1106-preview\",\\\\n    instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\\\\n    description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\\\\n    tools: list[Tool] | NotGiven = NOT_GIVEN,\\\\n) -> Assistant:\\\\n    try:\\\\n        return self.client.beta.assistants.create(\\\\n            name=name,\\\\n            model=model,\\\\n            instructions=instructions,\\\\n            description=description,\\\\n            tools=tools,\\\\n        )\\\\n    except Exception as e:\\\\n        raise Exception(f\"Error creating assistant (OpenAI): {e}\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _delete_assistant(self) -> None:\\\\n    try:\\\\n        self.client.beta.assistants.delete(self.assistant_id)\\\\n    except Exception as e:\\\\n        print(f\"Error deleting assistant (OpenAI): {e}\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _create_thread(self) -> Thread:\\\\n    return self.client.beta.threads.create()\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _delete_thread(self, thread_id: str) -> None:\\\\n    try:\\\\n        self.client.beta.threads.delete(thread_id)\\\\n    except Exception as e:\\\\n        print(f\"Error deleting thread (OpenAI): {e}\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\\\\n    \"\"\"\\\\n        Returns the prompt for the code snippet.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet.\\\\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\\\\n\\\\n        Returns:\\\\n            str: The formatted prompt.\\\\n\\\\n        Notes:\\\\n            - If custom_prompt is not provided, the default prompt will be used.\\\\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\\\\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\\\\n        \"\"\"\\\\n\\\\n    if not custom_prompt:\\\\n        return self.default_prompt.format(code=code)\\\\n\\\\n    else:\\\\n        if \"{code}\" in custom_prompt:\\\\n            return custom_prompt.format(code=code)\\\\n        else:\\\\n            return f\"{custom_prompt}\\\\\\\\n\\\\\\\\n{code}\"\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _add_message_to_thread(self, thread_id: str, message: str) -> None:\\\\n    try:\\\\n        self.client.beta.threads.messages.create(\\\\n            thread_id, content=message, role=\"user\"\\\\n        )\\\\n    except Exception as e:\\\\n        raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _run_thread(self, thread_id: str) -> Run:\\\\n    try:\\\\n        return self.client.beta.threads.runs.create(\\\\n            thread_id, assistant_id=self.assistant_id\\\\n        )\\\\n    except Exception as e:\\\\n        raise Exception(f\"Error running thread (OpenAI): {e}\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _get_response(self, thread_id: str, run_id: str) -> list[str]:\\\\n    run: Run = self._run_thread(thread_id)\\\\n\\\\n    while True:\\\\n        run_retrieval: Run = self.client.beta.threads.runs.retrieve(\\\\n            thread_id=thread_id, run_id=run.id\\\\n        )\\\\n        print(f\"Run status: {run_retrieval.status}\")\\\\n        if run_retrieval.status == \"completed\":\\\\n            break\\\\n        time.sleep(1)\\\\n\\\\n    messages: SyncCursorPage[\\\\n        ThreadMessage\\\\n    ] = self.client.beta.threads.messages.list(thread_id=thread_id)\\\\n    return [\\\\n        item.text.value\\\\n        for content in messages\\\\n        for item in content.content\\\\n        if type(item) == MessageContentText and content.role == \"assistant\"\\\\n    ]\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\\\\n    try:\\\\n        thread: Thread = self._create_thread()\\\\n        self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\\\\n        summary: list[str] = self._get_response(thread.id, code)\\\\n        self._delete_thread(thread.id)\\\\n        return summary\\\\n    except Exception as e:\\\\n        return f\"An error occurred while summarizing \\\\\\'{file_path}\\\\\\' (OpenAI): {e}\"\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef print_assistants_list(self) -> None:\\\\n    print(f\"Assistants list: {self.client.beta.assistants.list()}\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport time\\nfrom openai import OpenAI\\nfrom openai.types.beta.assistant import Assistant\\nfrom openai.types.beta.thread import Thread\\nfrom openai.types.beta.threads.run import Run\\nfrom openai.types.beta.threads.thread_message import ThreadMessage, Content\\nfrom openai.types.beta.threads.thread_message import ThreadMessage, Content\\nfrom openai.types.beta.threads.message_content_text import MessageContentText\\nfrom openai.types.beta.assistant_create_params import Tool\\nfrom openai._types import NotGiven, NOT_GIVEN\\nfrom openai._types import NotGiven, NOT_GIVEN\\nfrom openai.pagination import SyncCursorPage\\nfrom postcode.ai_services.summarizer.prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, SUMMARIZER_DEFAULT_DESCRIPTION, summary_prompt_list\\nfrom postcode.ai_services.summarizer.prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, SUMMARIZER_DEFAULT_DESCRIPTION, summary_prompt_list\\nfrom postcode.ai_services.summarizer.prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, SUMMARIZER_DEFAULT_DESCRIPTION, summary_prompt_list\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant__*__FUNCTION-__init__",
                    "parent_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant",
                    "block_type": "FUNCTION",
                    "start_line_num": 21,
                    "end_line_num": 30,
                    "code_content": "def __init__(\n    self,\n    assistant: Assistant | None = None,\n) -> None:\n    self.client = OpenAI()\n    self.prompt_list: list[str] = summary_prompt_list\n    self.default_prompt: str = self.prompt_list[0]\n    self.assistant: Assistant = assistant if assistant else self._create_assistant()\n    self.assistant_id: str = self.assistant.id\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\ndef __init__(\\n    self,\\n    assistant: Assistant | None = None,\\n) -> None:\\n    self.client = OpenAI()\\n    self.prompt_list: list[str] = summary_prompt_list\\n    self.default_prompt: str = self.prompt_list[0]\\n    self.assistant: Assistant = assistant if assistant else self._create_assistant()\\n    self.assistant_id: str = self.assistant.id\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_create_assistant",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "Assistant",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant__*__FUNCTION-_create_assistant",
                    "parent_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant",
                    "block_type": "FUNCTION",
                    "start_line_num": 30,
                    "end_line_num": 50,
                    "code_content": "\ndef _create_assistant(\n    self,\n    *,\n    name: str = \"Python Code Summarizer\",\n    model: str = \"gpt-4-1106-preview\",\n    instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\n    description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\n    tools: list[Tool] | NotGiven = NOT_GIVEN,\n) -> Assistant:\n    try:\n        return self.client.beta.assistants.create(\n            name=name,\n            model=model,\n            instructions=instructions,\n            description=description,\n            tools=tools,\n        )\n    except Exception as e:\n        raise Exception(f\"Error creating assistant (OpenAI): {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _create_assistant(\\n    self,\\n    *,\\n    name: str = \"Python Code Summarizer\",\\n    model: str = \"gpt-4-1106-preview\",\\n    instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\\n    description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\\n    tools: list[Tool] | NotGiven = NOT_GIVEN,\\n) -> Assistant:\\n    try:\\n        return self.client.beta.assistants.create(\\n            name=name,\\n            model=model,\\n            instructions=instructions,\\n            description=description,\\n            tools=tools,\\n        )\\n    except Exception as e:\\n        raise Exception(f\"Error creating assistant (OpenAI): {e}\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_delete_assistant",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant__*__FUNCTION-_delete_assistant",
                    "parent_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant",
                    "block_type": "FUNCTION",
                    "start_line_num": 50,
                    "end_line_num": 56,
                    "code_content": "\ndef _delete_assistant(self) -> None:\n    try:\n        self.client.beta.assistants.delete(self.assistant_id)\n    except Exception as e:\n        print(f\"Error deleting assistant (OpenAI): {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _delete_assistant(self) -> None:\\n    try:\\n        self.client.beta.assistants.delete(self.assistant_id)\\n    except Exception as e:\\n        print(f\"Error deleting assistant (OpenAI): {e}\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_create_thread",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "Thread",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant__*__FUNCTION-_create_thread",
                    "parent_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant",
                    "block_type": "FUNCTION",
                    "start_line_num": 56,
                    "end_line_num": 59,
                    "code_content": "\ndef _create_thread(self) -> Thread:\n    return self.client.beta.threads.create()\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _create_thread(self) -> Thread:\\n    return self.client.beta.threads.create()\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_delete_thread",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant__*__FUNCTION-_delete_thread",
                    "parent_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant",
                    "block_type": "FUNCTION",
                    "start_line_num": 59,
                    "end_line_num": 65,
                    "code_content": "\ndef _delete_thread(self, thread_id: str) -> None:\n    try:\n        self.client.beta.threads.delete(thread_id)\n    except Exception as e:\n        print(f\"Error deleting thread (OpenAI): {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _delete_thread(self, thread_id: str) -> None:\\n    try:\\n        self.client.beta.threads.delete(thread_id)\\n    except Exception as e:\\n        print(f\"Error deleting thread (OpenAI): {e}\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_interpolate_prompt",
                    "docstring": "Returns the prompt for the code snippet.\n\nArgs:\n    code (str): The code snippet.\n    custom_prompt (str | None): Custom prompt to be used. Defaults to None.\n\nReturns:\n    str: The formatted prompt.\n\nNotes:\n    - If custom_prompt is not provided, the default prompt will be used.\n    - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\n    - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant__*__FUNCTION-_interpolate_prompt",
                    "parent_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant",
                    "block_type": "FUNCTION",
                    "start_line_num": 65,
                    "end_line_num": 91,
                    "code_content": "\ndef _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\n    \"\"\"\n        Returns the prompt for the code snippet.\n\n        Args:\n            code (str): The code snippet.\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\n\n        Returns:\n            str: The formatted prompt.\n\n        Notes:\n            - If custom_prompt is not provided, the default prompt will be used.\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\n        \"\"\"\n\n    if not custom_prompt:\n        return self.default_prompt.format(code=code)\n\n    else:\n        if \"{code}\" in custom_prompt:\n            return custom_prompt.format(code=code)\n        else:\n            return f\"{custom_prompt}\\n\\n{code}\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\\n    \"\"\"\\n        Returns the prompt for the code snippet.\\n\\n        Args:\\n            code (str): The code snippet.\\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\\n\\n        Returns:\\n            str: The formatted prompt.\\n\\n        Notes:\\n            - If custom_prompt is not provided, the default prompt will be used.\\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\\n        \"\"\"\\n\\n    if not custom_prompt:\\n        return self.default_prompt.format(code=code)\\n\\n    else:\\n        if \"{code}\" in custom_prompt:\\n            return custom_prompt.format(code=code)\\n        else:\\n            return f\"{custom_prompt}\\\\n\\\\n{code}\"\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_add_message_to_thread",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant__*__FUNCTION-_add_message_to_thread",
                    "parent_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant",
                    "block_type": "FUNCTION",
                    "start_line_num": 91,
                    "end_line_num": 99,
                    "code_content": "\ndef _add_message_to_thread(self, thread_id: str, message: str) -> None:\n    try:\n        self.client.beta.threads.messages.create(\n            thread_id, content=message, role=\"user\"\n        )\n    except Exception as e:\n        raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _add_message_to_thread(self, thread_id: str, message: str) -> None:\\n    try:\\n        self.client.beta.threads.messages.create(\\n            thread_id, content=message, role=\"user\"\\n        )\\n    except Exception as e:\\n        raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_run_thread",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "Run",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant__*__FUNCTION-_run_thread",
                    "parent_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant",
                    "block_type": "FUNCTION",
                    "start_line_num": 99,
                    "end_line_num": 107,
                    "code_content": "\ndef _run_thread(self, thread_id: str) -> Run:\n    try:\n        return self.client.beta.threads.runs.create(\n            thread_id, assistant_id=self.assistant_id\n        )\n    except Exception as e:\n        raise Exception(f\"Error running thread (OpenAI): {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _run_thread(self, thread_id: str) -> Run:\\n    try:\\n        return self.client.beta.threads.runs.create(\\n            thread_id, assistant_id=self.assistant_id\\n        )\\n    except Exception as e:\\n        raise Exception(f\"Error running thread (OpenAI): {e}\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_get_response",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "list[str]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant__*__FUNCTION-_get_response",
                    "parent_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant",
                    "block_type": "FUNCTION",
                    "start_line_num": 107,
                    "end_line_num": 129,
                    "code_content": "\ndef _get_response(self, thread_id: str, run_id: str) -> list[str]:\n    run: Run = self._run_thread(thread_id)\n\n    while True:\n        run_retrieval: Run = self.client.beta.threads.runs.retrieve(\n            thread_id=thread_id, run_id=run.id\n        )\n        print(f\"Run status: {run_retrieval.status}\")\n        if run_retrieval.status == \"completed\":\n            break\n        time.sleep(1)\n\n    messages: SyncCursorPage[\n        ThreadMessage\n    ] = self.client.beta.threads.messages.list(thread_id=thread_id)\n    return [\n        item.text.value\n        for content in messages\n        for item in content.content\n        if type(item) == MessageContentText and content.role == \"assistant\"\n    ]\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _get_response(self, thread_id: str, run_id: str) -> list[str]:\\n    run: Run = self._run_thread(thread_id)\\n\\n    while True:\\n        run_retrieval: Run = self.client.beta.threads.runs.retrieve(\\n            thread_id=thread_id, run_id=run.id\\n        )\\n        print(f\"Run status: {run_retrieval.status}\")\\n        if run_retrieval.status == \"completed\":\\n            break\\n        time.sleep(1)\\n\\n    messages: SyncCursorPage[\\n        ThreadMessage\\n    ] = self.client.beta.threads.messages.list(thread_id=thread_id)\\n    return [\\n        item.text.value\\n        for content in messages\\n        for item in content.content\\n        if type(item) == MessageContentText and content.role == \"assistant\"\\n    ]\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "summarize_code",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "list[str] | str | None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant__*__FUNCTION-summarize_code",
                    "parent_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant",
                    "block_type": "FUNCTION",
                    "start_line_num": 129,
                    "end_line_num": 139,
                    "code_content": "\ndef summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\n    try:\n        thread: Thread = self._create_thread()\n        self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\n        summary: list[str] = self._get_response(thread.id, code)\n        self._delete_thread(thread.id)\n        return summary\n    except Exception as e:\n        return f\"An error occurred while summarizing '{file_path}' (OpenAI): {e}\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\\n    try:\\n        thread: Thread = self._create_thread()\\n        self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\\n        summary: list[str] = self._get_response(thread.id, code)\\n        self._delete_thread(thread.id)\\n        return summary\\n    except Exception as e:\\n        return f\"An error occurred while summarizing \\'{file_path}\\' (OpenAI): {e}\"\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "print_assistants_list",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant__*__FUNCTION-print_assistants_list",
                    "parent_id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE__*__CLASS-SummarizerAssistant",
                    "block_type": "FUNCTION",
                    "start_line_num": 139,
                    "end_line_num": 142,
                    "code_content": "\ndef print_assistants_list(self) -> None:\n    print(f\"Assistants list: {self.client.beta.assistants.list()}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef print_assistants_list(self) -> None:\\n    print(f\"Assistants list: {self.client.beta.assistants.list()}\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        }
    ]
}