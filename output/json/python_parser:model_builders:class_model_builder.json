{
    "file_path": "./python_parser/model_builders/class_model_builder.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "annotations",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "__future__",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "TYPE_CHECKING",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Any",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "logging_decorator",
                    "as_name": null,
                    "local_block_id": ".:python_parser:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator"
                }
            ],
            "imported_from": "utilities.logger.decorators",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:utilities:logger:decorators.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BaseModelBuilder",
                    "as_name": null,
                    "local_block_id": ".:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder"
                }
            ],
            "imported_from": "model_builders.base_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:model_builders:base_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ClassSpecificAttributes",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes"
                },
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-ClassModel"
                }
            ],
            "imported_from": "models.models",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                }
            ],
            "imported_from": "models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:models:enums.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "DecoratorModel",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-DecoratorModel"
                },
                {
                    "name": "ClassKeywordModel",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-ClassKeywordModel"
                }
            ],
            "imported_from": "models.models",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:models:models.py__*__MODULE"
        }
    ],
    "id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 91,
    "code_content": "from __future__ import annotations\nfrom typing import TYPE_CHECKING, Any\nfrom utilities.logger.decorators import logging_decorator\n\nfrom model_builders.base_model_builder import BaseModelBuilder\nfrom models.models import ClassSpecificAttributes, ClassModel\nfrom models.enums import BlockType\n\n\nif TYPE_CHECKING:\n    from models.models import (\n        ClassKeywordModel,\n        DecoratorModel,\n    )\n\n\nclass ClassModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a Python class.\n\n    This class extends BaseModelBuilder and is specialized for building a model of a Python class, capturing details such as decorators, base classes, documentation strings, class attributes, and class-specific keywords.\n\n    Attributes:\n        class_attributes (ClassSpecificAttributes): An instance containing attributes specific to a class, like name, decorators, bases, etc.\n\n    Args:\n        id (str): The unique identifier for the class model.\n        class_name (str): The name of the class.\n        parent_id (str): The identifier of the parent model (e.g., module or class containing this class).\n    \"\"\"\n\n    def __init__(self, id: str, class_name: str, parent_id: str) -> None:\n        super().__init__(id=id, block_type=BlockType.CLASS, parent_id=parent_id)\n\n        self.class_attributes = ClassSpecificAttributes(\n            class_name=class_name,\n            decorators=None,\n            bases=None,\n            docstring=None,\n            attributes=None,\n            keywords=None,\n        )\n\n    def set_decorators(\n        self, decorators: list[DecoratorModel] | None\n    ) -> \"ClassModelBuilder\":\n        \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\n        if decorators:\n            self.class_attributes.decorators = decorators\n        else:\n            self.class_attributes.decorators = None\n        return self\n\n    def set_bases(self, base_classes: list[str] | None) -> \"ClassModelBuilder\":\n        \"\"\"Sets the list of base classes to the class model.\"\"\"\n        self.class_attributes.bases = base_classes\n        return self\n\n    def set_docstring(self, docstring: str | None) -> \"ClassModelBuilder\":\n        \"\"\"Sets the docstring of the class in the model.\"\"\"\n        self.class_attributes.docstring = docstring\n        return self\n\n    # TODO: Add attribute model\n    def add_attribute(self, attribute) -> \"ClassModelBuilder\":\n        \"\"\"Adds an attribute of the class in the model.\"\"\"\n        if not self.class_attributes.attributes:\n            self.class_attributes.attributes = []\n        self.class_attributes.attributes.append(attribute)\n        return self\n\n    def set_keywords(\n        self, keyword_list: list[ClassKeywordModel] | None\n    ) -> \"ClassModelBuilder\":\n        \"\"\"Sets the list of keywords to the class model.\"\"\"\n        self.class_attributes.keywords = keyword_list\n        return self\n\n    def _get_class_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Gets the class specific attributes.\"\"\"\n        return self.class_attributes.model_dump()\n\n    @logging_decorator(message=\"Building ClassModel\")\n    def build(self) -> ClassModel:\n        \"\"\"Creates a ClassModel instance after building and setting the children models.\"\"\"\n        self.build_and_set_children()\n        return ClassModel(\n            **self._get_common_attributes(),\n            **self._get_class_specific_attributes(),\n        )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": null,
    "children": [
        {
            "variable_assignments": [],
            "id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__STANDALONE_BLOCK-1",
            "parent_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE",
            "block_type": "STANDALONE_BLOCK",
            "start_line_num": 8,
            "end_line_num": 15,
            "code_content": "if TYPE_CHECKING:\n    from models.models import (\n        ClassKeywordModel,\n        DecoratorModel,\n    )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "ClassKeywordModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ClassKeywordModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "TYPE_CHECKING",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Any",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                }
            ],
            "summary": null,
            "children": null
        },
        {
            "class_name": "ClassModelBuilder",
            "decorators": null,
            "bases": [
                "BaseModelBuilder"
            ],
            "docstring": "A builder class for constructing a model of a Python class.\n\nThis class extends BaseModelBuilder and is specialized for building a model of a Python class, capturing details such as decorators, base classes, documentation strings, class attributes, and class-specific keywords.\n\nAttributes:\n    class_attributes (ClassSpecificAttributes): An instance containing attributes specific to a class, like name, decorators, bases, etc.\n\nArgs:\n    id (str): The unique identifier for the class model.\n    class_name (str): The name of the class.\n    parent_id (str): The identifier of the parent model (e.g., module or class containing this class).",
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder",
            "parent_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 15,
            "end_line_num": 91,
            "code_content": "\n\nclass ClassModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a Python class.\n\n    This class extends BaseModelBuilder and is specialized for building a model of a Python class, capturing details such as decorators, base classes, documentation strings, class attributes, and class-specific keywords.\n\n    Attributes:\n        class_attributes (ClassSpecificAttributes): An instance containing attributes specific to a class, like name, decorators, bases, etc.\n\n    Args:\n        id (str): The unique identifier for the class model.\n        class_name (str): The name of the class.\n        parent_id (str): The identifier of the parent model (e.g., module or class containing this class).\n    \"\"\"\n\n    def __init__(self, id: str, class_name: str, parent_id: str) -> None:\n        super().__init__(id=id, block_type=BlockType.CLASS, parent_id=parent_id)\n\n        self.class_attributes = ClassSpecificAttributes(\n            class_name=class_name,\n            decorators=None,\n            bases=None,\n            docstring=None,\n            attributes=None,\n            keywords=None,\n        )\n\n    def set_decorators(\n        self, decorators: list[DecoratorModel] | None\n    ) -> \"ClassModelBuilder\":\n        \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\n        if decorators:\n            self.class_attributes.decorators = decorators\n        else:\n            self.class_attributes.decorators = None\n        return self\n\n    def set_bases(self, base_classes: list[str] | None) -> \"ClassModelBuilder\":\n        \"\"\"Sets the list of base classes to the class model.\"\"\"\n        self.class_attributes.bases = base_classes\n        return self\n\n    def set_docstring(self, docstring: str | None) -> \"ClassModelBuilder\":\n        \"\"\"Sets the docstring of the class in the model.\"\"\"\n        self.class_attributes.docstring = docstring\n        return self\n\n    # TODO: Add attribute model\n    def add_attribute(self, attribute) -> \"ClassModelBuilder\":\n        \"\"\"Adds an attribute of the class in the model.\"\"\"\n        if not self.class_attributes.attributes:\n            self.class_attributes.attributes = []\n        self.class_attributes.attributes.append(attribute)\n        return self\n\n    def set_keywords(\n        self, keyword_list: list[ClassKeywordModel] | None\n    ) -> \"ClassModelBuilder\":\n        \"\"\"Sets the list of keywords to the class model.\"\"\"\n        self.class_attributes.keywords = keyword_list\n        return self\n\n    def _get_class_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Gets the class specific attributes.\"\"\"\n        return self.class_attributes.model_dump()\n\n    @logging_decorator(message=\"Building ClassModel\")\n    def build(self) -> ClassModel:\n        \"\"\"Creates a ClassModel instance after building and setting the children models.\"\"\"\n        self.build_and_set_children()\n        return ClassModel(\n            **self._get_common_attributes(),\n            **self._get_class_specific_attributes(),\n        )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "ClassKeywordModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ClassKeywordModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "TYPE_CHECKING",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Any",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "logging_decorator",
                            "as_name": null,
                            "local_block_id": ".:python_parser:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator"
                        }
                    ],
                    "imported_from": "utilities.logger.decorators",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:utilities:logger:decorators.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "BaseModelBuilder",
                            "as_name": null,
                            "local_block_id": ".:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder"
                        }
                    ],
                    "imported_from": "model_builders.base_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:model_builders:base_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ClassSpecificAttributes",
                            "as_name": null,
                            "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes"
                        },
                        {
                            "name": "ClassModel",
                            "as_name": null,
                            "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-ClassModel"
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:models:models.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ClassSpecificAttributes",
                            "as_name": null,
                            "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes"
                        },
                        {
                            "name": "ClassModel",
                            "as_name": null,
                            "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-ClassModel"
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:models:models.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "BlockType",
                            "as_name": null,
                            "local_block_id": ".:python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                        }
                    ],
                    "imported_from": "models.enums",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:models:enums.py__*__MODULE"
                }
            ],
            "summary": null,
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-__init__",
                    "parent_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 31,
                    "end_line_num": 43,
                    "code_content": "\ndef __init__(self, id: str, class_name: str, parent_id: str) -> None:\n    super().__init__(id=id, block_type=BlockType.CLASS, parent_id=parent_id)\n\n    self.class_attributes = ClassSpecificAttributes(\n        class_name=class_name,\n        decorators=None,\n        bases=None,\n        docstring=None,\n        attributes=None,\n        keywords=None,\n    )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "set_decorators",
                    "docstring": "Adds decorator to the decorators list in the class model.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "No return annotation",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-set_decorators",
                    "parent_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 43,
                    "end_line_num": 53,
                    "code_content": "\ndef set_decorators(\n    self, decorators: list[DecoratorModel] | None\n) -> \"ClassModelBuilder\":\n    \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\n    if decorators:\n        self.class_attributes.decorators = decorators\n    else:\n        self.class_attributes.decorators = None\n    return self\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "set_bases",
                    "docstring": "Sets the list of base classes to the class model.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "No return annotation",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-set_bases",
                    "parent_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 53,
                    "end_line_num": 58,
                    "code_content": "\ndef set_bases(self, base_classes: list[str] | None) -> \"ClassModelBuilder\":\n    \"\"\"Sets the list of base classes to the class model.\"\"\"\n    self.class_attributes.bases = base_classes\n    return self\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "set_docstring",
                    "docstring": "Sets the docstring of the class in the model.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "No return annotation",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-set_docstring",
                    "parent_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 58,
                    "end_line_num": 63,
                    "code_content": "\ndef set_docstring(self, docstring: str | None) -> \"ClassModelBuilder\":\n    \"\"\"Sets the docstring of the class in the model.\"\"\"\n    self.class_attributes.docstring = docstring\n    return self\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "add_attribute",
                    "docstring": "Adds an attribute of the class in the model.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "No return annotation",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-add_attribute",
                    "parent_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 63,
                    "end_line_num": 71,
                    "code_content": "\n# TODO: Add attribute model\ndef add_attribute(self, attribute) -> \"ClassModelBuilder\":\n    \"\"\"Adds an attribute of the class in the model.\"\"\"\n    if not self.class_attributes.attributes:\n        self.class_attributes.attributes = []\n    self.class_attributes.attributes.append(attribute)\n    return self\n",
                    "important_comments": [
                        {
                            "content": "# TODO: Add attribute model",
                            "comment_types": [
                                "TODO"
                            ]
                        }
                    ],
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "set_keywords",
                    "docstring": "Sets the list of keywords to the class model.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "No return annotation",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-set_keywords",
                    "parent_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 71,
                    "end_line_num": 78,
                    "code_content": "\ndef set_keywords(\n    self, keyword_list: list[ClassKeywordModel] | None\n) -> \"ClassModelBuilder\":\n    \"\"\"Sets the list of keywords to the class model.\"\"\"\n    self.class_attributes.keywords = keyword_list\n    return self\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "_get_class_specific_attributes",
                    "docstring": "Gets the class specific attributes.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "dict[str, Any]",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-_get_class_specific_attributes",
                    "parent_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 78,
                    "end_line_num": 82,
                    "code_content": "\ndef _get_class_specific_attributes(self) -> dict[str, Any]:\n    \"\"\"Gets the class specific attributes.\"\"\"\n    return self.class_attributes.model_dump()\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "build",
                    "docstring": "Creates a ClassModel instance after building and setting the children models.",
                    "decorators": [
                        {
                            "content": "@logging_decorator(message=\"Building ClassModel\")",
                            "decorator_name": "logging_decorator",
                            "decorator_args": [
                                "message=\"Building ClassModel\""
                            ]
                        }
                    ],
                    "parameters": null,
                    "returns": "ClassModel",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-build",
                    "parent_id": ".:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 82,
                    "end_line_num": 91,
                    "code_content": "\n@logging_decorator(message=\"Building ClassModel\")\ndef build(self) -> ClassModel:\n    \"\"\"Creates a ClassModel instance after building and setting the children models.\"\"\"\n    self.build_and_set_children()\n    return ClassModel(\n        **self._get_common_attributes(),\n        **self._get_class_specific_attributes(),\n    )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                }
            ]
        }
    ]
}