{
    "file_path": "./python_parser/visitors/node_processing/function_def_functions.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Sequence",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": null,
                    "local_block_id": ".:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                }
            ],
            "imported_from": "models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:models:enums.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "DecoratorModel",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-DecoratorModel"
                },
                {
                    "name": "ParameterModel",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-ParameterModel"
                },
                {
                    "name": "ParameterListModel",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-ParameterListModel"
                }
            ],
            "imported_from": "models.models",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "extract_code_content",
                    "as_name": null,
                    "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_code_content"
                },
                {
                    "name": "extract_stripped_code_content",
                    "as_name": null,
                    "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_stripped_code_content"
                },
                {
                    "name": "extract_decorators",
                    "as_name": null,
                    "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_decorators"
                },
                {
                    "name": "extract_type_annotation",
                    "as_name": null,
                    "local_block_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_type_annotation"
                }
            ],
            "imported_from": "visitors.node_processing.common_functions",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "PositionData",
                    "as_name": null,
                    "local_block_id": ".:python_parser:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData"
                }
            ],
            "imported_from": "utilities.processing_context",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:utilities:processing_context.py__*__MODULE"
        }
    ],
    "id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 155,
    "code_content": "from typing import Sequence\n\nimport libcst\n\nfrom model_builders.function_model_builder import FunctionModelBuilder\n\nfrom models.enums import BlockType\nfrom models.models import DecoratorModel, ParameterListModel, ParameterModel\nfrom visitors.node_processing.common_functions import (\n    extract_code_content,\n    extract_decorators,\n    extract_stripped_code_content,\n    extract_type_annotation,\n)\n\nfrom utilities.processing_context import PositionData\n\n\ndef process_func_def(\n    func_id: str,\n    node: libcst.FunctionDef,\n    position_data: PositionData,\n    func_builder: FunctionModelBuilder,\n) -> None:\n    \"\"\"\n    Processes a libcst.FunctionDef node to build a function model.\n\n    Extracts various components of a function definition such as its docstring, code content, decorators, and return annotations, and updates the provided FunctionModelBuilder with these details.\n\n    Args:\n        func_id (str): The unique identifier for the function.\n        node (libcst.FunctionDef): The function definition node from the CST.\n        position_data (PositionData): Positional data for the function in the source code.\n        func_builder (FunctionModelBuilder): The builder used to construct the function model.\n\n    Example:\n        >>> func_builder = FunctionModelBuilder(id=\"func1\", ...)\n        >>> process_func_def(\"func1\", function_node, position_data, func_builder)\n        # Processes the function definition and updates the function builder.\n    \"\"\"\n\n    docstring: str | None = node.get_docstring()\n    code_content: str = extract_code_content(node)\n    decorators: list[DecoratorModel] | None = extract_decorators(node.decorators)\n\n    returns: str = (\n        _extract_return_annotation(node.returns)\n        if node.returns\n        else \"Function has no return annotation\"\n    )\n    (\n        func_builder.set_docstring(docstring)\n        .set_code_content(code_content)\n        .set_start_line_num(position_data.start)\n        .set_end_line_num(position_data.end)\n    )\n    (\n        func_builder.set_decorators(decorators)\n        .set_is_method(_func_is_method(func_id))\n        .set_is_async(_func_is_async(node))\n        .set_return_annotation(returns)\n    )\n\n\ndef process_parameters(\n    node: libcst.Parameters,\n) -> ParameterListModel | None:\n    \"\"\"\n    Processes libcst.Parameters node to create a ParameterListModel.\n\n    Extracts parameters, keyword-only parameters, positional-only parameters, and special arguments (like *args and **kwargs) from the function definition and forms a model representing these parameters.\n\n    Args:\n        node (libcst.Parameters): The parameters node from a function definition.\n\n    Returns:\n        ParameterListModel | None: A model representing the function's parameters, or None if there are no parameters.\n\n    Example:\n        >>> parameters_model = process_parameters(function_node.params)\n        # Processes the function parameters and returns a parameter model.\n    \"\"\"\n\n    params: list[ParameterModel] | None = (\n        _get_parameters_list(node.params) if node.params else []\n    )\n    kwonly_params: list[ParameterModel] | None = (\n        _get_parameters_list(node.kwonly_params) if node.kwonly_params else []\n    )\n    posonly_params: list[ParameterModel] | None = (\n        _get_parameters_list(node.posonly_params) if node.posonly_params else []\n    )\n\n    star_arg: ParameterModel | None = (\n        ParameterModel(content=extract_stripped_code_content(node.star_arg))\n        if node.star_arg and isinstance(node.star_arg, libcst.Param)\n        else None\n    )\n    star_kwarg: ParameterModel | None = (\n        ParameterModel(content=extract_stripped_code_content(node.star_kwarg))\n        if node.star_kwarg\n        else None\n    )\n\n    if params and kwonly_params and posonly_params and star_arg and star_kwarg:\n        return ParameterListModel(\n            params=params,\n            kwonly_params=kwonly_params,\n            posonly_params=posonly_params,\n            star_arg=star_arg,\n            star_kwarg=star_kwarg,\n        )\n\n\ndef _func_is_method(id: str) -> bool:\n    \"\"\"Returns true if an ancestor of the function is a class.\"\"\"\n\n    return str(BlockType.CLASS) in id\n\n\ndef _func_is_async(node: libcst.FunctionDef) -> bool:\n    \"\"\"Returns true if the function is async.\"\"\"\n\n    return True if node.asynchronous else False\n\n\ndef _get_parameters_list(\n    parameter_sequence: Sequence[libcst.Param],\n) -> list[ParameterModel] | None:\n    \"\"\"Returns a list of ParameterModel representing the parameters in a function definition.\"\"\"\n\n    params: list[ParameterModel] | None = None\n\n    if parameter_sequence:\n        params = []\n        for parameter in parameter_sequence:\n            param: ParameterModel = ParameterModel(\n                content=extract_stripped_code_content(parameter)\n            )\n            params.append(param)\n\n    return params if params else None\n\n\ndef _extract_return_annotation(\n    node_returns: libcst.Annotation | None,\n) -> str:\n    \"\"\"Extracts the return annotation from a function definition.\"\"\"\n\n    if isinstance(node_returns, libcst.Annotation) and node_returns:\n        annotation: str | None = extract_type_annotation(node_returns)\n        return annotation if annotation else \"No return annotation\"\n    else:\n        return \"No return annotation\"\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\n\\nCODE:\\n```Python\\nfrom typing import Sequence\\n\\nimport libcst\\n\\nfrom model_builders.function_model_builder import FunctionModelBuilder\\n\\nfrom models.enums import BlockType\\nfrom models.models import DecoratorModel, ParameterListModel, ParameterModel\\nfrom visitors.node_processing.common_functions import (\\n    extract_code_content,\\n    extract_decorators,\\n    extract_stripped_code_content,\\n    extract_type_annotation,\\n)\\n\\nfrom utilities.processing_context import PositionData\\n\\n\\ndef process_func_def(\\n    func_id: str,\\n    node: libcst.FunctionDef,\\n    position_data: PositionData,\\n    func_builder: FunctionModelBuilder,\\n) -> None:\\n    \"\"\"\\n    Processes a libcst.FunctionDef node to build a function model.\\n\\n    Extracts various components of a function definition such as its docstring, code content, decorators, and return annotations, and updates the provided FunctionModelBuilder with these details.\\n\\n    Args:\\n        func_id (str): The unique identifier for the function.\\n        node (libcst.FunctionDef): The function definition node from the CST.\\n        position_data (PositionData): Positional data for the function in the source code.\\n        func_builder (FunctionModelBuilder): The builder used to construct the function model.\\n\\n    Example:\\n        >>> func_builder = FunctionModelBuilder(id=\"func1\", ...)\\n        >>> process_func_def(\"func1\", function_node, position_data, func_builder)\\n        # Processes the function definition and updates the function builder.\\n    \"\"\"\\n\\n    docstring: str | None = node.get_docstring()\\n    code_content: str = extract_code_content(node)\\n    decorators: list[DecoratorModel] | None = extract_decorators(node.decorators)\\n\\n    returns: str = (\\n        _extract_return_annotation(node.returns)\\n        if node.returns\\n        else \"Function has no return annotation\"\\n    )\\n    (\\n        func_builder.set_docstring(docstring)\\n        .set_code_content(code_content)\\n        .set_start_line_num(position_data.start)\\n        .set_end_line_num(position_data.end)\\n    )\\n    (\\n        func_builder.set_decorators(decorators)\\n        .set_is_method(_func_is_method(func_id))\\n        .set_is_async(_func_is_async(node))\\n        .set_return_annotation(returns)\\n    )\\n\\n\\ndef process_parameters(\\n    node: libcst.Parameters,\\n) -> ParameterListModel | None:\\n    \"\"\"\\n    Processes libcst.Parameters node to create a ParameterListModel.\\n\\n    Extracts parameters, keyword-only parameters, positional-only parameters, and special arguments (like *args and **kwargs) from the function definition and forms a model representing these parameters.\\n\\n    Args:\\n        node (libcst.Parameters): The parameters node from a function definition.\\n\\n    Returns:\\n        ParameterListModel | None: A model representing the function\\'s parameters, or None if there are no parameters.\\n\\n    Example:\\n        >>> parameters_model = process_parameters(function_node.params)\\n        # Processes the function parameters and returns a parameter model.\\n    \"\"\"\\n\\n    params: list[ParameterModel] | None = (\\n        _get_parameters_list(node.params) if node.params else []\\n    )\\n    kwonly_params: list[ParameterModel] | None = (\\n        _get_parameters_list(node.kwonly_params) if node.kwonly_params else []\\n    )\\n    posonly_params: list[ParameterModel] | None = (\\n        _get_parameters_list(node.posonly_params) if node.posonly_params else []\\n    )\\n\\n    star_arg: ParameterModel | None = (\\n        ParameterModel(content=extract_stripped_code_content(node.star_arg))\\n        if node.star_arg and isinstance(node.star_arg, libcst.Param)\\n        else None\\n    )\\n    star_kwarg: ParameterModel | None = (\\n        ParameterModel(content=extract_stripped_code_content(node.star_kwarg))\\n        if node.star_kwarg\\n        else None\\n    )\\n\\n    if params and kwonly_params and posonly_params and star_arg and star_kwarg:\\n        return ParameterListModel(\\n            params=params,\\n            kwonly_params=kwonly_params,\\n            posonly_params=posonly_params,\\n            star_arg=star_arg,\\n            star_kwarg=star_kwarg,\\n        )\\n\\n\\ndef _func_is_method(id: str) -> bool:\\n    \"\"\"Returns true if an ancestor of the function is a class.\"\"\"\\n\\n    return str(BlockType.CLASS) in id\\n\\n\\ndef _func_is_async(node: libcst.FunctionDef) -> bool:\\n    \"\"\"Returns true if the function is async.\"\"\"\\n\\n    return True if node.asynchronous else False\\n\\n\\ndef _get_parameters_list(\\n    parameter_sequence: Sequence[libcst.Param],\\n) -> list[ParameterModel] | None:\\n    \"\"\"Returns a list of ParameterModel representing the parameters in a function definition.\"\"\"\\n\\n    params: list[ParameterModel] | None = None\\n\\n    if parameter_sequence:\\n        params = []\\n        for parameter in parameter_sequence:\\n            param: ParameterModel = ParameterModel(\\n                content=extract_stripped_code_content(parameter)\\n            )\\n            params.append(param)\\n\\n    return params if params else None\\n\\n\\ndef _extract_return_annotation(\\n    node_returns: libcst.Annotation | None,\\n) -> str:\\n    \"\"\"Extracts the return annotation from a function definition.\"\"\"\\n\\n    if isinstance(node_returns, libcst.Annotation) and node_returns:\\n        annotation: str | None = extract_type_annotation(node_returns)\\n        return annotation if annotation else \"No return annotation\"\\n    else:\\n        return \"No return annotation\"\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\n\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\n\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\npartitioning logic.\"\\\\n\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\n\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\'s content.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\n\\\\nBelow the code are summaries, `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the code block\\\\\\'s that the `CODE` depends on. Use these summaries to \\\\nhelp you write your summary.\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef process_func_def(\\\\n    func_id: str,\\\\n    node: libcst.FunctionDef,\\\\n    position_data: PositionData,\\\\n    func_builder: FunctionModelBuilder,\\\\n) -> None:\\\\n    \"\"\"\\\\n    Processes a libcst.FunctionDef node to build a function model.\\\\n\\\\n    Extracts various components of a function definition such as its docstring, code content, decorators, and return annotations, and updates the provided FunctionModelBuilder with these details.\\\\n\\\\n    Args:\\\\n        func_id (str): The unique identifier for the function.\\\\n        node (libcst.FunctionDef): The function definition node from the CST.\\\\n        position_data (PositionData): Positional data for the function in the source code.\\\\n        func_builder (FunctionModelBuilder): The builder used to construct the function model.\\\\n\\\\n    Example:\\\\n        >>> func_builder = FunctionModelBuilder(id=\"func1\", ...)\\\\n        >>> process_func_def(\"func1\", function_node, position_data, func_builder)\\\\n        # Processes the function definition and updates the function builder.\\\\n    \"\"\"\\\\n\\\\n    docstring: str | None = node.get_docstring()\\\\n    code_content: str = extract_code_content(node)\\\\n    decorators: list[DecoratorModel] | None = extract_decorators(node.decorators)\\\\n\\\\n    returns: str = (\\\\n        _extract_return_annotation(node.returns)\\\\n        if node.returns\\\\n        else \"Function has no return annotation\"\\\\n    )\\\\n    (\\\\n        func_builder.set_docstring(docstring)\\\\n        .set_code_content(code_content)\\\\n        .set_start_line_num(position_data.start)\\\\n        .set_end_line_num(position_data.end)\\\\n    )\\\\n    (\\\\n        func_builder.set_decorators(decorators)\\\\n        .set_is_method(_func_is_method(func_id))\\\\n        .set_is_async(_func_is_async(node))\\\\n        .set_return_annotation(returns)\\\\n    )\\\\n\\\\n```\\\\n\\\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\n\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\n\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\npartitioning logic.\"\\\\\\\\n\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\n\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\'s content.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\n\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES` and `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the children in the `CODE` and code blocks\\\\\\\\nthe `CODE` depends upon. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n\\\\\\\\nclass FunctionModelBuilder(BaseModelBuilder):\\\\\\\\n    \"\"\"\\\\\\\\n    A builder class for constructing a model of a Python function.\\\\\\\\n\\\\\\\\n    This class extends BaseModelBuilder and specializes in building a detailed model of a Python function, capturing various aspects such as function name, docstring, parameters, decorators, return type, and whether the function is a method or asynchronous.\\\\\\\\n\\\\\\\\n    Attributes:\\\\\\\\n        function_attributes (FunctionSpecificAttributes): An instance containing attributes specific to a function.\\\\\\\\n\\\\\\\\n    Args:\\\\\\\\n        id (str): The unique identifier for the function model.\\\\\\\\n        function_name (str): The name of the function.\\\\\\\\n        parent_id (str): The identifier of the parent model (e.g., module or class containing this function).\\\\\\\\n    \"\"\"\\\\\\\\n\\\\\\\\n    def __init__(self, id: str, function_name: str, parent_id: str) -> None:\\\\\\\\n        super().__init__(\\\\\\\\n            id=id,\\\\\\\\n            block_type=BlockType.FUNCTION,\\\\\\\\n            parent_id=parent_id,\\\\\\\\n        )\\\\\\\\n        self.function_attributes = FunctionSpecificAttributes(\\\\\\\\n            function_name=function_name,\\\\\\\\n            docstring=None,\\\\\\\\n            decorators=None,\\\\\\\\n            parameters=None,\\\\\\\\n            is_method=False,\\\\\\\\n            is_async=False,\\\\\\\\n            returns=None,\\\\\\\\n        )\\\\\\\\n\\\\\\\\n    def set_parameters_list(\\\\\\\\n        self, parameter_list_model: ParameterListModel | None\\\\\\\\n    ) -> \"FunctionModelBuilder\":\\\\\\\\n        \"\"\"Adds a parameter to the function model.\"\"\"\\\\\\\\n        self.function_attributes.parameters = parameter_list_model\\\\\\\\n        return self\\\\\\\\n\\\\\\\\n    def set_decorators(\\\\\\\\n        self, decorators: list[DecoratorModel] | None\\\\\\\\n    ) -> \"FunctionModelBuilder\":\\\\\\\\n        \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\\\\\\\\n        if decorators:\\\\\\\\n            self.function_attributes.decorators = decorators\\\\\\\\n        else:\\\\\\\\n            self.function_attributes.decorators = None\\\\\\\\n        return self\\\\\\\\n\\\\\\\\n    def set_docstring(self, docstring: str | None) -> \"FunctionModelBuilder\":\\\\\\\\n        \"\"\"Sets the docstring.\"\"\"\\\\\\\\n        self.function_attributes.docstring = docstring\\\\\\\\n        return self\\\\\\\\n\\\\\\\\n    def set_return_annotation(self, return_type: str) -> \"FunctionModelBuilder\":\\\\\\\\n        \"\"\"Sets the return type.\"\"\"\\\\\\\\n        self.function_attributes.returns = return_type\\\\\\\\n        return self\\\\\\\\n\\\\\\\\n    def set_is_method(self, is_method: bool) -> \"FunctionModelBuilder\":\\\\\\\\n        \"\"\"Sets the is_method attribute in the function model.\"\"\"\\\\\\\\n        self.function_attributes.is_method = is_method\\\\\\\\n        return self\\\\\\\\n\\\\\\\\n    def set_is_async(self, is_async: bool) -> \"FunctionModelBuilder\":\\\\\\\\n        \"\"\"Sets the is_async attribute in the function model.\"\"\"\\\\\\\\n        self.function_attributes.is_async = is_async\\\\\\\\n        return self\\\\\\\\n\\\\\\\\n    def _get_function_specific_attributes(self) -> dict[str, Any]:\\\\\\\\n        \"\"\"\\\\\\\\n        Gets the function specific attributes from the builder.\\\\\\\\n        \"\"\"\\\\\\\\n        return self.function_attributes.model_dump()\\\\\\\\n\\\\\\\\n    @logging_decorator(message=\"Building function model\")\\\\\\\\n    def build(self) -> FunctionModel:\\\\\\\\n        \"\"\"Builds and returns the function model instance after building and setting the children models.\"\"\"\\\\\\\\n        self.build_and_set_children()\\\\\\\\n        return FunctionModel(\\\\\\\\n            **self._get_common_attributes(),\\\\\\\\n            **self._get_function_specific_attributes(),\\\\\\\\n        )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n\\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef __init__(self, id: str, function_name: str, parent_id: str) -> None:\\\\\\\\\\\\\\\\n    super().__init__(\\\\\\\\\\\\\\\\n        id=id,\\\\\\\\\\\\\\\\n        block_type=BlockType.FUNCTION,\\\\\\\\\\\\\\\\n        parent_id=parent_id,\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\n    self.function_attributes = FunctionSpecificAttributes(\\\\\\\\\\\\\\\\n        function_name=function_name,\\\\\\\\\\\\\\\\n        docstring=None,\\\\\\\\\\\\\\\\n        decorators=None,\\\\\\\\\\\\\\\\n        parameters=None,\\\\\\\\\\\\\\\\n        is_method=False,\\\\\\\\\\\\\\\\n        is_async=False,\\\\\\\\\\\\\\\\n        returns=None,\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef set_parameters_list(\\\\\\\\\\\\\\\\n    self, parameter_list_model: ParameterListModel | None\\\\\\\\\\\\\\\\n) -> \"FunctionModelBuilder\":\\\\\\\\\\\\\\\\n    \"\"\"Adds a parameter to the function model.\"\"\"\\\\\\\\\\\\\\\\n    self.function_attributes.parameters = parameter_list_model\\\\\\\\\\\\\\\\n    return self\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef set_decorators(\\\\\\\\\\\\\\\\n    self, decorators: list[DecoratorModel] | None\\\\\\\\\\\\\\\\n) -> \"FunctionModelBuilder\":\\\\\\\\\\\\\\\\n    \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\\\\\\\\\\\\\\\\n    if decorators:\\\\\\\\\\\\\\\\n        self.function_attributes.decorators = decorators\\\\\\\\\\\\\\\\n    else:\\\\\\\\\\\\\\\\n        self.function_attributes.decorators = None\\\\\\\\\\\\\\\\n    return self\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef set_docstring(self, docstring: str | None) -> \"FunctionModelBuilder\":\\\\\\\\\\\\\\\\n    \"\"\"Sets the docstring.\"\"\"\\\\\\\\\\\\\\\\n    self.function_attributes.docstring = docstring\\\\\\\\\\\\\\\\n    return self\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef set_return_annotation(self, return_type: str) -> \"FunctionModelBuilder\":\\\\\\\\\\\\\\\\n    \"\"\"Sets the return type.\"\"\"\\\\\\\\\\\\\\\\n    self.function_attributes.returns = return_type\\\\\\\\\\\\\\\\n    return self\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef set_is_method(self, is_method: bool) -> \"FunctionModelBuilder\":\\\\\\\\\\\\\\\\n    \"\"\"Sets the is_method attribute in the function model.\"\"\"\\\\\\\\\\\\\\\\n    self.function_attributes.is_method = is_method\\\\\\\\\\\\\\\\n    return self\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef set_is_async(self, is_async: bool) -> \"FunctionModelBuilder\":\\\\\\\\\\\\\\\\n    \"\"\"Sets the is_async attribute in the function model.\"\"\"\\\\\\\\\\\\\\\\n    self.function_attributes.is_async = is_async\\\\\\\\\\\\\\\\n    return self\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef _get_function_specific_attributes(self) -> dict[str, Any]:\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\n        Gets the function specific attributes from the builder.\\\\\\\\\\\\\\\\n        \"\"\"\\\\\\\\\\\\\\\\n    return self.function_attributes.model_dump()\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n@logging_decorator(message=\"Building function model\")\\\\\\\\\\\\\\\\ndef build(self) -> FunctionModel:\\\\\\\\\\\\\\\\n    \"\"\"Builds and returns the function model instance after building and setting the children models.\"\"\"\\\\\\\\\\\\\\\\n    self.build_and_set_children()\\\\\\\\\\\\\\\\n    return FunctionModel(\\\\\\\\\\\\\\\\n        **self._get_common_attributes(),\\\\\\\\\\\\\\\\n        **self._get_function_specific_attributes(),\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\n\\\\\\\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\\\\\n\\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nChain of Density Steps:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\\\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\\\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\\\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\\\\\\\\\npartitioning logic.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\\\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\\\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s content.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nGuidelines:\\\\\\\\\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s functionality.\\\\\\\\\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s main functionality.\\\\\\\\\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n```Python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef logging_decorator(\\\\\\\\\\\\\\\\n    level=logging.DEBUG,\\\\\\\\\\\\\\\\n    *,\\\\\\\\\\\\\\\\n    message: str | None = None,\\\\\\\\\\\\\\\\n    syntax_highlighting: bool = False,\\\\\\\\\\\\\\\\n) -> Callable:\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\n    A decorator for adding enhanced logging to functions, with optional syntax highlighting.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    This decorator logs the call to the decorated function at the specified logging level. If syntax_highlighting is enabled and the first argument of the function is a libcst.CSTNode, the decorator logs the node\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s content with syntax highlighting.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    Args:\\\\\\\\\\\\\\\\n        level (int): The logging level. Defaults to logging.DEBUG.\\\\\\\\\\\\\\\\n        message (str | None): Custom log message. If None, a default message is generated.\\\\\\\\\\\\\\\\n        syntax_highlighting (bool): If True, enables syntax highlighting for libcst.CSTNode arguments.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    Returns:\\\\\\\\\\\\\\\\n        Callable: The decorated function with enhanced logging capability.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    Example:\\\\\\\\\\\\\\\\n        >>> @logging_decorator(level=logging.INFO, message=\"Function start\", syntax_highlighting=True)\\\\\\\\\\\\\\\\n        >>> def sample_function(arg1):\\\\\\\\\\\\\\\\n        >>>     pass\\\\\\\\\\\\\\\\n        # This decorates \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'sample_function\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' with enhanced logging at INFO level.\\\\\\\\\\\\\\\\n    \"\"\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    def decorator(func):\\\\\\\\\\\\\\\\n        @wraps(func)\\\\\\\\\\\\\\\\n        def wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\n            log_message: str = (\\\\\\\\\\\\\\\\n                message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\n            )\\\\\\\\\\\\\\\\n            frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\n            caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\n            code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\n            logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n            _handle_logging(\\\\\\\\\\\\\\\\n                logger,\\\\\\\\\\\\\\\\n                caller_info,\\\\\\\\\\\\\\\\n                level,\\\\\\\\\\\\\\\\n                log_message,\\\\\\\\\\\\\\\\n                syntax_highlighting,\\\\\\\\\\\\\\\\n                code_content,\\\\\\\\\\\\\\\\n            )\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n            return func(*args, **kwargs)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        return wrapper\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    return decorator\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nSummary:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        [{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nChain of Density Steps:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\npartitioning logic.\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s content.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nGuidelines:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s functionality.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s main functionality.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```Python\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef decorator(func):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    @wraps(func)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    def wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        log_message: str = (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        _handle_logging(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            logger,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            caller_info,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            level,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            log_message,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            syntax_highlighting,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n            code_content,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        return func(*args, **kwargs)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return wrapper\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nSummary:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        [{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@wraps(func)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    log_message: str = (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    _handle_logging(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logger,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        caller_info,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        level,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        log_message,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        syntax_highlighting,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        code_content,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return func(*args, **kwargs)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nChain of Density Steps:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\\\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\\\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\\\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\\\\\\\\\npartitioning logic.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\\\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\\\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s content.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nGuidelines:\\\\\\\\\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s functionality.\\\\\\\\\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s main functionality.\\\\\\\\\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n```Python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nclass BlockType(Enum):\\\\\\\\\\\\\\\\n    \"\"\"Enum of code block types.\"\"\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    STANDALONE_CODE_BLOCK = \"STANDALONE_BLOCK\"\\\\\\\\\\\\\\\\n    IMPORT_BLOCK = \"IMPORT_BLOCK\"\\\\\\\\\\\\\\\\n    CLASS = \"CLASS\"\\\\\\\\\\\\\\\\n    FUNCTION = \"FUNCTION\"\\\\\\\\\\\\\\\\n    MODULE = \"MODULE\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    def __str__(self) -> str:\\\\\\\\\\\\\\\\n        return self.value\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nSummary:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        [{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef __str__(self) -> str:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return self.value\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\n\\\\\\\\n@dataclass\\\\\\\\nclass PositionData:\\\\\\\\n    \"\"\"Positional data for a node in the syntax tree.\"\"\"\\\\\\\\n\\\\\\\\n    start: int\\\\\\\\n    end: int\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\n\\\\ndef process_parameters(\\\\n    node: libcst.Parameters,\\\\n) -> ParameterListModel | None:\\\\n    \"\"\"\\\\n    Processes libcst.Parameters node to create a ParameterListModel.\\\\n\\\\n    Extracts parameters, keyword-only parameters, positional-only parameters, and special arguments (like *args and **kwargs) from the function definition and forms a model representing these parameters.\\\\n\\\\n    Args:\\\\n        node (libcst.Parameters): The parameters node from a function definition.\\\\n\\\\n    Returns:\\\\n        ParameterListModel | None: A model representing the function\\\\\\'s parameters, or None if there are no parameters.\\\\n\\\\n    Example:\\\\n        >>> parameters_model = process_parameters(function_node.params)\\\\n        # Processes the function parameters and returns a parameter model.\\\\n    \"\"\"\\\\n\\\\n    params: list[ParameterModel] | None = (\\\\n        _get_parameters_list(node.params) if node.params else []\\\\n    )\\\\n    kwonly_params: list[ParameterModel] | None = (\\\\n        _get_parameters_list(node.kwonly_params) if node.kwonly_params else []\\\\n    )\\\\n    posonly_params: list[ParameterModel] | None = (\\\\n        _get_parameters_list(node.posonly_params) if node.posonly_params else []\\\\n    )\\\\n\\\\n    star_arg: ParameterModel | None = (\\\\n        ParameterModel(content=extract_stripped_code_content(node.star_arg))\\\\n        if node.star_arg and isinstance(node.star_arg, libcst.Param)\\\\n        else None\\\\n    )\\\\n    star_kwarg: ParameterModel | None = (\\\\n        ParameterModel(content=extract_stripped_code_content(node.star_kwarg))\\\\n        if node.star_kwarg\\\\n        else None\\\\n    )\\\\n\\\\n    if params and kwonly_params and posonly_params and star_arg and star_kwarg:\\\\n        return ParameterListModel(\\\\n            params=params,\\\\n            kwonly_params=kwonly_params,\\\\n            posonly_params=posonly_params,\\\\n            star_arg=star_arg,\\\\n            star_kwarg=star_kwarg,\\\\n        )\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\n\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\n\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\npartitioning logic.\"\\\\n\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\n\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\'s content.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\n\\\\nBelow the code are summaries, `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the code block\\\\\\'s that the `CODE` depends on. Use these summaries to \\\\nhelp you write your summary.\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _func_is_method(id: str) -> bool:\\\\n    \"\"\"Returns true if an ancestor of the function is a class.\"\"\"\\\\n\\\\n    return str(BlockType.CLASS) in id\\\\n\\\\n```\\\\n\\\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\n\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\n\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\npartitioning logic.\"\\\\\\\\n\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\n\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\'s content.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\n\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n\\\\\\\\nclass BlockType(Enum):\\\\\\\\n    \"\"\"Enum of code block types.\"\"\"\\\\\\\\n\\\\\\\\n    STANDALONE_CODE_BLOCK = \"STANDALONE_BLOCK\"\\\\\\\\n    IMPORT_BLOCK = \"IMPORT_BLOCK\"\\\\\\\\n    CLASS = \"CLASS\"\\\\\\\\n    FUNCTION = \"FUNCTION\"\\\\\\\\n    MODULE = \"MODULE\"\\\\\\\\n\\\\\\\\n    def __str__(self) -> str:\\\\\\\\n        return self.value\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n\\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef __str__(self) -> str:\\\\\\\\\\\\\\\\n    return self.value\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\n\\\\ndef _func_is_async(node: libcst.FunctionDef) -> bool:\\\\n    \"\"\"Returns true if the function is async.\"\"\"\\\\n\\\\n    return True if node.asynchronous else False\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\n\\\\ndef _get_parameters_list(\\\\n    parameter_sequence: Sequence[libcst.Param],\\\\n) -> list[ParameterModel] | None:\\\\n    \"\"\"Returns a list of ParameterModel representing the parameters in a function definition.\"\"\"\\\\n\\\\n    params: list[ParameterModel] | None = None\\\\n\\\\n    if parameter_sequence:\\\\n        params = []\\\\n        for parameter in parameter_sequence:\\\\n            param: ParameterModel = ParameterModel(\\\\n                content=extract_stripped_code_content(parameter)\\\\n            )\\\\n            params.append(param)\\\\n\\\\n    return params if params else None\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\n\\\\ndef _extract_return_annotation(\\\\n    node_returns: libcst.Annotation | None,\\\\n) -> str:\\\\n    \"\"\"Extracts the return annotation from a function definition.\"\"\"\\\\n\\\\n    if isinstance(node_returns, libcst.Annotation) and node_returns:\\\\n        annotation: str | None = extract_type_annotation(node_returns)\\\\n        return annotation if annotation else \"No return annotation\"\\\\n    else:\\\\n        return \"No return annotation\"\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "function_name": "process_func_def",
            "docstring": "Processes a libcst.FunctionDef node to build a function model.\n\nExtracts various components of a function definition such as its docstring, code content, decorators, and return annotations, and updates the provided FunctionModelBuilder with these details.\n\nArgs:\n    func_id (str): The unique identifier for the function.\n    node (libcst.FunctionDef): The function definition node from the CST.\n    position_data (PositionData): Positional data for the function in the source code.\n    func_builder (FunctionModelBuilder): The builder used to construct the function model.\n\nExample:\n    >>> func_builder = FunctionModelBuilder(id=\"func1\", ...)\n    >>> process_func_def(\"func1\", function_node, position_data, func_builder)\n    # Processes the function definition and updates the function builder.",
            "decorators": null,
            "parameters": null,
            "returns": "None",
            "is_method": false,
            "is_async": false,
            "id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-process_func_def",
            "parent_id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 17,
            "end_line_num": 63,
            "code_content": "\n\ndef process_func_def(\n    func_id: str,\n    node: libcst.FunctionDef,\n    position_data: PositionData,\n    func_builder: FunctionModelBuilder,\n) -> None:\n    \"\"\"\n    Processes a libcst.FunctionDef node to build a function model.\n\n    Extracts various components of a function definition such as its docstring, code content, decorators, and return annotations, and updates the provided FunctionModelBuilder with these details.\n\n    Args:\n        func_id (str): The unique identifier for the function.\n        node (libcst.FunctionDef): The function definition node from the CST.\n        position_data (PositionData): Positional data for the function in the source code.\n        func_builder (FunctionModelBuilder): The builder used to construct the function model.\n\n    Example:\n        >>> func_builder = FunctionModelBuilder(id=\"func1\", ...)\n        >>> process_func_def(\"func1\", function_node, position_data, func_builder)\n        # Processes the function definition and updates the function builder.\n    \"\"\"\n\n    docstring: str | None = node.get_docstring()\n    code_content: str = extract_code_content(node)\n    decorators: list[DecoratorModel] | None = extract_decorators(node.decorators)\n\n    returns: str = (\n        _extract_return_annotation(node.returns)\n        if node.returns\n        else \"Function has no return annotation\"\n    )\n    (\n        func_builder.set_docstring(docstring)\n        .set_code_content(code_content)\n        .set_start_line_num(position_data.start)\n        .set_end_line_num(position_data.end)\n    )\n    (\n        func_builder.set_decorators(decorators)\n        .set_is_method(_func_is_method(func_id))\n        .set_is_async(_func_is_async(node))\n        .set_return_annotation(returns)\n    )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_func_is_method"
                },
                {
                    "code_block_id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_func_is_async"
                },
                {
                    "code_block_id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_extract_return_annotation"
                },
                {
                    "import_names": [
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterListModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "extract_code_content",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_decorators",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_stripped_code_content",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_type_annotation",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "visitors.node_processing.common_functions",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "extract_code_content",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_decorators",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_stripped_code_content",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_type_annotation",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "visitors.node_processing.common_functions",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "FunctionModelBuilder",
                            "as_name": null,
                            "local_block_id": ".:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                        }
                    ],
                    "imported_from": "model_builders.function_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:model_builders:function_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "PositionData",
                            "as_name": null,
                            "local_block_id": ".:python_parser:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData"
                        }
                    ],
                    "imported_from": "utilities.processing_context",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:utilities:processing_context.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the code block\\'s that the `CODE` depends on. Use these summaries to \\nhelp you write your summary.\\n\\nCODE:\\n```Python\\n\\n\\ndef process_func_def(\\n    func_id: str,\\n    node: libcst.FunctionDef,\\n    position_data: PositionData,\\n    func_builder: FunctionModelBuilder,\\n) -> None:\\n    \"\"\"\\n    Processes a libcst.FunctionDef node to build a function model.\\n\\n    Extracts various components of a function definition such as its docstring, code content, decorators, and return annotations, and updates the provided FunctionModelBuilder with these details.\\n\\n    Args:\\n        func_id (str): The unique identifier for the function.\\n        node (libcst.FunctionDef): The function definition node from the CST.\\n        position_data (PositionData): Positional data for the function in the source code.\\n        func_builder (FunctionModelBuilder): The builder used to construct the function model.\\n\\n    Example:\\n        >>> func_builder = FunctionModelBuilder(id=\"func1\", ...)\\n        >>> process_func_def(\"func1\", function_node, position_data, func_builder)\\n        # Processes the function definition and updates the function builder.\\n    \"\"\"\\n\\n    docstring: str | None = node.get_docstring()\\n    code_content: str = extract_code_content(node)\\n    decorators: list[DecoratorModel] | None = extract_decorators(node.decorators)\\n\\n    returns: str = (\\n        _extract_return_annotation(node.returns)\\n        if node.returns\\n        else \"Function has no return annotation\"\\n    )\\n    (\\n        func_builder.set_docstring(docstring)\\n        .set_code_content(code_content)\\n        .set_start_line_num(position_data.start)\\n        .set_end_line_num(position_data.end)\\n    )\\n    (\\n        func_builder.set_decorators(decorators)\\n        .set_is_method(_func_is_method(func_id))\\n        .set_is_async(_func_is_async(node))\\n        .set_return_annotation(returns)\\n    )\\n\\n```\\n\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\n\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\n\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\npartitioning logic.\"\\\\n\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\n\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\'s content.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\n\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES` and `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the children in the `CODE` and code blocks\\\\nthe `CODE` depends upon. Use these summaries to help you write your summary of the `CODE`.\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass FunctionModelBuilder(BaseModelBuilder):\\\\n    \"\"\"\\\\n    A builder class for constructing a model of a Python function.\\\\n\\\\n    This class extends BaseModelBuilder and specializes in building a detailed model of a Python function, capturing various aspects such as function name, docstring, parameters, decorators, return type, and whether the function is a method or asynchronous.\\\\n\\\\n    Attributes:\\\\n        function_attributes (FunctionSpecificAttributes): An instance containing attributes specific to a function.\\\\n\\\\n    Args:\\\\n        id (str): The unique identifier for the function model.\\\\n        function_name (str): The name of the function.\\\\n        parent_id (str): The identifier of the parent model (e.g., module or class containing this function).\\\\n    \"\"\"\\\\n\\\\n    def __init__(self, id: str, function_name: str, parent_id: str) -> None:\\\\n        super().__init__(\\\\n            id=id,\\\\n            block_type=BlockType.FUNCTION,\\\\n            parent_id=parent_id,\\\\n        )\\\\n        self.function_attributes = FunctionSpecificAttributes(\\\\n            function_name=function_name,\\\\n            docstring=None,\\\\n            decorators=None,\\\\n            parameters=None,\\\\n            is_method=False,\\\\n            is_async=False,\\\\n            returns=None,\\\\n        )\\\\n\\\\n    def set_parameters_list(\\\\n        self, parameter_list_model: ParameterListModel | None\\\\n    ) -> \"FunctionModelBuilder\":\\\\n        \"\"\"Adds a parameter to the function model.\"\"\"\\\\n        self.function_attributes.parameters = parameter_list_model\\\\n        return self\\\\n\\\\n    def set_decorators(\\\\n        self, decorators: list[DecoratorModel] | None\\\\n    ) -> \"FunctionModelBuilder\":\\\\n        \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\\\\n        if decorators:\\\\n            self.function_attributes.decorators = decorators\\\\n        else:\\\\n            self.function_attributes.decorators = None\\\\n        return self\\\\n\\\\n    def set_docstring(self, docstring: str | None) -> \"FunctionModelBuilder\":\\\\n        \"\"\"Sets the docstring.\"\"\"\\\\n        self.function_attributes.docstring = docstring\\\\n        return self\\\\n\\\\n    def set_return_annotation(self, return_type: str) -> \"FunctionModelBuilder\":\\\\n        \"\"\"Sets the return type.\"\"\"\\\\n        self.function_attributes.returns = return_type\\\\n        return self\\\\n\\\\n    def set_is_method(self, is_method: bool) -> \"FunctionModelBuilder\":\\\\n        \"\"\"Sets the is_method attribute in the function model.\"\"\"\\\\n        self.function_attributes.is_method = is_method\\\\n        return self\\\\n\\\\n    def set_is_async(self, is_async: bool) -> \"FunctionModelBuilder\":\\\\n        \"\"\"Sets the is_async attribute in the function model.\"\"\"\\\\n        self.function_attributes.is_async = is_async\\\\n        return self\\\\n\\\\n    def _get_function_specific_attributes(self) -> dict[str, Any]:\\\\n        \"\"\"\\\\n        Gets the function specific attributes from the builder.\\\\n        \"\"\"\\\\n        return self.function_attributes.model_dump()\\\\n\\\\n    @logging_decorator(message=\"Building function model\")\\\\n    def build(self) -> FunctionModel:\\\\n        \"\"\"Builds and returns the function model instance after building and setting the children models.\"\"\"\\\\n        self.build_and_set_children()\\\\n        return FunctionModel(\\\\n            **self._get_common_attributes(),\\\\n            **self._get_function_specific_attributes(),\\\\n        )\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef __init__(self, id: str, function_name: str, parent_id: str) -> None:\\\\\\\\n    super().__init__(\\\\\\\\n        id=id,\\\\\\\\n        block_type=BlockType.FUNCTION,\\\\\\\\n        parent_id=parent_id,\\\\\\\\n    )\\\\\\\\n    self.function_attributes = FunctionSpecificAttributes(\\\\\\\\n        function_name=function_name,\\\\\\\\n        docstring=None,\\\\\\\\n        decorators=None,\\\\\\\\n        parameters=None,\\\\\\\\n        is_method=False,\\\\\\\\n        is_async=False,\\\\\\\\n        returns=None,\\\\\\\\n    )\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef set_parameters_list(\\\\\\\\n    self, parameter_list_model: ParameterListModel | None\\\\\\\\n) -> \"FunctionModelBuilder\":\\\\\\\\n    \"\"\"Adds a parameter to the function model.\"\"\"\\\\\\\\n    self.function_attributes.parameters = parameter_list_model\\\\\\\\n    return self\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef set_decorators(\\\\\\\\n    self, decorators: list[DecoratorModel] | None\\\\\\\\n) -> \"FunctionModelBuilder\":\\\\\\\\n    \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\\\\\\\\n    if decorators:\\\\\\\\n        self.function_attributes.decorators = decorators\\\\\\\\n    else:\\\\\\\\n        self.function_attributes.decorators = None\\\\\\\\n    return self\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef set_docstring(self, docstring: str | None) -> \"FunctionModelBuilder\":\\\\\\\\n    \"\"\"Sets the docstring.\"\"\"\\\\\\\\n    self.function_attributes.docstring = docstring\\\\\\\\n    return self\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef set_return_annotation(self, return_type: str) -> \"FunctionModelBuilder\":\\\\\\\\n    \"\"\"Sets the return type.\"\"\"\\\\\\\\n    self.function_attributes.returns = return_type\\\\\\\\n    return self\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef set_is_method(self, is_method: bool) -> \"FunctionModelBuilder\":\\\\\\\\n    \"\"\"Sets the is_method attribute in the function model.\"\"\"\\\\\\\\n    self.function_attributes.is_method = is_method\\\\\\\\n    return self\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef set_is_async(self, is_async: bool) -> \"FunctionModelBuilder\":\\\\\\\\n    \"\"\"Sets the is_async attribute in the function model.\"\"\"\\\\\\\\n    self.function_attributes.is_async = is_async\\\\\\\\n    return self\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef _get_function_specific_attributes(self) -> dict[str, Any]:\\\\\\\\n    \"\"\"\\\\\\\\n        Gets the function specific attributes from the builder.\\\\\\\\n        \"\"\"\\\\\\\\n    return self.function_attributes.model_dump()\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\n@logging_decorator(message=\"Building function model\")\\\\\\\\ndef build(self) -> FunctionModel:\\\\\\\\n    \"\"\"Builds and returns the function model instance after building and setting the children models.\"\"\"\\\\\\\\n    self.build_and_set_children()\\\\\\\\n    return FunctionModel(\\\\\\\\n        **self._get_common_attributes(),\\\\\\\\n        **self._get_function_specific_attributes(),\\\\\\\\n    )\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\n\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\n\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\npartitioning logic.\"\\\\\\\\n\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\n\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\'s content.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\n\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n\\\\\\\\ndef logging_decorator(\\\\\\\\n    level=logging.DEBUG,\\\\\\\\n    *,\\\\\\\\n    message: str | None = None,\\\\\\\\n    syntax_highlighting: bool = False,\\\\\\\\n) -> Callable:\\\\\\\\n    \"\"\"\\\\\\\\n    A decorator for adding enhanced logging to functions, with optional syntax highlighting.\\\\\\\\n\\\\\\\\n    This decorator logs the call to the decorated function at the specified logging level. If syntax_highlighting is enabled and the first argument of the function is a libcst.CSTNode, the decorator logs the node\\\\\\\\\\\\\\'s content with syntax highlighting.\\\\\\\\n\\\\\\\\n    Args:\\\\\\\\n        level (int): The logging level. Defaults to logging.DEBUG.\\\\\\\\n        message (str | None): Custom log message. If None, a default message is generated.\\\\\\\\n        syntax_highlighting (bool): If True, enables syntax highlighting for libcst.CSTNode arguments.\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n        Callable: The decorated function with enhanced logging capability.\\\\\\\\n\\\\\\\\n    Example:\\\\\\\\n        >>> @logging_decorator(level=logging.INFO, message=\"Function start\", syntax_highlighting=True)\\\\\\\\n        >>> def sample_function(arg1):\\\\\\\\n        >>>     pass\\\\\\\\n        # This decorates \\\\\\\\\\\\\\'sample_function\\\\\\\\\\\\\\' with enhanced logging at INFO level.\\\\\\\\n    \"\"\"\\\\\\\\n\\\\\\\\n    def decorator(func):\\\\\\\\n        @wraps(func)\\\\\\\\n        def wrapper(*args, **kwargs):\\\\\\\\n            log_message: str = (\\\\\\\\n                message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\n            )\\\\\\\\n            frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\n            caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\n            code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\n            logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\n\\\\\\\\n            _handle_logging(\\\\\\\\n                logger,\\\\\\\\n                caller_info,\\\\\\\\n                level,\\\\\\\\n                log_message,\\\\\\\\n                syntax_highlighting,\\\\\\\\n                code_content,\\\\\\\\n            )\\\\\\\\n\\\\\\\\n            return func(*args, **kwargs)\\\\\\\\n\\\\\\\\n        return wrapper\\\\\\\\n\\\\\\\\n    return decorator\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n\\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nChain of Density Steps:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\\\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\\\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\\\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\\\\\\\\\npartitioning logic.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\\\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\\\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s content.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nGuidelines:\\\\\\\\\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s functionality.\\\\\\\\\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s main functionality.\\\\\\\\\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n```Python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef decorator(func):\\\\\\\\\\\\\\\\n    @wraps(func)\\\\\\\\\\\\\\\\n    def wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\n        log_message: str = (\\\\\\\\\\\\\\\\n            message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\n        frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\n        caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\n        code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\n        logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        _handle_logging(\\\\\\\\\\\\\\\\n            logger,\\\\\\\\\\\\\\\\n            caller_info,\\\\\\\\\\\\\\\\n            level,\\\\\\\\\\\\\\\\n            log_message,\\\\\\\\\\\\\\\\n            syntax_highlighting,\\\\\\\\\\\\\\\\n            code_content,\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        return func(*args, **kwargs)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    return wrapper\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nSummary:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        [{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@wraps(func)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    log_message: str = (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    _handle_logging(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logger,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        caller_info,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        level,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        log_message,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        syntax_highlighting,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        code_content,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return func(*args, **kwargs)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\n\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\n\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\npartitioning logic.\"\\\\\\\\n\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\n\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\'s content.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\n\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n\\\\\\\\nclass BlockType(Enum):\\\\\\\\n    \"\"\"Enum of code block types.\"\"\"\\\\\\\\n\\\\\\\\n    STANDALONE_CODE_BLOCK = \"STANDALONE_BLOCK\"\\\\\\\\n    IMPORT_BLOCK = \"IMPORT_BLOCK\"\\\\\\\\n    CLASS = \"CLASS\"\\\\\\\\n    FUNCTION = \"FUNCTION\"\\\\\\\\n    MODULE = \"MODULE\"\\\\\\\\n\\\\\\\\n    def __str__(self) -> str:\\\\\\\\n        return self.value\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n\\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef __str__(self) -> str:\\\\\\\\\\\\\\\\n    return self.value\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\n\\\\n@dataclass\\\\nclass PositionData:\\\\n    \"\"\"Positional data for a node in the syntax tree.\"\"\"\\\\n\\\\n    start: int\\\\n    end: int\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "process_parameters",
            "docstring": "Processes libcst.Parameters node to create a ParameterListModel.\n\nExtracts parameters, keyword-only parameters, positional-only parameters, and special arguments (like *args and **kwargs) from the function definition and forms a model representing these parameters.\n\nArgs:\n    node (libcst.Parameters): The parameters node from a function definition.\n\nReturns:\n    ParameterListModel | None: A model representing the function's parameters, or None if there are no parameters.\n\nExample:\n    >>> parameters_model = process_parameters(function_node.params)\n    # Processes the function parameters and returns a parameter model.",
            "decorators": null,
            "parameters": null,
            "returns": "ParameterListModel | None",
            "is_method": false,
            "is_async": false,
            "id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-process_parameters",
            "parent_id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 63,
            "end_line_num": 113,
            "code_content": "\n\ndef process_parameters(\n    node: libcst.Parameters,\n) -> ParameterListModel | None:\n    \"\"\"\n    Processes libcst.Parameters node to create a ParameterListModel.\n\n    Extracts parameters, keyword-only parameters, positional-only parameters, and special arguments (like *args and **kwargs) from the function definition and forms a model representing these parameters.\n\n    Args:\n        node (libcst.Parameters): The parameters node from a function definition.\n\n    Returns:\n        ParameterListModel | None: A model representing the function's parameters, or None if there are no parameters.\n\n    Example:\n        >>> parameters_model = process_parameters(function_node.params)\n        # Processes the function parameters and returns a parameter model.\n    \"\"\"\n\n    params: list[ParameterModel] | None = (\n        _get_parameters_list(node.params) if node.params else []\n    )\n    kwonly_params: list[ParameterModel] | None = (\n        _get_parameters_list(node.kwonly_params) if node.kwonly_params else []\n    )\n    posonly_params: list[ParameterModel] | None = (\n        _get_parameters_list(node.posonly_params) if node.posonly_params else []\n    )\n\n    star_arg: ParameterModel | None = (\n        ParameterModel(content=extract_stripped_code_content(node.star_arg))\n        if node.star_arg and isinstance(node.star_arg, libcst.Param)\n        else None\n    )\n    star_kwarg: ParameterModel | None = (\n        ParameterModel(content=extract_stripped_code_content(node.star_kwarg))\n        if node.star_kwarg\n        else None\n    )\n\n    if params and kwonly_params and posonly_params and star_arg and star_kwarg:\n        return ParameterListModel(\n            params=params,\n            kwonly_params=kwonly_params,\n            posonly_params=posonly_params,\n            star_arg=star_arg,\n            star_kwarg=star_kwarg,\n        )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_get_parameters_list"
                },
                {
                    "import_names": [
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterListModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterListModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "extract_code_content",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_decorators",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_stripped_code_content",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_type_annotation",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "visitors.node_processing.common_functions",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\n\\ndef process_parameters(\\n    node: libcst.Parameters,\\n) -> ParameterListModel | None:\\n    \"\"\"\\n    Processes libcst.Parameters node to create a ParameterListModel.\\n\\n    Extracts parameters, keyword-only parameters, positional-only parameters, and special arguments (like *args and **kwargs) from the function definition and forms a model representing these parameters.\\n\\n    Args:\\n        node (libcst.Parameters): The parameters node from a function definition.\\n\\n    Returns:\\n        ParameterListModel | None: A model representing the function\\'s parameters, or None if there are no parameters.\\n\\n    Example:\\n        >>> parameters_model = process_parameters(function_node.params)\\n        # Processes the function parameters and returns a parameter model.\\n    \"\"\"\\n\\n    params: list[ParameterModel] | None = (\\n        _get_parameters_list(node.params) if node.params else []\\n    )\\n    kwonly_params: list[ParameterModel] | None = (\\n        _get_parameters_list(node.kwonly_params) if node.kwonly_params else []\\n    )\\n    posonly_params: list[ParameterModel] | None = (\\n        _get_parameters_list(node.posonly_params) if node.posonly_params else []\\n    )\\n\\n    star_arg: ParameterModel | None = (\\n        ParameterModel(content=extract_stripped_code_content(node.star_arg))\\n        if node.star_arg and isinstance(node.star_arg, libcst.Param)\\n        else None\\n    )\\n    star_kwarg: ParameterModel | None = (\\n        ParameterModel(content=extract_stripped_code_content(node.star_kwarg))\\n        if node.star_kwarg\\n        else None\\n    )\\n\\n    if params and kwonly_params and posonly_params and star_arg and star_kwarg:\\n        return ParameterListModel(\\n            params=params,\\n            kwonly_params=kwonly_params,\\n            posonly_params=posonly_params,\\n            star_arg=star_arg,\\n            star_kwarg=star_kwarg,\\n        )\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_func_is_method",
            "docstring": "Returns true if an ancestor of the function is a class.",
            "decorators": null,
            "parameters": null,
            "returns": "bool",
            "is_method": false,
            "is_async": false,
            "id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_func_is_method",
            "parent_id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 113,
            "end_line_num": 119,
            "code_content": "\n\ndef _func_is_method(id: str) -> bool:\n    \"\"\"Returns true if an ancestor of the function is a class.\"\"\"\n\n    return str(BlockType.CLASS) in id\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "BlockType",
                            "as_name": null,
                            "local_block_id": ".:python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                        }
                    ],
                    "imported_from": "models.enums",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:models:enums.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the code block\\'s that the `CODE` depends on. Use these summaries to \\nhelp you write your summary.\\n\\nCODE:\\n```Python\\n\\n\\ndef _func_is_method(id: str) -> bool:\\n    \"\"\"Returns true if an ancestor of the function is a class.\"\"\"\\n\\n    return str(BlockType.CLASS) in id\\n\\n```\\n\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\n\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\n\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\npartitioning logic.\"\\\\n\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\n\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\'s content.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\n\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass BlockType(Enum):\\\\n    \"\"\"Enum of code block types.\"\"\"\\\\n\\\\n    STANDALONE_CODE_BLOCK = \"STANDALONE_BLOCK\"\\\\n    IMPORT_BLOCK = \"IMPORT_BLOCK\"\\\\n    CLASS = \"CLASS\"\\\\n    FUNCTION = \"FUNCTION\"\\\\n    MODULE = \"MODULE\"\\\\n\\\\n    def __str__(self) -> str:\\\\n        return self.value\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef __str__(self) -> str:\\\\\\\\n    return self.value\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_func_is_async",
            "docstring": "Returns true if the function is async.",
            "decorators": null,
            "parameters": null,
            "returns": "bool",
            "is_method": false,
            "is_async": false,
            "id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_func_is_async",
            "parent_id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 119,
            "end_line_num": 125,
            "code_content": "\n\ndef _func_is_async(node: libcst.FunctionDef) -> bool:\n    \"\"\"Returns true if the function is async.\"\"\"\n\n    return True if node.asynchronous else False\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\n\\ndef _func_is_async(node: libcst.FunctionDef) -> bool:\\n    \"\"\"Returns true if the function is async.\"\"\"\\n\\n    return True if node.asynchronous else False\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_get_parameters_list",
            "docstring": "Returns a list of ParameterModel representing the parameters in a function definition.",
            "decorators": null,
            "parameters": null,
            "returns": "list[ParameterModel] | None",
            "is_method": false,
            "is_async": false,
            "id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_get_parameters_list",
            "parent_id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 125,
            "end_line_num": 143,
            "code_content": "\n\ndef _get_parameters_list(\n    parameter_sequence: Sequence[libcst.Param],\n) -> list[ParameterModel] | None:\n    \"\"\"Returns a list of ParameterModel representing the parameters in a function definition.\"\"\"\n\n    params: list[ParameterModel] | None = None\n\n    if parameter_sequence:\n        params = []\n        for parameter in parameter_sequence:\n            param: ParameterModel = ParameterModel(\n                content=extract_stripped_code_content(parameter)\n            )\n            params.append(param)\n\n    return params if params else None\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterListModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "extract_code_content",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_decorators",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_stripped_code_content",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_type_annotation",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "visitors.node_processing.common_functions",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Sequence",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\n\\ndef _get_parameters_list(\\n    parameter_sequence: Sequence[libcst.Param],\\n) -> list[ParameterModel] | None:\\n    \"\"\"Returns a list of ParameterModel representing the parameters in a function definition.\"\"\"\\n\\n    params: list[ParameterModel] | None = None\\n\\n    if parameter_sequence:\\n        params = []\\n        for parameter in parameter_sequence:\\n            param: ParameterModel = ParameterModel(\\n                content=extract_stripped_code_content(parameter)\\n            )\\n            params.append(param)\\n\\n    return params if params else None\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_extract_return_annotation",
            "docstring": "Extracts the return annotation from a function definition.",
            "decorators": null,
            "parameters": null,
            "returns": "str",
            "is_method": false,
            "is_async": false,
            "id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_extract_return_annotation",
            "parent_id": ".:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 143,
            "end_line_num": 155,
            "code_content": "\n\ndef _extract_return_annotation(\n    node_returns: libcst.Annotation | None,\n) -> str:\n    \"\"\"Extracts the return annotation from a function definition.\"\"\"\n\n    if isinstance(node_returns, libcst.Annotation) and node_returns:\n        annotation: str | None = extract_type_annotation(node_returns)\n        return annotation if annotation else \"No return annotation\"\n    else:\n        return \"No return annotation\"\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "extract_code_content",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_decorators",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_stripped_code_content",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "extract_type_annotation",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "visitors.node_processing.common_functions",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\n\\ndef _extract_return_annotation(\\n    node_returns: libcst.Annotation | None,\\n) -> str:\\n    \"\"\"Extracts the return annotation from a function definition.\"\"\"\\n\\n    if isinstance(node_returns, libcst.Annotation) and node_returns:\\n        annotation: str | None = extract_type_annotation(node_returns)\\n        return annotation if annotation else \"No return annotation\"\\n    else:\\n        return \"No return annotation\"\\n', 'role': 'user'}]\n \n        ",
            "children": null
        }
    ]
}