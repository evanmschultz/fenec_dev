{
    "file_path": "python_parser/model_builders/builder_factory.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Any",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Callable",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Literal",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "overload",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "logging_decorator",
                    "as_name": null,
                    "local_block_id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator"
                }
            ],
            "imported_from": "utilities.logger.decorators",
            "import_module_type": "LOCAL",
            "local_module_id": "utilities:logger:decorators.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": null,
                    "local_block_id": "python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": null,
                    "local_block_id": "python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModuleModelBuilder",
                    "as_name": null,
                    "local_block_id": "python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                }
            ],
            "imported_from": "python_parser.model_builders.module_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "python_parser:model_builders:module_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "StandaloneBlockModelBuilder",
                    "as_name": null,
                    "local_block_id": "python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                }
            ],
            "imported_from": "python_parser.model_builders.standalone_block_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": "python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                }
            ],
            "imported_from": "python_parser.models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": "python_parser:models:enums.py__*__MODULE"
        }
    ],
    "id": "python_parser:model_builders:builder_factory.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 185,
    "code_content": "from typing import Any, Callable, Literal, overload\n\nfrom utilities.logger.decorators import logging_decorator\n\nfrom python_parser.model_builders.class_model_builder import ClassModelBuilder\nfrom python_parser.model_builders.function_model_builder import FunctionModelBuilder\nfrom python_parser.model_builders.module_model_builder import ModuleModelBuilder\nfrom python_parser.model_builders.standalone_block_model_builder import (\n    StandaloneBlockModelBuilder,\n)\n\nfrom python_parser.models.enums import BlockType\n\n\nclass BuilderFactory:\n    \"\"\"\n    A factory class for creating instances of different types of model builders.\n\n    This class uses a strategy pattern to map each block type to a corresponding builder creation function. Depending on the block type specified, it creates and returns an instance of the appropriate model builder class.\n\n    The factory supports creating builders for modules, classes, functions, and standalone code blocks.\n\n    Attributes:\n        _creation_strategies (dict[BlockType, Callable[..., Any]]): A dictionary mapping block types to their corresponding builder creation functions.\n    \"\"\"\n\n    _creation_strategies: dict[BlockType, Callable[..., Any]] = {\n        BlockType.MODULE: lambda id, file_path, name, parent_id: ModuleModelBuilder(\n            id=id,\n            file_path=file_path,\n        ),\n        BlockType.CLASS: lambda id, name, parent_id, file_path: ClassModelBuilder(\n            id=id,\n            class_name=name,\n            parent_id=parent_id,\n        ),\n        BlockType.FUNCTION: lambda id, name, parent_id, file_path: FunctionModelBuilder(\n            id=id,\n            function_name=name,\n            parent_id=parent_id,\n        ),\n        BlockType.STANDALONE_CODE_BLOCK: lambda id, parent_id, name, file_path: StandaloneBlockModelBuilder(\n            id=id,\n            parent_id=parent_id,\n        ),\n    }\n\n    @staticmethod\n    @overload\n    def create_builder_instance(\n        block_type: Literal[BlockType.MODULE],\n        *,\n        id: str,\n        file_path: str,\n    ) -> ModuleModelBuilder:\n        \"\"\"\n        Creates a ModuleModelBuilder instance for building module models.\n\n        Args:\n            block_type: Specifies that a ModuleModelBuilder is to be created.\n            id (str): The unique identifier for the module model.\n            file_path (str): The file path of the module.\n\n        Returns:\n            ModuleModelBuilder: An instance of ModuleModelBuilder.\n        \"\"\"\n        ...\n\n    @staticmethod\n    @overload\n    def create_builder_instance(\n        block_type: Literal[BlockType.CLASS],\n        *,\n        id: str,\n        name: str,\n        parent_id: str,\n    ) -> ClassModelBuilder:\n        \"\"\"\n        Creates a ClassModelBuilder instance for building class models.\n\n        Args:\n            block_type: Specifies that a ClassModelBuilder is to be created.\n            id (str): The unique identifier for the class model.\n            name (str): The name of the class.\n            parent_id (str): The identifier of the parent model.\n\n        Returns:\n            ClassModelBuilder: An instance of ClassModelBuilder.\n        \"\"\"\n        ...\n\n    @staticmethod\n    @overload\n    def create_builder_instance(\n        block_type: Literal[BlockType.FUNCTION],\n        *,\n        id: str,\n        name: str,\n        parent_id: str,\n    ) -> FunctionModelBuilder:\n        \"\"\"\n        Creates a FunctionModelBuilder instance for building function models.\n\n        Args:\n            block_type: Specifies that a FunctionModelBuilder is to be created.\n            id (str): The unique identifier for the function model.\n            name (str): The name of the function.\n            parent_id (str): The identifier of the parent model.\n\n        Returns:\n            FunctionModelBuilder: An instance of FunctionModelBuilder.\n        \"\"\"\n        ...\n\n    @staticmethod\n    @overload\n    def create_builder_instance(\n        block_type: Literal[BlockType.STANDALONE_CODE_BLOCK],\n        *,\n        id: str,\n        parent_id: str,\n    ) -> StandaloneBlockModelBuilder:\n        \"\"\"\n        Creates a StandaloneBlockModelBuilder instance for building standalone code block models.\n\n        Args:\n            block_type: Specifies that a StandaloneBlockModelBuilder is to be created.\n            id (str): The unique identifier for the standalone code block model.\n            parent_id (str): The identifier of the parent model.\n\n        Returns:\n            StandaloneBlockModelBuilder: An instance of StandaloneBlockModelBuilder.\n        \"\"\"\n        ...\n\n    @logging_decorator()\n    @staticmethod\n    def create_builder_instance(\n        block_type: BlockType,\n        *,\n        id: str,\n        name: str | None = None,\n        parent_id: str | None = None,\n        file_path: str | None = None,\n    ) -> (\n        ModuleModelBuilder\n        | ClassModelBuilder\n        | FunctionModelBuilder\n        | StandaloneBlockModelBuilder\n    ):\n        \"\"\"\n        Creates and returns an instance of a model builder based on the specified block type.\n\n        Depending on the block type (module, class, function, standalone code block), it creates an instance of the corresponding model builder class.\n\n        Args:\n            block_type (BlockType): The type of code block for which the builder is to be created.\n            id (str): The unique identifier for the builder.\n            name (str | None): The name of the code block (relevant for class or function blocks).\n            parent_id (str | None): The identifier of the parent model (if applicable).\n            file_path (str | None): The file path of the module (relevant for module blocks).\n\n        Returns:\n            Union[ModuleModelBuilder, ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]:\n            An instance of the appropriate model builder class.\n\n        Raises:\n            ValueError: If an unknown block type is provided.\n\n        Example:\n            >>> builder = BuilderFactory.create_builder_instance(\n                    block_type=BlockType.CLASS,\n                    id='class1',\n                    name='MyClass',\n                    parent_id='module1'\n                )\n            # This will create an instance of ClassModelBuilder for a class named 'MyClass'.\n        \"\"\"\n\n        if block_type not in BuilderFactory._creation_strategies:\n            raise ValueError(f\"Unknown node type: {block_type}\")\n        return BuilderFactory._creation_strategies[block_type](\n            id=id, name=name, parent_id=parent_id, file_path=file_path\n        )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nfrom typing import Any, Callable, Literal, overload\\n\\nfrom utilities.logger.decorators import logging_decorator\\n\\nfrom python_parser.model_builders.class_model_builder import ClassModelBuilder\\nfrom python_parser.model_builders.function_model_builder import FunctionModelBuilder\\nfrom python_parser.model_builders.module_model_builder import ModuleModelBuilder\\nfrom python_parser.model_builders.standalone_block_model_builder import (\\n    StandaloneBlockModelBuilder,\\n)\\n\\nfrom python_parser.models.enums import BlockType\\n\\n\\nclass BuilderFactory:\\n    \"\"\"\\n    A factory class for creating instances of different types of model builders.\\n\\n    This class uses a strategy pattern to map each block type to a corresponding builder creation function. Depending on the block type specified, it creates and returns an instance of the appropriate model builder class.\\n\\n    The factory supports creating builders for modules, classes, functions, and standalone code blocks.\\n\\n    Attributes:\\n        _creation_strategies (dict[BlockType, Callable[..., Any]]): A dictionary mapping block types to their corresponding builder creation functions.\\n    \"\"\"\\n\\n    _creation_strategies: dict[BlockType, Callable[..., Any]] = {\\n        BlockType.MODULE: lambda id, file_path, name, parent_id: ModuleModelBuilder(\\n            id=id,\\n            file_path=file_path,\\n        ),\\n        BlockType.CLASS: lambda id, name, parent_id, file_path: ClassModelBuilder(\\n            id=id,\\n            class_name=name,\\n            parent_id=parent_id,\\n        ),\\n        BlockType.FUNCTION: lambda id, name, parent_id, file_path: FunctionModelBuilder(\\n            id=id,\\n            function_name=name,\\n            parent_id=parent_id,\\n        ),\\n        BlockType.STANDALONE_CODE_BLOCK: lambda id, parent_id, name, file_path: StandaloneBlockModelBuilder(\\n            id=id,\\n            parent_id=parent_id,\\n        ),\\n    }\\n\\n    @staticmethod\\n    @overload\\n    def create_builder_instance(\\n        block_type: Literal[BlockType.MODULE],\\n        *,\\n        id: str,\\n        file_path: str,\\n    ) -> ModuleModelBuilder:\\n        \"\"\"\\n        Creates a ModuleModelBuilder instance for building module models.\\n\\n        Args:\\n            block_type: Specifies that a ModuleModelBuilder is to be created.\\n            id (str): The unique identifier for the module model.\\n            file_path (str): The file path of the module.\\n\\n        Returns:\\n            ModuleModelBuilder: An instance of ModuleModelBuilder.\\n        \"\"\"\\n        ...\\n\\n    @staticmethod\\n    @overload\\n    def create_builder_instance(\\n        block_type: Literal[BlockType.CLASS],\\n        *,\\n        id: str,\\n        name: str,\\n        parent_id: str,\\n    ) -> ClassModelBuilder:\\n        \"\"\"\\n        Creates a ClassModelBuilder instance for building class models.\\n\\n        Args:\\n            block_type: Specifies that a ClassModelBuilder is to be created.\\n            id (str): The unique identifier for the class model.\\n            name (str): The name of the class.\\n            parent_id (str): The identifier of the parent model.\\n\\n        Returns:\\n            ClassModelBuilder: An instance of ClassModelBuilder.\\n        \"\"\"\\n        ...\\n\\n    @staticmethod\\n    @overload\\n    def create_builder_instance(\\n        block_type: Literal[BlockType.FUNCTION],\\n        *,\\n        id: str,\\n        name: str,\\n        parent_id: str,\\n    ) -> FunctionModelBuilder:\\n        \"\"\"\\n        Creates a FunctionModelBuilder instance for building function models.\\n\\n        Args:\\n            block_type: Specifies that a FunctionModelBuilder is to be created.\\n            id (str): The unique identifier for the function model.\\n            name (str): The name of the function.\\n            parent_id (str): The identifier of the parent model.\\n\\n        Returns:\\n            FunctionModelBuilder: An instance of FunctionModelBuilder.\\n        \"\"\"\\n        ...\\n\\n    @staticmethod\\n    @overload\\n    def create_builder_instance(\\n        block_type: Literal[BlockType.STANDALONE_CODE_BLOCK],\\n        *,\\n        id: str,\\n        parent_id: str,\\n    ) -> StandaloneBlockModelBuilder:\\n        \"\"\"\\n        Creates a StandaloneBlockModelBuilder instance for building standalone code block models.\\n\\n        Args:\\n            block_type: Specifies that a StandaloneBlockModelBuilder is to be created.\\n            id (str): The unique identifier for the standalone code block model.\\n            parent_id (str): The identifier of the parent model.\\n\\n        Returns:\\n            StandaloneBlockModelBuilder: An instance of StandaloneBlockModelBuilder.\\n        \"\"\"\\n        ...\\n\\n    @logging_decorator()\\n    @staticmethod\\n    def create_builder_instance(\\n        block_type: BlockType,\\n        *,\\n        id: str,\\n        name: str | None = None,\\n        parent_id: str | None = None,\\n        file_path: str | None = None,\\n    ) -> (\\n        ModuleModelBuilder\\n        | ClassModelBuilder\\n        | FunctionModelBuilder\\n        | StandaloneBlockModelBuilder\\n    ):\\n        \"\"\"\\n        Creates and returns an instance of a model builder based on the specified block type.\\n\\n        Depending on the block type (module, class, function, standalone code block), it creates an instance of the corresponding model builder class.\\n\\n        Args:\\n            block_type (BlockType): The type of code block for which the builder is to be created.\\n            id (str): The unique identifier for the builder.\\n            name (str | None): The name of the code block (relevant for class or function blocks).\\n            parent_id (str | None): The identifier of the parent model (if applicable).\\n            file_path (str | None): The file path of the module (relevant for module blocks).\\n\\n        Returns:\\n            Union[ModuleModelBuilder, ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]:\\n            An instance of the appropriate model builder class.\\n\\n        Raises:\\n            ValueError: If an unknown block type is provided.\\n\\n        Example:\\n            >>> builder = BuilderFactory.create_builder_instance(\\n                    block_type=BlockType.CLASS,\\n                    id=\\'class1\\',\\n                    name=\\'MyClass\\',\\n                    parent_id=\\'module1\\'\\n                )\\n            # This will create an instance of ClassModelBuilder for a class named \\'MyClass\\'.\\n        \"\"\"\\n\\n        if block_type not in BuilderFactory._creation_strategies:\\n            raise ValueError(f\"Unknown node type: {block_type}\")\\n        return BuilderFactory._creation_strategies[block_type](\\n            id=id, name=name, parent_id=parent_id, file_path=file_path\\n        )\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass BuilderFactory:\\\\n    \"\"\"\\\\n    A factory class for creating instances of different types of model builders.\\\\n\\\\n    This class uses a strategy pattern to map each block type to a corresponding builder creation function. Depending on the block type specified, it creates and returns an instance of the appropriate model builder class.\\\\n\\\\n    The factory supports creating builders for modules, classes, functions, and standalone code blocks.\\\\n\\\\n    Attributes:\\\\n        _creation_strategies (dict[BlockType, Callable[..., Any]]): A dictionary mapping block types to their corresponding builder creation functions.\\\\n    \"\"\"\\\\n\\\\n    _creation_strategies: dict[BlockType, Callable[..., Any]] = {\\\\n        BlockType.MODULE: lambda id, file_path, name, parent_id: ModuleModelBuilder(\\\\n            id=id,\\\\n            file_path=file_path,\\\\n        ),\\\\n        BlockType.CLASS: lambda id, name, parent_id, file_path: ClassModelBuilder(\\\\n            id=id,\\\\n            class_name=name,\\\\n            parent_id=parent_id,\\\\n        ),\\\\n        BlockType.FUNCTION: lambda id, name, parent_id, file_path: FunctionModelBuilder(\\\\n            id=id,\\\\n            function_name=name,\\\\n            parent_id=parent_id,\\\\n        ),\\\\n        BlockType.STANDALONE_CODE_BLOCK: lambda id, parent_id, name, file_path: StandaloneBlockModelBuilder(\\\\n            id=id,\\\\n            parent_id=parent_id,\\\\n        ),\\\\n    }\\\\n\\\\n    @staticmethod\\\\n    @overload\\\\n    def create_builder_instance(\\\\n        block_type: Literal[BlockType.MODULE],\\\\n        *,\\\\n        id: str,\\\\n        file_path: str,\\\\n    ) -> ModuleModelBuilder:\\\\n        \"\"\"\\\\n        Creates a ModuleModelBuilder instance for building module models.\\\\n\\\\n        Args:\\\\n            block_type: Specifies that a ModuleModelBuilder is to be created.\\\\n            id (str): The unique identifier for the module model.\\\\n            file_path (str): The file path of the module.\\\\n\\\\n        Returns:\\\\n            ModuleModelBuilder: An instance of ModuleModelBuilder.\\\\n        \"\"\"\\\\n        ...\\\\n\\\\n    @staticmethod\\\\n    @overload\\\\n    def create_builder_instance(\\\\n        block_type: Literal[BlockType.CLASS],\\\\n        *,\\\\n        id: str,\\\\n        name: str,\\\\n        parent_id: str,\\\\n    ) -> ClassModelBuilder:\\\\n        \"\"\"\\\\n        Creates a ClassModelBuilder instance for building class models.\\\\n\\\\n        Args:\\\\n            block_type: Specifies that a ClassModelBuilder is to be created.\\\\n            id (str): The unique identifier for the class model.\\\\n            name (str): The name of the class.\\\\n            parent_id (str): The identifier of the parent model.\\\\n\\\\n        Returns:\\\\n            ClassModelBuilder: An instance of ClassModelBuilder.\\\\n        \"\"\"\\\\n        ...\\\\n\\\\n    @staticmethod\\\\n    @overload\\\\n    def create_builder_instance(\\\\n        block_type: Literal[BlockType.FUNCTION],\\\\n        *,\\\\n        id: str,\\\\n        name: str,\\\\n        parent_id: str,\\\\n    ) -> FunctionModelBuilder:\\\\n        \"\"\"\\\\n        Creates a FunctionModelBuilder instance for building function models.\\\\n\\\\n        Args:\\\\n            block_type: Specifies that a FunctionModelBuilder is to be created.\\\\n            id (str): The unique identifier for the function model.\\\\n            name (str): The name of the function.\\\\n            parent_id (str): The identifier of the parent model.\\\\n\\\\n        Returns:\\\\n            FunctionModelBuilder: An instance of FunctionModelBuilder.\\\\n        \"\"\"\\\\n        ...\\\\n\\\\n    @staticmethod\\\\n    @overload\\\\n    def create_builder_instance(\\\\n        block_type: Literal[BlockType.STANDALONE_CODE_BLOCK],\\\\n        *,\\\\n        id: str,\\\\n        parent_id: str,\\\\n    ) -> StandaloneBlockModelBuilder:\\\\n        \"\"\"\\\\n        Creates a StandaloneBlockModelBuilder instance for building standalone code block models.\\\\n\\\\n        Args:\\\\n            block_type: Specifies that a StandaloneBlockModelBuilder is to be created.\\\\n            id (str): The unique identifier for the standalone code block model.\\\\n            parent_id (str): The identifier of the parent model.\\\\n\\\\n        Returns:\\\\n            StandaloneBlockModelBuilder: An instance of StandaloneBlockModelBuilder.\\\\n        \"\"\"\\\\n        ...\\\\n\\\\n    @logging_decorator()\\\\n    @staticmethod\\\\n    def create_builder_instance(\\\\n        block_type: BlockType,\\\\n        *,\\\\n        id: str,\\\\n        name: str | None = None,\\\\n        parent_id: str | None = None,\\\\n        file_path: str | None = None,\\\\n    ) -> (\\\\n        ModuleModelBuilder\\\\n        | ClassModelBuilder\\\\n        | FunctionModelBuilder\\\\n        | StandaloneBlockModelBuilder\\\\n    ):\\\\n        \"\"\"\\\\n        Creates and returns an instance of a model builder based on the specified block type.\\\\n\\\\n        Depending on the block type (module, class, function, standalone code block), it creates an instance of the corresponding model builder class.\\\\n\\\\n        Args:\\\\n            block_type (BlockType): The type of code block for which the builder is to be created.\\\\n            id (str): The unique identifier for the builder.\\\\n            name (str | None): The name of the code block (relevant for class or function blocks).\\\\n            parent_id (str | None): The identifier of the parent model (if applicable).\\\\n            file_path (str | None): The file path of the module (relevant for module blocks).\\\\n\\\\n        Returns:\\\\n            Union[ModuleModelBuilder, ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]:\\\\n            An instance of the appropriate model builder class.\\\\n\\\\n        Raises:\\\\n            ValueError: If an unknown block type is provided.\\\\n\\\\n        Example:\\\\n            >>> builder = BuilderFactory.create_builder_instance(\\\\n                    block_type=BlockType.CLASS,\\\\n                    id=\\\\\\'class1\\\\\\',\\\\n                    name=\\\\\\'MyClass\\\\\\',\\\\n                    parent_id=\\\\\\'module1\\\\\\'\\\\n                )\\\\n            # This will create an instance of ClassModelBuilder for a class named \\\\\\'MyClass\\\\\\'.\\\\n        \"\"\"\\\\n\\\\n        if block_type not in BuilderFactory._creation_strategies:\\\\n            raise ValueError(f\"Unknown node type: {block_type}\")\\\\n        return BuilderFactory._creation_strategies[block_type](\\\\n            id=id, name=name, parent_id=parent_id, file_path=file_path\\\\n        )\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n@staticmethod\\\\\\\\n@overload\\\\\\\\ndef create_builder_instance(\\\\\\\\n    block_type: Literal[BlockType.MODULE],\\\\\\\\n    *,\\\\\\\\n    id: str,\\\\\\\\n    file_path: str,\\\\\\\\n) -> ModuleModelBuilder:\\\\\\\\n    \"\"\"\\\\\\\\n        Creates a ModuleModelBuilder instance for building module models.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            block_type: Specifies that a ModuleModelBuilder is to be created.\\\\\\\\n            id (str): The unique identifier for the module model.\\\\\\\\n            file_path (str): The file path of the module.\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            ModuleModelBuilder: An instance of ModuleModelBuilder.\\\\\\\\n        \"\"\"\\\\\\\\n    ...\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom typing import Any, Callable, Literal, overload\\\\nfrom typing import Any, Callable, Literal, overload\\\\nfrom typing import Any, Callable, Literal, overload\\\\nfrom typing import Any, Callable, Literal, overload\\\\nfrom utilities.logger.decorators import logging_decorator\\\\nfrom python_parser.model_builders.class_model_builder import ClassModelBuilder\\\\nfrom python_parser.model_builders.function_model_builder import FunctionModelBuilder\\\\nfrom python_parser.model_builders.module_model_builder import ModuleModelBuilder\\\\nfrom python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\\\nfrom python_parser.models.enums import BlockType\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom typing import Any, Callable, Literal, overload\\nfrom utilities.logger.decorators import logging_decorator\\nfrom python_parser.model_builders.class_model_builder import ClassModelBuilder\\nfrom python_parser.model_builders.function_model_builder import FunctionModelBuilder\\nfrom python_parser.model_builders.module_model_builder import ModuleModelBuilder\\nfrom python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\nfrom python_parser.models.enums import BlockType\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "class_name": "BuilderFactory",
            "decorators": null,
            "bases": null,
            "docstring": "A factory class for creating instances of different types of model builders.\n\nThis class uses a strategy pattern to map each block type to a corresponding builder creation function. Depending on the block type specified, it creates and returns an instance of the appropriate model builder class.\n\nThe factory supports creating builders for modules, classes, functions, and standalone code blocks.\n\nAttributes:\n    _creation_strategies (dict[BlockType, Callable[..., Any]]): A dictionary mapping block types to their corresponding builder creation functions.",
            "attributes": null,
            "keywords": null,
            "id": "python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory",
            "parent_id": "python_parser:model_builders:builder_factory.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 13,
            "end_line_num": 185,
            "code_content": "\n\nclass BuilderFactory:\n    \"\"\"\n    A factory class for creating instances of different types of model builders.\n\n    This class uses a strategy pattern to map each block type to a corresponding builder creation function. Depending on the block type specified, it creates and returns an instance of the appropriate model builder class.\n\n    The factory supports creating builders for modules, classes, functions, and standalone code blocks.\n\n    Attributes:\n        _creation_strategies (dict[BlockType, Callable[..., Any]]): A dictionary mapping block types to their corresponding builder creation functions.\n    \"\"\"\n\n    _creation_strategies: dict[BlockType, Callable[..., Any]] = {\n        BlockType.MODULE: lambda id, file_path, name, parent_id: ModuleModelBuilder(\n            id=id,\n            file_path=file_path,\n        ),\n        BlockType.CLASS: lambda id, name, parent_id, file_path: ClassModelBuilder(\n            id=id,\n            class_name=name,\n            parent_id=parent_id,\n        ),\n        BlockType.FUNCTION: lambda id, name, parent_id, file_path: FunctionModelBuilder(\n            id=id,\n            function_name=name,\n            parent_id=parent_id,\n        ),\n        BlockType.STANDALONE_CODE_BLOCK: lambda id, parent_id, name, file_path: StandaloneBlockModelBuilder(\n            id=id,\n            parent_id=parent_id,\n        ),\n    }\n\n    @staticmethod\n    @overload\n    def create_builder_instance(\n        block_type: Literal[BlockType.MODULE],\n        *,\n        id: str,\n        file_path: str,\n    ) -> ModuleModelBuilder:\n        \"\"\"\n        Creates a ModuleModelBuilder instance for building module models.\n\n        Args:\n            block_type: Specifies that a ModuleModelBuilder is to be created.\n            id (str): The unique identifier for the module model.\n            file_path (str): The file path of the module.\n\n        Returns:\n            ModuleModelBuilder: An instance of ModuleModelBuilder.\n        \"\"\"\n        ...\n\n    @staticmethod\n    @overload\n    def create_builder_instance(\n        block_type: Literal[BlockType.CLASS],\n        *,\n        id: str,\n        name: str,\n        parent_id: str,\n    ) -> ClassModelBuilder:\n        \"\"\"\n        Creates a ClassModelBuilder instance for building class models.\n\n        Args:\n            block_type: Specifies that a ClassModelBuilder is to be created.\n            id (str): The unique identifier for the class model.\n            name (str): The name of the class.\n            parent_id (str): The identifier of the parent model.\n\n        Returns:\n            ClassModelBuilder: An instance of ClassModelBuilder.\n        \"\"\"\n        ...\n\n    @staticmethod\n    @overload\n    def create_builder_instance(\n        block_type: Literal[BlockType.FUNCTION],\n        *,\n        id: str,\n        name: str,\n        parent_id: str,\n    ) -> FunctionModelBuilder:\n        \"\"\"\n        Creates a FunctionModelBuilder instance for building function models.\n\n        Args:\n            block_type: Specifies that a FunctionModelBuilder is to be created.\n            id (str): The unique identifier for the function model.\n            name (str): The name of the function.\n            parent_id (str): The identifier of the parent model.\n\n        Returns:\n            FunctionModelBuilder: An instance of FunctionModelBuilder.\n        \"\"\"\n        ...\n\n    @staticmethod\n    @overload\n    def create_builder_instance(\n        block_type: Literal[BlockType.STANDALONE_CODE_BLOCK],\n        *,\n        id: str,\n        parent_id: str,\n    ) -> StandaloneBlockModelBuilder:\n        \"\"\"\n        Creates a StandaloneBlockModelBuilder instance for building standalone code block models.\n\n        Args:\n            block_type: Specifies that a StandaloneBlockModelBuilder is to be created.\n            id (str): The unique identifier for the standalone code block model.\n            parent_id (str): The identifier of the parent model.\n\n        Returns:\n            StandaloneBlockModelBuilder: An instance of StandaloneBlockModelBuilder.\n        \"\"\"\n        ...\n\n    @logging_decorator()\n    @staticmethod\n    def create_builder_instance(\n        block_type: BlockType,\n        *,\n        id: str,\n        name: str | None = None,\n        parent_id: str | None = None,\n        file_path: str | None = None,\n    ) -> (\n        ModuleModelBuilder\n        | ClassModelBuilder\n        | FunctionModelBuilder\n        | StandaloneBlockModelBuilder\n    ):\n        \"\"\"\n        Creates and returns an instance of a model builder based on the specified block type.\n\n        Depending on the block type (module, class, function, standalone code block), it creates an instance of the corresponding model builder class.\n\n        Args:\n            block_type (BlockType): The type of code block for which the builder is to be created.\n            id (str): The unique identifier for the builder.\n            name (str | None): The name of the code block (relevant for class or function blocks).\n            parent_id (str | None): The identifier of the parent model (if applicable).\n            file_path (str | None): The file path of the module (relevant for module blocks).\n\n        Returns:\n            Union[ModuleModelBuilder, ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]:\n            An instance of the appropriate model builder class.\n\n        Raises:\n            ValueError: If an unknown block type is provided.\n\n        Example:\n            >>> builder = BuilderFactory.create_builder_instance(\n                    block_type=BlockType.CLASS,\n                    id='class1',\n                    name='MyClass',\n                    parent_id='module1'\n                )\n            # This will create an instance of ClassModelBuilder for a class named 'MyClass'.\n        \"\"\"\n\n        if block_type not in BuilderFactory._creation_strategies:\n            raise ValueError(f\"Unknown node type: {block_type}\")\n        return BuilderFactory._creation_strategies[block_type](\n            id=id, name=name, parent_id=parent_id, file_path=file_path\n        )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "Any",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Callable",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Literal",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "overload",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Any",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Callable",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Literal",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "overload",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Any",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Callable",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Literal",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "overload",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Any",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Callable",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Literal",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "overload",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "logging_decorator",
                            "as_name": null,
                            "local_block_id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator"
                        }
                    ],
                    "imported_from": "utilities.logger.decorators",
                    "import_module_type": "LOCAL",
                    "local_module_id": "utilities:logger:decorators.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ClassModelBuilder",
                            "as_name": null,
                            "local_block_id": "python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                        }
                    ],
                    "imported_from": "python_parser.model_builders.class_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "python_parser:model_builders:class_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "FunctionModelBuilder",
                            "as_name": null,
                            "local_block_id": "python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                        }
                    ],
                    "imported_from": "python_parser.model_builders.function_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "python_parser:model_builders:function_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ModuleModelBuilder",
                            "as_name": null,
                            "local_block_id": "python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                        }
                    ],
                    "imported_from": "python_parser.model_builders.module_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "python_parser:model_builders:module_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "StandaloneBlockModelBuilder",
                            "as_name": null,
                            "local_block_id": "python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                        }
                    ],
                    "imported_from": "python_parser.model_builders.standalone_block_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "BlockType",
                            "as_name": null,
                            "local_block_id": "python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                        }
                    ],
                    "imported_from": "python_parser.models.enums",
                    "import_module_type": "LOCAL",
                    "local_module_id": "python_parser:models:enums.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\nclass BuilderFactory:\\n    \"\"\"\\n    A factory class for creating instances of different types of model builders.\\n\\n    This class uses a strategy pattern to map each block type to a corresponding builder creation function. Depending on the block type specified, it creates and returns an instance of the appropriate model builder class.\\n\\n    The factory supports creating builders for modules, classes, functions, and standalone code blocks.\\n\\n    Attributes:\\n        _creation_strategies (dict[BlockType, Callable[..., Any]]): A dictionary mapping block types to their corresponding builder creation functions.\\n    \"\"\"\\n\\n    _creation_strategies: dict[BlockType, Callable[..., Any]] = {\\n        BlockType.MODULE: lambda id, file_path, name, parent_id: ModuleModelBuilder(\\n            id=id,\\n            file_path=file_path,\\n        ),\\n        BlockType.CLASS: lambda id, name, parent_id, file_path: ClassModelBuilder(\\n            id=id,\\n            class_name=name,\\n            parent_id=parent_id,\\n        ),\\n        BlockType.FUNCTION: lambda id, name, parent_id, file_path: FunctionModelBuilder(\\n            id=id,\\n            function_name=name,\\n            parent_id=parent_id,\\n        ),\\n        BlockType.STANDALONE_CODE_BLOCK: lambda id, parent_id, name, file_path: StandaloneBlockModelBuilder(\\n            id=id,\\n            parent_id=parent_id,\\n        ),\\n    }\\n\\n    @staticmethod\\n    @overload\\n    def create_builder_instance(\\n        block_type: Literal[BlockType.MODULE],\\n        *,\\n        id: str,\\n        file_path: str,\\n    ) -> ModuleModelBuilder:\\n        \"\"\"\\n        Creates a ModuleModelBuilder instance for building module models.\\n\\n        Args:\\n            block_type: Specifies that a ModuleModelBuilder is to be created.\\n            id (str): The unique identifier for the module model.\\n            file_path (str): The file path of the module.\\n\\n        Returns:\\n            ModuleModelBuilder: An instance of ModuleModelBuilder.\\n        \"\"\"\\n        ...\\n\\n    @staticmethod\\n    @overload\\n    def create_builder_instance(\\n        block_type: Literal[BlockType.CLASS],\\n        *,\\n        id: str,\\n        name: str,\\n        parent_id: str,\\n    ) -> ClassModelBuilder:\\n        \"\"\"\\n        Creates a ClassModelBuilder instance for building class models.\\n\\n        Args:\\n            block_type: Specifies that a ClassModelBuilder is to be created.\\n            id (str): The unique identifier for the class model.\\n            name (str): The name of the class.\\n            parent_id (str): The identifier of the parent model.\\n\\n        Returns:\\n            ClassModelBuilder: An instance of ClassModelBuilder.\\n        \"\"\"\\n        ...\\n\\n    @staticmethod\\n    @overload\\n    def create_builder_instance(\\n        block_type: Literal[BlockType.FUNCTION],\\n        *,\\n        id: str,\\n        name: str,\\n        parent_id: str,\\n    ) -> FunctionModelBuilder:\\n        \"\"\"\\n        Creates a FunctionModelBuilder instance for building function models.\\n\\n        Args:\\n            block_type: Specifies that a FunctionModelBuilder is to be created.\\n            id (str): The unique identifier for the function model.\\n            name (str): The name of the function.\\n            parent_id (str): The identifier of the parent model.\\n\\n        Returns:\\n            FunctionModelBuilder: An instance of FunctionModelBuilder.\\n        \"\"\"\\n        ...\\n\\n    @staticmethod\\n    @overload\\n    def create_builder_instance(\\n        block_type: Literal[BlockType.STANDALONE_CODE_BLOCK],\\n        *,\\n        id: str,\\n        parent_id: str,\\n    ) -> StandaloneBlockModelBuilder:\\n        \"\"\"\\n        Creates a StandaloneBlockModelBuilder instance for building standalone code block models.\\n\\n        Args:\\n            block_type: Specifies that a StandaloneBlockModelBuilder is to be created.\\n            id (str): The unique identifier for the standalone code block model.\\n            parent_id (str): The identifier of the parent model.\\n\\n        Returns:\\n            StandaloneBlockModelBuilder: An instance of StandaloneBlockModelBuilder.\\n        \"\"\"\\n        ...\\n\\n    @logging_decorator()\\n    @staticmethod\\n    def create_builder_instance(\\n        block_type: BlockType,\\n        *,\\n        id: str,\\n        name: str | None = None,\\n        parent_id: str | None = None,\\n        file_path: str | None = None,\\n    ) -> (\\n        ModuleModelBuilder\\n        | ClassModelBuilder\\n        | FunctionModelBuilder\\n        | StandaloneBlockModelBuilder\\n    ):\\n        \"\"\"\\n        Creates and returns an instance of a model builder based on the specified block type.\\n\\n        Depending on the block type (module, class, function, standalone code block), it creates an instance of the corresponding model builder class.\\n\\n        Args:\\n            block_type (BlockType): The type of code block for which the builder is to be created.\\n            id (str): The unique identifier for the builder.\\n            name (str | None): The name of the code block (relevant for class or function blocks).\\n            parent_id (str | None): The identifier of the parent model (if applicable).\\n            file_path (str | None): The file path of the module (relevant for module blocks).\\n\\n        Returns:\\n            Union[ModuleModelBuilder, ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]:\\n            An instance of the appropriate model builder class.\\n\\n        Raises:\\n            ValueError: If an unknown block type is provided.\\n\\n        Example:\\n            >>> builder = BuilderFactory.create_builder_instance(\\n                    block_type=BlockType.CLASS,\\n                    id=\\'class1\\',\\n                    name=\\'MyClass\\',\\n                    parent_id=\\'module1\\'\\n                )\\n            # This will create an instance of ClassModelBuilder for a class named \\'MyClass\\'.\\n        \"\"\"\\n\\n        if block_type not in BuilderFactory._creation_strategies:\\n            raise ValueError(f\"Unknown node type: {block_type}\")\\n        return BuilderFactory._creation_strategies[block_type](\\n            id=id, name=name, parent_id=parent_id, file_path=file_path\\n        )\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n@staticmethod\\\\n@overload\\\\ndef create_builder_instance(\\\\n    block_type: Literal[BlockType.MODULE],\\\\n    *,\\\\n    id: str,\\\\n    file_path: str,\\\\n) -> ModuleModelBuilder:\\\\n    \"\"\"\\\\n        Creates a ModuleModelBuilder instance for building module models.\\\\n\\\\n        Args:\\\\n            block_type: Specifies that a ModuleModelBuilder is to be created.\\\\n            id (str): The unique identifier for the module model.\\\\n            file_path (str): The file path of the module.\\\\n\\\\n        Returns:\\\\n            ModuleModelBuilder: An instance of ModuleModelBuilder.\\\\n        \"\"\"\\\\n    ...\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom typing import Any, Callable, Literal, overload\\nfrom typing import Any, Callable, Literal, overload\\nfrom typing import Any, Callable, Literal, overload\\nfrom typing import Any, Callable, Literal, overload\\nfrom utilities.logger.decorators import logging_decorator\\nfrom python_parser.model_builders.class_model_builder import ClassModelBuilder\\nfrom python_parser.model_builders.function_model_builder import FunctionModelBuilder\\nfrom python_parser.model_builders.module_model_builder import ModuleModelBuilder\\nfrom python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\nfrom python_parser.models.enums import BlockType\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "create_builder_instance",
                    "docstring": "Creates a ModuleModelBuilder instance for building module models.\n\nArgs:\n    block_type: Specifies that a ModuleModelBuilder is to be created.\n    id (str): The unique identifier for the module model.\n    file_path (str): The file path of the module.\n\nReturns:\n    ModuleModelBuilder: An instance of ModuleModelBuilder.",
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        },
                        {
                            "content": "@overload",
                            "decorator_name": "overload",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "ModuleModelBuilder",
                    "is_method": true,
                    "is_async": false,
                    "id": "python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory__*__FUNCTION-create_builder_instance",
                    "parent_id": "python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory",
                    "block_type": "FUNCTION",
                    "start_line_num": 47,
                    "end_line_num": 68,
                    "code_content": "\n@staticmethod\n@overload\ndef create_builder_instance(\n    block_type: Literal[BlockType.MODULE],\n    *,\n    id: str,\n    file_path: str,\n) -> ModuleModelBuilder:\n    \"\"\"\n        Creates a ModuleModelBuilder instance for building module models.\n\n        Args:\n            block_type: Specifies that a ModuleModelBuilder is to be created.\n            id (str): The unique identifier for the module model.\n            file_path (str): The file path of the module.\n\n        Returns:\n            ModuleModelBuilder: An instance of ModuleModelBuilder.\n        \"\"\"\n    ...\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n@staticmethod\\n@overload\\ndef create_builder_instance(\\n    block_type: Literal[BlockType.MODULE],\\n    *,\\n    id: str,\\n    file_path: str,\\n) -> ModuleModelBuilder:\\n    \"\"\"\\n        Creates a ModuleModelBuilder instance for building module models.\\n\\n        Args:\\n            block_type: Specifies that a ModuleModelBuilder is to be created.\\n            id (str): The unique identifier for the module model.\\n            file_path (str): The file path of the module.\\n\\n        Returns:\\n            ModuleModelBuilder: An instance of ModuleModelBuilder.\\n        \"\"\"\\n    ...\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "create_builder_instance",
                    "docstring": "Creates a ClassModelBuilder instance for building class models.\n\nArgs:\n    block_type: Specifies that a ClassModelBuilder is to be created.\n    id (str): The unique identifier for the class model.\n    name (str): The name of the class.\n    parent_id (str): The identifier of the parent model.\n\nReturns:\n    ClassModelBuilder: An instance of ClassModelBuilder.",
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        },
                        {
                            "content": "@overload",
                            "decorator_name": "overload",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "ClassModelBuilder",
                    "is_method": true,
                    "is_async": false,
                    "id": "python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory__*__FUNCTION-create_builder_instance",
                    "parent_id": "python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory",
                    "block_type": "FUNCTION",
                    "start_line_num": 68,
                    "end_line_num": 91,
                    "code_content": "\n@staticmethod\n@overload\ndef create_builder_instance(\n    block_type: Literal[BlockType.CLASS],\n    *,\n    id: str,\n    name: str,\n    parent_id: str,\n) -> ClassModelBuilder:\n    \"\"\"\n        Creates a ClassModelBuilder instance for building class models.\n\n        Args:\n            block_type: Specifies that a ClassModelBuilder is to be created.\n            id (str): The unique identifier for the class model.\n            name (str): The name of the class.\n            parent_id (str): The identifier of the parent model.\n\n        Returns:\n            ClassModelBuilder: An instance of ClassModelBuilder.\n        \"\"\"\n    ...\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "create_builder_instance",
                    "docstring": "Creates a FunctionModelBuilder instance for building function models.\n\nArgs:\n    block_type: Specifies that a FunctionModelBuilder is to be created.\n    id (str): The unique identifier for the function model.\n    name (str): The name of the function.\n    parent_id (str): The identifier of the parent model.\n\nReturns:\n    FunctionModelBuilder: An instance of FunctionModelBuilder.",
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        },
                        {
                            "content": "@overload",
                            "decorator_name": "overload",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "FunctionModelBuilder",
                    "is_method": true,
                    "is_async": false,
                    "id": "python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory__*__FUNCTION-create_builder_instance",
                    "parent_id": "python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory",
                    "block_type": "FUNCTION",
                    "start_line_num": 91,
                    "end_line_num": 114,
                    "code_content": "\n@staticmethod\n@overload\ndef create_builder_instance(\n    block_type: Literal[BlockType.FUNCTION],\n    *,\n    id: str,\n    name: str,\n    parent_id: str,\n) -> FunctionModelBuilder:\n    \"\"\"\n        Creates a FunctionModelBuilder instance for building function models.\n\n        Args:\n            block_type: Specifies that a FunctionModelBuilder is to be created.\n            id (str): The unique identifier for the function model.\n            name (str): The name of the function.\n            parent_id (str): The identifier of the parent model.\n\n        Returns:\n            FunctionModelBuilder: An instance of FunctionModelBuilder.\n        \"\"\"\n    ...\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "create_builder_instance",
                    "docstring": "Creates a StandaloneBlockModelBuilder instance for building standalone code block models.\n\nArgs:\n    block_type: Specifies that a StandaloneBlockModelBuilder is to be created.\n    id (str): The unique identifier for the standalone code block model.\n    parent_id (str): The identifier of the parent model.\n\nReturns:\n    StandaloneBlockModelBuilder: An instance of StandaloneBlockModelBuilder.",
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        },
                        {
                            "content": "@overload",
                            "decorator_name": "overload",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "StandaloneBlockModelBuilder",
                    "is_method": true,
                    "is_async": false,
                    "id": "python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory__*__FUNCTION-create_builder_instance",
                    "parent_id": "python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory",
                    "block_type": "FUNCTION",
                    "start_line_num": 114,
                    "end_line_num": 135,
                    "code_content": "\n@staticmethod\n@overload\ndef create_builder_instance(\n    block_type: Literal[BlockType.STANDALONE_CODE_BLOCK],\n    *,\n    id: str,\n    parent_id: str,\n) -> StandaloneBlockModelBuilder:\n    \"\"\"\n        Creates a StandaloneBlockModelBuilder instance for building standalone code block models.\n\n        Args:\n            block_type: Specifies that a StandaloneBlockModelBuilder is to be created.\n            id (str): The unique identifier for the standalone code block model.\n            parent_id (str): The identifier of the parent model.\n\n        Returns:\n            StandaloneBlockModelBuilder: An instance of StandaloneBlockModelBuilder.\n        \"\"\"\n    ...\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "create_builder_instance",
                    "docstring": "Creates and returns an instance of a model builder based on the specified block type.\n\nDepending on the block type (module, class, function, standalone code block), it creates an instance of the corresponding model builder class.\n\nArgs:\n    block_type (BlockType): The type of code block for which the builder is to be created.\n    id (str): The unique identifier for the builder.\n    name (str | None): The name of the code block (relevant for class or function blocks).\n    parent_id (str | None): The identifier of the parent model (if applicable).\n    file_path (str | None): The file path of the module (relevant for module blocks).\n\nReturns:\n    Union[ModuleModelBuilder, ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]:\n    An instance of the appropriate model builder class.\n\nRaises:\n    ValueError: If an unknown block type is provided.\n\nExample:\n    >>> builder = BuilderFactory.create_builder_instance(\n            block_type=BlockType.CLASS,\n            id='class1',\n            name='MyClass',\n            parent_id='module1'\n        )\n    # This will create an instance of ClassModelBuilder for a class named 'MyClass'.",
                    "decorators": [
                        {
                            "content": "@logging_decorator()",
                            "decorator_name": "logging_decorator",
                            "decorator_args": null
                        },
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "ModuleModelBuilder | ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder",
                    "is_method": true,
                    "is_async": false,
                    "id": "python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory__*__FUNCTION-create_builder_instance",
                    "parent_id": "python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory",
                    "block_type": "FUNCTION",
                    "start_line_num": 135,
                    "end_line_num": 185,
                    "code_content": "\n@logging_decorator()\n@staticmethod\ndef create_builder_instance(\n    block_type: BlockType,\n    *,\n    id: str,\n    name: str | None = None,\n    parent_id: str | None = None,\n    file_path: str | None = None,\n) -> (\n    ModuleModelBuilder\n    | ClassModelBuilder\n    | FunctionModelBuilder\n    | StandaloneBlockModelBuilder\n):\n    \"\"\"\n        Creates and returns an instance of a model builder based on the specified block type.\n\n        Depending on the block type (module, class, function, standalone code block), it creates an instance of the corresponding model builder class.\n\n        Args:\n            block_type (BlockType): The type of code block for which the builder is to be created.\n            id (str): The unique identifier for the builder.\n            name (str | None): The name of the code block (relevant for class or function blocks).\n            parent_id (str | None): The identifier of the parent model (if applicable).\n            file_path (str | None): The file path of the module (relevant for module blocks).\n\n        Returns:\n            Union[ModuleModelBuilder, ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]:\n            An instance of the appropriate model builder class.\n\n        Raises:\n            ValueError: If an unknown block type is provided.\n\n        Example:\n            >>> builder = BuilderFactory.create_builder_instance(\n                    block_type=BlockType.CLASS,\n                    id='class1',\n                    name='MyClass',\n                    parent_id='module1'\n                )\n            # This will create an instance of ClassModelBuilder for a class named 'MyClass'.\n        \"\"\"\n\n    if block_type not in BuilderFactory._creation_strategies:\n        raise ValueError(f\"Unknown node type: {block_type}\")\n    return BuilderFactory._creation_strategies[block_type](\n        id=id, name=name, parent_id=parent_id, file_path=file_path\n    )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                }
            ]
        }
    ]
}