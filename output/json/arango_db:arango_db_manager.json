{
    "file_path": "./arango_db/arango_db_manager.py",
    "docstring": null,
    "header": [],
    "footer": [
        "# # Usage example",
        "# db_manager = ArangoDBManager()",
        "# db_manager.delete_all_collections()",
        "# db_manager.process_graph_data(",
        "#     \"/Users/evanschultz/Documents/Code/post-code/output/json/\"",
        "# )",
        "# db_manager.process_dependencies_and_imports()"
    ],
    "imports": [
        {
            "import_names": [
                {
                    "name": "os",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "json",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Literal",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ArangoClient",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "arango.client",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "StandardDatabase",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "arango.database",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Cursor",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "arango.cursor",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "AsyncJob",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "BatchJob",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "arango.job",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Result",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "arango.result",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Json",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Jsons",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "arango.typings",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ArangoError",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "arango",
            "import_module_type": "LOCAL",
            "local_module_id": ".:arango_db:arango_db_builder.py__*__MODULE"
        }
    ],
    "id": ".:arango_db:arango_db_manager.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 81,
    "code_content": "import os\nimport json\nfrom typing import Literal\n\nfrom arango import ArangoError\nfrom arango.client import ArangoClient\nfrom arango.database import StandardDatabase\nfrom arango.cursor import Cursor\nfrom arango.job import AsyncJob, BatchJob\nfrom arango.result import Result\nfrom arango.typings import Json, Jsons\n\n\nclass ArangoDBManager:\n    def __init__(\n        self,\n        url: str = \"http://localhost:8529\",\n        username: str = \"root\",\n        password: str = \"openSesame\",\n        db_name: str = \"post_code\",\n    ) -> None:\n        self.client = ArangoClient(hosts=url)\n        self.username: str = username\n        self.password: str = password\n        self.db_name: str = db_name\n        self.db: StandardDatabase = self._ensure_database()\n\n    def _ensure_database(self) -> StandardDatabase:\n        sys_db: StandardDatabase = self.client.db(\n            \"_system\", username=self.username, password=self.password\n        )\n        if not sys_db.has_database(self.db_name):\n            sys_db.create_database(self.db_name)\n        return self.client.db(\n            self.db_name, username=self.username, password=self.password\n        )\n\n    def _ensure_vertex_collections(self, vertex_collections: list[str]) -> None:\n        for collection in vertex_collections:\n            if not self.db.has_collection(collection):\n                self.db.create_collection(collection)\n\n    def ensure_collection(self, collection_name: str) -> None:\n        if not self.db.has_collection(collection_name):\n            self.db.create_collection(collection_name)\n            print(f\"Created collection: {collection_name}\")\n\n    def ensure_edge_collection(self, collection_name: str) -> None:\n        if not self.db.has_collection(collection_name):\n            self.db.create_collection(collection_name, edge=True)\n            print(f\"Created edge collection: {collection_name}\")\n\n    def delete_all_collections(self) -> None:\n        collections: Result[Jsons] = self.db.collections()\n\n        for collection in collections:  # type: ignore # FIXME: Fix type error\n            if not collection[\"name\"].startswith(\"_\"):  # Skip system collections\n                self.db.delete_collection(collection[\"name\"])\n                print(f\"Deleted collection: {collection['name']}\")\n\n    def setup_collections(self):\n        required_collections = [\n            \"modules\",\n            \"classes\",\n            \"functions\",\n            \"standalone_blocks\",\n        ]\n        for collection_name in required_collections:\n            self.ensure_collection(collection_name)\n\n        self.ensure_edge_collection(\"code_edges\")\n\n\n# # Usage example\n# db_manager = ArangoDBManager()\n# db_manager.delete_all_collections()\n# db_manager.process_graph_data(\n#     \"/Users/evanschultz/Documents/Code/post-code/output/json/\"\n# )\n# db_manager.process_dependencies_and_imports()\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\n\\nCODE:\\n```Python\\nimport os\\nimport json\\nfrom typing import Literal\\n\\nfrom arango import ArangoError\\nfrom arango.client import ArangoClient\\nfrom arango.database import StandardDatabase\\nfrom arango.cursor import Cursor\\nfrom arango.job import AsyncJob, BatchJob\\nfrom arango.result import Result\\nfrom arango.typings import Json, Jsons\\n\\n\\nclass ArangoDBManager:\\n    def __init__(\\n        self,\\n        url: str = \"http://localhost:8529\",\\n        username: str = \"root\",\\n        password: str = \"openSesame\",\\n        db_name: str = \"post_code\",\\n    ) -> None:\\n        self.client = ArangoClient(hosts=url)\\n        self.username: str = username\\n        self.password: str = password\\n        self.db_name: str = db_name\\n        self.db: StandardDatabase = self._ensure_database()\\n\\n    def _ensure_database(self) -> StandardDatabase:\\n        sys_db: StandardDatabase = self.client.db(\\n            \"_system\", username=self.username, password=self.password\\n        )\\n        if not sys_db.has_database(self.db_name):\\n            sys_db.create_database(self.db_name)\\n        return self.client.db(\\n            self.db_name, username=self.username, password=self.password\\n        )\\n\\n    def _ensure_vertex_collections(self, vertex_collections: list[str]) -> None:\\n        for collection in vertex_collections:\\n            if not self.db.has_collection(collection):\\n                self.db.create_collection(collection)\\n\\n    def ensure_collection(self, collection_name: str) -> None:\\n        if not self.db.has_collection(collection_name):\\n            self.db.create_collection(collection_name)\\n            print(f\"Created collection: {collection_name}\")\\n\\n    def ensure_edge_collection(self, collection_name: str) -> None:\\n        if not self.db.has_collection(collection_name):\\n            self.db.create_collection(collection_name, edge=True)\\n            print(f\"Created edge collection: {collection_name}\")\\n\\n    def delete_all_collections(self) -> None:\\n        collections: Result[Jsons] = self.db.collections()\\n\\n        for collection in collections:  # type: ignore # FIXME: Fix type error\\n            if not collection[\"name\"].startswith(\"_\"):  # Skip system collections\\n                self.db.delete_collection(collection[\"name\"])\\n                print(f\"Deleted collection: {collection[\\'name\\']}\")\\n\\n    def setup_collections(self):\\n        required_collections = [\\n            \"modules\",\\n            \"classes\",\\n            \"functions\",\\n            \"standalone_blocks\",\\n        ]\\n        for collection_name in required_collections:\\n            self.ensure_collection(collection_name)\\n\\n        self.ensure_edge_collection(\"code_edges\")\\n\\n\\n# # Usage example\\n# db_manager = ArangoDBManager()\\n# db_manager.delete_all_collections()\\n# db_manager.process_graph_data(\\n#     \"/Users/evanschultz/Documents/Code/post-code/output/json/\"\\n# )\\n# db_manager.process_dependencies_and_imports()\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\n\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\n\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\npartitioning logic.\"\\\\n\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\n\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\'s content.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\n\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass ArangoDBManager:\\\\n    def __init__(\\\\n        self,\\\\n        url: str = \"http://localhost:8529\",\\\\n        username: str = \"root\",\\\\n        password: str = \"openSesame\",\\\\n        db_name: str = \"post_code\",\\\\n    ) -> None:\\\\n        self.client = ArangoClient(hosts=url)\\\\n        self.username: str = username\\\\n        self.password: str = password\\\\n        self.db_name: str = db_name\\\\n        self.db: StandardDatabase = self._ensure_database()\\\\n\\\\n    def _ensure_database(self) -> StandardDatabase:\\\\n        sys_db: StandardDatabase = self.client.db(\\\\n            \"_system\", username=self.username, password=self.password\\\\n        )\\\\n        if not sys_db.has_database(self.db_name):\\\\n            sys_db.create_database(self.db_name)\\\\n        return self.client.db(\\\\n            self.db_name, username=self.username, password=self.password\\\\n        )\\\\n\\\\n    def _ensure_vertex_collections(self, vertex_collections: list[str]) -> None:\\\\n        for collection in vertex_collections:\\\\n            if not self.db.has_collection(collection):\\\\n                self.db.create_collection(collection)\\\\n\\\\n    def ensure_collection(self, collection_name: str) -> None:\\\\n        if not self.db.has_collection(collection_name):\\\\n            self.db.create_collection(collection_name)\\\\n            print(f\"Created collection: {collection_name}\")\\\\n\\\\n    def ensure_edge_collection(self, collection_name: str) -> None:\\\\n        if not self.db.has_collection(collection_name):\\\\n            self.db.create_collection(collection_name, edge=True)\\\\n            print(f\"Created edge collection: {collection_name}\")\\\\n\\\\n    def delete_all_collections(self) -> None:\\\\n        collections: Result[Jsons] = self.db.collections()\\\\n\\\\n        for collection in collections:  # type: ignore # FIXME: Fix type error\\\\n            if not collection[\"name\"].startswith(\"_\"):  # Skip system collections\\\\n                self.db.delete_collection(collection[\"name\"])\\\\n                print(f\"Deleted collection: {collection[\\\\\\'name\\\\\\']}\")\\\\n\\\\n    def setup_collections(self):\\\\n        required_collections = [\\\\n            \"modules\",\\\\n            \"classes\",\\\\n            \"functions\",\\\\n            \"standalone_blocks\",\\\\n        ]\\\\n        for collection_name in required_collections:\\\\n            self.ensure_collection(collection_name)\\\\n\\\\n        self.ensure_edge_collection(\"code_edges\")\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\ndef __init__(\\\\\\\\n    self,\\\\\\\\n    url: str = \"http://localhost:8529\",\\\\\\\\n    username: str = \"root\",\\\\\\\\n    password: str = \"openSesame\",\\\\\\\\n    db_name: str = \"post_code\",\\\\\\\\n) -> None:\\\\\\\\n    self.client = ArangoClient(hosts=url)\\\\\\\\n    self.username: str = username\\\\\\\\n    self.password: str = password\\\\\\\\n    self.db_name: str = db_name\\\\\\\\n    self.db: StandardDatabase = self._ensure_database()\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef _ensure_database(self) -> StandardDatabase:\\\\\\\\n    sys_db: StandardDatabase = self.client.db(\\\\\\\\n        \"_system\", username=self.username, password=self.password\\\\\\\\n    )\\\\\\\\n    if not sys_db.has_database(self.db_name):\\\\\\\\n        sys_db.create_database(self.db_name)\\\\\\\\n    return self.client.db(\\\\\\\\n        self.db_name, username=self.username, password=self.password\\\\\\\\n    )\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef _ensure_vertex_collections(self, vertex_collections: list[str]) -> None:\\\\\\\\n    for collection in vertex_collections:\\\\\\\\n        if not self.db.has_collection(collection):\\\\\\\\n            self.db.create_collection(collection)\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef ensure_collection(self, collection_name: str) -> None:\\\\\\\\n    if not self.db.has_collection(collection_name):\\\\\\\\n        self.db.create_collection(collection_name)\\\\\\\\n        print(f\"Created collection: {collection_name}\")\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef ensure_edge_collection(self, collection_name: str) -> None:\\\\\\\\n    if not self.db.has_collection(collection_name):\\\\\\\\n        self.db.create_collection(collection_name, edge=True)\\\\\\\\n        print(f\"Created edge collection: {collection_name}\")\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef delete_all_collections(self) -> None:\\\\\\\\n    collections: Result[Jsons] = self.db.collections()\\\\\\\\n\\\\\\\\n    for collection in collections:  # type: ignore # FIXME: Fix type error\\\\\\\\n        if not collection[\"name\"].startswith(\"_\"):  # Skip system collections\\\\\\\\n            self.db.delete_collection(collection[\"name\"])\\\\\\\\n            print(f\"Deleted collection: {collection[\\\\\\\\\\\\\\'name\\\\\\\\\\\\\\']}\")\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef setup_collections(self):\\\\\\\\n    required_collections = [\\\\\\\\n        \"modules\",\\\\\\\\n        \"classes\",\\\\\\\\n        \"functions\",\\\\\\\\n        \"standalone_blocks\",\\\\\\\\n    ]\\\\\\\\n    for collection_name in required_collections:\\\\\\\\n        self.ensure_collection(collection_name)\\\\\\\\n\\\\\\\\n    self.ensure_edge_collection(\"code_edges\")\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "class_name": "ArangoDBManager",
            "decorators": null,
            "bases": null,
            "docstring": null,
            "attributes": null,
            "keywords": null,
            "id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager",
            "parent_id": ".:arango_db:arango_db_manager.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 12,
            "end_line_num": 72,
            "code_content": "\n\nclass ArangoDBManager:\n    def __init__(\n        self,\n        url: str = \"http://localhost:8529\",\n        username: str = \"root\",\n        password: str = \"openSesame\",\n        db_name: str = \"post_code\",\n    ) -> None:\n        self.client = ArangoClient(hosts=url)\n        self.username: str = username\n        self.password: str = password\n        self.db_name: str = db_name\n        self.db: StandardDatabase = self._ensure_database()\n\n    def _ensure_database(self) -> StandardDatabase:\n        sys_db: StandardDatabase = self.client.db(\n            \"_system\", username=self.username, password=self.password\n        )\n        if not sys_db.has_database(self.db_name):\n            sys_db.create_database(self.db_name)\n        return self.client.db(\n            self.db_name, username=self.username, password=self.password\n        )\n\n    def _ensure_vertex_collections(self, vertex_collections: list[str]) -> None:\n        for collection in vertex_collections:\n            if not self.db.has_collection(collection):\n                self.db.create_collection(collection)\n\n    def ensure_collection(self, collection_name: str) -> None:\n        if not self.db.has_collection(collection_name):\n            self.db.create_collection(collection_name)\n            print(f\"Created collection: {collection_name}\")\n\n    def ensure_edge_collection(self, collection_name: str) -> None:\n        if not self.db.has_collection(collection_name):\n            self.db.create_collection(collection_name, edge=True)\n            print(f\"Created edge collection: {collection_name}\")\n\n    def delete_all_collections(self) -> None:\n        collections: Result[Jsons] = self.db.collections()\n\n        for collection in collections:  # type: ignore # FIXME: Fix type error\n            if not collection[\"name\"].startswith(\"_\"):  # Skip system collections\n                self.db.delete_collection(collection[\"name\"])\n                print(f\"Deleted collection: {collection['name']}\")\n\n    def setup_collections(self):\n        required_collections = [\n            \"modules\",\n            \"classes\",\n            \"functions\",\n            \"standalone_blocks\",\n        ]\n        for collection_name in required_collections:\n            self.ensure_collection(collection_name)\n\n        self.ensure_edge_collection(\"code_edges\")\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "os",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ArangoClient",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "arango.client",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "StandardDatabase",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "arango.database",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Result",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "arango.result",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Json",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Jsons",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "arango.typings",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Json",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Jsons",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "arango.typings",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\n\\nCODE:\\n```Python\\n\\n\\nclass ArangoDBManager:\\n    def __init__(\\n        self,\\n        url: str = \"http://localhost:8529\",\\n        username: str = \"root\",\\n        password: str = \"openSesame\",\\n        db_name: str = \"post_code\",\\n    ) -> None:\\n        self.client = ArangoClient(hosts=url)\\n        self.username: str = username\\n        self.password: str = password\\n        self.db_name: str = db_name\\n        self.db: StandardDatabase = self._ensure_database()\\n\\n    def _ensure_database(self) -> StandardDatabase:\\n        sys_db: StandardDatabase = self.client.db(\\n            \"_system\", username=self.username, password=self.password\\n        )\\n        if not sys_db.has_database(self.db_name):\\n            sys_db.create_database(self.db_name)\\n        return self.client.db(\\n            self.db_name, username=self.username, password=self.password\\n        )\\n\\n    def _ensure_vertex_collections(self, vertex_collections: list[str]) -> None:\\n        for collection in vertex_collections:\\n            if not self.db.has_collection(collection):\\n                self.db.create_collection(collection)\\n\\n    def ensure_collection(self, collection_name: str) -> None:\\n        if not self.db.has_collection(collection_name):\\n            self.db.create_collection(collection_name)\\n            print(f\"Created collection: {collection_name}\")\\n\\n    def ensure_edge_collection(self, collection_name: str) -> None:\\n        if not self.db.has_collection(collection_name):\\n            self.db.create_collection(collection_name, edge=True)\\n            print(f\"Created edge collection: {collection_name}\")\\n\\n    def delete_all_collections(self) -> None:\\n        collections: Result[Jsons] = self.db.collections()\\n\\n        for collection in collections:  # type: ignore # FIXME: Fix type error\\n            if not collection[\"name\"].startswith(\"_\"):  # Skip system collections\\n                self.db.delete_collection(collection[\"name\"])\\n                print(f\"Deleted collection: {collection[\\'name\\']}\")\\n\\n    def setup_collections(self):\\n        required_collections = [\\n            \"modules\",\\n            \"classes\",\\n            \"functions\",\\n            \"standalone_blocks\",\\n        ]\\n        for collection_name in required_collections:\\n            self.ensure_collection(collection_name)\\n\\n        self.ensure_edge_collection(\"code_edges\")\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\ndef __init__(\\\\n    self,\\\\n    url: str = \"http://localhost:8529\",\\\\n    username: str = \"root\",\\\\n    password: str = \"openSesame\",\\\\n    db_name: str = \"post_code\",\\\\n) -> None:\\\\n    self.client = ArangoClient(hosts=url)\\\\n    self.username: str = username\\\\n    self.password: str = password\\\\n    self.db_name: str = db_name\\\\n    self.db: StandardDatabase = self._ensure_database()\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef _ensure_database(self) -> StandardDatabase:\\\\n    sys_db: StandardDatabase = self.client.db(\\\\n        \"_system\", username=self.username, password=self.password\\\\n    )\\\\n    if not sys_db.has_database(self.db_name):\\\\n        sys_db.create_database(self.db_name)\\\\n    return self.client.db(\\\\n        self.db_name, username=self.username, password=self.password\\\\n    )\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef _ensure_vertex_collections(self, vertex_collections: list[str]) -> None:\\\\n    for collection in vertex_collections:\\\\n        if not self.db.has_collection(collection):\\\\n            self.db.create_collection(collection)\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef ensure_collection(self, collection_name: str) -> None:\\\\n    if not self.db.has_collection(collection_name):\\\\n        self.db.create_collection(collection_name)\\\\n        print(f\"Created collection: {collection_name}\")\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef ensure_edge_collection(self, collection_name: str) -> None:\\\\n    if not self.db.has_collection(collection_name):\\\\n        self.db.create_collection(collection_name, edge=True)\\\\n        print(f\"Created edge collection: {collection_name}\")\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef delete_all_collections(self) -> None:\\\\n    collections: Result[Jsons] = self.db.collections()\\\\n\\\\n    for collection in collections:  # type: ignore # FIXME: Fix type error\\\\n        if not collection[\"name\"].startswith(\"_\"):  # Skip system collections\\\\n            self.db.delete_collection(collection[\"name\"])\\\\n            print(f\"Deleted collection: {collection[\\\\\\'name\\\\\\']}\")\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef setup_collections(self):\\\\n    required_collections = [\\\\n        \"modules\",\\\\n        \"classes\",\\\\n        \"functions\",\\\\n        \"standalone_blocks\",\\\\n    ]\\\\n    for collection_name in required_collections:\\\\n        self.ensure_collection(collection_name)\\\\n\\\\n    self.ensure_edge_collection(\"code_edges\")\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager__*__FUNCTION-__init__",
                    "parent_id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 15,
                    "end_line_num": 27,
                    "code_content": "def __init__(\n    self,\n    url: str = \"http://localhost:8529\",\n    username: str = \"root\",\n    password: str = \"openSesame\",\n    db_name: str = \"post_code\",\n) -> None:\n    self.client = ArangoClient(hosts=url)\n    self.username: str = username\n    self.password: str = password\n    self.db_name: str = db_name\n    self.db: StandardDatabase = self._ensure_database()\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\ndef __init__(\\n    self,\\n    url: str = \"http://localhost:8529\",\\n    username: str = \"root\",\\n    password: str = \"openSesame\",\\n    db_name: str = \"post_code\",\\n) -> None:\\n    self.client = ArangoClient(hosts=url)\\n    self.username: str = username\\n    self.password: str = password\\n    self.db_name: str = db_name\\n    self.db: StandardDatabase = self._ensure_database()\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_ensure_database",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "StandardDatabase",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager__*__FUNCTION-_ensure_database",
                    "parent_id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 27,
                    "end_line_num": 37,
                    "code_content": "\ndef _ensure_database(self) -> StandardDatabase:\n    sys_db: StandardDatabase = self.client.db(\n        \"_system\", username=self.username, password=self.password\n    )\n    if not sys_db.has_database(self.db_name):\n        sys_db.create_database(self.db_name)\n    return self.client.db(\n        self.db_name, username=self.username, password=self.password\n    )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef _ensure_database(self) -> StandardDatabase:\\n    sys_db: StandardDatabase = self.client.db(\\n        \"_system\", username=self.username, password=self.password\\n    )\\n    if not sys_db.has_database(self.db_name):\\n        sys_db.create_database(self.db_name)\\n    return self.client.db(\\n        self.db_name, username=self.username, password=self.password\\n    )\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_ensure_vertex_collections",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager__*__FUNCTION-_ensure_vertex_collections",
                    "parent_id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 37,
                    "end_line_num": 42,
                    "code_content": "\ndef _ensure_vertex_collections(self, vertex_collections: list[str]) -> None:\n    for collection in vertex_collections:\n        if not self.db.has_collection(collection):\n            self.db.create_collection(collection)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef _ensure_vertex_collections(self, vertex_collections: list[str]) -> None:\\n    for collection in vertex_collections:\\n        if not self.db.has_collection(collection):\\n            self.db.create_collection(collection)\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "ensure_collection",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager__*__FUNCTION-ensure_collection",
                    "parent_id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 42,
                    "end_line_num": 47,
                    "code_content": "\ndef ensure_collection(self, collection_name: str) -> None:\n    if not self.db.has_collection(collection_name):\n        self.db.create_collection(collection_name)\n        print(f\"Created collection: {collection_name}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef ensure_collection(self, collection_name: str) -> None:\\n    if not self.db.has_collection(collection_name):\\n        self.db.create_collection(collection_name)\\n        print(f\"Created collection: {collection_name}\")\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "ensure_edge_collection",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager__*__FUNCTION-ensure_edge_collection",
                    "parent_id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 47,
                    "end_line_num": 52,
                    "code_content": "\ndef ensure_edge_collection(self, collection_name: str) -> None:\n    if not self.db.has_collection(collection_name):\n        self.db.create_collection(collection_name, edge=True)\n        print(f\"Created edge collection: {collection_name}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef ensure_edge_collection(self, collection_name: str) -> None:\\n    if not self.db.has_collection(collection_name):\\n        self.db.create_collection(collection_name, edge=True)\\n        print(f\"Created edge collection: {collection_name}\")\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "delete_all_collections",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager__*__FUNCTION-delete_all_collections",
                    "parent_id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 52,
                    "end_line_num": 60,
                    "code_content": "\ndef delete_all_collections(self) -> None:\n    collections: Result[Jsons] = self.db.collections()\n\n    for collection in collections:  # type: ignore # FIXME: Fix type error\n        if not collection[\"name\"].startswith(\"_\"):  # Skip system collections\n            self.db.delete_collection(collection[\"name\"])\n            print(f\"Deleted collection: {collection['name']}\")\n",
                    "important_comments": [
                        {
                            "content": "# type: ignore # FIXME: Fix type error",
                            "comment_types": [
                                "FIXME"
                            ]
                        }
                    ],
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef delete_all_collections(self) -> None:\\n    collections: Result[Jsons] = self.db.collections()\\n\\n    for collection in collections:  # type: ignore # FIXME: Fix type error\\n        if not collection[\"name\"].startswith(\"_\"):  # Skip system collections\\n            self.db.delete_collection(collection[\"name\"])\\n            print(f\"Deleted collection: {collection[\\'name\\']}\")\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "setup_collections",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "Function has no return annotation",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager__*__FUNCTION-setup_collections",
                    "parent_id": ".:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 60,
                    "end_line_num": 72,
                    "code_content": "\ndef setup_collections(self):\n    required_collections = [\n        \"modules\",\n        \"classes\",\n        \"functions\",\n        \"standalone_blocks\",\n    ]\n    for collection_name in required_collections:\n        self.ensure_collection(collection_name)\n\n    self.ensure_edge_collection(\"code_edges\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef setup_collections(self):\\n    required_collections = [\\n        \"modules\",\\n        \"classes\",\\n        \"functions\",\\n        \"standalone_blocks\",\\n    ]\\n    for collection_name in required_collections:\\n        self.ensure_collection(collection_name)\\n\\n    self.ensure_edge_collection(\"code_edges\")\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        }
    ]
}