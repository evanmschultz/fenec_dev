{
    "file_path": "./python_parser/utilities/logger/logging_config.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "RichHandler",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "rich.logging",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Syntax",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "rich.syntax",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "id": ".:python_parser:utilities:logger:logging_config.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 69,
    "code_content": "import logging\n\nfrom rich.logging import RichHandler\nfrom rich.syntax import Syntax\n\n\ndef setup_logging(level=logging.INFO) -> None:\n    \"\"\"\n    Configures the logging system to use RichSyntaxHandler for output.\n\n    This function sets up logging with a specific log level and format. It utilizes the RichSyntaxHandler to support rich text and syntax highlighting in log outputs.\n\n    Args:\n        level (int, optional): The logging level to set for the root logger. Defaults to logging.INFO.\n\n    Example:\n        >>> setup_logging(logging.DEBUG)\n        # Configures logging at DEBUG level with RichSyntaxHandler.\n    \"\"\"\n\n    format_str = \"%(message)s\"\n    logging.basicConfig(level=level, format=format_str, handlers=[RichSyntaxHandler()])\n\n\nclass RichSyntaxHandler(RichHandler):\n    \"\"\"\n    A custom logging handler that extends RichHandler to add syntax highlighting.\n\n    This handler checks if the log record contains a 'syntax_highlight' attribute and, if so, uses 'rich.syntax.Syntax' to render the message with Python syntax highlighting.\n\n    Inherits:\n        RichHandler: The base handler provided by the rich library for rich text formatting.\n    \"\"\"\n\n    def emit(self, record) -> None:\n        \"\"\"\n        Emits a logging record.\n\n        If the record has the 'syntax_highlight' attribute set to True, it renders the 'content' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\n\n        Args:\n            record: The logging record to emit.\n\n        Example:\n            # Assuming `logger` is a logger instance\n            >>> logger.info(\"Regular log message\")\n            # Outputs a regular log message.\n\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print('Hello, world!')\"})\n            # Outputs the message with syntax highlighting.\n        \"\"\"\n\n        try:\n            if hasattr(record, \"syntax_highlight\") and getattr(\n                record, \"syntax_highlight\"\n            ):\n                content: str = getattr(record, \"content\", \"\")\n                if isinstance(content, str):\n                    syntax = Syntax(\n                        content, \"python\", theme=\"material\", line_numbers=True\n                    )\n                    self.console.print(syntax)\n                return\n\n        except Exception as e:\n            self.handleError(record)\n\n        super().emit(record)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": null,
    "children": [
        {
            "function_name": "setup_logging",
            "docstring": "Configures the logging system to use RichSyntaxHandler for output.\n\nThis function sets up logging with a specific log level and format. It utilizes the RichSyntaxHandler to support rich text and syntax highlighting in log outputs.\n\nArgs:\n    level (int, optional): The logging level to set for the root logger. Defaults to logging.INFO.\n\nExample:\n    >>> setup_logging(logging.DEBUG)\n    # Configures logging at DEBUG level with RichSyntaxHandler.",
            "decorators": null,
            "parameters": null,
            "returns": "None",
            "is_method": false,
            "is_async": false,
            "id": ".:python_parser:utilities:logger:logging_config.py__*__MODULE__*__FUNCTION-setup_logging",
            "parent_id": ".:python_parser:utilities:logger:logging_config.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 5,
            "end_line_num": 23,
            "code_content": "\n\ndef setup_logging(level=logging.INFO) -> None:\n    \"\"\"\n    Configures the logging system to use RichSyntaxHandler for output.\n\n    This function sets up logging with a specific log level and format. It utilizes the RichSyntaxHandler to support rich text and syntax highlighting in log outputs.\n\n    Args:\n        level (int, optional): The logging level to set for the root logger. Defaults to logging.INFO.\n\n    Example:\n        >>> setup_logging(logging.DEBUG)\n        # Configures logging at DEBUG level with RichSyntaxHandler.\n    \"\"\"\n\n    format_str = \"%(message)s\"\n    logging.basicConfig(level=level, format=format_str, handlers=[RichSyntaxHandler()])\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:python_parser:utilities:logger:logging_config.py__*__MODULE__*__CLASS-RichSyntaxHandler"
                },
                {
                    "import_names": [
                        {
                            "name": "logging",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Syntax",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "rich.syntax",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": null,
            "children": null
        },
        {
            "class_name": "RichSyntaxHandler",
            "decorators": null,
            "bases": [
                "RichHandler"
            ],
            "docstring": "A custom logging handler that extends RichHandler to add syntax highlighting.\n\nThis handler checks if the log record contains a 'syntax_highlight' attribute and, if so, uses 'rich.syntax.Syntax' to render the message with Python syntax highlighting.\n\nInherits:\n    RichHandler: The base handler provided by the rich library for rich text formatting.",
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:utilities:logger:logging_config.py__*__MODULE__*__CLASS-RichSyntaxHandler",
            "parent_id": ".:python_parser:utilities:logger:logging_config.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 23,
            "end_line_num": 69,
            "code_content": "\n\nclass RichSyntaxHandler(RichHandler):\n    \"\"\"\n    A custom logging handler that extends RichHandler to add syntax highlighting.\n\n    This handler checks if the log record contains a 'syntax_highlight' attribute and, if so, uses 'rich.syntax.Syntax' to render the message with Python syntax highlighting.\n\n    Inherits:\n        RichHandler: The base handler provided by the rich library for rich text formatting.\n    \"\"\"\n\n    def emit(self, record) -> None:\n        \"\"\"\n        Emits a logging record.\n\n        If the record has the 'syntax_highlight' attribute set to True, it renders the 'content' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\n\n        Args:\n            record: The logging record to emit.\n\n        Example:\n            # Assuming `logger` is a logger instance\n            >>> logger.info(\"Regular log message\")\n            # Outputs a regular log message.\n\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print('Hello, world!')\"})\n            # Outputs the message with syntax highlighting.\n        \"\"\"\n\n        try:\n            if hasattr(record, \"syntax_highlight\") and getattr(\n                record, \"syntax_highlight\"\n            ):\n                content: str = getattr(record, \"content\", \"\")\n                if isinstance(content, str):\n                    syntax = Syntax(\n                        content, \"python\", theme=\"material\", line_numbers=True\n                    )\n                    self.console.print(syntax)\n                return\n\n        except Exception as e:\n            self.handleError(record)\n\n        super().emit(record)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "logging",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "RichHandler",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "rich.logging",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Syntax",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "rich.syntax",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": null,
            "children": [
                {
                    "function_name": "emit",
                    "docstring": "Emits a logging record.\n\nIf the record has the 'syntax_highlight' attribute set to True, it renders the 'content' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\n\nArgs:\n    record: The logging record to emit.\n\nExample:\n    # Assuming `logger` is a logger instance\n    >>> logger.info(\"Regular log message\")\n    # Outputs a regular log message.\n\n    >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print('Hello, world!')\"})\n    # Outputs the message with syntax highlighting.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:utilities:logger:logging_config.py__*__MODULE__*__CLASS-RichSyntaxHandler__*__FUNCTION-emit",
                    "parent_id": ".:python_parser:utilities:logger:logging_config.py__*__MODULE__*__CLASS-RichSyntaxHandler",
                    "block_type": "FUNCTION",
                    "start_line_num": 34,
                    "end_line_num": 69,
                    "code_content": "\ndef emit(self, record) -> None:\n    \"\"\"\n        Emits a logging record.\n\n        If the record has the 'syntax_highlight' attribute set to True, it renders the 'content' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\n\n        Args:\n            record: The logging record to emit.\n\n        Example:\n            # Assuming `logger` is a logger instance\n            >>> logger.info(\"Regular log message\")\n            # Outputs a regular log message.\n\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print('Hello, world!')\"})\n            # Outputs the message with syntax highlighting.\n        \"\"\"\n\n    try:\n        if hasattr(record, \"syntax_highlight\") and getattr(\n            record, \"syntax_highlight\"\n        ):\n            content: str = getattr(record, \"content\", \"\")\n            if isinstance(content, str):\n                syntax = Syntax(\n                    content, \"python\", theme=\"material\", line_numbers=True\n                )\n                self.console.print(syntax)\n            return\n\n    except Exception as e:\n        self.handleError(record)\n\n    super().emit(record)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                }
            ]
        }
    ]
}