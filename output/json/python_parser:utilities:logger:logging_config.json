{
    "file_path": "python_parser/utilities/logger/logging_config.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "RichHandler",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "rich.logging",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Syntax",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "rich.syntax",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "id": "python_parser:utilities:logger:logging_config.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 69,
    "code_content": "import logging\n\nfrom rich.logging import RichHandler\nfrom rich.syntax import Syntax\n\n\ndef setup_logging(level=logging.INFO) -> None:\n    \"\"\"\n    Configures the logging system to use RichSyntaxHandler for output.\n\n    This function sets up logging with a specific log level and format. It utilizes the RichSyntaxHandler to support rich text and syntax highlighting in log outputs.\n\n    Args:\n        level (int, optional): The logging level to set for the root logger. Defaults to logging.INFO.\n\n    Example:\n        >>> setup_logging(logging.DEBUG)\n        # Configures logging at DEBUG level with RichSyntaxHandler.\n    \"\"\"\n\n    format_str = \"%(message)s\"\n    logging.basicConfig(level=level, format=format_str, handlers=[RichSyntaxHandler()])\n\n\nclass RichSyntaxHandler(RichHandler):\n    \"\"\"\n    A custom logging handler that extends RichHandler to add syntax highlighting.\n\n    This handler checks if the log record contains a 'syntax_highlight' attribute and, if so, uses 'rich.syntax.Syntax' to render the message with Python syntax highlighting.\n\n    Inherits:\n        RichHandler: The base handler provided by the rich library for rich text formatting.\n    \"\"\"\n\n    def emit(self, record) -> None:\n        \"\"\"\n        Emits a logging record.\n\n        If the record has the 'syntax_highlight' attribute set to True, it renders the 'content' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\n\n        Args:\n            record: The logging record to emit.\n\n        Example:\n            # Assuming `logger` is a logger instance\n            >>> logger.info(\"Regular log message\")\n            # Outputs a regular log message.\n\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print('Hello, world!')\"})\n            # Outputs the message with syntax highlighting.\n        \"\"\"\n\n        try:\n            if hasattr(record, \"syntax_highlight\") and getattr(\n                record, \"syntax_highlight\"\n            ):\n                content: str = getattr(record, \"content\", \"\")\n                if isinstance(content, str):\n                    syntax = Syntax(\n                        content, \"python\", theme=\"material\", line_numbers=True\n                    )\n                    self.console.print(syntax)\n                return\n\n        except Exception as e:\n            self.handleError(record)\n\n        super().emit(record)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nimport logging\\n\\nfrom rich.logging import RichHandler\\nfrom rich.syntax import Syntax\\n\\n\\ndef setup_logging(level=logging.INFO) -> None:\\n    \"\"\"\\n    Configures the logging system to use RichSyntaxHandler for output.\\n\\n    This function sets up logging with a specific log level and format. It utilizes the RichSyntaxHandler to support rich text and syntax highlighting in log outputs.\\n\\n    Args:\\n        level (int, optional): The logging level to set for the root logger. Defaults to logging.INFO.\\n\\n    Example:\\n        >>> setup_logging(logging.DEBUG)\\n        # Configures logging at DEBUG level with RichSyntaxHandler.\\n    \"\"\"\\n\\n    format_str = \"%(message)s\"\\n    logging.basicConfig(level=level, format=format_str, handlers=[RichSyntaxHandler()])\\n\\n\\nclass RichSyntaxHandler(RichHandler):\\n    \"\"\"\\n    A custom logging handler that extends RichHandler to add syntax highlighting.\\n\\n    This handler checks if the log record contains a \\'syntax_highlight\\' attribute and, if so, uses \\'rich.syntax.Syntax\\' to render the message with Python syntax highlighting.\\n\\n    Inherits:\\n        RichHandler: The base handler provided by the rich library for rich text formatting.\\n    \"\"\"\\n\\n    def emit(self, record) -> None:\\n        \"\"\"\\n        Emits a logging record.\\n\\n        If the record has the \\'syntax_highlight\\' attribute set to True, it renders the \\'content\\' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\\n\\n        Args:\\n            record: The logging record to emit.\\n\\n        Example:\\n            # Assuming `logger` is a logger instance\\n            >>> logger.info(\"Regular log message\")\\n            # Outputs a regular log message.\\n\\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print(\\'Hello, world!\\')\"})\\n            # Outputs the message with syntax highlighting.\\n        \"\"\"\\n\\n        try:\\n            if hasattr(record, \"syntax_highlight\") and getattr(\\n                record, \"syntax_highlight\"\\n            ):\\n                content: str = getattr(record, \"content\", \"\")\\n                if isinstance(content, str):\\n                    syntax = Syntax(\\n                        content, \"python\", theme=\"material\", line_numbers=True\\n                    )\\n                    self.console.print(syntax)\\n                return\\n\\n        except Exception as e:\\n            self.handleError(record)\\n\\n        super().emit(record)\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef setup_logging(level=logging.INFO) -> None:\\\\n    \"\"\"\\\\n    Configures the logging system to use RichSyntaxHandler for output.\\\\n\\\\n    This function sets up logging with a specific log level and format. It utilizes the RichSyntaxHandler to support rich text and syntax highlighting in log outputs.\\\\n\\\\n    Args:\\\\n        level (int, optional): The logging level to set for the root logger. Defaults to logging.INFO.\\\\n\\\\n    Example:\\\\n        >>> setup_logging(logging.DEBUG)\\\\n        # Configures logging at DEBUG level with RichSyntaxHandler.\\\\n    \"\"\"\\\\n\\\\n    format_str = \"%(message)s\"\\\\n    logging.basicConfig(level=level, format=format_str, handlers=[RichSyntaxHandler()])\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport logging\\\\nfrom rich.syntax import Syntax\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass RichSyntaxHandler(RichHandler):\\\\n    \"\"\"\\\\n    A custom logging handler that extends RichHandler to add syntax highlighting.\\\\n\\\\n    This handler checks if the log record contains a \\\\\\'syntax_highlight\\\\\\' attribute and, if so, uses \\\\\\'rich.syntax.Syntax\\\\\\' to render the message with Python syntax highlighting.\\\\n\\\\n    Inherits:\\\\n        RichHandler: The base handler provided by the rich library for rich text formatting.\\\\n    \"\"\"\\\\n\\\\n    def emit(self, record) -> None:\\\\n        \"\"\"\\\\n        Emits a logging record.\\\\n\\\\n        If the record has the \\\\\\'syntax_highlight\\\\\\' attribute set to True, it renders the \\\\\\'content\\\\\\' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\\\\n\\\\n        Args:\\\\n            record: The logging record to emit.\\\\n\\\\n        Example:\\\\n            # Assuming `logger` is a logger instance\\\\n            >>> logger.info(\"Regular log message\")\\\\n            # Outputs a regular log message.\\\\n\\\\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print(\\\\\\'Hello, world!\\\\\\')\"})\\\\n            # Outputs the message with syntax highlighting.\\\\n        \"\"\"\\\\n\\\\n        try:\\\\n            if hasattr(record, \"syntax_highlight\") and getattr(\\\\n                record, \"syntax_highlight\"\\\\n            ):\\\\n                content: str = getattr(record, \"content\", \"\")\\\\n                if isinstance(content, str):\\\\n                    syntax = Syntax(\\\\n                        content, \"python\", theme=\"material\", line_numbers=True\\\\n                    )\\\\n                    self.console.print(syntax)\\\\n                return\\\\n\\\\n        except Exception as e:\\\\n            self.handleError(record)\\\\n\\\\n        super().emit(record)\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef emit(self, record) -> None:\\\\\\\\n    \"\"\"\\\\\\\\n        Emits a logging record.\\\\\\\\n\\\\\\\\n        If the record has the \\\\\\\\\\\\\\'syntax_highlight\\\\\\\\\\\\\\' attribute set to True, it renders the \\\\\\\\\\\\\\'content\\\\\\\\\\\\\\' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            record: The logging record to emit.\\\\\\\\n\\\\\\\\n        Example:\\\\\\\\n            # Assuming `logger` is a logger instance\\\\\\\\n            >>> logger.info(\"Regular log message\")\\\\\\\\n            # Outputs a regular log message.\\\\\\\\n\\\\\\\\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print(\\\\\\\\\\\\\\'Hello, world!\\\\\\\\\\\\\\')\"})\\\\\\\\n            # Outputs the message with syntax highlighting.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    try:\\\\\\\\n        if hasattr(record, \"syntax_highlight\") and getattr(\\\\\\\\n            record, \"syntax_highlight\"\\\\\\\\n        ):\\\\\\\\n            content: str = getattr(record, \"content\", \"\")\\\\\\\\n            if isinstance(content, str):\\\\\\\\n                syntax = Syntax(\\\\\\\\n                    content, \"python\", theme=\"material\", line_numbers=True\\\\\\\\n                )\\\\\\\\n                self.console.print(syntax)\\\\\\\\n            return\\\\\\\\n\\\\\\\\n    except Exception as e:\\\\\\\\n        self.handleError(record)\\\\\\\\n\\\\\\\\n    super().emit(record)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport logging\\\\nfrom rich.logging import RichHandler\\\\nfrom rich.syntax import Syntax\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport logging\\nfrom rich.logging import RichHandler\\nfrom rich.syntax import Syntax\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "function_name": "setup_logging",
            "docstring": "Configures the logging system to use RichSyntaxHandler for output.\n\nThis function sets up logging with a specific log level and format. It utilizes the RichSyntaxHandler to support rich text and syntax highlighting in log outputs.\n\nArgs:\n    level (int, optional): The logging level to set for the root logger. Defaults to logging.INFO.\n\nExample:\n    >>> setup_logging(logging.DEBUG)\n    # Configures logging at DEBUG level with RichSyntaxHandler.",
            "decorators": null,
            "parameters": null,
            "returns": "None",
            "is_method": false,
            "is_async": false,
            "id": "python_parser:utilities:logger:logging_config.py__*__MODULE__*__FUNCTION-setup_logging",
            "parent_id": "python_parser:utilities:logger:logging_config.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 5,
            "end_line_num": 23,
            "code_content": "\n\ndef setup_logging(level=logging.INFO) -> None:\n    \"\"\"\n    Configures the logging system to use RichSyntaxHandler for output.\n\n    This function sets up logging with a specific log level and format. It utilizes the RichSyntaxHandler to support rich text and syntax highlighting in log outputs.\n\n    Args:\n        level (int, optional): The logging level to set for the root logger. Defaults to logging.INFO.\n\n    Example:\n        >>> setup_logging(logging.DEBUG)\n        # Configures logging at DEBUG level with RichSyntaxHandler.\n    \"\"\"\n\n    format_str = \"%(message)s\"\n    logging.basicConfig(level=level, format=format_str, handlers=[RichSyntaxHandler()])\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "python_parser:utilities:logger:logging_config.py__*__MODULE__*__CLASS-RichSyntaxHandler"
                },
                {
                    "import_names": [
                        {
                            "name": "logging",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Syntax",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "rich.syntax",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef setup_logging(level=logging.INFO) -> None:\\n    \"\"\"\\n    Configures the logging system to use RichSyntaxHandler for output.\\n\\n    This function sets up logging with a specific log level and format. It utilizes the RichSyntaxHandler to support rich text and syntax highlighting in log outputs.\\n\\n    Args:\\n        level (int, optional): The logging level to set for the root logger. Defaults to logging.INFO.\\n\\n    Example:\\n        >>> setup_logging(logging.DEBUG)\\n        # Configures logging at DEBUG level with RichSyntaxHandler.\\n    \"\"\"\\n\\n    format_str = \"%(message)s\"\\n    logging.basicConfig(level=level, format=format_str, handlers=[RichSyntaxHandler()])\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport logging\\nfrom rich.syntax import Syntax\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "class_name": "RichSyntaxHandler",
            "decorators": null,
            "bases": [
                "RichHandler"
            ],
            "docstring": "A custom logging handler that extends RichHandler to add syntax highlighting.\n\nThis handler checks if the log record contains a 'syntax_highlight' attribute and, if so, uses 'rich.syntax.Syntax' to render the message with Python syntax highlighting.\n\nInherits:\n    RichHandler: The base handler provided by the rich library for rich text formatting.",
            "attributes": null,
            "keywords": null,
            "id": "python_parser:utilities:logger:logging_config.py__*__MODULE__*__CLASS-RichSyntaxHandler",
            "parent_id": "python_parser:utilities:logger:logging_config.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 23,
            "end_line_num": 69,
            "code_content": "\n\nclass RichSyntaxHandler(RichHandler):\n    \"\"\"\n    A custom logging handler that extends RichHandler to add syntax highlighting.\n\n    This handler checks if the log record contains a 'syntax_highlight' attribute and, if so, uses 'rich.syntax.Syntax' to render the message with Python syntax highlighting.\n\n    Inherits:\n        RichHandler: The base handler provided by the rich library for rich text formatting.\n    \"\"\"\n\n    def emit(self, record) -> None:\n        \"\"\"\n        Emits a logging record.\n\n        If the record has the 'syntax_highlight' attribute set to True, it renders the 'content' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\n\n        Args:\n            record: The logging record to emit.\n\n        Example:\n            # Assuming `logger` is a logger instance\n            >>> logger.info(\"Regular log message\")\n            # Outputs a regular log message.\n\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print('Hello, world!')\"})\n            # Outputs the message with syntax highlighting.\n        \"\"\"\n\n        try:\n            if hasattr(record, \"syntax_highlight\") and getattr(\n                record, \"syntax_highlight\"\n            ):\n                content: str = getattr(record, \"content\", \"\")\n                if isinstance(content, str):\n                    syntax = Syntax(\n                        content, \"python\", theme=\"material\", line_numbers=True\n                    )\n                    self.console.print(syntax)\n                return\n\n        except Exception as e:\n            self.handleError(record)\n\n        super().emit(record)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "logging",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "RichHandler",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "rich.logging",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Syntax",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "rich.syntax",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\nclass RichSyntaxHandler(RichHandler):\\n    \"\"\"\\n    A custom logging handler that extends RichHandler to add syntax highlighting.\\n\\n    This handler checks if the log record contains a \\'syntax_highlight\\' attribute and, if so, uses \\'rich.syntax.Syntax\\' to render the message with Python syntax highlighting.\\n\\n    Inherits:\\n        RichHandler: The base handler provided by the rich library for rich text formatting.\\n    \"\"\"\\n\\n    def emit(self, record) -> None:\\n        \"\"\"\\n        Emits a logging record.\\n\\n        If the record has the \\'syntax_highlight\\' attribute set to True, it renders the \\'content\\' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\\n\\n        Args:\\n            record: The logging record to emit.\\n\\n        Example:\\n            # Assuming `logger` is a logger instance\\n            >>> logger.info(\"Regular log message\")\\n            # Outputs a regular log message.\\n\\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print(\\'Hello, world!\\')\"})\\n            # Outputs the message with syntax highlighting.\\n        \"\"\"\\n\\n        try:\\n            if hasattr(record, \"syntax_highlight\") and getattr(\\n                record, \"syntax_highlight\"\\n            ):\\n                content: str = getattr(record, \"content\", \"\")\\n                if isinstance(content, str):\\n                    syntax = Syntax(\\n                        content, \"python\", theme=\"material\", line_numbers=True\\n                    )\\n                    self.console.print(syntax)\\n                return\\n\\n        except Exception as e:\\n            self.handleError(record)\\n\\n        super().emit(record)\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef emit(self, record) -> None:\\\\n    \"\"\"\\\\n        Emits a logging record.\\\\n\\\\n        If the record has the \\\\\\'syntax_highlight\\\\\\' attribute set to True, it renders the \\\\\\'content\\\\\\' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\\\\n\\\\n        Args:\\\\n            record: The logging record to emit.\\\\n\\\\n        Example:\\\\n            # Assuming `logger` is a logger instance\\\\n            >>> logger.info(\"Regular log message\")\\\\n            # Outputs a regular log message.\\\\n\\\\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print(\\\\\\'Hello, world!\\\\\\')\"})\\\\n            # Outputs the message with syntax highlighting.\\\\n        \"\"\"\\\\n\\\\n    try:\\\\n        if hasattr(record, \"syntax_highlight\") and getattr(\\\\n            record, \"syntax_highlight\"\\\\n        ):\\\\n            content: str = getattr(record, \"content\", \"\")\\\\n            if isinstance(content, str):\\\\n                syntax = Syntax(\\\\n                    content, \"python\", theme=\"material\", line_numbers=True\\\\n                )\\\\n                self.console.print(syntax)\\\\n            return\\\\n\\\\n    except Exception as e:\\\\n        self.handleError(record)\\\\n\\\\n    super().emit(record)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport logging\\nfrom rich.logging import RichHandler\\nfrom rich.syntax import Syntax\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "emit",
                    "docstring": "Emits a logging record.\n\nIf the record has the 'syntax_highlight' attribute set to True, it renders the 'content' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\n\nArgs:\n    record: The logging record to emit.\n\nExample:\n    # Assuming `logger` is a logger instance\n    >>> logger.info(\"Regular log message\")\n    # Outputs a regular log message.\n\n    >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print('Hello, world!')\"})\n    # Outputs the message with syntax highlighting.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "python_parser:utilities:logger:logging_config.py__*__MODULE__*__CLASS-RichSyntaxHandler__*__FUNCTION-emit",
                    "parent_id": "python_parser:utilities:logger:logging_config.py__*__MODULE__*__CLASS-RichSyntaxHandler",
                    "block_type": "FUNCTION",
                    "start_line_num": 34,
                    "end_line_num": 69,
                    "code_content": "\ndef emit(self, record) -> None:\n    \"\"\"\n        Emits a logging record.\n\n        If the record has the 'syntax_highlight' attribute set to True, it renders the 'content' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\n\n        Args:\n            record: The logging record to emit.\n\n        Example:\n            # Assuming `logger` is a logger instance\n            >>> logger.info(\"Regular log message\")\n            # Outputs a regular log message.\n\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print('Hello, world!')\"})\n            # Outputs the message with syntax highlighting.\n        \"\"\"\n\n    try:\n        if hasattr(record, \"syntax_highlight\") and getattr(\n            record, \"syntax_highlight\"\n        ):\n            content: str = getattr(record, \"content\", \"\")\n            if isinstance(content, str):\n                syntax = Syntax(\n                    content, \"python\", theme=\"material\", line_numbers=True\n                )\n                self.console.print(syntax)\n            return\n\n    except Exception as e:\n        self.handleError(record)\n\n    super().emit(record)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef emit(self, record) -> None:\\n    \"\"\"\\n        Emits a logging record.\\n\\n        If the record has the \\'syntax_highlight\\' attribute set to True, it renders the \\'content\\' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\\n\\n        Args:\\n            record: The logging record to emit.\\n\\n        Example:\\n            # Assuming `logger` is a logger instance\\n            >>> logger.info(\"Regular log message\")\\n            # Outputs a regular log message.\\n\\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print(\\'Hello, world!\\')\"})\\n            # Outputs the message with syntax highlighting.\\n        \"\"\"\\n\\n    try:\\n        if hasattr(record, \"syntax_highlight\") and getattr(\\n            record, \"syntax_highlight\"\\n        ):\\n            content: str = getattr(record, \"content\", \"\")\\n            if isinstance(content, str):\\n                syntax = Syntax(\\n                    content, \"python\", theme=\"material\", line_numbers=True\\n                )\\n                self.console.print(syntax)\\n            return\\n\\n    except Exception as e:\\n        self.handleError(record)\\n\\n    super().emit(record)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        }
    ]
}