{
    "file_path": "postcode/ai_services/summarizer/summarization_manager.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Attribute(\n    value=Attribute(\n        value=Name(\n            value='postcode',\n            lpar=[],\n            rpar=[],\n        ),\n        attr=Name(\n            value='ai_services',\n            lpar=[],\n            rpar=[],\n        ),\n        dot=Dot(\n            whitespace_before=SimpleWhitespace(\n                value='',\n            ),\n            whitespace_after=SimpleWhitespace(\n                value='',\n            ),\n        ),\n        lpar=[],\n        rpar=[],\n    ),\n    attr=Name(\n        value='summarizer',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=Dot(\n        whitespace_before=SimpleWhitespace(\n            value='',\n        ),\n        whitespace_after=SimpleWhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n)",
                    "as_name": "context",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Summarizer",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:summarizer:summarizer_protocol.py__*__MODULE__*__CLASS-Summarizer"
                }
            ],
            "imported_from": "postcode.ai_services.summarizer.summarizer_protocol",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:summarizer:summarizer_protocol.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModelType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.post_code_types",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:post_code_types.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                },
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ModuleModel"
                }
            ],
            "imported_from": "postcode.python_parser.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
        }
    ],
    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 251,
    "code_content": "import logging\n\nfrom postcode.ai_services.summarizer.summarizer_protocol import Summarizer\nfrom postcode.post_code_types import ModelType\n\nfrom postcode.python_parser.models.models import (\n    DependencyModel,\n    ImportModel,\n    ModuleModel,\n)\nimport postcode.ai_services.summarizer.summarizer_context as context\n\n\nclass SummarizationManager:\n    def __init__(\n        self,\n        module_models_tuple: tuple[ModuleModel, ...],\n        summarizer: Summarizer,\n    ) -> None:\n        self.module_models_tuple: tuple[ModuleModel, ...] = module_models_tuple\n        self.summarizer: Summarizer = summarizer\n        self.summarized_code_block_ids: set[str] = set()\n        self.prompt_tokens: int = 0\n        self.completion_tokens: int = 0\n\n    @property\n    def total_cost(self) -> float:\n        prompt_cost: int = self.prompt_tokens * 1  # Costs 1 cent per 1,000 tokens\n        completion_cost: int = (\n            self.completion_tokens * 3\n        )  # Costs 3 cents per 1,000 tokens\n        return (prompt_cost + completion_cost) / 100_000  # Convert to dollars\n\n    def create_and_add_summaries_to_models(self) -> None:\n        for module_model in self.module_models_tuple:\n            self._summarize_module(module_model)\n\n    def _summarize_module(self, module_model: ModuleModel) -> None:\n        if module_model.id not in self.summarized_code_block_ids:\n            self._summarize_code_block(module_model)\n            logging.info(f\"Summarized module: {module_model.id}\")\n            self.summarized_code_block_ids.add(module_model.id)\n\n    def _summarize_code_block(\n        self,\n        model: ModelType,\n        recursion_path: list[str] = [],\n    ) -> str | None:\n        if model.id in recursion_path or not model.code_content:\n            return None\n        if model.id in self.summarized_code_block_ids:\n            return model.summary\n\n        recursion_path.append(model.id)\n\n        child_summary_list: list[str] | None = None\n        if model.children:\n            child_summary_list = self._get_child_summaries(model, recursion_path)\n\n        dependency_summary_list: list[str] = []\n        import_details: str | None = None\n        if model.dependencies:\n            for dependency in model.dependencies:\n                if isinstance(dependency, DependencyModel) and dependency.code_block_id:\n                    if module_local_dependency_summary := self._get_local_dependency_summary(\n                        dependency, model, recursion_path\n                    ):\n                        dependency_summary_list.append(module_local_dependency_summary)\n\n                if isinstance(dependency, ImportModel):\n                    if dependency.import_module_type == \"LOCAL\":\n                        if not dependency.import_names:\n                            if module_import_dependency := self._get_local_import_summary(\n                                dependency, recursion_path\n                            ):\n                                dependency_summary_list.append(module_import_dependency)\n                        else:\n                            if import_from_dependency := self._get_local_import_from_summary(\n                                dependency, recursion_path\n                            ):\n                                dependency_summary_list.append(import_from_dependency)\n                    else:\n                        import_detail: str | None = self._get_import_details(dependency)\n                        if not import_detail:\n                            continue\n                        if not import_details:\n                            import_details = \"\"\n                        import_details += f\"\\n{import_detail}\"\n\n        if isinstance(model, ModuleModel) and recursion_path:\n            dependency_summary_list, import_details = self._handle_module_model(\n                model, recursion_path\n            )\n\n        children_summaries: str | None = self._stringify_child_summaries(\n            child_summary_list\n        )\n        dependency_summaries: str | None = self._stringify_dependency_summaries(\n            dependency_summary_list\n        )\n\n        summary_context: context.OpenAIReturnContext | str = (\n            self.summarizer.test_summarize_code(\n                model.code_content,\n                model_id=model.id,\n                children_summaries=children_summaries,\n                dependency_summaries=dependency_summaries,\n                import_details=import_details,\n            )\n        )\n\n        if isinstance(summary_context, context.OpenAIReturnContext):\n            if summary_context.summary:\n                model.summary = summary_context.summary\n                self.summarized_code_block_ids.add(model.id)\n                recursion_path.remove(model.id)\n\n                self.prompt_tokens += summary_context.prompt_tokens\n                self.completion_tokens += summary_context.completion_tokens\n                logging.info(f\"Summarized code block: {model.id}\")\n                logging.info(f\"Total cost: {self.total_cost}\")\n\n        return (\n            summary_context.summary\n            if isinstance(summary_context, context.OpenAIReturnContext)\n            else summary_context\n        )\n\n    def _handle_module_model(\n        self, model: ModuleModel, recursion_path: list[str]\n    ) -> tuple[list[str], str | None]:\n        dependency_summary_list: list[str] = []\n        all_import_details: str | None = None\n        if model.imports:\n            for import_model in model.imports:\n                if import_model.import_module_type == \"LOCAL\":\n                    if not import_model.import_names:\n                        if module_import := self._get_local_import_summary(\n                            import_model, recursion_path\n                        ):\n                            dependency_summary_list.append(module_import)\n                    else:\n                        if import_from := self._get_local_import_from_summary(\n                            import_model, recursion_path\n                        ):\n                            dependency_summary_list.append(import_from)\n                else:\n                    if import_details := self._get_import_details(import_model):\n                        if not all_import_details:\n                            all_import_details = \"\"\n                        all_import_details += f\"\\n{import_details}\"\n\n        return dependency_summary_list, all_import_details\n\n    def _get_import_details(self, import_model: ImportModel) -> str | None:\n        if import_model.import_module_type == \"LOCAL\" or not import_model.import_names:\n            return None\n\n        import_names_list: list[str] = []\n        for import_name in import_model.import_names:\n            if import_name.as_name:\n                import_names_list.append(f\"{import_name.name} as {import_name.as_name}\")\n            else:\n                import_names_list.append(f\"{import_name.name}\")\n\n        if import_model.imported_from:\n            import_details: str = f\"from {import_model.imported_from} import {', '.join(import_names_list)}\"\n        else:\n            import_details = f\"import {', '.join(import_names_list)}\"\n\n        return import_details\n\n    def _get_child_summaries(\n        self, model: ModelType, recursion_path: list[str]\n    ) -> list[str]:\n        child_summary_list: list[str] = []\n        if model.children:\n            for child_model in model.children:\n                child_summary: str | None = self._summarize_code_block(\n                    child_model,\n                    recursion_path,\n                )\n                if child_summary:\n                    child_summary_list.append(child_summary)\n        return child_summary_list\n\n    def _stringify_child_summaries(\n        self, child_summary_list: list[str] | None\n    ) -> str | None:\n        if not child_summary_list:\n            return None\n\n        children_summaries: str = \"\"\n        for child_summary in child_summary_list:\n            children_summaries += f\"\\n{child_summary}\"\n        return children_summaries\n\n    def _stringify_dependency_summaries(\n        self, dependency_summary_list: list[str] | None\n    ) -> str | None:\n        if not dependency_summary_list:\n            return None\n\n        dependency_summaries: str = \"\"\n        for dependency_summary in dependency_summary_list:\n            dependency_summaries += f\"\\n{dependency_summary}\"\n        return dependency_summaries\n\n    def _get_local_dependency_summary(\n        self,\n        dependency: DependencyModel,\n        model: ModelType,\n        recursion_path: list[str],\n    ) -> str | None:\n        if not model.children:\n            return None\n\n        for child_model in model.children:\n            if child_model.id == dependency.code_block_id:\n                return self._summarize_code_block(\n                    child_model,\n                    recursion_path,\n                )\n\n    def _get_local_import_summary(\n        self, dependency: ImportModel, recursion_path: list[str]\n    ) -> str | None:\n        for module_model in self.module_models_tuple:\n            if module_model.id == dependency.local_module_id:\n                return self._summarize_code_block(\n                    module_model,\n                    recursion_path,\n                )\n\n    def _get_local_import_from_summary(\n        self, dependency: ImportModel, recursion_path: list[str]\n    ) -> str | None:\n        for import_name in dependency.import_names:\n            for module_model in self.module_models_tuple:\n                if module_model.id == dependency.local_module_id:\n                    if module_model.children:\n                        for child_model in module_model.children:\n                            if (\n                                child_model.id == import_name.local_block_id\n                                and child_model.id\n                            ):\n                                return self._summarize_code_block(\n                                    child_model,\n                                    recursion_path,\n                                )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nimport logging\\n\\nfrom postcode.ai_services.summarizer.summarizer_protocol import Summarizer\\nfrom postcode.post_code_types import ModelType\\n\\nfrom postcode.python_parser.models.models import (\\n    DependencyModel,\\n    ImportModel,\\n    ModuleModel,\\n)\\nimport postcode.ai_services.summarizer.summarizer_context as context\\n\\n\\nclass SummarizationManager:\\n    def __init__(\\n        self,\\n        module_models_tuple: tuple[ModuleModel, ...],\\n        summarizer: Summarizer,\\n    ) -> None:\\n        self.module_models_tuple: tuple[ModuleModel, ...] = module_models_tuple\\n        self.summarizer: Summarizer = summarizer\\n        self.summarized_code_block_ids: set[str] = set()\\n        self.prompt_tokens: int = 0\\n        self.completion_tokens: int = 0\\n\\n    @property\\n    def total_cost(self) -> float:\\n        prompt_cost: int = self.prompt_tokens * 1  # Costs 1 cent per 1,000 tokens\\n        completion_cost: int = (\\n            self.completion_tokens * 3\\n        )  # Costs 3 cents per 1,000 tokens\\n        return (prompt_cost + completion_cost) / 100_000  # Convert to dollars\\n\\n    def create_and_add_summaries_to_models(self) -> None:\\n        for module_model in self.module_models_tuple:\\n            self._summarize_module(module_model)\\n\\n    def _summarize_module(self, module_model: ModuleModel) -> None:\\n        if module_model.id not in self.summarized_code_block_ids:\\n            self._summarize_code_block(module_model)\\n            logging.info(f\"Summarized module: {module_model.id}\")\\n            self.summarized_code_block_ids.add(module_model.id)\\n\\n    def _summarize_code_block(\\n        self,\\n        model: ModelType,\\n        recursion_path: list[str] = [],\\n    ) -> str | None:\\n        if model.id in recursion_path or not model.code_content:\\n            return None\\n        if model.id in self.summarized_code_block_ids:\\n            return model.summary\\n\\n        recursion_path.append(model.id)\\n\\n        child_summary_list: list[str] | None = None\\n        if model.children:\\n            child_summary_list = self._get_child_summaries(model, recursion_path)\\n\\n        dependency_summary_list: list[str] = []\\n        import_details: str | None = None\\n        if model.dependencies:\\n            for dependency in model.dependencies:\\n                if isinstance(dependency, DependencyModel) and dependency.code_block_id:\\n                    if module_local_dependency_summary := self._get_local_dependency_summary(\\n                        dependency, model, recursion_path\\n                    ):\\n                        dependency_summary_list.append(module_local_dependency_summary)\\n\\n                if isinstance(dependency, ImportModel):\\n                    if dependency.import_module_type == \"LOCAL\":\\n                        if not dependency.import_names:\\n                            if module_import_dependency := self._get_local_import_summary(\\n                                dependency, recursion_path\\n                            ):\\n                                dependency_summary_list.append(module_import_dependency)\\n                        else:\\n                            if import_from_dependency := self._get_local_import_from_summary(\\n                                dependency, recursion_path\\n                            ):\\n                                dependency_summary_list.append(import_from_dependency)\\n                    else:\\n                        import_detail: str | None = self._get_import_details(dependency)\\n                        if not import_detail:\\n                            continue\\n                        if not import_details:\\n                            import_details = \"\"\\n                        import_details += f\"\\\\n{import_detail}\"\\n\\n        if isinstance(model, ModuleModel) and recursion_path:\\n            dependency_summary_list, import_details = self._handle_module_model(\\n                model, recursion_path\\n            )\\n\\n        children_summaries: str | None = self._stringify_child_summaries(\\n            child_summary_list\\n        )\\n        dependency_summaries: str | None = self._stringify_dependency_summaries(\\n            dependency_summary_list\\n        )\\n\\n        summary_context: context.OpenAIReturnContext | str = (\\n            self.summarizer.test_summarize_code(\\n                model.code_content,\\n                model_id=model.id,\\n                children_summaries=children_summaries,\\n                dependency_summaries=dependency_summaries,\\n                import_details=import_details,\\n            )\\n        )\\n\\n        if isinstance(summary_context, context.OpenAIReturnContext):\\n            if summary_context.summary:\\n                model.summary = summary_context.summary\\n                self.summarized_code_block_ids.add(model.id)\\n                recursion_path.remove(model.id)\\n\\n                self.prompt_tokens += summary_context.prompt_tokens\\n                self.completion_tokens += summary_context.completion_tokens\\n                logging.info(f\"Summarized code block: {model.id}\")\\n                logging.info(f\"Total cost: {self.total_cost}\")\\n\\n        return (\\n            summary_context.summary\\n            if isinstance(summary_context, context.OpenAIReturnContext)\\n            else summary_context\\n        )\\n\\n    def _handle_module_model(\\n        self, model: ModuleModel, recursion_path: list[str]\\n    ) -> tuple[list[str], str | None]:\\n        dependency_summary_list: list[str] = []\\n        all_import_details: str | None = None\\n        if model.imports:\\n            for import_model in model.imports:\\n                if import_model.import_module_type == \"LOCAL\":\\n                    if not import_model.import_names:\\n                        if module_import := self._get_local_import_summary(\\n                            import_model, recursion_path\\n                        ):\\n                            dependency_summary_list.append(module_import)\\n                    else:\\n                        if import_from := self._get_local_import_from_summary(\\n                            import_model, recursion_path\\n                        ):\\n                            dependency_summary_list.append(import_from)\\n                else:\\n                    if import_details := self._get_import_details(import_model):\\n                        if not all_import_details:\\n                            all_import_details = \"\"\\n                        all_import_details += f\"\\\\n\\nimport logging\\nimport Attribute(\\n    value=Attribute(\\n        value=Name(\\n            value=\\'postcode\\',\\n            lpar=[],\\n            rpar=[],\\n        ),\\n        attr=Name(\\n            value=\\'ai_services\\',\\n            lpar=[],\\n            rpar=[],\\n        ),\\n        dot=Dot(\\n            whitespace_before=SimpleWhitespace(\\n                value=\\'\\',\\n            ),\\n            whitespace_after=SimpleWhitespace(\\n                value=\\'\\',\\n            ),\\n        ),\\n        lpar=[],\\n        rpar=[],\\n    ),\\n    attr=Name(\\n        value=\\'summarizer\\',\\n        lpar=[],\\n        rpar=[],\\n    ),\\n    dot=Dot(\\n        whitespace_before=SimpleWhitespace(\\n            value=\\'\\',\\n        ),\\n        whitespace_after=SimpleWhitespace(\\n            value=\\'\\',\\n        ),\\n    ),\\n    lpar=[],\\n    rpar=[],\\n) as context\\nfrom postcode.ai_services.summarizer.summarizer_protocol import Summarizer\\nfrom postcode.post_code_types import ModelType\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel, ModuleModel\"\\n\\n        return dependency_summary_list, all_import_details\\n\\n    def _get_import_details(self, import_model: ImportModel) -> str | None:\\n        if import_model.import_module_type == \"LOCAL\" or not import_model.import_names:\\n            return None\\n\\n        import_names_list: list[str] = []\\n        for import_name in import_model.import_names:\\n            if import_name.as_name:\\n                import_names_list.append(f\"{import_name.name} as {import_name.as_name}\")\\n            else:\\n                import_names_list.append(f\"{import_name.name}\")\\n\\n        if import_model.imported_from:\\n            import_details: str = f\"from {import_model.imported_from} import {\\', \\'.join(import_names_list)}\"\\n        else:\\n            import_details = f\"import {\\', \\'.join(import_names_list)}\"\\n\\n        return import_details\\n\\n    def _get_child_summaries(\\n        self, model: ModelType, recursion_path: list[str]\\n    ) -> list[str]:\\n        child_summary_list: list[str] = []\\n        if model.children:\\n            for child_model in model.children:\\n                child_summary: str | None = self._summarize_code_block(\\n                    child_model,\\n                    recursion_path,\\n                )\\n                if child_summary:\\n                    child_summary_list.append(child_summary)\\n        return child_summary_list\\n\\n    def _stringify_child_summaries(\\n        self, child_summary_list: list[str] | None\\n    ) -> str | None:\\n        if not child_summary_list:\\n            return None\\n\\n        children_summaries: str = \"\"\\n        for child_summary in child_summary_list:\\n            children_summaries += f\"\\\\n{child_summary}\"\\n        return children_summaries\\n\\n    def _stringify_dependency_summaries(\\n        self, dependency_summary_list: list[str] | None\\n    ) -> str | None:\\n        if not dependency_summary_list:\\n            return None\\n\\n        dependency_summaries: str = \"\"\\n        for dependency_summary in dependency_summary_list:\\n            dependency_summaries += f\"\\\\n{dependency_summary}\"\\n        return dependency_summaries\\n\\n    def _get_local_dependency_summary(\\n        self,\\n        dependency: DependencyModel,\\n        model: ModelType,\\n        recursion_path: list[str],\\n    ) -> str | None:\\n        if not model.children:\\n            return None\\n\\n        for child_model in model.children:\\n            if child_model.id == dependency.code_block_id:\\n                return self._summarize_code_block(\\n                    child_model,\\n                    recursion_path,\\n                )\\n\\n    def _get_local_import_summary(\\n        self, dependency: ImportModel, recursion_path: list[str]\\n    ) -> str | None:\\n        for module_model in self.module_models_tuple:\\n            if module_model.id == dependency.local_module_id:\\n                return self._summarize_code_block(\\n                    module_model,\\n                    recursion_path,\\n                )\\n\\n    def _get_local_import_from_summary(\\n        self, dependency: ImportModel, recursion_path: list[str]\\n    ) -> str | None:\\n        for import_name in dependency.import_names:\\n            for module_model in self.module_models_tuple:\\n                if module_model.id == dependency.local_module_id:\\n                    if module_model.children:\\n                        for child_model in module_model.children:\\n                            if (\\n                                child_model.id == import_name.local_block_id\\n                                and child_model.id\\n                            ):\\n                                return self._summarize_code_block(\\n                                    child_model,\\n                                    recursion_path,\\n                                )\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass SummarizationManager:\\\\n    def __init__(\\\\n        self,\\\\n        module_models_tuple: tuple[ModuleModel, ...],\\\\n        summarizer: Summarizer,\\\\n    ) -> None:\\\\n        self.module_models_tuple: tuple[ModuleModel, ...] = module_models_tuple\\\\n        self.summarizer: Summarizer = summarizer\\\\n        self.summarized_code_block_ids: set[str] = set()\\\\n        self.prompt_tokens: int = 0\\\\n        self.completion_tokens: int = 0\\\\n\\\\n    @property\\\\n    def total_cost(self) -> float:\\\\n        prompt_cost: int = self.prompt_tokens * 1  # Costs 1 cent per 1,000 tokens\\\\n        completion_cost: int = (\\\\n            self.completion_tokens * 3\\\\n        )  # Costs 3 cents per 1,000 tokens\\\\n        return (prompt_cost + completion_cost) / 100_000  # Convert to dollars\\\\n\\\\n    def create_and_add_summaries_to_models(self) -> None:\\\\n        for module_model in self.module_models_tuple:\\\\n            self._summarize_module(module_model)\\\\n\\\\n    def _summarize_module(self, module_model: ModuleModel) -> None:\\\\n        if module_model.id not in self.summarized_code_block_ids:\\\\n            self._summarize_code_block(module_model)\\\\n            logging.info(f\"Summarized module: {module_model.id}\")\\\\n            self.summarized_code_block_ids.add(module_model.id)\\\\n\\\\n    def _summarize_code_block(\\\\n        self,\\\\n        model: ModelType,\\\\n        recursion_path: list[str] = [],\\\\n    ) -> str | None:\\\\n        if model.id in recursion_path or not model.code_content:\\\\n            return None\\\\n        if model.id in self.summarized_code_block_ids:\\\\n            return model.summary\\\\n\\\\n        recursion_path.append(model.id)\\\\n\\\\n        child_summary_list: list[str] | None = None\\\\n        if model.children:\\\\n            child_summary_list = self._get_child_summaries(model, recursion_path)\\\\n\\\\n        dependency_summary_list: list[str] = []\\\\n        import_details: str | None = None\\\\n        if model.dependencies:\\\\n            for dependency in model.dependencies:\\\\n                if isinstance(dependency, DependencyModel) and dependency.code_block_id:\\\\n                    if module_local_dependency_summary := self._get_local_dependency_summary(\\\\n                        dependency, model, recursion_path\\\\n                    ):\\\\n                        dependency_summary_list.append(module_local_dependency_summary)\\\\n\\\\n                if isinstance(dependency, ImportModel):\\\\n                    if dependency.import_module_type == \"LOCAL\":\\\\n                        if not dependency.import_names:\\\\n                            if module_import_dependency := self._get_local_import_summary(\\\\n                                dependency, recursion_path\\\\n                            ):\\\\n                                dependency_summary_list.append(module_import_dependency)\\\\n                        else:\\\\n                            if import_from_dependency := self._get_local_import_from_summary(\\\\n                                dependency, recursion_path\\\\n                            ):\\\\n                                dependency_summary_list.append(import_from_dependency)\\\\n                    else:\\\\n                        import_detail: str | None = self._get_import_details(dependency)\\\\n                        if not import_detail:\\\\n                            continue\\\\n                        if not import_details:\\\\n                            import_details = \"\"\\\\n                        import_details += f\"\\\\\\\\n{import_detail}\"\\\\n\\\\n        if isinstance(model, ModuleModel) and recursion_path:\\\\n            dependency_summary_list, import_details = self._handle_module_model(\\\\n                model, recursion_path\\\\n            )\\\\n\\\\n        children_summaries: str | None = self._stringify_child_summaries(\\\\n            child_summary_list\\\\n        )\\\\n        dependency_summaries: str | None = self._stringify_dependency_summaries(\\\\n            dependency_summary_list\\\\n        )\\\\n\\\\n        summary_context: context.OpenAIReturnContext | str = (\\\\n            self.summarizer.test_summarize_code(\\\\n                model.code_content,\\\\n                model_id=model.id,\\\\n                children_summaries=children_summaries,\\\\n                dependency_summaries=dependency_summaries,\\\\n                import_details=import_details,\\\\n            )\\\\n        )\\\\n\\\\n        if isinstance(summary_context, context.OpenAIReturnContext):\\\\n            if summary_context.summary:\\\\n                model.summary = summary_context.summary\\\\n                self.summarized_code_block_ids.add(model.id)\\\\n                recursion_path.remove(model.id)\\\\n\\\\n                self.prompt_tokens += summary_context.prompt_tokens\\\\n                self.completion_tokens += summary_context.completion_tokens\\\\n                logging.info(f\"Summarized code block: {model.id}\")\\\\n                logging.info(f\"Total cost: {self.total_cost}\")\\\\n\\\\n        return (\\\\n            summary_context.summary\\\\n            if isinstance(summary_context, context.OpenAIReturnContext)\\\\n            else summary_context\\\\n        )\\\\n\\\\n    def _handle_module_model(\\\\n        self, model: ModuleModel, recursion_path: list[str]\\\\n    ) -> tuple[list[str], str | None]:\\\\n        dependency_summary_list: list[str] = []\\\\n        all_import_details: str | None = None\\\\n        if model.imports:\\\\n            for import_model in model.imports:\\\\n                if import_model.import_module_type == \"LOCAL\":\\\\n                    if not import_model.import_names:\\\\n                        if module_import := self._get_local_import_summary(\\\\n                            import_model, recursion_path\\\\n                        ):\\\\n                            dependency_summary_list.append(module_import)\\\\n                    else:\\\\n                        if import_from := self._get_local_import_from_summary(\\\\n                            import_model, recursion_path\\\\n                        ):\\\\n                            dependency_summary_list.append(import_from)\\\\n                else:\\\\n                    if import_details := self._get_import_details(import_model):\\\\n                        if not all_import_details:\\\\n                            all_import_details = \"\"\\\\n                        all_import_details += f\"\\\\\\\\n\\\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\\\nimport logging\\\\nfrom postcode.ai_services.summarizer.summarizer_protocol import Summarizer\\\\nfrom postcode.post_code_types import ModelType\\\\nimport Attribute(\\\\n    value=Attribute(\\\\n        value=Name(\\\\n            value=\\\\\\'postcode\\\\\\',\\\\n            lpar=[],\\\\n            rpar=[],\\\\n        ),\\\\n        attr=Name(\\\\n            value=\\\\\\'ai_services\\\\\\',\\\\n            lpar=[],\\\\n            rpar=[],\\\\n        ),\\\\n        dot=Dot(\\\\n            whitespace_before=SimpleWhitespace(\\\\n                value=\\\\\\'\\\\\\',\\\\n            ),\\\\n            whitespace_after=SimpleWhitespace(\\\\n                value=\\\\\\'\\\\\\',\\\\n            ),\\\\n        ),\\\\n        lpar=[],\\\\n        rpar=[],\\\\n    ),\\\\n    attr=Name(\\\\n        value=\\\\\\'summarizer\\\\\\',\\\\n        lpar=[],\\\\n        rpar=[],\\\\n    ),\\\\n    dot=Dot(\\\\n        whitespace_before=SimpleWhitespace(\\\\n            value=\\\\\\'\\\\\\',\\\\n        ),\\\\n        whitespace_after=SimpleWhitespace(\\\\n            value=\\\\\\'\\\\\\',\\\\n        ),\\\\n    ),\\\\n    lpar=[],\\\\n    rpar=[],\\\\n) as context\"\\\\n\\\\n        return dependency_summary_list, all_import_details\\\\n\\\\n    def _get_import_details(self, import_model: ImportModel) -> str | None:\\\\n        if import_model.import_module_type == \"LOCAL\" or not import_model.import_names:\\\\n            return None\\\\n\\\\n        import_names_list: list[str] = []\\\\n        for import_name in import_model.import_names:\\\\n            if import_name.as_name:\\\\n                import_names_list.append(f\"{import_name.name} as {import_name.as_name}\")\\\\n            else:\\\\n                import_names_list.append(f\"{import_name.name}\")\\\\n\\\\n        if import_model.imported_from:\\\\n            import_details: str = f\"from {import_model.imported_from} import {\\\\\\', \\\\\\'.join(import_names_list)}\"\\\\n        else:\\\\n            import_details = f\"import {\\\\\\', \\\\\\'.join(import_names_list)}\"\\\\n\\\\n        return import_details\\\\n\\\\n    def _get_child_summaries(\\\\n        self, model: ModelType, recursion_path: list[str]\\\\n    ) -> list[str]:\\\\n        child_summary_list: list[str] = []\\\\n        if model.children:\\\\n            for child_model in model.children:\\\\n                child_summary: str | None = self._summarize_code_block(\\\\n                    child_model,\\\\n                    recursion_path,\\\\n                )\\\\n                if child_summary:\\\\n                    child_summary_list.append(child_summary)\\\\n        return child_summary_list\\\\n\\\\n    def _stringify_child_summaries(\\\\n        self, child_summary_list: list[str] | None\\\\n    ) -> str | None:\\\\n        if not child_summary_list:\\\\n            return None\\\\n\\\\n        children_summaries: str = \"\"\\\\n        for child_summary in child_summary_list:\\\\n            children_summaries += f\"\\\\\\\\n{child_summary}\"\\\\n        return children_summaries\\\\n\\\\n    def _stringify_dependency_summaries(\\\\n        self, dependency_summary_list: list[str] | None\\\\n    ) -> str | None:\\\\n        if not dependency_summary_list:\\\\n            return None\\\\n\\\\n        dependency_summaries: str = \"\"\\\\n        for dependency_summary in dependency_summary_list:\\\\n            dependency_summaries += f\"\\\\\\\\n{dependency_summary}\"\\\\n        return dependency_summaries\\\\n\\\\n    def _get_local_dependency_summary(\\\\n        self,\\\\n        dependency: DependencyModel,\\\\n        model: ModelType,\\\\n        recursion_path: list[str],\\\\n    ) -> str | None:\\\\n        if not model.children:\\\\n            return None\\\\n\\\\n        for child_model in model.children:\\\\n            if child_model.id == dependency.code_block_id:\\\\n                return self._summarize_code_block(\\\\n                    child_model,\\\\n                    recursion_path,\\\\n                )\\\\n\\\\n    def _get_local_import_summary(\\\\n        self, dependency: ImportModel, recursion_path: list[str]\\\\n    ) -> str | None:\\\\n        for module_model in self.module_models_tuple:\\\\n            if module_model.id == dependency.local_module_id:\\\\n                return self._summarize_code_block(\\\\n                    module_model,\\\\n                    recursion_path,\\\\n                )\\\\n\\\\n    def _get_local_import_from_summary(\\\\n        self, dependency: ImportModel, recursion_path: list[str]\\\\n    ) -> str | None:\\\\n        for import_name in dependency.import_names:\\\\n            for module_model in self.module_models_tuple:\\\\n                if module_model.id == dependency.local_module_id:\\\\n                    if module_model.children:\\\\n                        for child_model in module_model.children:\\\\n                            if (\\\\n                                child_model.id == import_name.local_block_id\\\\n                                and child_model.id\\\\n                            ):\\\\n                                return self._summarize_code_block(\\\\n                                    child_model,\\\\n                                    recursion_path,\\\\n                                )\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\ndef __init__(\\\\\\\\n    self,\\\\\\\\n    module_models_tuple: tuple[ModuleModel, ...],\\\\\\\\n    summarizer: Summarizer,\\\\\\\\n) -> None:\\\\\\\\n    self.module_models_tuple: tuple[ModuleModel, ...] = module_models_tuple\\\\\\\\n    self.summarizer: Summarizer = summarizer\\\\\\\\n    self.summarized_code_block_ids: set[str] = set()\\\\\\\\n    self.prompt_tokens: int = 0\\\\\\\\n    self.completion_tokens: int = 0\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n@property\\\\\\\\ndef total_cost(self) -> float:\\\\\\\\n    prompt_cost: int = self.prompt_tokens * 1  # Costs 1 cent per 1,000 tokens\\\\\\\\n    completion_cost: int = (\\\\\\\\n        self.completion_tokens * 3\\\\\\\\n    )  # Costs 3 cents per 1,000 tokens\\\\\\\\n    return (prompt_cost + completion_cost) / 100_000  # Convert to dollars\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef create_and_add_summaries_to_models(self) -> None:\\\\\\\\n    for module_model in self.module_models_tuple:\\\\\\\\n        self._summarize_module(module_model)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _summarize_module(self, module_model: ModuleModel) -> None:\\\\\\\\n    if module_model.id not in self.summarized_code_block_ids:\\\\\\\\n        self._summarize_code_block(module_model)\\\\\\\\n        logging.info(f\"Summarized module: {module_model.id}\")\\\\\\\\n        self.summarized_code_block_ids.add(module_model.id)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _summarize_code_block(\\\\\\\\n    self,\\\\\\\\n    model: ModelType,\\\\\\\\n    recursion_path: list[str] = [],\\\\\\\\n) -> str | None:\\\\\\\\n    if model.id in recursion_path or not model.code_content:\\\\\\\\n        return None\\\\\\\\n    if model.id in self.summarized_code_block_ids:\\\\\\\\n        return model.summary\\\\\\\\n\\\\\\\\n    recursion_path.append(model.id)\\\\\\\\n\\\\\\\\n    child_summary_list: list[str] | None = None\\\\\\\\n    if model.children:\\\\\\\\n        child_summary_list = self._get_child_summaries(model, recursion_path)\\\\\\\\n\\\\\\\\n    dependency_summary_list: list[str] = []\\\\\\\\n    import_details: str | None = None\\\\\\\\n    if model.dependencies:\\\\\\\\n        for dependency in model.dependencies:\\\\\\\\n            if isinstance(dependency, DependencyModel) and dependency.code_block_id:\\\\\\\\n                if module_local_dependency_summary := self._get_local_dependency_summary(\\\\\\\\n                    dependency, model, recursion_path\\\\\\\\n                ):\\\\\\\\n                    dependency_summary_list.append(module_local_dependency_summary)\\\\\\\\n\\\\\\\\n            if isinstance(dependency, ImportModel):\\\\\\\\n                if dependency.import_module_type == \"LOCAL\":\\\\\\\\n                    if not dependency.import_names:\\\\\\\\n                        if module_import_dependency := self._get_local_import_summary(\\\\\\\\n                            dependency, recursion_path\\\\\\\\n                        ):\\\\\\\\n                            dependency_summary_list.append(module_import_dependency)\\\\\\\\n                    else:\\\\\\\\n                        if import_from_dependency := self._get_local_import_from_summary(\\\\\\\\n                            dependency, recursion_path\\\\\\\\n                        ):\\\\\\\\n                            dependency_summary_list.append(import_from_dependency)\\\\\\\\n                else:\\\\\\\\n                    import_detail: str | None = self._get_import_details(dependency)\\\\\\\\n                    if not import_detail:\\\\\\\\n                        continue\\\\\\\\n                    if not import_details:\\\\\\\\n                        import_details = \"\"\\\\\\\\n                    import_details += f\"\\\\\\\\\\\\\\\\n{import_detail}\"\\\\\\\\n\\\\\\\\n    if isinstance(model, ModuleModel) and recursion_path:\\\\\\\\n        dependency_summary_list, import_details = self._handle_module_model(\\\\\\\\n            model, recursion_path\\\\\\\\n        )\\\\\\\\n\\\\\\\\n    children_summaries: str | None = self._stringify_child_summaries(\\\\\\\\n        child_summary_list\\\\\\\\n    )\\\\\\\\n    dependency_summaries: str | None = self._stringify_dependency_summaries(\\\\\\\\n        dependency_summary_list\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    summary_context: context.OpenAIReturnContext | str = (\\\\\\\\n        self.summarizer.test_summarize_code(\\\\\\\\n            model.code_content,\\\\\\\\n            model_id=model.id,\\\\\\\\n            children_summaries=children_summaries,\\\\\\\\n            dependency_summaries=dependency_summaries,\\\\\\\\n            import_details=import_details,\\\\\\\\n        )\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    if isinstance(summary_context, context.OpenAIReturnContext):\\\\\\\\n        if summary_context.summary:\\\\\\\\n            model.summary = summary_context.summary\\\\\\\\n            self.summarized_code_block_ids.add(model.id)\\\\\\\\n            recursion_path.remove(model.id)\\\\\\\\n\\\\\\\\n            self.prompt_tokens += summary_context.prompt_tokens\\\\\\\\n            self.completion_tokens += summary_context.completion_tokens\\\\\\\\n            logging.info(f\"Summarized code block: {model.id}\")\\\\\\\\n            logging.info(f\"Total cost: {self.total_cost}\")\\\\\\\\n\\\\\\\\n    return (\\\\\\\\n        summary_context.summary\\\\\\\\n        if isinstance(summary_context, context.OpenAIReturnContext)\\\\\\\\n        else summary_context\\\\\\\\n    )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _handle_module_model(\\\\\\\\n    self, model: ModuleModel, recursion_path: list[str]\\\\\\\\n) -> tuple[list[str], str | None]:\\\\\\\\n    dependency_summary_list: list[str] = []\\\\\\\\n    all_import_details: str | None = None\\\\\\\\n    if model.imports:\\\\\\\\n        for import_model in model.imports:\\\\\\\\n            if import_model.import_module_type == \"LOCAL\":\\\\\\\\n                if not import_model.import_names:\\\\\\\\n                    if module_import := self._get_local_import_summary(\\\\\\\\n                        import_model, recursion_path\\\\\\\\n                    ):\\\\\\\\n                        dependency_summary_list.append(module_import)\\\\\\\\n                else:\\\\\\\\n                    if import_from := self._get_local_import_from_summary(\\\\\\\\n                        import_model, recursion_path\\\\\\\\n                    ):\\\\\\\\n                        dependency_summary_list.append(import_from)\\\\\\\\n            else:\\\\\\\\n                if import_details := self._get_import_details(import_model):\\\\\\\\n                    if not all_import_details:\\\\\\\\n                        all_import_details = \"\"\\\\\\\\n                    all_import_details += f\"\\\\\\\\\\\\\\\\n\\\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\\\nimport logging\\\\nfrom postcode.ai_services.summarizer.summarizer_protocol import Summarizer\\\\nfrom postcode.post_code_types import ModelType\\\\nimport Attribute(\\\\n    value=Attribute(\\\\n        value=Name(\\\\n            value=\\\\\\'postcode\\\\\\',\\\\n            lpar=[],\\\\n            rpar=[],\\\\n        ),\\\\n        attr=Name(\\\\n            value=\\\\\\'ai_services\\\\\\',\\\\n            lpar=[],\\\\n            rpar=[],\\\\n        ),\\\\n        dot=Dot(\\\\n            whitespace_before=SimpleWhitespace(\\\\n                value=\\\\\\'\\\\\\',\\\\n            ),\\\\n            whitespace_after=SimpleWhitespace(\\\\n                value=\\\\\\'\\\\\\',\\\\n            ),\\\\n        ),\\\\n        lpar=[],\\\\n        rpar=[],\\\\n    ),\\\\n    attr=Name(\\\\n        value=\\\\\\'summarizer\\\\\\',\\\\n        lpar=[],\\\\n        rpar=[],\\\\n    ),\\\\n    dot=Dot(\\\\n        whitespace_before=SimpleWhitespace(\\\\n            value=\\\\\\'\\\\\\',\\\\n        ),\\\\n        whitespace_after=SimpleWhitespace(\\\\n            value=\\\\\\'\\\\\\',\\\\n        ),\\\\n    ),\\\\n    lpar=[],\\\\n    rpar=[],\\\\n) as context\"\\\\\\\\n\\\\\\\\n    return dependency_summary_list, all_import_details\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _get_import_details(self, import_model: ImportModel) -> str | None:\\\\\\\\n    if import_model.import_module_type == \"LOCAL\" or not import_model.import_names:\\\\\\\\n        return None\\\\\\\\n\\\\\\\\n    import_names_list: list[str] = []\\\\\\\\n    for import_name in import_model.import_names:\\\\\\\\n        if import_name.as_name:\\\\\\\\n            import_names_list.append(f\"{import_name.name} as {import_name.as_name}\")\\\\\\\\n        else:\\\\\\\\n            import_names_list.append(f\"{import_name.name}\")\\\\\\\\n\\\\\\\\n    if import_model.imported_from:\\\\\\\\n        import_details: str = f\"from {import_model.imported_from} import {\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'.join(import_names_list)}\"\\\\\\\\n    else:\\\\\\\\n        import_details = f\"import {\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'.join(import_names_list)}\"\\\\\\\\n\\\\\\\\n    return import_details\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _get_child_summaries(\\\\\\\\n    self, model: ModelType, recursion_path: list[str]\\\\\\\\n) -> list[str]:\\\\\\\\n    child_summary_list: list[str] = []\\\\\\\\n    if model.children:\\\\\\\\n        for child_model in model.children:\\\\\\\\n            child_summary: str | None = self._summarize_code_block(\\\\\\\\n                child_model,\\\\\\\\n                recursion_path,\\\\\\\\n            )\\\\\\\\n            if child_summary:\\\\\\\\n                child_summary_list.append(child_summary)\\\\\\\\n    return child_summary_list\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _stringify_child_summaries(\\\\\\\\n    self, child_summary_list: list[str] | None\\\\\\\\n) -> str | None:\\\\\\\\n    if not child_summary_list:\\\\\\\\n        return None\\\\\\\\n\\\\\\\\n    children_summaries: str = \"\"\\\\\\\\n    for child_summary in child_summary_list:\\\\\\\\n        children_summaries += f\"\\\\\\\\\\\\\\\\n{child_summary}\"\\\\\\\\n    return children_summaries\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _stringify_dependency_summaries(\\\\\\\\n    self, dependency_summary_list: list[str] | None\\\\\\\\n) -> str | None:\\\\\\\\n    if not dependency_summary_list:\\\\\\\\n        return None\\\\\\\\n\\\\\\\\n    dependency_summaries: str = \"\"\\\\\\\\n    for dependency_summary in dependency_summary_list:\\\\\\\\n        dependency_summaries += f\"\\\\\\\\\\\\\\\\n{dependency_summary}\"\\\\\\\\n    return dependency_summaries\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _get_local_dependency_summary(\\\\\\\\n    self,\\\\\\\\n    dependency: DependencyModel,\\\\\\\\n    model: ModelType,\\\\\\\\n    recursion_path: list[str],\\\\\\\\n) -> str | None:\\\\\\\\n    if not model.children:\\\\\\\\n        return None\\\\\\\\n\\\\\\\\n    for child_model in model.children:\\\\\\\\n        if child_model.id == dependency.code_block_id:\\\\\\\\n            return self._summarize_code_block(\\\\\\\\n                child_model,\\\\\\\\n                recursion_path,\\\\\\\\n            )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _get_local_import_summary(\\\\\\\\n    self, dependency: ImportModel, recursion_path: list[str]\\\\\\\\n) -> str | None:\\\\\\\\n    for module_model in self.module_models_tuple:\\\\\\\\n        if module_model.id == dependency.local_module_id:\\\\\\\\n            return self._summarize_code_block(\\\\\\\\n                module_model,\\\\\\\\n                recursion_path,\\\\\\\\n            )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _get_local_import_from_summary(\\\\\\\\n    self, dependency: ImportModel, recursion_path: list[str]\\\\\\\\n) -> str | None:\\\\\\\\n    for import_name in dependency.import_names:\\\\\\\\n        for module_model in self.module_models_tuple:\\\\\\\\n            if module_model.id == dependency.local_module_id:\\\\\\\\n                if module_model.children:\\\\\\\\n                    for child_model in module_model.children:\\\\\\\\n                        if (\\\\\\\\n                            child_model.id == import_name.local_block_id\\\\\\\\n                            and child_model.id\\\\\\\\n                        ):\\\\\\\\n                            return self._summarize_code_block(\\\\\\\\n                                child_model,\\\\\\\\n                                recursion_path,\\\\\\\\n                            )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\\\nimport logging\\\\nfrom postcode.ai_services.summarizer.summarizer_protocol import Summarizer\\\\nfrom postcode.post_code_types import ModelType\\\\nimport Attribute(\\\\n    value=Attribute(\\\\n        value=Name(\\\\n            value=\\\\\\'postcode\\\\\\',\\\\n            lpar=[],\\\\n            rpar=[],\\\\n        ),\\\\n        attr=Name(\\\\n            value=\\\\\\'ai_services\\\\\\',\\\\n            lpar=[],\\\\n            rpar=[],\\\\n        ),\\\\n        dot=Dot(\\\\n            whitespace_before=SimpleWhitespace(\\\\n                value=\\\\\\'\\\\\\',\\\\n            ),\\\\n            whitespace_after=SimpleWhitespace(\\\\n                value=\\\\\\'\\\\\\',\\\\n            ),\\\\n        ),\\\\n        lpar=[],\\\\n        rpar=[],\\\\n    ),\\\\n    attr=Name(\\\\n        value=\\\\\\'summarizer\\\\\\',\\\\n        lpar=[],\\\\n        rpar=[],\\\\n    ),\\\\n    dot=Dot(\\\\n        whitespace_before=SimpleWhitespace(\\\\n            value=\\\\\\'\\\\\\',\\\\n        ),\\\\n        whitespace_after=SimpleWhitespace(\\\\n            value=\\\\\\'\\\\\\',\\\\n        ),\\\\n    ),\\\\n    lpar=[],\\\\n    rpar=[],\\\\n) as context\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport logging\\nimport Attribute(\\n    value=Attribute(\\n        value=Name(\\n            value=\\'postcode\\',\\n            lpar=[],\\n            rpar=[],\\n        ),\\n        attr=Name(\\n            value=\\'ai_services\\',\\n            lpar=[],\\n            rpar=[],\\n        ),\\n        dot=Dot(\\n            whitespace_before=SimpleWhitespace(\\n                value=\\'\\',\\n            ),\\n            whitespace_after=SimpleWhitespace(\\n                value=\\'\\',\\n            ),\\n        ),\\n        lpar=[],\\n        rpar=[],\\n    ),\\n    attr=Name(\\n        value=\\'summarizer\\',\\n        lpar=[],\\n        rpar=[],\\n    ),\\n    dot=Dot(\\n        whitespace_before=SimpleWhitespace(\\n            value=\\'\\',\\n        ),\\n        whitespace_after=SimpleWhitespace(\\n            value=\\'\\',\\n        ),\\n    ),\\n    lpar=[],\\n    rpar=[],\\n) as context\\nfrom postcode.ai_services.summarizer.summarizer_protocol import Summarizer\\nfrom postcode.post_code_types import ModelType\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel, ModuleModel\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "class_name": "SummarizationManager",
            "decorators": null,
            "bases": null,
            "docstring": null,
            "attributes": null,
            "keywords": null,
            "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
            "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 12,
            "end_line_num": 251,
            "code_content": "\n\nclass SummarizationManager:\n    def __init__(\n        self,\n        module_models_tuple: tuple[ModuleModel, ...],\n        summarizer: Summarizer,\n    ) -> None:\n        self.module_models_tuple: tuple[ModuleModel, ...] = module_models_tuple\n        self.summarizer: Summarizer = summarizer\n        self.summarized_code_block_ids: set[str] = set()\n        self.prompt_tokens: int = 0\n        self.completion_tokens: int = 0\n\n    @property\n    def total_cost(self) -> float:\n        prompt_cost: int = self.prompt_tokens * 1  # Costs 1 cent per 1,000 tokens\n        completion_cost: int = (\n            self.completion_tokens * 3\n        )  # Costs 3 cents per 1,000 tokens\n        return (prompt_cost + completion_cost) / 100_000  # Convert to dollars\n\n    def create_and_add_summaries_to_models(self) -> None:\n        for module_model in self.module_models_tuple:\n            self._summarize_module(module_model)\n\n    def _summarize_module(self, module_model: ModuleModel) -> None:\n        if module_model.id not in self.summarized_code_block_ids:\n            self._summarize_code_block(module_model)\n            logging.info(f\"Summarized module: {module_model.id}\")\n            self.summarized_code_block_ids.add(module_model.id)\n\n    def _summarize_code_block(\n        self,\n        model: ModelType,\n        recursion_path: list[str] = [],\n    ) -> str | None:\n        if model.id in recursion_path or not model.code_content:\n            return None\n        if model.id in self.summarized_code_block_ids:\n            return model.summary\n\n        recursion_path.append(model.id)\n\n        child_summary_list: list[str] | None = None\n        if model.children:\n            child_summary_list = self._get_child_summaries(model, recursion_path)\n\n        dependency_summary_list: list[str] = []\n        import_details: str | None = None\n        if model.dependencies:\n            for dependency in model.dependencies:\n                if isinstance(dependency, DependencyModel) and dependency.code_block_id:\n                    if module_local_dependency_summary := self._get_local_dependency_summary(\n                        dependency, model, recursion_path\n                    ):\n                        dependency_summary_list.append(module_local_dependency_summary)\n\n                if isinstance(dependency, ImportModel):\n                    if dependency.import_module_type == \"LOCAL\":\n                        if not dependency.import_names:\n                            if module_import_dependency := self._get_local_import_summary(\n                                dependency, recursion_path\n                            ):\n                                dependency_summary_list.append(module_import_dependency)\n                        else:\n                            if import_from_dependency := self._get_local_import_from_summary(\n                                dependency, recursion_path\n                            ):\n                                dependency_summary_list.append(import_from_dependency)\n                    else:\n                        import_detail: str | None = self._get_import_details(dependency)\n                        if not import_detail:\n                            continue\n                        if not import_details:\n                            import_details = \"\"\n                        import_details += f\"\\n{import_detail}\"\n\n        if isinstance(model, ModuleModel) and recursion_path:\n            dependency_summary_list, import_details = self._handle_module_model(\n                model, recursion_path\n            )\n\n        children_summaries: str | None = self._stringify_child_summaries(\n            child_summary_list\n        )\n        dependency_summaries: str | None = self._stringify_dependency_summaries(\n            dependency_summary_list\n        )\n\n        summary_context: context.OpenAIReturnContext | str = (\n            self.summarizer.test_summarize_code(\n                model.code_content,\n                model_id=model.id,\n                children_summaries=children_summaries,\n                dependency_summaries=dependency_summaries,\n                import_details=import_details,\n            )\n        )\n\n        if isinstance(summary_context, context.OpenAIReturnContext):\n            if summary_context.summary:\n                model.summary = summary_context.summary\n                self.summarized_code_block_ids.add(model.id)\n                recursion_path.remove(model.id)\n\n                self.prompt_tokens += summary_context.prompt_tokens\n                self.completion_tokens += summary_context.completion_tokens\n                logging.info(f\"Summarized code block: {model.id}\")\n                logging.info(f\"Total cost: {self.total_cost}\")\n\n        return (\n            summary_context.summary\n            if isinstance(summary_context, context.OpenAIReturnContext)\n            else summary_context\n        )\n\n    def _handle_module_model(\n        self, model: ModuleModel, recursion_path: list[str]\n    ) -> tuple[list[str], str | None]:\n        dependency_summary_list: list[str] = []\n        all_import_details: str | None = None\n        if model.imports:\n            for import_model in model.imports:\n                if import_model.import_module_type == \"LOCAL\":\n                    if not import_model.import_names:\n                        if module_import := self._get_local_import_summary(\n                            import_model, recursion_path\n                        ):\n                            dependency_summary_list.append(module_import)\n                    else:\n                        if import_from := self._get_local_import_from_summary(\n                            import_model, recursion_path\n                        ):\n                            dependency_summary_list.append(import_from)\n                else:\n                    if import_details := self._get_import_details(import_model):\n                        if not all_import_details:\n                            all_import_details = \"\"\n                        all_import_details += f\"\\n{import_details}\"\n\n        return dependency_summary_list, all_import_details\n\n    def _get_import_details(self, import_model: ImportModel) -> str | None:\n        if import_model.import_module_type == \"LOCAL\" or not import_model.import_names:\n            return None\n\n        import_names_list: list[str] = []\n        for import_name in import_model.import_names:\n            if import_name.as_name:\n                import_names_list.append(f\"{import_name.name} as {import_name.as_name}\")\n            else:\n                import_names_list.append(f\"{import_name.name}\")\n\n        if import_model.imported_from:\n            import_details: str = f\"from {import_model.imported_from} import {', '.join(import_names_list)}\"\n        else:\n            import_details = f\"import {', '.join(import_names_list)}\"\n\n        return import_details\n\n    def _get_child_summaries(\n        self, model: ModelType, recursion_path: list[str]\n    ) -> list[str]:\n        child_summary_list: list[str] = []\n        if model.children:\n            for child_model in model.children:\n                child_summary: str | None = self._summarize_code_block(\n                    child_model,\n                    recursion_path,\n                )\n                if child_summary:\n                    child_summary_list.append(child_summary)\n        return child_summary_list\n\n    def _stringify_child_summaries(\n        self, child_summary_list: list[str] | None\n    ) -> str | None:\n        if not child_summary_list:\n            return None\n\n        children_summaries: str = \"\"\n        for child_summary in child_summary_list:\n            children_summaries += f\"\\n{child_summary}\"\n        return children_summaries\n\n    def _stringify_dependency_summaries(\n        self, dependency_summary_list: list[str] | None\n    ) -> str | None:\n        if not dependency_summary_list:\n            return None\n\n        dependency_summaries: str = \"\"\n        for dependency_summary in dependency_summary_list:\n            dependency_summaries += f\"\\n{dependency_summary}\"\n        return dependency_summaries\n\n    def _get_local_dependency_summary(\n        self,\n        dependency: DependencyModel,\n        model: ModelType,\n        recursion_path: list[str],\n    ) -> str | None:\n        if not model.children:\n            return None\n\n        for child_model in model.children:\n            if child_model.id == dependency.code_block_id:\n                return self._summarize_code_block(\n                    child_model,\n                    recursion_path,\n                )\n\n    def _get_local_import_summary(\n        self, dependency: ImportModel, recursion_path: list[str]\n    ) -> str | None:\n        for module_model in self.module_models_tuple:\n            if module_model.id == dependency.local_module_id:\n                return self._summarize_code_block(\n                    module_model,\n                    recursion_path,\n                )\n\n    def _get_local_import_from_summary(\n        self, dependency: ImportModel, recursion_path: list[str]\n    ) -> str | None:\n        for import_name in dependency.import_names:\n            for module_model in self.module_models_tuple:\n                if module_model.id == dependency.local_module_id:\n                    if module_model.children:\n                        for child_model in module_model.children:\n                            if (\n                                child_model.id == import_name.local_block_id\n                                and child_model.id\n                            ):\n                                return self._summarize_code_block(\n                                    child_model,\n                                    recursion_path,\n                                )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ModuleModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ModuleModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ModuleModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "logging",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Summarizer",
                            "as_name": null,
                            "local_block_id": "postcode:ai_services:summarizer:summarizer_protocol.py__*__MODULE__*__CLASS-Summarizer"
                        }
                    ],
                    "imported_from": "postcode.ai_services.summarizer.summarizer_protocol",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:ai_services:summarizer:summarizer_protocol.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ModelType",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.post_code_types",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:post_code_types.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "Attribute(\n    value=Attribute(\n        value=Name(\n            value='postcode',\n            lpar=[],\n            rpar=[],\n        ),\n        attr=Name(\n            value='ai_services',\n            lpar=[],\n            rpar=[],\n        ),\n        dot=Dot(\n            whitespace_before=SimpleWhitespace(\n                value='',\n            ),\n            whitespace_after=SimpleWhitespace(\n                value='',\n            ),\n        ),\n        lpar=[],\n        rpar=[],\n    ),\n    attr=Name(\n        value='summarizer',\n        lpar=[],\n        rpar=[],\n    ),\n    dot=Dot(\n        whitespace_before=SimpleWhitespace(\n            value='',\n        ),\n        whitespace_after=SimpleWhitespace(\n            value='',\n        ),\n    ),\n    lpar=[],\n    rpar=[],\n)",
                            "as_name": "context",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\nclass SummarizationManager:\\n    def __init__(\\n        self,\\n        module_models_tuple: tuple[ModuleModel, ...],\\n        summarizer: Summarizer,\\n    ) -> None:\\n        self.module_models_tuple: tuple[ModuleModel, ...] = module_models_tuple\\n        self.summarizer: Summarizer = summarizer\\n        self.summarized_code_block_ids: set[str] = set()\\n        self.prompt_tokens: int = 0\\n        self.completion_tokens: int = 0\\n\\n    @property\\n    def total_cost(self) -> float:\\n        prompt_cost: int = self.prompt_tokens * 1  # Costs 1 cent per 1,000 tokens\\n        completion_cost: int = (\\n            self.completion_tokens * 3\\n        )  # Costs 3 cents per 1,000 tokens\\n        return (prompt_cost + completion_cost) / 100_000  # Convert to dollars\\n\\n    def create_and_add_summaries_to_models(self) -> None:\\n        for module_model in self.module_models_tuple:\\n            self._summarize_module(module_model)\\n\\n    def _summarize_module(self, module_model: ModuleModel) -> None:\\n        if module_model.id not in self.summarized_code_block_ids:\\n            self._summarize_code_block(module_model)\\n            logging.info(f\"Summarized module: {module_model.id}\")\\n            self.summarized_code_block_ids.add(module_model.id)\\n\\n    def _summarize_code_block(\\n        self,\\n        model: ModelType,\\n        recursion_path: list[str] = [],\\n    ) -> str | None:\\n        if model.id in recursion_path or not model.code_content:\\n            return None\\n        if model.id in self.summarized_code_block_ids:\\n            return model.summary\\n\\n        recursion_path.append(model.id)\\n\\n        child_summary_list: list[str] | None = None\\n        if model.children:\\n            child_summary_list = self._get_child_summaries(model, recursion_path)\\n\\n        dependency_summary_list: list[str] = []\\n        import_details: str | None = None\\n        if model.dependencies:\\n            for dependency in model.dependencies:\\n                if isinstance(dependency, DependencyModel) and dependency.code_block_id:\\n                    if module_local_dependency_summary := self._get_local_dependency_summary(\\n                        dependency, model, recursion_path\\n                    ):\\n                        dependency_summary_list.append(module_local_dependency_summary)\\n\\n                if isinstance(dependency, ImportModel):\\n                    if dependency.import_module_type == \"LOCAL\":\\n                        if not dependency.import_names:\\n                            if module_import_dependency := self._get_local_import_summary(\\n                                dependency, recursion_path\\n                            ):\\n                                dependency_summary_list.append(module_import_dependency)\\n                        else:\\n                            if import_from_dependency := self._get_local_import_from_summary(\\n                                dependency, recursion_path\\n                            ):\\n                                dependency_summary_list.append(import_from_dependency)\\n                    else:\\n                        import_detail: str | None = self._get_import_details(dependency)\\n                        if not import_detail:\\n                            continue\\n                        if not import_details:\\n                            import_details = \"\"\\n                        import_details += f\"\\\\n{import_detail}\"\\n\\n        if isinstance(model, ModuleModel) and recursion_path:\\n            dependency_summary_list, import_details = self._handle_module_model(\\n                model, recursion_path\\n            )\\n\\n        children_summaries: str | None = self._stringify_child_summaries(\\n            child_summary_list\\n        )\\n        dependency_summaries: str | None = self._stringify_dependency_summaries(\\n            dependency_summary_list\\n        )\\n\\n        summary_context: context.OpenAIReturnContext | str = (\\n            self.summarizer.test_summarize_code(\\n                model.code_content,\\n                model_id=model.id,\\n                children_summaries=children_summaries,\\n                dependency_summaries=dependency_summaries,\\n                import_details=import_details,\\n            )\\n        )\\n\\n        if isinstance(summary_context, context.OpenAIReturnContext):\\n            if summary_context.summary:\\n                model.summary = summary_context.summary\\n                self.summarized_code_block_ids.add(model.id)\\n                recursion_path.remove(model.id)\\n\\n                self.prompt_tokens += summary_context.prompt_tokens\\n                self.completion_tokens += summary_context.completion_tokens\\n                logging.info(f\"Summarized code block: {model.id}\")\\n                logging.info(f\"Total cost: {self.total_cost}\")\\n\\n        return (\\n            summary_context.summary\\n            if isinstance(summary_context, context.OpenAIReturnContext)\\n            else summary_context\\n        )\\n\\n    def _handle_module_model(\\n        self, model: ModuleModel, recursion_path: list[str]\\n    ) -> tuple[list[str], str | None]:\\n        dependency_summary_list: list[str] = []\\n        all_import_details: str | None = None\\n        if model.imports:\\n            for import_model in model.imports:\\n                if import_model.import_module_type == \"LOCAL\":\\n                    if not import_model.import_names:\\n                        if module_import := self._get_local_import_summary(\\n                            import_model, recursion_path\\n                        ):\\n                            dependency_summary_list.append(module_import)\\n                    else:\\n                        if import_from := self._get_local_import_from_summary(\\n                            import_model, recursion_path\\n                        ):\\n                            dependency_summary_list.append(import_from)\\n                else:\\n                    if import_details := self._get_import_details(import_model):\\n                        if not all_import_details:\\n                            all_import_details = \"\"\\n                        all_import_details += f\"\\\\n\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\nimport logging\\nfrom postcode.ai_services.summarizer.summarizer_protocol import Summarizer\\nfrom postcode.post_code_types import ModelType\\nimport Attribute(\\n    value=Attribute(\\n        value=Name(\\n            value=\\'postcode\\',\\n            lpar=[],\\n            rpar=[],\\n        ),\\n        attr=Name(\\n            value=\\'ai_services\\',\\n            lpar=[],\\n            rpar=[],\\n        ),\\n        dot=Dot(\\n            whitespace_before=SimpleWhitespace(\\n                value=\\'\\',\\n            ),\\n            whitespace_after=SimpleWhitespace(\\n                value=\\'\\',\\n            ),\\n        ),\\n        lpar=[],\\n        rpar=[],\\n    ),\\n    attr=Name(\\n        value=\\'summarizer\\',\\n        lpar=[],\\n        rpar=[],\\n    ),\\n    dot=Dot(\\n        whitespace_before=SimpleWhitespace(\\n            value=\\'\\',\\n        ),\\n        whitespace_after=SimpleWhitespace(\\n            value=\\'\\',\\n        ),\\n    ),\\n    lpar=[],\\n    rpar=[],\\n) as context\"\\n\\n        return dependency_summary_list, all_import_details\\n\\n    def _get_import_details(self, import_model: ImportModel) -> str | None:\\n        if import_model.import_module_type == \"LOCAL\" or not import_model.import_names:\\n            return None\\n\\n        import_names_list: list[str] = []\\n        for import_name in import_model.import_names:\\n            if import_name.as_name:\\n                import_names_list.append(f\"{import_name.name} as {import_name.as_name}\")\\n            else:\\n                import_names_list.append(f\"{import_name.name}\")\\n\\n        if import_model.imported_from:\\n            import_details: str = f\"from {import_model.imported_from} import {\\', \\'.join(import_names_list)}\"\\n        else:\\n            import_details = f\"import {\\', \\'.join(import_names_list)}\"\\n\\n        return import_details\\n\\n    def _get_child_summaries(\\n        self, model: ModelType, recursion_path: list[str]\\n    ) -> list[str]:\\n        child_summary_list: list[str] = []\\n        if model.children:\\n            for child_model in model.children:\\n                child_summary: str | None = self._summarize_code_block(\\n                    child_model,\\n                    recursion_path,\\n                )\\n                if child_summary:\\n                    child_summary_list.append(child_summary)\\n        return child_summary_list\\n\\n    def _stringify_child_summaries(\\n        self, child_summary_list: list[str] | None\\n    ) -> str | None:\\n        if not child_summary_list:\\n            return None\\n\\n        children_summaries: str = \"\"\\n        for child_summary in child_summary_list:\\n            children_summaries += f\"\\\\n{child_summary}\"\\n        return children_summaries\\n\\n    def _stringify_dependency_summaries(\\n        self, dependency_summary_list: list[str] | None\\n    ) -> str | None:\\n        if not dependency_summary_list:\\n            return None\\n\\n        dependency_summaries: str = \"\"\\n        for dependency_summary in dependency_summary_list:\\n            dependency_summaries += f\"\\\\n{dependency_summary}\"\\n        return dependency_summaries\\n\\n    def _get_local_dependency_summary(\\n        self,\\n        dependency: DependencyModel,\\n        model: ModelType,\\n        recursion_path: list[str],\\n    ) -> str | None:\\n        if not model.children:\\n            return None\\n\\n        for child_model in model.children:\\n            if child_model.id == dependency.code_block_id:\\n                return self._summarize_code_block(\\n                    child_model,\\n                    recursion_path,\\n                )\\n\\n    def _get_local_import_summary(\\n        self, dependency: ImportModel, recursion_path: list[str]\\n    ) -> str | None:\\n        for module_model in self.module_models_tuple:\\n            if module_model.id == dependency.local_module_id:\\n                return self._summarize_code_block(\\n                    module_model,\\n                    recursion_path,\\n                )\\n\\n    def _get_local_import_from_summary(\\n        self, dependency: ImportModel, recursion_path: list[str]\\n    ) -> str | None:\\n        for import_name in dependency.import_names:\\n            for module_model in self.module_models_tuple:\\n                if module_model.id == dependency.local_module_id:\\n                    if module_model.children:\\n                        for child_model in module_model.children:\\n                            if (\\n                                child_model.id == import_name.local_block_id\\n                                and child_model.id\\n                            ):\\n                                return self._summarize_code_block(\\n                                    child_model,\\n                                    recursion_path,\\n                                )\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\ndef __init__(\\\\n    self,\\\\n    module_models_tuple: tuple[ModuleModel, ...],\\\\n    summarizer: Summarizer,\\\\n) -> None:\\\\n    self.module_models_tuple: tuple[ModuleModel, ...] = module_models_tuple\\\\n    self.summarizer: Summarizer = summarizer\\\\n    self.summarized_code_block_ids: set[str] = set()\\\\n    self.prompt_tokens: int = 0\\\\n    self.completion_tokens: int = 0\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n@property\\\\ndef total_cost(self) -> float:\\\\n    prompt_cost: int = self.prompt_tokens * 1  # Costs 1 cent per 1,000 tokens\\\\n    completion_cost: int = (\\\\n        self.completion_tokens * 3\\\\n    )  # Costs 3 cents per 1,000 tokens\\\\n    return (prompt_cost + completion_cost) / 100_000  # Convert to dollars\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef create_and_add_summaries_to_models(self) -> None:\\\\n    for module_model in self.module_models_tuple:\\\\n        self._summarize_module(module_model)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _summarize_module(self, module_model: ModuleModel) -> None:\\\\n    if module_model.id not in self.summarized_code_block_ids:\\\\n        self._summarize_code_block(module_model)\\\\n        logging.info(f\"Summarized module: {module_model.id}\")\\\\n        self.summarized_code_block_ids.add(module_model.id)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _summarize_code_block(\\\\n    self,\\\\n    model: ModelType,\\\\n    recursion_path: list[str] = [],\\\\n) -> str | None:\\\\n    if model.id in recursion_path or not model.code_content:\\\\n        return None\\\\n    if model.id in self.summarized_code_block_ids:\\\\n        return model.summary\\\\n\\\\n    recursion_path.append(model.id)\\\\n\\\\n    child_summary_list: list[str] | None = None\\\\n    if model.children:\\\\n        child_summary_list = self._get_child_summaries(model, recursion_path)\\\\n\\\\n    dependency_summary_list: list[str] = []\\\\n    import_details: str | None = None\\\\n    if model.dependencies:\\\\n        for dependency in model.dependencies:\\\\n            if isinstance(dependency, DependencyModel) and dependency.code_block_id:\\\\n                if module_local_dependency_summary := self._get_local_dependency_summary(\\\\n                    dependency, model, recursion_path\\\\n                ):\\\\n                    dependency_summary_list.append(module_local_dependency_summary)\\\\n\\\\n            if isinstance(dependency, ImportModel):\\\\n                if dependency.import_module_type == \"LOCAL\":\\\\n                    if not dependency.import_names:\\\\n                        if module_import_dependency := self._get_local_import_summary(\\\\n                            dependency, recursion_path\\\\n                        ):\\\\n                            dependency_summary_list.append(module_import_dependency)\\\\n                    else:\\\\n                        if import_from_dependency := self._get_local_import_from_summary(\\\\n                            dependency, recursion_path\\\\n                        ):\\\\n                            dependency_summary_list.append(import_from_dependency)\\\\n                else:\\\\n                    import_detail: str | None = self._get_import_details(dependency)\\\\n                    if not import_detail:\\\\n                        continue\\\\n                    if not import_details:\\\\n                        import_details = \"\"\\\\n                    import_details += f\"\\\\\\\\n{import_detail}\"\\\\n\\\\n    if isinstance(model, ModuleModel) and recursion_path:\\\\n        dependency_summary_list, import_details = self._handle_module_model(\\\\n            model, recursion_path\\\\n        )\\\\n\\\\n    children_summaries: str | None = self._stringify_child_summaries(\\\\n        child_summary_list\\\\n    )\\\\n    dependency_summaries: str | None = self._stringify_dependency_summaries(\\\\n        dependency_summary_list\\\\n    )\\\\n\\\\n    summary_context: context.OpenAIReturnContext | str = (\\\\n        self.summarizer.test_summarize_code(\\\\n            model.code_content,\\\\n            model_id=model.id,\\\\n            children_summaries=children_summaries,\\\\n            dependency_summaries=dependency_summaries,\\\\n            import_details=import_details,\\\\n        )\\\\n    )\\\\n\\\\n    if isinstance(summary_context, context.OpenAIReturnContext):\\\\n        if summary_context.summary:\\\\n            model.summary = summary_context.summary\\\\n            self.summarized_code_block_ids.add(model.id)\\\\n            recursion_path.remove(model.id)\\\\n\\\\n            self.prompt_tokens += summary_context.prompt_tokens\\\\n            self.completion_tokens += summary_context.completion_tokens\\\\n            logging.info(f\"Summarized code block: {model.id}\")\\\\n            logging.info(f\"Total cost: {self.total_cost}\")\\\\n\\\\n    return (\\\\n        summary_context.summary\\\\n        if isinstance(summary_context, context.OpenAIReturnContext)\\\\n        else summary_context\\\\n    )\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _handle_module_model(\\\\n    self, model: ModuleModel, recursion_path: list[str]\\\\n) -> tuple[list[str], str | None]:\\\\n    dependency_summary_list: list[str] = []\\\\n    all_import_details: str | None = None\\\\n    if model.imports:\\\\n        for import_model in model.imports:\\\\n            if import_model.import_module_type == \"LOCAL\":\\\\n                if not import_model.import_names:\\\\n                    if module_import := self._get_local_import_summary(\\\\n                        import_model, recursion_path\\\\n                    ):\\\\n                        dependency_summary_list.append(module_import)\\\\n                else:\\\\n                    if import_from := self._get_local_import_from_summary(\\\\n                        import_model, recursion_path\\\\n                    ):\\\\n                        dependency_summary_list.append(import_from)\\\\n            else:\\\\n                if import_details := self._get_import_details(import_model):\\\\n                    if not all_import_details:\\\\n                        all_import_details = \"\"\\\\n                    all_import_details += f\"\\\\\\\\n\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\nimport logging\\nfrom postcode.ai_services.summarizer.summarizer_protocol import Summarizer\\nfrom postcode.post_code_types import ModelType\\nimport Attribute(\\n    value=Attribute(\\n        value=Name(\\n            value=\\'postcode\\',\\n            lpar=[],\\n            rpar=[],\\n        ),\\n        attr=Name(\\n            value=\\'ai_services\\',\\n            lpar=[],\\n            rpar=[],\\n        ),\\n        dot=Dot(\\n            whitespace_before=SimpleWhitespace(\\n                value=\\'\\',\\n            ),\\n            whitespace_after=SimpleWhitespace(\\n                value=\\'\\',\\n            ),\\n        ),\\n        lpar=[],\\n        rpar=[],\\n    ),\\n    attr=Name(\\n        value=\\'summarizer\\',\\n        lpar=[],\\n        rpar=[],\\n    ),\\n    dot=Dot(\\n        whitespace_before=SimpleWhitespace(\\n            value=\\'\\',\\n        ),\\n        whitespace_after=SimpleWhitespace(\\n            value=\\'\\',\\n        ),\\n    ),\\n    lpar=[],\\n    rpar=[],\\n) as context\"\\\\n\\\\n    return dependency_summary_list, all_import_details\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _get_import_details(self, import_model: ImportModel) -> str | None:\\\\n    if import_model.import_module_type == \"LOCAL\" or not import_model.import_names:\\\\n        return None\\\\n\\\\n    import_names_list: list[str] = []\\\\n    for import_name in import_model.import_names:\\\\n        if import_name.as_name:\\\\n            import_names_list.append(f\"{import_name.name} as {import_name.as_name}\")\\\\n        else:\\\\n            import_names_list.append(f\"{import_name.name}\")\\\\n\\\\n    if import_model.imported_from:\\\\n        import_details: str = f\"from {import_model.imported_from} import {\\\\\\', \\\\\\'.join(import_names_list)}\"\\\\n    else:\\\\n        import_details = f\"import {\\\\\\', \\\\\\'.join(import_names_list)}\"\\\\n\\\\n    return import_details\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _get_child_summaries(\\\\n    self, model: ModelType, recursion_path: list[str]\\\\n) -> list[str]:\\\\n    child_summary_list: list[str] = []\\\\n    if model.children:\\\\n        for child_model in model.children:\\\\n            child_summary: str | None = self._summarize_code_block(\\\\n                child_model,\\\\n                recursion_path,\\\\n            )\\\\n            if child_summary:\\\\n                child_summary_list.append(child_summary)\\\\n    return child_summary_list\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _stringify_child_summaries(\\\\n    self, child_summary_list: list[str] | None\\\\n) -> str | None:\\\\n    if not child_summary_list:\\\\n        return None\\\\n\\\\n    children_summaries: str = \"\"\\\\n    for child_summary in child_summary_list:\\\\n        children_summaries += f\"\\\\\\\\n{child_summary}\"\\\\n    return children_summaries\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _stringify_dependency_summaries(\\\\n    self, dependency_summary_list: list[str] | None\\\\n) -> str | None:\\\\n    if not dependency_summary_list:\\\\n        return None\\\\n\\\\n    dependency_summaries: str = \"\"\\\\n    for dependency_summary in dependency_summary_list:\\\\n        dependency_summaries += f\"\\\\\\\\n{dependency_summary}\"\\\\n    return dependency_summaries\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _get_local_dependency_summary(\\\\n    self,\\\\n    dependency: DependencyModel,\\\\n    model: ModelType,\\\\n    recursion_path: list[str],\\\\n) -> str | None:\\\\n    if not model.children:\\\\n        return None\\\\n\\\\n    for child_model in model.children:\\\\n        if child_model.id == dependency.code_block_id:\\\\n            return self._summarize_code_block(\\\\n                child_model,\\\\n                recursion_path,\\\\n            )\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _get_local_import_summary(\\\\n    self, dependency: ImportModel, recursion_path: list[str]\\\\n) -> str | None:\\\\n    for module_model in self.module_models_tuple:\\\\n        if module_model.id == dependency.local_module_id:\\\\n            return self._summarize_code_block(\\\\n                module_model,\\\\n                recursion_path,\\\\n            )\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _get_local_import_from_summary(\\\\n    self, dependency: ImportModel, recursion_path: list[str]\\\\n) -> str | None:\\\\n    for import_name in dependency.import_names:\\\\n        for module_model in self.module_models_tuple:\\\\n            if module_model.id == dependency.local_module_id:\\\\n                if module_model.children:\\\\n                    for child_model in module_model.children:\\\\n                        if (\\\\n                            child_model.id == import_name.local_block_id\\\\n                            and child_model.id\\\\n                        ):\\\\n                            return self._summarize_code_block(\\\\n                                child_model,\\\\n                                recursion_path,\\\\n                            )\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\nfrom postcode.python_parser.models.models import DependencyModel, ImportModel, ModuleModel\\nimport logging\\nfrom postcode.ai_services.summarizer.summarizer_protocol import Summarizer\\nfrom postcode.post_code_types import ModelType\\nimport Attribute(\\n    value=Attribute(\\n        value=Name(\\n            value=\\'postcode\\',\\n            lpar=[],\\n            rpar=[],\\n        ),\\n        attr=Name(\\n            value=\\'ai_services\\',\\n            lpar=[],\\n            rpar=[],\\n        ),\\n        dot=Dot(\\n            whitespace_before=SimpleWhitespace(\\n                value=\\'\\',\\n            ),\\n            whitespace_after=SimpleWhitespace(\\n                value=\\'\\',\\n            ),\\n        ),\\n        lpar=[],\\n        rpar=[],\\n    ),\\n    attr=Name(\\n        value=\\'summarizer\\',\\n        lpar=[],\\n        rpar=[],\\n    ),\\n    dot=Dot(\\n        whitespace_before=SimpleWhitespace(\\n            value=\\'\\',\\n        ),\\n        whitespace_after=SimpleWhitespace(\\n            value=\\'\\',\\n        ),\\n    ),\\n    lpar=[],\\n    rpar=[],\\n) as context\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager__*__FUNCTION-__init__",
                    "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 15,
                    "end_line_num": 25,
                    "code_content": "def __init__(\n    self,\n    module_models_tuple: tuple[ModuleModel, ...],\n    summarizer: Summarizer,\n) -> None:\n    self.module_models_tuple: tuple[ModuleModel, ...] = module_models_tuple\n    self.summarizer: Summarizer = summarizer\n    self.summarized_code_block_ids: set[str] = set()\n    self.prompt_tokens: int = 0\n    self.completion_tokens: int = 0\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\ndef __init__(\\n    self,\\n    module_models_tuple: tuple[ModuleModel, ...],\\n    summarizer: Summarizer,\\n) -> None:\\n    self.module_models_tuple: tuple[ModuleModel, ...] = module_models_tuple\\n    self.summarizer: Summarizer = summarizer\\n    self.summarized_code_block_ids: set[str] = set()\\n    self.prompt_tokens: int = 0\\n    self.completion_tokens: int = 0\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "total_cost",
                    "docstring": null,
                    "decorators": [
                        {
                            "content": "@property",
                            "decorator_name": "property",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "float",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager__*__FUNCTION-total_cost",
                    "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 25,
                    "end_line_num": 33,
                    "code_content": "\n@property\ndef total_cost(self) -> float:\n    prompt_cost: int = self.prompt_tokens * 1  # Costs 1 cent per 1,000 tokens\n    completion_cost: int = (\n        self.completion_tokens * 3\n    )  # Costs 3 cents per 1,000 tokens\n    return (prompt_cost + completion_cost) / 100_000  # Convert to dollars\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n@property\\ndef total_cost(self) -> float:\\n    prompt_cost: int = self.prompt_tokens * 1  # Costs 1 cent per 1,000 tokens\\n    completion_cost: int = (\\n        self.completion_tokens * 3\\n    )  # Costs 3 cents per 1,000 tokens\\n    return (prompt_cost + completion_cost) / 100_000  # Convert to dollars\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "create_and_add_summaries_to_models",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager__*__FUNCTION-create_and_add_summaries_to_models",
                    "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 33,
                    "end_line_num": 37,
                    "code_content": "\ndef create_and_add_summaries_to_models(self) -> None:\n    for module_model in self.module_models_tuple:\n        self._summarize_module(module_model)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef create_and_add_summaries_to_models(self) -> None:\\n    for module_model in self.module_models_tuple:\\n        self._summarize_module(module_model)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_summarize_module",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager__*__FUNCTION-_summarize_module",
                    "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 37,
                    "end_line_num": 43,
                    "code_content": "\ndef _summarize_module(self, module_model: ModuleModel) -> None:\n    if module_model.id not in self.summarized_code_block_ids:\n        self._summarize_code_block(module_model)\n        logging.info(f\"Summarized module: {module_model.id}\")\n        self.summarized_code_block_ids.add(module_model.id)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _summarize_module(self, module_model: ModuleModel) -> None:\\n    if module_model.id not in self.summarized_code_block_ids:\\n        self._summarize_code_block(module_model)\\n        logging.info(f\"Summarized module: {module_model.id}\")\\n        self.summarized_code_block_ids.add(module_model.id)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_summarize_code_block",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "str | None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager__*__FUNCTION-_summarize_code_block",
                    "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 43,
                    "end_line_num": 128,
                    "code_content": "\ndef _summarize_code_block(\n    self,\n    model: ModelType,\n    recursion_path: list[str] = [],\n) -> str | None:\n    if model.id in recursion_path or not model.code_content:\n        return None\n    if model.id in self.summarized_code_block_ids:\n        return model.summary\n\n    recursion_path.append(model.id)\n\n    child_summary_list: list[str] | None = None\n    if model.children:\n        child_summary_list = self._get_child_summaries(model, recursion_path)\n\n    dependency_summary_list: list[str] = []\n    import_details: str | None = None\n    if model.dependencies:\n        for dependency in model.dependencies:\n            if isinstance(dependency, DependencyModel) and dependency.code_block_id:\n                if module_local_dependency_summary := self._get_local_dependency_summary(\n                    dependency, model, recursion_path\n                ):\n                    dependency_summary_list.append(module_local_dependency_summary)\n\n            if isinstance(dependency, ImportModel):\n                if dependency.import_module_type == \"LOCAL\":\n                    if not dependency.import_names:\n                        if module_import_dependency := self._get_local_import_summary(\n                            dependency, recursion_path\n                        ):\n                            dependency_summary_list.append(module_import_dependency)\n                    else:\n                        if import_from_dependency := self._get_local_import_from_summary(\n                            dependency, recursion_path\n                        ):\n                            dependency_summary_list.append(import_from_dependency)\n                else:\n                    import_detail: str | None = self._get_import_details(dependency)\n                    if not import_detail:\n                        continue\n                    if not import_details:\n                        import_details = \"\"\n                    import_details += f\"\\n{import_detail}\"\n\n    if isinstance(model, ModuleModel) and recursion_path:\n        dependency_summary_list, import_details = self._handle_module_model(\n            model, recursion_path\n        )\n\n    children_summaries: str | None = self._stringify_child_summaries(\n        child_summary_list\n    )\n    dependency_summaries: str | None = self._stringify_dependency_summaries(\n        dependency_summary_list\n    )\n\n    summary_context: context.OpenAIReturnContext | str = (\n        self.summarizer.test_summarize_code(\n            model.code_content,\n            model_id=model.id,\n            children_summaries=children_summaries,\n            dependency_summaries=dependency_summaries,\n            import_details=import_details,\n        )\n    )\n\n    if isinstance(summary_context, context.OpenAIReturnContext):\n        if summary_context.summary:\n            model.summary = summary_context.summary\n            self.summarized_code_block_ids.add(model.id)\n            recursion_path.remove(model.id)\n\n            self.prompt_tokens += summary_context.prompt_tokens\n            self.completion_tokens += summary_context.completion_tokens\n            logging.info(f\"Summarized code block: {model.id}\")\n            logging.info(f\"Total cost: {self.total_cost}\")\n\n    return (\n        summary_context.summary\n        if isinstance(summary_context, context.OpenAIReturnContext)\n        else summary_context\n    )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _summarize_code_block(\\n    self,\\n    model: ModelType,\\n    recursion_path: list[str] = [],\\n) -> str | None:\\n    if model.id in recursion_path or not model.code_content:\\n        return None\\n    if model.id in self.summarized_code_block_ids:\\n        return model.summary\\n\\n    recursion_path.append(model.id)\\n\\n    child_summary_list: list[str] | None = None\\n    if model.children:\\n        child_summary_list = self._get_child_summaries(model, recursion_path)\\n\\n    dependency_summary_list: list[str] = []\\n    import_details: str | None = None\\n    if model.dependencies:\\n        for dependency in model.dependencies:\\n            if isinstance(dependency, DependencyModel) and dependency.code_block_id:\\n                if module_local_dependency_summary := self._get_local_dependency_summary(\\n                    dependency, model, recursion_path\\n                ):\\n                    dependency_summary_list.append(module_local_dependency_summary)\\n\\n            if isinstance(dependency, ImportModel):\\n                if dependency.import_module_type == \"LOCAL\":\\n                    if not dependency.import_names:\\n                        if module_import_dependency := self._get_local_import_summary(\\n                            dependency, recursion_path\\n                        ):\\n                            dependency_summary_list.append(module_import_dependency)\\n                    else:\\n                        if import_from_dependency := self._get_local_import_from_summary(\\n                            dependency, recursion_path\\n                        ):\\n                            dependency_summary_list.append(import_from_dependency)\\n                else:\\n                    import_detail: str | None = self._get_import_details(dependency)\\n                    if not import_detail:\\n                        continue\\n                    if not import_details:\\n                        import_details = \"\"\\n                    import_details += f\"\\\\n{import_detail}\"\\n\\n    if isinstance(model, ModuleModel) and recursion_path:\\n        dependency_summary_list, import_details = self._handle_module_model(\\n            model, recursion_path\\n        )\\n\\n    children_summaries: str | None = self._stringify_child_summaries(\\n        child_summary_list\\n    )\\n    dependency_summaries: str | None = self._stringify_dependency_summaries(\\n        dependency_summary_list\\n    )\\n\\n    summary_context: context.OpenAIReturnContext | str = (\\n        self.summarizer.test_summarize_code(\\n            model.code_content,\\n            model_id=model.id,\\n            children_summaries=children_summaries,\\n            dependency_summaries=dependency_summaries,\\n            import_details=import_details,\\n        )\\n    )\\n\\n    if isinstance(summary_context, context.OpenAIReturnContext):\\n        if summary_context.summary:\\n            model.summary = summary_context.summary\\n            self.summarized_code_block_ids.add(model.id)\\n            recursion_path.remove(model.id)\\n\\n            self.prompt_tokens += summary_context.prompt_tokens\\n            self.completion_tokens += summary_context.completion_tokens\\n            logging.info(f\"Summarized code block: {model.id}\")\\n            logging.info(f\"Total cost: {self.total_cost}\")\\n\\n    return (\\n        summary_context.summary\\n        if isinstance(summary_context, context.OpenAIReturnContext)\\n        else summary_context\\n    )\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_handle_module_model",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "tuple[list[str], str | None]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager__*__FUNCTION-_handle_module_model",
                    "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 128,
                    "end_line_num": 154,
                    "code_content": "\ndef _handle_module_model(\n    self, model: ModuleModel, recursion_path: list[str]\n) -> tuple[list[str], str | None]:\n    dependency_summary_list: list[str] = []\n    all_import_details: str | None = None\n    if model.imports:\n        for import_model in model.imports:\n            if import_model.import_module_type == \"LOCAL\":\n                if not import_model.import_names:\n                    if module_import := self._get_local_import_summary(\n                        import_model, recursion_path\n                    ):\n                        dependency_summary_list.append(module_import)\n                else:\n                    if import_from := self._get_local_import_from_summary(\n                        import_model, recursion_path\n                    ):\n                        dependency_summary_list.append(import_from)\n            else:\n                if import_details := self._get_import_details(import_model):\n                    if not all_import_details:\n                        all_import_details = \"\"\n                    all_import_details += f\"\\n{import_details}\"\n\n    return dependency_summary_list, all_import_details\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _handle_module_model(\\n    self, model: ModuleModel, recursion_path: list[str]\\n) -> tuple[list[str], str | None]:\\n    dependency_summary_list: list[str] = []\\n    all_import_details: str | None = None\\n    if model.imports:\\n        for import_model in model.imports:\\n            if import_model.import_module_type == \"LOCAL\":\\n                if not import_model.import_names:\\n                    if module_import := self._get_local_import_summary(\\n                        import_model, recursion_path\\n                    ):\\n                        dependency_summary_list.append(module_import)\\n                else:\\n                    if import_from := self._get_local_import_from_summary(\\n                        import_model, recursion_path\\n                    ):\\n                        dependency_summary_list.append(import_from)\\n            else:\\n                if import_details := self._get_import_details(import_model):\\n                    if not all_import_details:\\n                        all_import_details = \"\"\\n                    all_import_details += f\"\\\\n{import_details}\"\\n\\n    return dependency_summary_list, all_import_details\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_get_import_details",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "str | None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager__*__FUNCTION-_get_import_details",
                    "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 154,
                    "end_line_num": 172,
                    "code_content": "\ndef _get_import_details(self, import_model: ImportModel) -> str | None:\n    if import_model.import_module_type == \"LOCAL\" or not import_model.import_names:\n        return None\n\n    import_names_list: list[str] = []\n    for import_name in import_model.import_names:\n        if import_name.as_name:\n            import_names_list.append(f\"{import_name.name} as {import_name.as_name}\")\n        else:\n            import_names_list.append(f\"{import_name.name}\")\n\n    if import_model.imported_from:\n        import_details: str = f\"from {import_model.imported_from} import {', '.join(import_names_list)}\"\n    else:\n        import_details = f\"import {', '.join(import_names_list)}\"\n\n    return import_details\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _get_import_details(self, import_model: ImportModel) -> str | None:\\n    if import_model.import_module_type == \"LOCAL\" or not import_model.import_names:\\n        return None\\n\\n    import_names_list: list[str] = []\\n    for import_name in import_model.import_names:\\n        if import_name.as_name:\\n            import_names_list.append(f\"{import_name.name} as {import_name.as_name}\")\\n        else:\\n            import_names_list.append(f\"{import_name.name}\")\\n\\n    if import_model.imported_from:\\n        import_details: str = f\"from {import_model.imported_from} import {\\', \\'.join(import_names_list)}\"\\n    else:\\n        import_details = f\"import {\\', \\'.join(import_names_list)}\"\\n\\n    return import_details\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_get_child_summaries",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "list[str]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager__*__FUNCTION-_get_child_summaries",
                    "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 172,
                    "end_line_num": 186,
                    "code_content": "\ndef _get_child_summaries(\n    self, model: ModelType, recursion_path: list[str]\n) -> list[str]:\n    child_summary_list: list[str] = []\n    if model.children:\n        for child_model in model.children:\n            child_summary: str | None = self._summarize_code_block(\n                child_model,\n                recursion_path,\n            )\n            if child_summary:\n                child_summary_list.append(child_summary)\n    return child_summary_list\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _get_child_summaries(\\n    self, model: ModelType, recursion_path: list[str]\\n) -> list[str]:\\n    child_summary_list: list[str] = []\\n    if model.children:\\n        for child_model in model.children:\\n            child_summary: str | None = self._summarize_code_block(\\n                child_model,\\n                recursion_path,\\n            )\\n            if child_summary:\\n                child_summary_list.append(child_summary)\\n    return child_summary_list\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_stringify_child_summaries",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "str | None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager__*__FUNCTION-_stringify_child_summaries",
                    "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 186,
                    "end_line_num": 197,
                    "code_content": "\ndef _stringify_child_summaries(\n    self, child_summary_list: list[str] | None\n) -> str | None:\n    if not child_summary_list:\n        return None\n\n    children_summaries: str = \"\"\n    for child_summary in child_summary_list:\n        children_summaries += f\"\\n{child_summary}\"\n    return children_summaries\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _stringify_child_summaries(\\n    self, child_summary_list: list[str] | None\\n) -> str | None:\\n    if not child_summary_list:\\n        return None\\n\\n    children_summaries: str = \"\"\\n    for child_summary in child_summary_list:\\n        children_summaries += f\"\\\\n{child_summary}\"\\n    return children_summaries\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_stringify_dependency_summaries",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "str | None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager__*__FUNCTION-_stringify_dependency_summaries",
                    "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 197,
                    "end_line_num": 208,
                    "code_content": "\ndef _stringify_dependency_summaries(\n    self, dependency_summary_list: list[str] | None\n) -> str | None:\n    if not dependency_summary_list:\n        return None\n\n    dependency_summaries: str = \"\"\n    for dependency_summary in dependency_summary_list:\n        dependency_summaries += f\"\\n{dependency_summary}\"\n    return dependency_summaries\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _stringify_dependency_summaries(\\n    self, dependency_summary_list: list[str] | None\\n) -> str | None:\\n    if not dependency_summary_list:\\n        return None\\n\\n    dependency_summaries: str = \"\"\\n    for dependency_summary in dependency_summary_list:\\n        dependency_summaries += f\"\\\\n{dependency_summary}\"\\n    return dependency_summaries\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_get_local_dependency_summary",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "str | None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager__*__FUNCTION-_get_local_dependency_summary",
                    "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 208,
                    "end_line_num": 224,
                    "code_content": "\ndef _get_local_dependency_summary(\n    self,\n    dependency: DependencyModel,\n    model: ModelType,\n    recursion_path: list[str],\n) -> str | None:\n    if not model.children:\n        return None\n\n    for child_model in model.children:\n        if child_model.id == dependency.code_block_id:\n            return self._summarize_code_block(\n                child_model,\n                recursion_path,\n            )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _get_local_dependency_summary(\\n    self,\\n    dependency: DependencyModel,\\n    model: ModelType,\\n    recursion_path: list[str],\\n) -> str | None:\\n    if not model.children:\\n        return None\\n\\n    for child_model in model.children:\\n        if child_model.id == dependency.code_block_id:\\n            return self._summarize_code_block(\\n                child_model,\\n                recursion_path,\\n            )\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_get_local_import_summary",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "str | None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager__*__FUNCTION-_get_local_import_summary",
                    "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 224,
                    "end_line_num": 234,
                    "code_content": "\ndef _get_local_import_summary(\n    self, dependency: ImportModel, recursion_path: list[str]\n) -> str | None:\n    for module_model in self.module_models_tuple:\n        if module_model.id == dependency.local_module_id:\n            return self._summarize_code_block(\n                module_model,\n                recursion_path,\n            )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _get_local_import_summary(\\n    self, dependency: ImportModel, recursion_path: list[str]\\n) -> str | None:\\n    for module_model in self.module_models_tuple:\\n        if module_model.id == dependency.local_module_id:\\n            return self._summarize_code_block(\\n                module_model,\\n                recursion_path,\\n            )\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_get_local_import_from_summary",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "str | None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager__*__FUNCTION-_get_local_import_from_summary",
                    "parent_id": "postcode:ai_services:summarizer:summarization_manager.py__*__MODULE__*__CLASS-SummarizationManager",
                    "block_type": "FUNCTION",
                    "start_line_num": 234,
                    "end_line_num": 251,
                    "code_content": "\ndef _get_local_import_from_summary(\n    self, dependency: ImportModel, recursion_path: list[str]\n) -> str | None:\n    for import_name in dependency.import_names:\n        for module_model in self.module_models_tuple:\n            if module_model.id == dependency.local_module_id:\n                if module_model.children:\n                    for child_model in module_model.children:\n                        if (\n                            child_model.id == import_name.local_block_id\n                            and child_model.id\n                        ):\n                            return self._summarize_code_block(\n                                child_model,\n                                recursion_path,\n                            )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _get_local_import_from_summary(\\n    self, dependency: ImportModel, recursion_path: list[str]\\n) -> str | None:\\n    for import_name in dependency.import_names:\\n        for module_model in self.module_models_tuple:\\n            if module_model.id == dependency.local_module_id:\\n                if module_model.children:\\n                    for child_model in module_model.children:\\n                        if (\\n                            child_model.id == import_name.local_block_id\\n                            and child_model.id\\n                        ):\\n                            return self._summarize_code_block(\\n                                child_model,\\n                                recursion_path,\\n                            )\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        }
    ]
}