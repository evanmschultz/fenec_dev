{
    "file_path": "./python_parser/id_generation/id_generation_strategies.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "ABC",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "abstractmethod",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "abc",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        }
    ],
    "id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 112,
    "code_content": "from abc import ABC, abstractmethod\n\n\nclass IDGenerationStrategy(ABC):\n    \"\"\"\n    Abstract base class defining the interface for ID generation strategies.\n\n    This class serves as a template for creating various ID generation strategies for different types\n    of code blocks, such as modules, classes, functions, and standalone code blocks.\n    \"\"\"\n\n    @staticmethod\n    @abstractmethod\n    def generate_id(**kwargs) -> str:\n        \"\"\"\n        Abstract method to generate an ID based on the given context.\n\n        Subclasses should implement this method to generate an ID specific to the block type.\n\n        Args:\n            **kwargs: Variable keyword arguments depending on the specific strategy requirements.\n\n        Returns:\n            str: The generated ID.\n        \"\"\"\n        pass\n\n\nclass ModuleIDGenerationStrategy(IDGenerationStrategy):\n    \"\"\"ID generation strategy for modules.\"\"\"\n\n    @staticmethod\n    def generate_id(file_path: str) -> str:\n        \"\"\"\n        Generates an ID for a module based on the given file path.\n\n        Args:\n            file_path (str): The file path of the module.\n\n        Returns:\n            str: The generated ID, incorporating the file path.\n        \"\"\"\n        module_path: str = ModuleIDGenerationStrategy.converted_path_string(file_path)\n        return f\"{module_path}__*__MODULE\"\n\n    @staticmethod\n    def converted_path_string(file_path: str) -> str:\n        \"\"\"\n        Converts a file path to a valid ID string.\n\n        Args:\n            file_path (str): The file path to convert.\n\n        Returns:\n            str: The converted ID string.\n        \"\"\"\n        return file_path.replace(\"/\", \":\")\n\n\nclass ClassIDGenerationStrategy(IDGenerationStrategy):\n    \"\"\"ID generation strategy for classes.\"\"\"\n\n    @staticmethod\n    def generate_id(parent_id: str, class_name: str) -> str:\n        \"\"\"\n        Generates an ID for a class based on the given parent ID and class name.\n\n        Args:\n            parent_id (str): The ID of the parent (module or another class).\n            class_name (str): The name of the class.\n\n        Returns:\n            str: The generated ID, incorporating the parent ID and class name.\n        \"\"\"\n        return f\"{parent_id}__*__CLASS-{class_name}\"\n\n\nclass FunctionIDGenerationStrategy(IDGenerationStrategy):\n    \"\"\"ID generation strategy for functions.\"\"\"\n\n    @staticmethod\n    def generate_id(parent_id: str, function_name: str) -> str:\n        \"\"\"\n        Generates an ID for a function based on the given parent ID and function name.\n\n        Args:\n            parent_id (str): The ID of the parent (module or class).\n            function_name (str): The name of the function.\n\n        Returns:\n            str: The generated ID, incorporating the parent ID and function name.\n        \"\"\"\n        return f\"{parent_id}__*__FUNCTION-{function_name}\"\n\n\nclass StandaloneCodeBlockIDGenerationStrategy(IDGenerationStrategy):\n    \"\"\"ID generation strategy for standalone code blocks.\"\"\"\n\n    @staticmethod\n    def generate_id(parent_id: str, count: int) -> str:\n        \"\"\"\n        Generates an ID for a standalone code block based on the given parent ID and a count.\n\n        Args:\n            parent_id (str): The ID of the parent (typically a module).\n            count (int): A unique count or index for the standalone block within its parent.\n\n        Returns:\n            str: The generated ID, incorporating the parent ID and the count.\n        \"\"\"\n        return f\"{parent_id}__*__STANDALONE_BLOCK-{count}\"\n",
    "important_comments": null,
    "dependencies": null,
    "summary": null,
    "children": [
        {
            "class_name": "IDGenerationStrategy",
            "decorators": null,
            "bases": [
                "ABC"
            ],
            "docstring": "Abstract base class defining the interface for ID generation strategies.\n\nThis class serves as a template for creating various ID generation strategies for different types\nof code blocks, such as modules, classes, functions, and standalone code blocks.",
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-IDGenerationStrategy",
            "parent_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 2,
            "end_line_num": 27,
            "code_content": "\n\nclass IDGenerationStrategy(ABC):\n    \"\"\"\n    Abstract base class defining the interface for ID generation strategies.\n\n    This class serves as a template for creating various ID generation strategies for different types\n    of code blocks, such as modules, classes, functions, and standalone code blocks.\n    \"\"\"\n\n    @staticmethod\n    @abstractmethod\n    def generate_id(**kwargs) -> str:\n        \"\"\"\n        Abstract method to generate an ID based on the given context.\n\n        Subclasses should implement this method to generate an ID specific to the block type.\n\n        Args:\n            **kwargs: Variable keyword arguments depending on the specific strategy requirements.\n\n        Returns:\n            str: The generated ID.\n        \"\"\"\n        pass\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "ABC",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "abstractmethod",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "abc",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ABC",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "abstractmethod",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "abc",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                }
            ],
            "summary": null,
            "children": [
                {
                    "function_name": "generate_id",
                    "docstring": "Abstract method to generate an ID based on the given context.\n\nSubclasses should implement this method to generate an ID specific to the block type.\n\nArgs:\n    **kwargs: Variable keyword arguments depending on the specific strategy requirements.\n\nReturns:\n    str: The generated ID.",
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        },
                        {
                            "content": "@abstractmethod",
                            "decorator_name": "abstractmethod",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-IDGenerationStrategy__*__FUNCTION-generate_id",
                    "parent_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-IDGenerationStrategy",
                    "block_type": "FUNCTION",
                    "start_line_num": 11,
                    "end_line_num": 27,
                    "code_content": "\n@staticmethod\n@abstractmethod\ndef generate_id(**kwargs) -> str:\n    \"\"\"\n        Abstract method to generate an ID based on the given context.\n\n        Subclasses should implement this method to generate an ID specific to the block type.\n\n        Args:\n            **kwargs: Variable keyword arguments depending on the specific strategy requirements.\n\n        Returns:\n            str: The generated ID.\n        \"\"\"\n    pass\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                }
            ]
        },
        {
            "class_name": "ModuleIDGenerationStrategy",
            "decorators": null,
            "bases": [
                "IDGenerationStrategy"
            ],
            "docstring": "ID generation strategy for modules.",
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-ModuleIDGenerationStrategy",
            "parent_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 27,
            "end_line_num": 58,
            "code_content": "\n\nclass ModuleIDGenerationStrategy(IDGenerationStrategy):\n    \"\"\"ID generation strategy for modules.\"\"\"\n\n    @staticmethod\n    def generate_id(file_path: str) -> str:\n        \"\"\"\n        Generates an ID for a module based on the given file path.\n\n        Args:\n            file_path (str): The file path of the module.\n\n        Returns:\n            str: The generated ID, incorporating the file path.\n        \"\"\"\n        module_path: str = ModuleIDGenerationStrategy.converted_path_string(file_path)\n        return f\"{module_path}__*__MODULE\"\n\n    @staticmethod\n    def converted_path_string(file_path: str) -> str:\n        \"\"\"\n        Converts a file path to a valid ID string.\n\n        Args:\n            file_path (str): The file path to convert.\n\n        Returns:\n            str: The converted ID string.\n        \"\"\"\n        return file_path.replace(\"/\", \":\")\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-IDGenerationStrategy"
                }
            ],
            "summary": null,
            "children": [
                {
                    "function_name": "generate_id",
                    "docstring": "Generates an ID for a module based on the given file path.\n\nArgs:\n    file_path (str): The file path of the module.\n\nReturns:\n    str: The generated ID, incorporating the file path.",
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-ModuleIDGenerationStrategy__*__FUNCTION-generate_id",
                    "parent_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-ModuleIDGenerationStrategy",
                    "block_type": "FUNCTION",
                    "start_line_num": 31,
                    "end_line_num": 45,
                    "code_content": "\n@staticmethod\ndef generate_id(file_path: str) -> str:\n    \"\"\"\n        Generates an ID for a module based on the given file path.\n\n        Args:\n            file_path (str): The file path of the module.\n\n        Returns:\n            str: The generated ID, incorporating the file path.\n        \"\"\"\n    module_path: str = ModuleIDGenerationStrategy.converted_path_string(file_path)\n    return f\"{module_path}__*__MODULE\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                },
                {
                    "function_name": "converted_path_string",
                    "docstring": "Converts a file path to a valid ID string.\n\nArgs:\n    file_path (str): The file path to convert.\n\nReturns:\n    str: The converted ID string.",
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-ModuleIDGenerationStrategy__*__FUNCTION-converted_path_string",
                    "parent_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-ModuleIDGenerationStrategy",
                    "block_type": "FUNCTION",
                    "start_line_num": 45,
                    "end_line_num": 58,
                    "code_content": "\n@staticmethod\ndef converted_path_string(file_path: str) -> str:\n    \"\"\"\n        Converts a file path to a valid ID string.\n\n        Args:\n            file_path (str): The file path to convert.\n\n        Returns:\n            str: The converted ID string.\n        \"\"\"\n    return file_path.replace(\"/\", \":\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                }
            ]
        },
        {
            "class_name": "ClassIDGenerationStrategy",
            "decorators": null,
            "bases": [
                "IDGenerationStrategy"
            ],
            "docstring": "ID generation strategy for classes.",
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-ClassIDGenerationStrategy",
            "parent_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 58,
            "end_line_num": 76,
            "code_content": "\n\nclass ClassIDGenerationStrategy(IDGenerationStrategy):\n    \"\"\"ID generation strategy for classes.\"\"\"\n\n    @staticmethod\n    def generate_id(parent_id: str, class_name: str) -> str:\n        \"\"\"\n        Generates an ID for a class based on the given parent ID and class name.\n\n        Args:\n            parent_id (str): The ID of the parent (module or another class).\n            class_name (str): The name of the class.\n\n        Returns:\n            str: The generated ID, incorporating the parent ID and class name.\n        \"\"\"\n        return f\"{parent_id}__*__CLASS-{class_name}\"\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-IDGenerationStrategy"
                }
            ],
            "summary": null,
            "children": [
                {
                    "function_name": "generate_id",
                    "docstring": "Generates an ID for a class based on the given parent ID and class name.\n\nArgs:\n    parent_id (str): The ID of the parent (module or another class).\n    class_name (str): The name of the class.\n\nReturns:\n    str: The generated ID, incorporating the parent ID and class name.",
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-ClassIDGenerationStrategy__*__FUNCTION-generate_id",
                    "parent_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-ClassIDGenerationStrategy",
                    "block_type": "FUNCTION",
                    "start_line_num": 62,
                    "end_line_num": 76,
                    "code_content": "\n@staticmethod\ndef generate_id(parent_id: str, class_name: str) -> str:\n    \"\"\"\n        Generates an ID for a class based on the given parent ID and class name.\n\n        Args:\n            parent_id (str): The ID of the parent (module or another class).\n            class_name (str): The name of the class.\n\n        Returns:\n            str: The generated ID, incorporating the parent ID and class name.\n        \"\"\"\n    return f\"{parent_id}__*__CLASS-{class_name}\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                }
            ]
        },
        {
            "class_name": "FunctionIDGenerationStrategy",
            "decorators": null,
            "bases": [
                "IDGenerationStrategy"
            ],
            "docstring": "ID generation strategy for functions.",
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-FunctionIDGenerationStrategy",
            "parent_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 76,
            "end_line_num": 94,
            "code_content": "\n\nclass FunctionIDGenerationStrategy(IDGenerationStrategy):\n    \"\"\"ID generation strategy for functions.\"\"\"\n\n    @staticmethod\n    def generate_id(parent_id: str, function_name: str) -> str:\n        \"\"\"\n        Generates an ID for a function based on the given parent ID and function name.\n\n        Args:\n            parent_id (str): The ID of the parent (module or class).\n            function_name (str): The name of the function.\n\n        Returns:\n            str: The generated ID, incorporating the parent ID and function name.\n        \"\"\"\n        return f\"{parent_id}__*__FUNCTION-{function_name}\"\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-IDGenerationStrategy"
                }
            ],
            "summary": null,
            "children": [
                {
                    "function_name": "generate_id",
                    "docstring": "Generates an ID for a function based on the given parent ID and function name.\n\nArgs:\n    parent_id (str): The ID of the parent (module or class).\n    function_name (str): The name of the function.\n\nReturns:\n    str: The generated ID, incorporating the parent ID and function name.",
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-FunctionIDGenerationStrategy__*__FUNCTION-generate_id",
                    "parent_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-FunctionIDGenerationStrategy",
                    "block_type": "FUNCTION",
                    "start_line_num": 80,
                    "end_line_num": 94,
                    "code_content": "\n@staticmethod\ndef generate_id(parent_id: str, function_name: str) -> str:\n    \"\"\"\n        Generates an ID for a function based on the given parent ID and function name.\n\n        Args:\n            parent_id (str): The ID of the parent (module or class).\n            function_name (str): The name of the function.\n\n        Returns:\n            str: The generated ID, incorporating the parent ID and function name.\n        \"\"\"\n    return f\"{parent_id}__*__FUNCTION-{function_name}\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                }
            ]
        },
        {
            "class_name": "StandaloneCodeBlockIDGenerationStrategy",
            "decorators": null,
            "bases": [
                "IDGenerationStrategy"
            ],
            "docstring": "ID generation strategy for standalone code blocks.",
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-StandaloneCodeBlockIDGenerationStrategy",
            "parent_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 94,
            "end_line_num": 112,
            "code_content": "\n\nclass StandaloneCodeBlockIDGenerationStrategy(IDGenerationStrategy):\n    \"\"\"ID generation strategy for standalone code blocks.\"\"\"\n\n    @staticmethod\n    def generate_id(parent_id: str, count: int) -> str:\n        \"\"\"\n        Generates an ID for a standalone code block based on the given parent ID and a count.\n\n        Args:\n            parent_id (str): The ID of the parent (typically a module).\n            count (int): A unique count or index for the standalone block within its parent.\n\n        Returns:\n            str: The generated ID, incorporating the parent ID and the count.\n        \"\"\"\n        return f\"{parent_id}__*__STANDALONE_BLOCK-{count}\"\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-IDGenerationStrategy"
                }
            ],
            "summary": null,
            "children": [
                {
                    "function_name": "generate_id",
                    "docstring": "Generates an ID for a standalone code block based on the given parent ID and a count.\n\nArgs:\n    parent_id (str): The ID of the parent (typically a module).\n    count (int): A unique count or index for the standalone block within its parent.\n\nReturns:\n    str: The generated ID, incorporating the parent ID and the count.",
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-StandaloneCodeBlockIDGenerationStrategy__*__FUNCTION-generate_id",
                    "parent_id": ".:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-StandaloneCodeBlockIDGenerationStrategy",
                    "block_type": "FUNCTION",
                    "start_line_num": 98,
                    "end_line_num": 112,
                    "code_content": "\n@staticmethod\ndef generate_id(parent_id: str, count: int) -> str:\n    \"\"\"\n        Generates an ID for a standalone code block based on the given parent ID and a count.\n\n        Args:\n            parent_id (str): The ID of the parent (typically a module).\n            count (int): A unique count or index for the standalone block within its parent.\n\n        Returns:\n            str: The generated ID, incorporating the parent ID and the count.\n        \"\"\"\n    return f\"{parent_id}__*__STANDALONE_BLOCK-{count}\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": null,
                    "children": null
                }
            ]
        }
    ]
}