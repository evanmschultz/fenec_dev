{
    "file_path": "./python_parser/model_builders/standalone_block_model_builder.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Any",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "logging_decorator",
                    "as_name": null,
                    "local_block_id": ".:python_parser:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator"
                }
            ],
            "imported_from": "utilities.logger.decorators",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:utilities:logger:decorators.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BaseModelBuilder",
                    "as_name": null,
                    "local_block_id": ".:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder"
                }
            ],
            "imported_from": "model_builders.base_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:model_builders:base_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                }
            ],
            "imported_from": "models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:models:enums.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "StandaloneCodeBlockSpecificAttributes",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockSpecificAttributes"
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockModel"
                }
            ],
            "imported_from": "models.models",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:models:models.py__*__MODULE"
        }
    ],
    "id": ".:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 58,
    "code_content": "from typing import Any\n\nfrom utilities.logger.decorators import logging_decorator\nfrom model_builders.base_model_builder import BaseModelBuilder\nfrom models.enums import BlockType\nfrom models.models import (\n    StandaloneCodeBlockModel,\n    StandaloneCodeBlockSpecificAttributes,\n)\n\n\nclass StandaloneBlockModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a standalone code block.\n\n    This class extends BaseModelBuilder and specializes in building models of standalone code blocks, which are blocks of code not part of any class or function definitions. It captures details such as variable assignments within the block.\n\n    Attributes:\n        standalone_block_attributes (StandaloneCodeBlockSpecificAttributes): An instance containing attributes specific to a standalone code block, such as variable assignments.\n\n    Args:\n        id (str): The unique identifier for the standalone code block model.\n        parent_id (str): The identifier of the parent model (e.g., module or class containing this standalone block).\n\n    Example:\n        >>> standalone_block_builder = StandaloneBlockModelBuilder(id='block1', parent_id='module1')\n        >>> standalone_block_builder.set_variable_assignments(['x = 1', 'y = 2'])\n        # Configures the builder with variable assignments for the standalone code block.\n    \"\"\"\n\n    def __init__(self, id: str, parent_id: str) -> None:\n        super().__init__(\n            id=id, block_type=BlockType.STANDALONE_CODE_BLOCK, parent_id=parent_id\n        )\n\n        self.standalone_block_attributes = StandaloneCodeBlockSpecificAttributes(\n            variable_assignments=None,\n        )\n\n    def set_variable_assignments(\n        self, variable_declarations: list[str]\n    ) -> \"StandaloneBlockModelBuilder\":\n        \"\"\"Sets the list of variable declarations to the standalone code block model.\"\"\"\n        self.standalone_block_attributes.variable_assignments = variable_declarations\n        return self\n\n    def _get_standalone_block_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Gets the standalone block specific attributes.\"\"\"\n        return self.standalone_block_attributes.model_dump()\n\n    @logging_decorator(message=\"Building standalone code block model\")\n    def build(self) -> StandaloneCodeBlockModel:\n        \"\"\"Creates a StandaloneCodeBlockModel instance after building and setting the children models.\"\"\"\n        return StandaloneCodeBlockModel(\n            **self._get_common_attributes(),\n            **self._get_standalone_block_specific_attributes(),\n        )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\n\\nCODE:\\n```Python\\nfrom typing import Any\\n\\nfrom utilities.logger.decorators import logging_decorator\\nfrom model_builders.base_model_builder import BaseModelBuilder\\nfrom models.enums import BlockType\\nfrom models.models import (\\n    StandaloneCodeBlockModel,\\n    StandaloneCodeBlockSpecificAttributes,\\n)\\n\\n\\nclass StandaloneBlockModelBuilder(BaseModelBuilder):\\n    \"\"\"\\n    A builder class for constructing a model of a standalone code block.\\n\\n    This class extends BaseModelBuilder and specializes in building models of standalone code blocks, which are blocks of code not part of any class or function definitions. It captures details such as variable assignments within the block.\\n\\n    Attributes:\\n        standalone_block_attributes (StandaloneCodeBlockSpecificAttributes): An instance containing attributes specific to a standalone code block, such as variable assignments.\\n\\n    Args:\\n        id (str): The unique identifier for the standalone code block model.\\n        parent_id (str): The identifier of the parent model (e.g., module or class containing this standalone block).\\n\\n    Example:\\n        >>> standalone_block_builder = StandaloneBlockModelBuilder(id=\\'block1\\', parent_id=\\'module1\\')\\n        >>> standalone_block_builder.set_variable_assignments([\\'x = 1\\', \\'y = 2\\'])\\n        # Configures the builder with variable assignments for the standalone code block.\\n    \"\"\"\\n\\n    def __init__(self, id: str, parent_id: str) -> None:\\n        super().__init__(\\n            id=id, block_type=BlockType.STANDALONE_CODE_BLOCK, parent_id=parent_id\\n        )\\n\\n        self.standalone_block_attributes = StandaloneCodeBlockSpecificAttributes(\\n            variable_assignments=None,\\n        )\\n\\n    def set_variable_assignments(\\n        self, variable_declarations: list[str]\\n    ) -> \"StandaloneBlockModelBuilder\":\\n        \"\"\"Sets the list of variable declarations to the standalone code block model.\"\"\"\\n        self.standalone_block_attributes.variable_assignments = variable_declarations\\n        return self\\n\\n    def _get_standalone_block_specific_attributes(self) -> dict[str, Any]:\\n        \"\"\"Gets the standalone block specific attributes.\"\"\"\\n        return self.standalone_block_attributes.model_dump()\\n\\n    @logging_decorator(message=\"Building standalone code block model\")\\n    def build(self) -> StandaloneCodeBlockModel:\\n        \"\"\"Creates a StandaloneCodeBlockModel instance after building and setting the children models.\"\"\"\\n        return StandaloneCodeBlockModel(\\n            **self._get_common_attributes(),\\n            **self._get_standalone_block_specific_attributes(),\\n        )\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\n\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\n\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\npartitioning logic.\"\\\\n\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\n\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\'s content.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\n\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES` and `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the children in the `CODE` and code blocks\\\\nthe `CODE` depends upon. Use these summaries to help you write your summary of the `CODE`.\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass StandaloneBlockModelBuilder(BaseModelBuilder):\\\\n    \"\"\"\\\\n    A builder class for constructing a model of a standalone code block.\\\\n\\\\n    This class extends BaseModelBuilder and specializes in building models of standalone code blocks, which are blocks of code not part of any class or function definitions. It captures details such as variable assignments within the block.\\\\n\\\\n    Attributes:\\\\n        standalone_block_attributes (StandaloneCodeBlockSpecificAttributes): An instance containing attributes specific to a standalone code block, such as variable assignments.\\\\n\\\\n    Args:\\\\n        id (str): The unique identifier for the standalone code block model.\\\\n        parent_id (str): The identifier of the parent model (e.g., module or class containing this standalone block).\\\\n\\\\n    Example:\\\\n        >>> standalone_block_builder = StandaloneBlockModelBuilder(id=\\\\\\'block1\\\\\\', parent_id=\\\\\\'module1\\\\\\')\\\\n        >>> standalone_block_builder.set_variable_assignments([\\\\\\'x = 1\\\\\\', \\\\\\'y = 2\\\\\\'])\\\\n        # Configures the builder with variable assignments for the standalone code block.\\\\n    \"\"\"\\\\n\\\\n    def __init__(self, id: str, parent_id: str) -> None:\\\\n        super().__init__(\\\\n            id=id, block_type=BlockType.STANDALONE_CODE_BLOCK, parent_id=parent_id\\\\n        )\\\\n\\\\n        self.standalone_block_attributes = StandaloneCodeBlockSpecificAttributes(\\\\n            variable_assignments=None,\\\\n        )\\\\n\\\\n    def set_variable_assignments(\\\\n        self, variable_declarations: list[str]\\\\n    ) -> \"StandaloneBlockModelBuilder\":\\\\n        \"\"\"Sets the list of variable declarations to the standalone code block model.\"\"\"\\\\n        self.standalone_block_attributes.variable_assignments = variable_declarations\\\\n        return self\\\\n\\\\n    def _get_standalone_block_specific_attributes(self) -> dict[str, Any]:\\\\n        \"\"\"Gets the standalone block specific attributes.\"\"\"\\\\n        return self.standalone_block_attributes.model_dump()\\\\n\\\\n    @logging_decorator(message=\"Building standalone code block model\")\\\\n    def build(self) -> StandaloneCodeBlockModel:\\\\n        \"\"\"Creates a StandaloneCodeBlockModel instance after building and setting the children models.\"\"\"\\\\n        return StandaloneCodeBlockModel(\\\\n            **self._get_common_attributes(),\\\\n            **self._get_standalone_block_specific_attributes(),\\\\n        )\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef __init__(self, id: str, parent_id: str) -> None:\\\\\\\\n    super().__init__(\\\\\\\\n        id=id, block_type=BlockType.STANDALONE_CODE_BLOCK, parent_id=parent_id\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    self.standalone_block_attributes = StandaloneCodeBlockSpecificAttributes(\\\\\\\\n        variable_assignments=None,\\\\\\\\n    )\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef set_variable_assignments(\\\\\\\\n    self, variable_declarations: list[str]\\\\\\\\n) -> \"StandaloneBlockModelBuilder\":\\\\\\\\n    \"\"\"Sets the list of variable declarations to the standalone code block model.\"\"\"\\\\\\\\n    self.standalone_block_attributes.variable_assignments = variable_declarations\\\\\\\\n    return self\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef _get_standalone_block_specific_attributes(self) -> dict[str, Any]:\\\\\\\\n    \"\"\"Gets the standalone block specific attributes.\"\"\"\\\\\\\\n    return self.standalone_block_attributes.model_dump()\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\n@logging_decorator(message=\"Building standalone code block model\")\\\\\\\\ndef build(self) -> StandaloneCodeBlockModel:\\\\\\\\n    \"\"\"Creates a StandaloneCodeBlockModel instance after building and setting the children models.\"\"\"\\\\\\\\n    return StandaloneCodeBlockModel(\\\\\\\\n        **self._get_common_attributes(),\\\\\\\\n        **self._get_standalone_block_specific_attributes(),\\\\\\\\n    )\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\n\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\n\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\npartitioning logic.\"\\\\\\\\n\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\n\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\'s content.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\n\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n\\\\\\\\ndef logging_decorator(\\\\\\\\n    level=logging.DEBUG,\\\\\\\\n    *,\\\\\\\\n    message: str | None = None,\\\\\\\\n    syntax_highlighting: bool = False,\\\\\\\\n) -> Callable:\\\\\\\\n    \"\"\"\\\\\\\\n    A decorator for adding enhanced logging to functions, with optional syntax highlighting.\\\\\\\\n\\\\\\\\n    This decorator logs the call to the decorated function at the specified logging level. If syntax_highlighting is enabled and the first argument of the function is a libcst.CSTNode, the decorator logs the node\\\\\\\\\\\\\\'s content with syntax highlighting.\\\\\\\\n\\\\\\\\n    Args:\\\\\\\\n        level (int): The logging level. Defaults to logging.DEBUG.\\\\\\\\n        message (str | None): Custom log message. If None, a default message is generated.\\\\\\\\n        syntax_highlighting (bool): If True, enables syntax highlighting for libcst.CSTNode arguments.\\\\\\\\n\\\\\\\\n    Returns:\\\\\\\\n        Callable: The decorated function with enhanced logging capability.\\\\\\\\n\\\\\\\\n    Example:\\\\\\\\n        >>> @logging_decorator(level=logging.INFO, message=\"Function start\", syntax_highlighting=True)\\\\\\\\n        >>> def sample_function(arg1):\\\\\\\\n        >>>     pass\\\\\\\\n        # This decorates \\\\\\\\\\\\\\'sample_function\\\\\\\\\\\\\\' with enhanced logging at INFO level.\\\\\\\\n    \"\"\"\\\\\\\\n\\\\\\\\n    def decorator(func):\\\\\\\\n        @wraps(func)\\\\\\\\n        def wrapper(*args, **kwargs):\\\\\\\\n            log_message: str = (\\\\\\\\n                message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\n            )\\\\\\\\n            frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\n            caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\n            code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\n            logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\n\\\\\\\\n            _handle_logging(\\\\\\\\n                logger,\\\\\\\\n                caller_info,\\\\\\\\n                level,\\\\\\\\n                log_message,\\\\\\\\n                syntax_highlighting,\\\\\\\\n                code_content,\\\\\\\\n            )\\\\\\\\n\\\\\\\\n            return func(*args, **kwargs)\\\\\\\\n\\\\\\\\n        return wrapper\\\\\\\\n\\\\\\\\n    return decorator\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n\\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nChain of Density Steps:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\\\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\\\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\\\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\\\\\\\\\npartitioning logic.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\\\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\\\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s content.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nGuidelines:\\\\\\\\\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s functionality.\\\\\\\\\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s main functionality.\\\\\\\\\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n```Python\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef decorator(func):\\\\\\\\\\\\\\\\n    @wraps(func)\\\\\\\\\\\\\\\\n    def wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\n        log_message: str = (\\\\\\\\\\\\\\\\n            message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\n        frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\n        caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\n        code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\n        logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        _handle_logging(\\\\\\\\\\\\\\\\n            logger,\\\\\\\\\\\\\\\\n            caller_info,\\\\\\\\\\\\\\\\n            level,\\\\\\\\\\\\\\\\n            log_message,\\\\\\\\\\\\\\\\n            syntax_highlighting,\\\\\\\\\\\\\\\\n            code_content,\\\\\\\\\\\\\\\\n        )\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        return func(*args, **kwargs)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    return wrapper\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nSummary:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n        [{\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'system\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n@wraps(func)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ndef wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    log_message: str = (\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    _handle_logging(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        logger,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        caller_info,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        level,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        log_message,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        syntax_highlighting,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n        code_content,\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n    return func(*args, **kwargs)\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\', \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'role\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\': \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'user\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'}]\\\\\\\\\\\\\\\\n \\\\\\\\\\\\\\\\n        \\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\n\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\n\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\npartitioning logic.\"\\\\\\\\n\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\n\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\'s content.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\n\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n\\\\\\\\nclass BlockType(Enum):\\\\\\\\n    \"\"\"Enum of code block types.\"\"\"\\\\\\\\n\\\\\\\\n    STANDALONE_CODE_BLOCK = \"STANDALONE_BLOCK\"\\\\\\\\n    IMPORT_BLOCK = \"IMPORT_BLOCK\"\\\\\\\\n    CLASS = \"CLASS\"\\\\\\\\n    FUNCTION = \"FUNCTION\"\\\\\\\\n    MODULE = \"MODULE\"\\\\\\\\n\\\\\\\\n    def __str__(self) -> str:\\\\\\\\n        return self.value\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n\\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\ndef __str__(self) -> str:\\\\\\\\\\\\\\\\n    return self.value\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "class_name": "StandaloneBlockModelBuilder",
            "decorators": null,
            "bases": [
                "BaseModelBuilder"
            ],
            "docstring": "A builder class for constructing a model of a standalone code block.\n\nThis class extends BaseModelBuilder and specializes in building models of standalone code blocks, which are blocks of code not part of any class or function definitions. It captures details such as variable assignments within the block.\n\nAttributes:\n    standalone_block_attributes (StandaloneCodeBlockSpecificAttributes): An instance containing attributes specific to a standalone code block, such as variable assignments.\n\nArgs:\n    id (str): The unique identifier for the standalone code block model.\n    parent_id (str): The identifier of the parent model (e.g., module or class containing this standalone block).\n\nExample:\n    >>> standalone_block_builder = StandaloneBlockModelBuilder(id='block1', parent_id='module1')\n    >>> standalone_block_builder.set_variable_assignments(['x = 1', 'y = 2'])\n    # Configures the builder with variable assignments for the standalone code block.",
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder",
            "parent_id": ".:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 10,
            "end_line_num": 58,
            "code_content": "\n\nclass StandaloneBlockModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a standalone code block.\n\n    This class extends BaseModelBuilder and specializes in building models of standalone code blocks, which are blocks of code not part of any class or function definitions. It captures details such as variable assignments within the block.\n\n    Attributes:\n        standalone_block_attributes (StandaloneCodeBlockSpecificAttributes): An instance containing attributes specific to a standalone code block, such as variable assignments.\n\n    Args:\n        id (str): The unique identifier for the standalone code block model.\n        parent_id (str): The identifier of the parent model (e.g., module or class containing this standalone block).\n\n    Example:\n        >>> standalone_block_builder = StandaloneBlockModelBuilder(id='block1', parent_id='module1')\n        >>> standalone_block_builder.set_variable_assignments(['x = 1', 'y = 2'])\n        # Configures the builder with variable assignments for the standalone code block.\n    \"\"\"\n\n    def __init__(self, id: str, parent_id: str) -> None:\n        super().__init__(\n            id=id, block_type=BlockType.STANDALONE_CODE_BLOCK, parent_id=parent_id\n        )\n\n        self.standalone_block_attributes = StandaloneCodeBlockSpecificAttributes(\n            variable_assignments=None,\n        )\n\n    def set_variable_assignments(\n        self, variable_declarations: list[str]\n    ) -> \"StandaloneBlockModelBuilder\":\n        \"\"\"Sets the list of variable declarations to the standalone code block model.\"\"\"\n        self.standalone_block_attributes.variable_assignments = variable_declarations\n        return self\n\n    def _get_standalone_block_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Gets the standalone block specific attributes.\"\"\"\n        return self.standalone_block_attributes.model_dump()\n\n    @logging_decorator(message=\"Building standalone code block model\")\n    def build(self) -> StandaloneCodeBlockModel:\n        \"\"\"Creates a StandaloneCodeBlockModel instance after building and setting the children models.\"\"\"\n        return StandaloneCodeBlockModel(\n            **self._get_common_attributes(),\n            **self._get_standalone_block_specific_attributes(),\n        )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "StandaloneCodeBlockModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "StandaloneCodeBlockSpecificAttributes",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "StandaloneCodeBlockModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "StandaloneCodeBlockSpecificAttributes",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Any",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "logging_decorator",
                            "as_name": null,
                            "local_block_id": ".:python_parser:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator"
                        }
                    ],
                    "imported_from": "utilities.logger.decorators",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:utilities:logger:decorators.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "BaseModelBuilder",
                            "as_name": null,
                            "local_block_id": ".:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder"
                        }
                    ],
                    "imported_from": "model_builders.base_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:model_builders:base_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "BlockType",
                            "as_name": null,
                            "local_block_id": ".:python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                        }
                    ],
                    "imported_from": "models.enums",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:models:enums.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `CHILDREN_SUMMARIES` and `LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES`, from the children in the `CODE` and code blocks\\nthe `CODE` depends upon. Use these summaries to help you write your summary of the `CODE`.\\n\\nCODE:\\n```Python\\n\\n\\nclass StandaloneBlockModelBuilder(BaseModelBuilder):\\n    \"\"\"\\n    A builder class for constructing a model of a standalone code block.\\n\\n    This class extends BaseModelBuilder and specializes in building models of standalone code blocks, which are blocks of code not part of any class or function definitions. It captures details such as variable assignments within the block.\\n\\n    Attributes:\\n        standalone_block_attributes (StandaloneCodeBlockSpecificAttributes): An instance containing attributes specific to a standalone code block, such as variable assignments.\\n\\n    Args:\\n        id (str): The unique identifier for the standalone code block model.\\n        parent_id (str): The identifier of the parent model (e.g., module or class containing this standalone block).\\n\\n    Example:\\n        >>> standalone_block_builder = StandaloneBlockModelBuilder(id=\\'block1\\', parent_id=\\'module1\\')\\n        >>> standalone_block_builder.set_variable_assignments([\\'x = 1\\', \\'y = 2\\'])\\n        # Configures the builder with variable assignments for the standalone code block.\\n    \"\"\"\\n\\n    def __init__(self, id: str, parent_id: str) -> None:\\n        super().__init__(\\n            id=id, block_type=BlockType.STANDALONE_CODE_BLOCK, parent_id=parent_id\\n        )\\n\\n        self.standalone_block_attributes = StandaloneCodeBlockSpecificAttributes(\\n            variable_assignments=None,\\n        )\\n\\n    def set_variable_assignments(\\n        self, variable_declarations: list[str]\\n    ) -> \"StandaloneBlockModelBuilder\":\\n        \"\"\"Sets the list of variable declarations to the standalone code block model.\"\"\"\\n        self.standalone_block_attributes.variable_assignments = variable_declarations\\n        return self\\n\\n    def _get_standalone_block_specific_attributes(self) -> dict[str, Any]:\\n        \"\"\"Gets the standalone block specific attributes.\"\"\"\\n        return self.standalone_block_attributes.model_dump()\\n\\n    @logging_decorator(message=\"Building standalone code block model\")\\n    def build(self) -> StandaloneCodeBlockModel:\\n        \"\"\"Creates a StandaloneCodeBlockModel instance after building and setting the children models.\"\"\"\\n        return StandaloneCodeBlockModel(\\n            **self._get_common_attributes(),\\n            **self._get_standalone_block_specific_attributes(),\\n        )\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef __init__(self, id: str, parent_id: str) -> None:\\\\n    super().__init__(\\\\n        id=id, block_type=BlockType.STANDALONE_CODE_BLOCK, parent_id=parent_id\\\\n    )\\\\n\\\\n    self.standalone_block_attributes = StandaloneCodeBlockSpecificAttributes(\\\\n        variable_assignments=None,\\\\n    )\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef set_variable_assignments(\\\\n    self, variable_declarations: list[str]\\\\n) -> \"StandaloneBlockModelBuilder\":\\\\n    \"\"\"Sets the list of variable declarations to the standalone code block model.\"\"\"\\\\n    self.standalone_block_attributes.variable_assignments = variable_declarations\\\\n    return self\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef _get_standalone_block_specific_attributes(self) -> dict[str, Any]:\\\\n    \"\"\"Gets the standalone block specific attributes.\"\"\"\\\\n    return self.standalone_block_attributes.model_dump()\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\n@logging_decorator(message=\"Building standalone code block model\")\\\\ndef build(self) -> StandaloneCodeBlockModel:\\\\n    \"\"\"Creates a StandaloneCodeBlockModel instance after building and setting the children models.\"\"\"\\\\n    return StandaloneCodeBlockModel(\\\\n        **self._get_common_attributes(),\\\\n        **self._get_standalone_block_specific_attributes(),\\\\n    )\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nLOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\n\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\n\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\npartitioning logic.\"\\\\n\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\n\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\'s content.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\n\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef logging_decorator(\\\\n    level=logging.DEBUG,\\\\n    *,\\\\n    message: str | None = None,\\\\n    syntax_highlighting: bool = False,\\\\n) -> Callable:\\\\n    \"\"\"\\\\n    A decorator for adding enhanced logging to functions, with optional syntax highlighting.\\\\n\\\\n    This decorator logs the call to the decorated function at the specified logging level. If syntax_highlighting is enabled and the first argument of the function is a libcst.CSTNode, the decorator logs the node\\\\\\'s content with syntax highlighting.\\\\n\\\\n    Args:\\\\n        level (int): The logging level. Defaults to logging.DEBUG.\\\\n        message (str | None): Custom log message. If None, a default message is generated.\\\\n        syntax_highlighting (bool): If True, enables syntax highlighting for libcst.CSTNode arguments.\\\\n\\\\n    Returns:\\\\n        Callable: The decorated function with enhanced logging capability.\\\\n\\\\n    Example:\\\\n        >>> @logging_decorator(level=logging.INFO, message=\"Function start\", syntax_highlighting=True)\\\\n        >>> def sample_function(arg1):\\\\n        >>>     pass\\\\n        # This decorates \\\\\\'sample_function\\\\\\' with enhanced logging at INFO level.\\\\n    \"\"\"\\\\n\\\\n    def decorator(func):\\\\n        @wraps(func)\\\\n        def wrapper(*args, **kwargs):\\\\n            log_message: str = (\\\\n                message if message else (f\"Calling function: {func.__name__}\")\\\\n            )\\\\n            frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\n            caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\n            code_content: str = _gather_code_content(syntax_highlighting, args)\\\\n            logger: Logger = _get_logger(caller_info.caller_module_name)\\\\n\\\\n            _handle_logging(\\\\n                logger,\\\\n                caller_info,\\\\n                level,\\\\n                log_message,\\\\n                syntax_highlighting,\\\\n                code_content,\\\\n            )\\\\n\\\\n            return func(*args, **kwargs)\\\\n\\\\n        return wrapper\\\\n\\\\n    return decorator\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\\\\\n\\\\\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\\\\\n\\\\\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\\\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\\\\\npartitioning logic.\"\\\\\\\\n\\\\\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\\\\\n\\\\\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\\\\\\\\\'s content.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\\\\\n\\\\\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef decorator(func):\\\\\\\\n    @wraps(func)\\\\\\\\n    def wrapper(*args, **kwargs):\\\\\\\\n        log_message: str = (\\\\\\\\n            message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\n        )\\\\\\\\n        frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\n        caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\n        code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\n        logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\n\\\\\\\\n        _handle_logging(\\\\\\\\n            logger,\\\\\\\\n            caller_info,\\\\\\\\n            level,\\\\\\\\n            log_message,\\\\\\\\n            syntax_highlighting,\\\\\\\\n            code_content,\\\\\\\\n        )\\\\\\\\n\\\\\\\\n        return func(*args, **kwargs)\\\\\\\\n\\\\\\\\n    return wrapper\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n\\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'None\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n@wraps(func)\\\\\\\\\\\\\\\\ndef wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\n    log_message: str = (\\\\\\\\\\\\\\\\n        message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\n    frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\n    caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\n    code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\n    logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    _handle_logging(\\\\\\\\\\\\\\\\n        logger,\\\\\\\\\\\\\\\\n        caller_info,\\\\\\\\\\\\\\\\n        level,\\\\\\\\\\\\\\\\n        log_message,\\\\\\\\\\\\\\\\n        syntax_highlighting,\\\\\\\\\\\\\\\\n        code_content,\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    return func(*args, **kwargs)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\n\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\n\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\npartitioning logic.\"\\\\n\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\n\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\'s content.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\n\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass BlockType(Enum):\\\\n    \"\"\"Enum of code block types.\"\"\"\\\\n\\\\n    STANDALONE_CODE_BLOCK = \"STANDALONE_BLOCK\"\\\\n    IMPORT_BLOCK = \"IMPORT_BLOCK\"\\\\n    CLASS = \"CLASS\"\\\\n    FUNCTION = \"FUNCTION\"\\\\n    MODULE = \"MODULE\"\\\\n\\\\n    def __str__(self) -> str:\\\\n        return self.value\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef __str__(self) -> str:\\\\\\\\n    return self.value\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder__*__FUNCTION-__init__",
                    "parent_id": ".:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 30,
                    "end_line_num": 39,
                    "code_content": "\ndef __init__(self, id: str, parent_id: str) -> None:\n    super().__init__(\n        id=id, block_type=BlockType.STANDALONE_CODE_BLOCK, parent_id=parent_id\n    )\n\n    self.standalone_block_attributes = StandaloneCodeBlockSpecificAttributes(\n        variable_assignments=None,\n    )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef __init__(self, id: str, parent_id: str) -> None:\\n    super().__init__(\\n        id=id, block_type=BlockType.STANDALONE_CODE_BLOCK, parent_id=parent_id\\n    )\\n\\n    self.standalone_block_attributes = StandaloneCodeBlockSpecificAttributes(\\n        variable_assignments=None,\\n    )\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "set_variable_assignments",
                    "docstring": "Sets the list of variable declarations to the standalone code block model.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "No return annotation",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder__*__FUNCTION-set_variable_assignments",
                    "parent_id": ".:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 39,
                    "end_line_num": 46,
                    "code_content": "\ndef set_variable_assignments(\n    self, variable_declarations: list[str]\n) -> \"StandaloneBlockModelBuilder\":\n    \"\"\"Sets the list of variable declarations to the standalone code block model.\"\"\"\n    self.standalone_block_attributes.variable_assignments = variable_declarations\n    return self\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef set_variable_assignments(\\n    self, variable_declarations: list[str]\\n) -> \"StandaloneBlockModelBuilder\":\\n    \"\"\"Sets the list of variable declarations to the standalone code block model.\"\"\"\\n    self.standalone_block_attributes.variable_assignments = variable_declarations\\n    return self\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_get_standalone_block_specific_attributes",
                    "docstring": "Gets the standalone block specific attributes.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "dict[str, Any]",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder__*__FUNCTION-_get_standalone_block_specific_attributes",
                    "parent_id": ".:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 46,
                    "end_line_num": 50,
                    "code_content": "\ndef _get_standalone_block_specific_attributes(self) -> dict[str, Any]:\n    \"\"\"Gets the standalone block specific attributes.\"\"\"\n    return self.standalone_block_attributes.model_dump()\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef _get_standalone_block_specific_attributes(self) -> dict[str, Any]:\\n    \"\"\"Gets the standalone block specific attributes.\"\"\"\\n    return self.standalone_block_attributes.model_dump()\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "build",
                    "docstring": "Creates a StandaloneCodeBlockModel instance after building and setting the children models.",
                    "decorators": [
                        {
                            "content": "@logging_decorator(message=\"Building standalone code block model\")",
                            "decorator_name": "logging_decorator",
                            "decorator_args": [
                                "message=\"Building standalone code block model\""
                            ]
                        }
                    ],
                    "parameters": null,
                    "returns": "StandaloneCodeBlockModel",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder__*__FUNCTION-build",
                    "parent_id": ".:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 50,
                    "end_line_num": 58,
                    "code_content": "\n@logging_decorator(message=\"Building standalone code block model\")\ndef build(self) -> StandaloneCodeBlockModel:\n    \"\"\"Creates a StandaloneCodeBlockModel instance after building and setting the children models.\"\"\"\n    return StandaloneCodeBlockModel(\n        **self._get_common_attributes(),\n        **self._get_standalone_block_specific_attributes(),\n    )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\n@logging_decorator(message=\"Building standalone code block model\")\\ndef build(self) -> StandaloneCodeBlockModel:\\n    \"\"\"Creates a StandaloneCodeBlockModel instance after building and setting the children models.\"\"\"\\n    return StandaloneCodeBlockModel(\\n        **self._get_common_attributes(),\\n        **self._get_standalone_block_specific_attributes(),\\n    )\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        }
    ]
}