{
    "file_path": "./python_parser/ai_services/summarizer.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Literal",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Protocol",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "BaseModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "pydantic",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "OpenAI",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChatCompletionSystemMessageParam",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.chat.chat_completion_system_message_param",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChatCompletionUserMessageParam",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.chat.chat_completion_user_message_param",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChatCompletionMessageParam",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.chat.chat_completion_message_param",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "code_example",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "ai_services.temp",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:ai_services:temp.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "COD_SUMMARIZATION_PROMPT",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "summary_prompt_list",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "ai_services.prompts.summarization_prompts",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:ai_services:prompts:summarization_prompts.py__*__MODULE"
        }
    ],
    "id": ".:python_parser:ai_services:summarizer.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 437,
    "code_content": "from typing import Literal, Protocol\n\nfrom pydantic import BaseModel\n\nfrom openai import OpenAI\nfrom openai.types.chat.chat_completion_system_message_param import (\n    ChatCompletionSystemMessageParam,\n)\nfrom openai.types.chat.chat_completion_user_message_param import (\n    ChatCompletionUserMessageParam,\n)\nfrom openai.types.chat.chat_completion_message_param import ChatCompletionMessageParam\n\nfrom ai_services.temp import code_example\nfrom ai_services.prompts.summarization_prompts import (\n    SUMMARIZER_DEFAULT_INSTRUCTIONS,\n    COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES,\n    COD_SUMMARIZATION_PROMPT_WITH_CHILDREN,\n    COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES,\n    COD_SUMMARIZATION_PROMPT,\n    summary_prompt_list,\n)\n\n\nclass SummaryCompletionConfigs(BaseModel):\n    \"\"\"\n    Configs for the summarization completion.\n\n    Used to set the chat completion parameters for the OpenAI chat completions method call.\n\n    Args:\n        - system_message (str): The system message used for chat completion.\n        - prompt_template (str): The prompt template used for chat completion. This should contain \"{code}\" to\n            insert the code at that point; otherwise, the code snippet will be appended below the prompt.\n        - model (str): The model to use for the completion. Default is \"gpt-4-1106-preview\".\n        - max_tokens (int | None): The maximum number of tokens to generate. 'None' implies no limit. Default is None.\n        - presence_penalty (float | None): Penalty for new tokens based on their presence in the text so far.\n            Default is None.\n        - stream (bool): Whether to stream back partial progress. Default is False.\n        - temperature (float): Sampling temperature to use. Default is 0.0.\n\n    Notes:\n        - prompt_template should contain \"{code}\", if not, the code snippet will be appended below the prompt.\n        - model must be a valid OpenAI model name.\n\n    Examples:\n        >>> system_message = \"Summarize the following code.\"\n        >>> prompt_template = '''Summarize the following code.\n        ... CODE:\n        ... ```Python\n        ... {code}\n        ... ```\n        ... '''\n        >>> summary_completion_configs = SummaryCompletionConfigs(\n        ...     system_message=system_message,\n        ...     prompt_template=prompt_template,\n        ...     model=\"gpt-4-1106-preview\",\n        ...     max_tokens=100,\n        ...     presence_penalty=0.0,\n        ...     stream=False,\n        ...     temperature=0.0,\n        ... )\n    \"\"\"\n\n    system_message: str = SUMMARIZER_DEFAULT_INSTRUCTIONS\n    model: Literal[\n        \"gpt-4-1106-preview\",\n        \"gpt-4-vision-preview\",\n        \"gpt-4\",\n        \"gpt-4-0314\",\n        \"gpt-4-0613\",\n        \"gpt-4-32k\",\n        \"gpt-4-32k-0314\",\n        \"gpt-4-32k-0613\",\n        \"gpt-3.5-turbo-1106\",\n        \"gpt-3.5-turbo\",\n        \"gpt-3.5-turbo-16k\",\n        \"gpt-3.5-turbo-0301\",\n        \"gpt-3.5-turbo-0613\",\n        \"gpt-3.5-turbo-16k-0613\",\n    ] = \"gpt-4-1106-preview\"\n    max_tokens: int | None = None\n    stream: bool = False\n    temperature: float = 0.0\n\n\nclass Summarizer(Protocol):\n    def summarize_code(\n        self,\n        code: str,\n        *,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n    ) -> str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n        ...\n\n    def test_summarize_code(\n        self,\n        code: str,\n        *,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n    ) -> str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize (pass in dummy string).\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n        ...\n\n\nclass OpenAISummarizer:\n    \"\"\"\n    A class for summarizing code snippets using the OpenAI API.\n\n    Args:\n        - client (OpenAI): The OpenAI client used for making API requests.\n        - summary_prompt_list (list[str], optional): A list of summary prompts to be used. Defaults to an empty list.\n\n    Attributes:\n        - client (OpenAI): The OpenAI client used for making API requests.\n        - prompt_list (list[str]): A list of summary prompts.\n        - default_prompt (str): The default summary prompt.\n\n    Methods:\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\n            Summarizes the provided code snippet using the OpenAI API.\n\n    Examples:\n        >>> client = OpenAI()\n        >>> summarizer = Summarizer(client=client)\n        >>> code_example = \"print('Hello, world')\"\n        >>> summary = summarizer.summarize_code(code_example)\n        >>> print(summary)\n    \"\"\"\n\n    def __init__(\n        self, client: OpenAI, *, summary_prompt_list: list[str] = summary_prompt_list\n    ) -> None:\n        self.client: OpenAI = client\n        self.prompt_list: list[str] = summary_prompt_list\n        self.default_prompt: str = self.prompt_list[0]\n\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\n        \"\"\"Creates a system message for chat completion using OpenAi's ChatCompletionSystemMessageParam class.\"\"\"\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\n\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\n        \"\"\"Creates a user message for chat completion using OpenAi's ChatCompletionUserMessageParam class.\"\"\"\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\n\n    def _create_messages_list(\n        self,\n        system_message: str,\n        user_message: str,\n    ) -> list[ChatCompletionMessageParam]:\n        \"\"\"\n        Creates a list of messages for chat completion, including both system and user messages.\n\n        Args:\n            system_message (str): The system message content.\n            user_message (str): The user message content.\n\n        Returns:\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI's\n                ChatCompletionMessageParam classes.\n        \"\"\"\n\n        return [\n            self._create_system_message(system_message),\n            self._create_user_message(user_message),\n        ]\n\n    def _interpolate_prompt(\n        self,\n        code: str,\n        *,\n        children_summaries: str = \"\",\n        dependency_summaries: str = \"\",\n        prompt_template: str | None = None,\n    ) -> str:\n        \"\"\"\n        Returns the prompt_template for the code snippet.\n\n        Args:\n            code (str): The code snippet.\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\n\n        Returns:\n            str: The formatted prompt.\n\n        Notes:\n            - If prompt_template is not provided, the default prompt will be used.\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\n        \"\"\"\n\n        if children_summaries and dependency_summaries:\n            if not prompt_template:\n                prompt_template = (\n                    COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES\n                )\n            if (\n                \"{code}\" in prompt_template\n                and \"{children_summaries}\" in prompt_template\n                and \"{dependency_summaries}\" in prompt_template\n            ):\n                return prompt_template.format(\n                    code=code,\n                    children_summaries=children_summaries,\n                    dependency_summaries=dependency_summaries,\n                )\n            else:\n                return f\"\"\"\n                    {prompt_template}\\n\\nCODE:\\n{code}\\n\\nCHILDREN_SUMMARIES:\\n{children_summaries}\\n\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\n{dependency_summaries}\n                    \"\"\"\n\n        elif children_summaries:\n            if not prompt_template:\n                prompt_template = COD_SUMMARIZATION_PROMPT_WITH_CHILDREN\n            if (\n                \"{code}\" in prompt_template\n                and \"{children_summaries}\" in prompt_template\n            ):\n                return prompt_template.format(\n                    code=code, children_summaries=children_summaries\n                )\n            else:\n                return f\"{prompt_template}\\n\\nCODE:\\n{code}\\n\\nCHILDREN_SUMMARIES:\\n{children_summaries}\"\n\n        elif dependency_summaries:\n            if not prompt_template:\n                prompt_template = COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES\n            if (\n                \"{code}\" in prompt_template\n                and \"{dependency_summaries}\" in prompt_template\n            ):\n                return prompt_template.format(\n                    code=code, dependency_summaries=dependency_summaries\n                )\n            else:\n                return f\"\"\"\n                    {prompt_template}\\n\\nCODE:\\n{code}\\n\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\n{dependency_summaries}\n                    \"\"\"\n\n        else:\n            if prompt_template and \"{code}\" in prompt_template:\n                return prompt_template.format(code=code)\n            else:\n                return f\"{prompt_template}\\n\\nCODE:\\n{code}\"\n\n    def _create_prompt(\n        self,\n        code: str,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n    ) -> str:\n        if children_summaries and dependency_summaries:\n            prompt: str = self._interpolate_prompt(\n                code,\n                children_summaries=children_summaries,\n                dependency_summaries=dependency_summaries,\n            )\n        elif children_summaries:\n            prompt: str = self._interpolate_prompt(\n                code,\n                children_summaries=children_summaries,\n            )\n        elif dependency_summaries:\n            prompt: str = self._interpolate_prompt(\n                code,\n                dependency_summaries=dependency_summaries,\n            )\n        else:\n            prompt: str = self._interpolate_prompt(code)\n\n        return prompt\n\n    def _get_summary(\n        self,\n        messages: list[ChatCompletionMessageParam],\n        *,\n        configs: SummaryCompletionConfigs,\n    ) -> str | None:\n        \"\"\"\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\n        Args:\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\n        Returns:\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\n        \"\"\"\n\n        response = self.client.chat.completions.create(\n            messages=messages,\n            model=configs.model,\n            max_tokens=configs.max_tokens,\n            stream=configs.stream,\n            temperature=configs.temperature,\n        )\n        return response.choices[0].message.content  # type: ignore # FIXME: Fix type error\n\n    def summarize_code(\n        self,\n        code: str,\n        *,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n    ) -> str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n        print(\"Summarizing code...\")\n        prompt: str = self._create_prompt(\n            code, children_summaries, dependency_summaries\n        )\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n            system_message=configs.system_message, user_message=prompt\n        )\n\n        final_summary: str | None = None\n        if summary := self._get_summary(messages, configs=configs):\n            print(\"Full Summary:\\n\", summary)\n            final_summary = summary.split(\"FINAL_SUMMARY:\")[-1]\n            print(\"Final Summary:\\n\", final_summary)\n\n        return final_summary if final_summary else \"Summary not found.\"\n\n    def test_summarize_code(\n        self,\n        code: str,\n        *,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n    ) -> str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n        print(\"Summarizing code...\")\n        prompt: str = self._create_prompt(\n            code, children_summaries, dependency_summaries\n        )\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n            system_message=configs.system_message, user_message=prompt\n        )\n\n        summary: str = f\"\"\"Summary:\\n\n        {messages}\\n \n        \"\"\"\n        print(\"Full Summary:\\n\", summary)\n\n        return summary\n\n\nif __name__ == \"__main__\":\n    client = OpenAI()\n    summarizer = OpenAISummarizer(client=client)\n    children_summaries = \"\"\n    dependency_summaries = \"\"\n    summary = summarizer.summarize_code(\n        code_example,\n        children_summaries=children_summaries,\n        dependency_summaries=dependency_summaries,\n    )\n    print(summary)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\n\\nCODE:\\n```Python\\nfrom typing import Literal, Protocol\\n\\nfrom pydantic import BaseModel\\n\\nfrom openai import OpenAI\\nfrom openai.types.chat.chat_completion_system_message_param import (\\n    ChatCompletionSystemMessageParam,\\n)\\nfrom openai.types.chat.chat_completion_user_message_param import (\\n    ChatCompletionUserMessageParam,\\n)\\nfrom openai.types.chat.chat_completion_message_param import ChatCompletionMessageParam\\n\\nfrom ai_services.temp import code_example\\nfrom ai_services.prompts.summarization_prompts import (\\n    SUMMARIZER_DEFAULT_INSTRUCTIONS,\\n    COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES,\\n    COD_SUMMARIZATION_PROMPT_WITH_CHILDREN,\\n    COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES,\\n    COD_SUMMARIZATION_PROMPT,\\n    summary_prompt_list,\\n)\\n\\n\\nclass SummaryCompletionConfigs(BaseModel):\\n    \"\"\"\\n    Configs for the summarization completion.\\n\\n    Used to set the chat completion parameters for the OpenAI chat completions method call.\\n\\n    Args:\\n        - system_message (str): The system message used for chat completion.\\n        - prompt_template (str): The prompt template used for chat completion. This should contain \"{code}\" to\\n            insert the code at that point; otherwise, the code snippet will be appended below the prompt.\\n        - model (str): The model to use for the completion. Default is \"gpt-4-1106-preview\".\\n        - max_tokens (int | None): The maximum number of tokens to generate. \\'None\\' implies no limit. Default is None.\\n        - presence_penalty (float | None): Penalty for new tokens based on their presence in the text so far.\\n            Default is None.\\n        - stream (bool): Whether to stream back partial progress. Default is False.\\n        - temperature (float): Sampling temperature to use. Default is 0.0.\\n\\n    Notes:\\n        - prompt_template should contain \"{code}\", if not, the code snippet will be appended below the prompt.\\n        - model must be a valid OpenAI model name.\\n\\n    Examples:\\n        >>> system_message = \"Summarize the following code.\"\\n        >>> prompt_template = \\'\\'\\'Summarize the following code.\\n        ... CODE:\\n        ... ```Python\\n        ... {code}\\n        ... ```\\n        ... \\'\\'\\'\\n        >>> summary_completion_configs = SummaryCompletionConfigs(\\n        ...     system_message=system_message,\\n        ...     prompt_template=prompt_template,\\n        ...     model=\"gpt-4-1106-preview\",\\n        ...     max_tokens=100,\\n        ...     presence_penalty=0.0,\\n        ...     stream=False,\\n        ...     temperature=0.0,\\n        ... )\\n    \"\"\"\\n\\n    system_message: str = SUMMARIZER_DEFAULT_INSTRUCTIONS\\n    model: Literal[\\n        \"gpt-4-1106-preview\",\\n        \"gpt-4-vision-preview\",\\n        \"gpt-4\",\\n        \"gpt-4-0314\",\\n        \"gpt-4-0613\",\\n        \"gpt-4-32k\",\\n        \"gpt-4-32k-0314\",\\n        \"gpt-4-32k-0613\",\\n        \"gpt-3.5-turbo-1106\",\\n        \"gpt-3.5-turbo\",\\n        \"gpt-3.5-turbo-16k\",\\n        \"gpt-3.5-turbo-0301\",\\n        \"gpt-3.5-turbo-0613\",\\n        \"gpt-3.5-turbo-16k-0613\",\\n    ] = \"gpt-4-1106-preview\"\\n    max_tokens: int | None = None\\n    stream: bool = False\\n    temperature: float = 0.0\\n\\n\\nclass Summarizer(Protocol):\\n    def summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n    ) -> str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n        ...\\n\\n    def test_summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n    ) -> str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize (pass in dummy string).\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n        ...\\n\\n\\nclass OpenAISummarizer:\\n    \"\"\"\\n    A class for summarizing code snippets using the OpenAI API.\\n\\n    Args:\\n        - client (OpenAI): The OpenAI client used for making API requests.\\n        - summary_prompt_list (list[str], optional): A list of summary prompts to be used. Defaults to an empty list.\\n\\n    Attributes:\\n        - client (OpenAI): The OpenAI client used for making API requests.\\n        - prompt_list (list[str]): A list of summary prompts.\\n        - default_prompt (str): The default summary prompt.\\n\\n    Methods:\\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\\n            Summarizes the provided code snippet using the OpenAI API.\\n\\n    Examples:\\n        >>> client = OpenAI()\\n        >>> summarizer = Summarizer(client=client)\\n        >>> code_example = \"print(\\'Hello, world\\')\"\\n        >>> summary = summarizer.summarize_code(code_example)\\n        >>> print(summary)\\n    \"\"\"\\n\\n    def __init__(\\n        self, client: OpenAI, *, summary_prompt_list: list[str] = summary_prompt_list\\n    ) -> None:\\n        self.client: OpenAI = client\\n        self.prompt_list: list[str] = summary_prompt_list\\n        self.default_prompt: str = self.prompt_list[0]\\n\\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\n        \"\"\"Creates a system message for chat completion using OpenAi\\'s ChatCompletionSystemMessageParam class.\"\"\"\\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\n\\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\n        \"\"\"Creates a user message for chat completion using OpenAi\\'s ChatCompletionUserMessageParam class.\"\"\"\\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\\n\\n    def _create_messages_list(\\n        self,\\n        system_message: str,\\n        user_message: str,\\n    ) -> list[ChatCompletionMessageParam]:\\n        \"\"\"\\n        Creates a list of messages for chat completion, including both system and user messages.\\n\\n        Args:\\n            system_message (str): The system message content.\\n            user_message (str): The user message content.\\n\\n        Returns:\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\'s\\n                ChatCompletionMessageParam classes.\\n        \"\"\"\\n\\n        return [\\n            self._create_system_message(system_message),\\n            self._create_user_message(user_message),\\n        ]\\n\\n    def _interpolate_prompt(\\n        self,\\n        code: str,\\n        *,\\n        children_summaries: str = \"\",\\n        dependency_summaries: str = \"\",\\n        prompt_template: str | None = None,\\n    ) -> str:\\n        \"\"\"\\n        Returns the prompt_template for the code snippet.\\n\\n        Args:\\n            code (str): The code snippet.\\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\\n\\n        Returns:\\n            str: The formatted prompt.\\n\\n        Notes:\\n            - If prompt_template is not provided, the default prompt will be used.\\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\\n        \"\"\"\\n\\n        if children_summaries and dependency_summaries:\\n            if not prompt_template:\\n                prompt_template = (\\n                    COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES\\n                )\\n            if (\\n                \"{code}\" in prompt_template\\n                and \"{children_summaries}\" in prompt_template\\n                and \"{dependency_summaries}\" in prompt_template\\n            ):\\n                return prompt_template.format(\\n                    code=code,\\n                    children_summaries=children_summaries,\\n                    dependency_summaries=dependency_summaries,\\n                )\\n            else:\\n                return f\"\"\"\\n                    {prompt_template}\\\\n\\\\nCODE:\\\\n{code}\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n{children_summaries}\\\\n\\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\n{dependency_summaries}\\n                    \"\"\"\\n\\n        elif children_summaries:\\n            if not prompt_template:\\n                prompt_template = COD_SUMMARIZATION_PROMPT_WITH_CHILDREN\\n            if (\\n                \"{code}\" in prompt_template\\n                and \"{children_summaries}\" in prompt_template\\n            ):\\n                return prompt_template.format(\\n                    code=code, children_summaries=children_summaries\\n                )\\n            else:\\n                return f\"{prompt_template}\\\\n\\\\nCODE:\\\\n{code}\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n{children_summaries}\"\\n\\n        elif dependency_summaries:\\n            if not prompt_template:\\n                prompt_template = COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES\\n            if (\\n                \"{code}\" in prompt_template\\n                and \"{dependency_summaries}\" in prompt_template\\n            ):\\n                return prompt_template.format(\\n                    code=code, dependency_summaries=dependency_summaries\\n                )\\n            else:\\n                return f\"\"\"\\n                    {prompt_template}\\\\n\\\\nCODE:\\\\n{code}\\\\n\\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\n{dependency_summaries}\\n                    \"\"\"\\n\\n        else:\\n            if prompt_template and \"{code}\" in prompt_template:\\n                return prompt_template.format(code=code)\\n            else:\\n                return f\"{prompt_template}\\\\n\\\\nCODE:\\\\n{code}\"\\n\\n    def _create_prompt(\\n        self,\\n        code: str,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n    ) -> str:\\n        if children_summaries and dependency_summaries:\\n            prompt: str = self._interpolate_prompt(\\n                code,\\n                children_summaries=children_summaries,\\n                dependency_summaries=dependency_summaries,\\n            )\\n        elif children_summaries:\\n            prompt: str = self._interpolate_prompt(\\n                code,\\n                children_summaries=children_summaries,\\n            )\\n        elif dependency_summaries:\\n            prompt: str = self._interpolate_prompt(\\n                code,\\n                dependency_summaries=dependency_summaries,\\n            )\\n        else:\\n            prompt: str = self._interpolate_prompt(code)\\n\\n        return prompt\\n\\n    def _get_summary(\\n        self,\\n        messages: list[ChatCompletionMessageParam],\\n        *,\\n        configs: SummaryCompletionConfigs,\\n    ) -> str | None:\\n        \"\"\"\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\n\\n        Args:\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\n\\n        Returns:\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\n        \"\"\"\\n\\n        response = self.client.chat.completions.create(\\n            messages=messages,\\n            model=configs.model,\\n            max_tokens=configs.max_tokens,\\n            stream=configs.stream,\\n            temperature=configs.temperature,\\n        )\\n        return response.choices[0].message.content  # type: ignore # FIXME: Fix type error\\n\\n    def summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n    ) -> str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n        print(\"Summarizing code...\")\\n        prompt: str = self._create_prompt(\\n            code, children_summaries, dependency_summaries\\n        )\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n            system_message=configs.system_message, user_message=prompt\\n        )\\n\\n        final_summary: str | None = None\\n        if summary := self._get_summary(messages, configs=configs):\\n            print(\"Full Summary:\\\\n\", summary)\\n            final_summary = summary.split(\"FINAL_SUMMARY:\")[-1]\\n            print(\"Final Summary:\\\\n\", final_summary)\\n\\n        return final_summary if final_summary else \"Summary not found.\"\\n\\n    def test_summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n    ) -> str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n        print(\"Summarizing code...\")\\n        prompt: str = self._create_prompt(\\n            code, children_summaries, dependency_summaries\\n        )\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n            system_message=configs.system_message, user_message=prompt\\n        )\\n\\n        summary: str = f\"\"\"Summary:\\\\n\\n        {messages}\\\\n \\n        \"\"\"\\n        print(\"Full Summary:\\\\n\", summary)\\n\\n        return summary\\n\\n\\nif __name__ == \"__main__\":\\n    client = OpenAI()\\n    summarizer = OpenAISummarizer(client=client)\\n    children_summaries = \"\"\\n    dependency_summaries = \"\"\\n    summary = summarizer.summarize_code(\\n        code_example,\\n        children_summaries=children_summaries,\\n        dependency_summaries=dependency_summaries,\\n    )\\n    print(summary)\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\nif __name__ == \"__main__\":\\\\n    client = OpenAI()\\\\n    summarizer = OpenAISummarizer(client=client)\\\\n    children_summaries = \"\"\\\\n    dependency_summaries = \"\"\\\\n    summary = summarizer.summarize_code(\\\\n        code_example,\\\\n        children_summaries=children_summaries,\\\\n        dependency_summaries=dependency_summaries,\\\\n    )\\\\n    print(summary)\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\n\\\\nclass SummaryCompletionConfigs(BaseModel):\\\\n    \"\"\"\\\\n    Configs for the summarization completion.\\\\n\\\\n    Used to set the chat completion parameters for the OpenAI chat completions method call.\\\\n\\\\n    Args:\\\\n        - system_message (str): The system message used for chat completion.\\\\n        - prompt_template (str): The prompt template used for chat completion. This should contain \"{code}\" to\\\\n            insert the code at that point; otherwise, the code snippet will be appended below the prompt.\\\\n        - model (str): The model to use for the completion. Default is \"gpt-4-1106-preview\".\\\\n        - max_tokens (int | None): The maximum number of tokens to generate. \\\\\\'None\\\\\\' implies no limit. Default is None.\\\\n        - presence_penalty (float | None): Penalty for new tokens based on their presence in the text so far.\\\\n            Default is None.\\\\n        - stream (bool): Whether to stream back partial progress. Default is False.\\\\n        - temperature (float): Sampling temperature to use. Default is 0.0.\\\\n\\\\n    Notes:\\\\n        - prompt_template should contain \"{code}\", if not, the code snippet will be appended below the prompt.\\\\n        - model must be a valid OpenAI model name.\\\\n\\\\n    Examples:\\\\n        >>> system_message = \"Summarize the following code.\"\\\\n        >>> prompt_template = \\\\\\'\\\\\\'\\\\\\'Summarize the following code.\\\\n        ... CODE:\\\\n        ... ```Python\\\\n        ... {code}\\\\n        ... ```\\\\n        ... \\\\\\'\\\\\\'\\\\\\'\\\\n        >>> summary_completion_configs = SummaryCompletionConfigs(\\\\n        ...     system_message=system_message,\\\\n        ...     prompt_template=prompt_template,\\\\n        ...     model=\"gpt-4-1106-preview\",\\\\n        ...     max_tokens=100,\\\\n        ...     presence_penalty=0.0,\\\\n        ...     stream=False,\\\\n        ...     temperature=0.0,\\\\n        ... )\\\\n    \"\"\"\\\\n\\\\n    system_message: str = SUMMARIZER_DEFAULT_INSTRUCTIONS\\\\n    model: Literal[\\\\n        \"gpt-4-1106-preview\",\\\\n        \"gpt-4-vision-preview\",\\\\n        \"gpt-4\",\\\\n        \"gpt-4-0314\",\\\\n        \"gpt-4-0613\",\\\\n        \"gpt-4-32k\",\\\\n        \"gpt-4-32k-0314\",\\\\n        \"gpt-4-32k-0613\",\\\\n        \"gpt-3.5-turbo-1106\",\\\\n        \"gpt-3.5-turbo\",\\\\n        \"gpt-3.5-turbo-16k\",\\\\n        \"gpt-3.5-turbo-0301\",\\\\n        \"gpt-3.5-turbo-0613\",\\\\n        \"gpt-3.5-turbo-16k-0613\",\\\\n    ] = \"gpt-4-1106-preview\"\\\\n    max_tokens: int | None = None\\\\n    stream: bool = False\\\\n    temperature: float = 0.0\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\n\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\n\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\npartitioning logic.\"\\\\n\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\n\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\'s content.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\n\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass Summarizer(Protocol):\\\\n    def summarize_code(\\\\n        self,\\\\n        code: str,\\\\n        *,\\\\n        children_summaries: str | None,\\\\n        dependency_summaries: str | None,\\\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\n    ) -> str:\\\\n        \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n        ...\\\\n\\\\n    def test_summarize_code(\\\\n        self,\\\\n        code: str,\\\\n        *,\\\\n        children_summaries: str | None,\\\\n        dependency_summaries: str | None,\\\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\n    ) -> str:\\\\n        \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize (pass in dummy string).\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n        ...\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\ndef summarize_code(\\\\\\\\n    self,\\\\\\\\n    code: str,\\\\\\\\n    *,\\\\\\\\n    children_summaries: str | None,\\\\\\\\n    dependency_summaries: str | None,\\\\\\\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\\\\\n) -> str:\\\\\\\\n    \"\"\"\\\\\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            code (str): The code snippet to summarize.\\\\\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\\\\\n                Defaults to SummaryCompletionConfigs().\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            str: The summary of the provided code snippet.\\\\\\\\n\\\\\\\\n        Examples:\\\\\\\\n            >>> client = OpenAI()\\\\\\\\n            >>> summarizer = Summarizer(client=client)\\\\\\\\n            >>> code_example = \"print(\\\\\\\\\\\\\\'Hello, world\\\\\\\\\\\\\\')\"\\\\\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\\\\\n            >>> print(summary)\\\\\\\\n        \"\"\"\\\\\\\\n    ...\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef test_summarize_code(\\\\\\\\n    self,\\\\\\\\n    code: str,\\\\\\\\n    *,\\\\\\\\n    children_summaries: str | None,\\\\\\\\n    dependency_summaries: str | None,\\\\\\\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\\\\\n) -> str:\\\\\\\\n    \"\"\"\\\\\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            code (str): The code snippet to summarize (pass in dummy string).\\\\\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\\\\\n                Defaults to SummaryCompletionConfigs().\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            str: The summary of the provided code snippet.\\\\\\\\n\\\\\\\\n        Examples:\\\\\\\\n            >>> client = OpenAI()\\\\\\\\n            >>> summarizer = Summarizer(client=client)\\\\\\\\n            >>> code_example = \"print(\\\\\\\\\\\\\\'Hello, world\\\\\\\\\\\\\\')\"\\\\\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\\\\\n            >>> print(summary)\\\\\\\\n        \"\"\"\\\\\\\\n    ...\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\\\n\\\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\\\n\\\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\\\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\\\npartitioning logic.\"\\\\n\\\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\\\n\\\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\\\\\'s content.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon that is not directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\\\n\\\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass OpenAISummarizer:\\\\n    \"\"\"\\\\n    A class for summarizing code snippets using the OpenAI API.\\\\n\\\\n    Args:\\\\n        - client (OpenAI): The OpenAI client used for making API requests.\\\\n        - summary_prompt_list (list[str], optional): A list of summary prompts to be used. Defaults to an empty list.\\\\n\\\\n    Attributes:\\\\n        - client (OpenAI): The OpenAI client used for making API requests.\\\\n        - prompt_list (list[str]): A list of summary prompts.\\\\n        - default_prompt (str): The default summary prompt.\\\\n\\\\n    Methods:\\\\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\\\\n            Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n    Examples:\\\\n        >>> client = OpenAI()\\\\n        >>> summarizer = Summarizer(client=client)\\\\n        >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n        >>> summary = summarizer.summarize_code(code_example)\\\\n        >>> print(summary)\\\\n    \"\"\"\\\\n\\\\n    def __init__(\\\\n        self, client: OpenAI, *, summary_prompt_list: list[str] = summary_prompt_list\\\\n    ) -> None:\\\\n        self.client: OpenAI = client\\\\n        self.prompt_list: list[str] = summary_prompt_list\\\\n        self.default_prompt: str = self.prompt_list[0]\\\\n\\\\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\\\n        \"\"\"Creates a system message for chat completion using OpenAi\\\\\\'s ChatCompletionSystemMessageParam class.\"\"\"\\\\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\\\n\\\\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\\\n        \"\"\"Creates a user message for chat completion using OpenAi\\\\\\'s ChatCompletionUserMessageParam class.\"\"\"\\\\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\\\\n\\\\n    def _create_messages_list(\\\\n        self,\\\\n        system_message: str,\\\\n        user_message: str,\\\\n    ) -> list[ChatCompletionMessageParam]:\\\\n        \"\"\"\\\\n        Creates a list of messages for chat completion, including both system and user messages.\\\\n\\\\n        Args:\\\\n            system_message (str): The system message content.\\\\n            user_message (str): The user message content.\\\\n\\\\n        Returns:\\\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\\\\\'s\\\\n                ChatCompletionMessageParam classes.\\\\n        \"\"\"\\\\n\\\\n        return [\\\\n            self._create_system_message(system_message),\\\\n            self._create_user_message(user_message),\\\\n        ]\\\\n\\\\n    def _interpolate_prompt(\\\\n        self,\\\\n        code: str,\\\\n        *,\\\\n        children_summaries: str = \"\",\\\\n        dependency_summaries: str = \"\",\\\\n        prompt_template: str | None = None,\\\\n    ) -> str:\\\\n        \"\"\"\\\\n        Returns the prompt_template for the code snippet.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet.\\\\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\\\\n\\\\n        Returns:\\\\n            str: The formatted prompt.\\\\n\\\\n        Notes:\\\\n            - If prompt_template is not provided, the default prompt will be used.\\\\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\\\\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\\\\n        \"\"\"\\\\n\\\\n        if children_summaries and dependency_summaries:\\\\n            if not prompt_template:\\\\n                prompt_template = (\\\\n                    COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES\\\\n                )\\\\n            if (\\\\n                \"{code}\" in prompt_template\\\\n                and \"{children_summaries}\" in prompt_template\\\\n                and \"{dependency_summaries}\" in prompt_template\\\\n            ):\\\\n                return prompt_template.format(\\\\n                    code=code,\\\\n                    children_summaries=children_summaries,\\\\n                    dependency_summaries=dependency_summaries,\\\\n                )\\\\n            else:\\\\n                return f\"\"\"\\\\n                    {prompt_template}\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n{code}\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n{children_summaries}\\\\\\\\n\\\\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\\\\\n{dependency_summaries}\\\\n                    \"\"\"\\\\n\\\\n        elif children_summaries:\\\\n            if not prompt_template:\\\\n                prompt_template = COD_SUMMARIZATION_PROMPT_WITH_CHILDREN\\\\n            if (\\\\n                \"{code}\" in prompt_template\\\\n                and \"{children_summaries}\" in prompt_template\\\\n            ):\\\\n                return prompt_template.format(\\\\n                    code=code, children_summaries=children_summaries\\\\n                )\\\\n            else:\\\\n                return f\"{prompt_template}\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n{code}\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n{children_summaries}\"\\\\n\\\\n        elif dependency_summaries:\\\\n            if not prompt_template:\\\\n                prompt_template = COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES\\\\n            if (\\\\n                \"{code}\" in prompt_template\\\\n                and \"{dependency_summaries}\" in prompt_template\\\\n            ):\\\\n                return prompt_template.format(\\\\n                    code=code, dependency_summaries=dependency_summaries\\\\n                )\\\\n            else:\\\\n                return f\"\"\"\\\\n                    {prompt_template}\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n{code}\\\\\\\\n\\\\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\\\\\n{dependency_summaries}\\\\n                    \"\"\"\\\\n\\\\n        else:\\\\n            if prompt_template and \"{code}\" in prompt_template:\\\\n                return prompt_template.format(code=code)\\\\n            else:\\\\n                return f\"{prompt_template}\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n{code}\"\\\\n\\\\n    def _create_prompt(\\\\n        self,\\\\n        code: str,\\\\n        children_summaries: str | None,\\\\n        dependency_summaries: str | None,\\\\n    ) -> str:\\\\n        if children_summaries and dependency_summaries:\\\\n            prompt: str = self._interpolate_prompt(\\\\n                code,\\\\n                children_summaries=children_summaries,\\\\n                dependency_summaries=dependency_summaries,\\\\n            )\\\\n        elif children_summaries:\\\\n            prompt: str = self._interpolate_prompt(\\\\n                code,\\\\n                children_summaries=children_summaries,\\\\n            )\\\\n        elif dependency_summaries:\\\\n            prompt: str = self._interpolate_prompt(\\\\n                code,\\\\n                dependency_summaries=dependency_summaries,\\\\n            )\\\\n        else:\\\\n            prompt: str = self._interpolate_prompt(code)\\\\n\\\\n        return prompt\\\\n\\\\n    def _get_summary(\\\\n        self,\\\\n        messages: list[ChatCompletionMessageParam],\\\\n        *,\\\\n        configs: SummaryCompletionConfigs,\\\\n    ) -> str | None:\\\\n        \"\"\"\\\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\\\n\\\\n        Args:\\\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\\\n\\\\n        Returns:\\\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\\\n        \"\"\"\\\\n\\\\n        response = self.client.chat.completions.create(\\\\n            messages=messages,\\\\n            model=configs.model,\\\\n            max_tokens=configs.max_tokens,\\\\n            stream=configs.stream,\\\\n            temperature=configs.temperature,\\\\n        )\\\\n        return response.choices[0].message.content  # type: ignore # FIXME: Fix type error\\\\n\\\\n    def summarize_code(\\\\n        self,\\\\n        code: str,\\\\n        *,\\\\n        children_summaries: str | None,\\\\n        dependency_summaries: str | None,\\\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\n    ) -> str:\\\\n        \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n\\\\n        print(\"Summarizing code...\")\\\\n        prompt: str = self._create_prompt(\\\\n            code, children_summaries, dependency_summaries\\\\n        )\\\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\n            system_message=configs.system_message, user_message=prompt\\\\n        )\\\\n\\\\n        final_summary: str | None = None\\\\n        if summary := self._get_summary(messages, configs=configs):\\\\n            print(\"Full Summary:\\\\\\\\n\", summary)\\\\n            final_summary = summary.split(\"FINAL_SUMMARY:\")[-1]\\\\n            print(\"Final Summary:\\\\\\\\n\", final_summary)\\\\n\\\\n        return final_summary if final_summary else \"Summary not found.\"\\\\n\\\\n    def test_summarize_code(\\\\n        self,\\\\n        code: str,\\\\n        *,\\\\n        children_summaries: str | None,\\\\n        dependency_summaries: str | None,\\\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\n    ) -> str:\\\\n        \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n\\\\n        print(\"Summarizing code...\")\\\\n        prompt: str = self._create_prompt(\\\\n            code, children_summaries, dependency_summaries\\\\n        )\\\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\n            system_message=configs.system_message, user_message=prompt\\\\n        )\\\\n\\\\n        summary: str = f\"\"\"Summary:\\\\\\\\n\\\\n        {messages}\\\\\\\\n \\\\n        \"\"\"\\\\n        print(\"Full Summary:\\\\\\\\n\", summary)\\\\n\\\\n        return summary\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef __init__(\\\\\\\\n    self, client: OpenAI, *, summary_prompt_list: list[str] = summary_prompt_list\\\\\\\\n) -> None:\\\\\\\\n    self.client: OpenAI = client\\\\\\\\n    self.prompt_list: list[str] = summary_prompt_list\\\\\\\\n    self.default_prompt: str = self.prompt_list[0]\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\\\\\\\n    \"\"\"Creates a system message for chat completion using OpenAi\\\\\\\\\\\\\\'s ChatCompletionSystemMessageParam class.\"\"\"\\\\\\\\n    return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\\\\\\\n    \"\"\"Creates a user message for chat completion using OpenAi\\\\\\\\\\\\\\'s ChatCompletionUserMessageParam class.\"\"\"\\\\\\\\n    return ChatCompletionUserMessageParam(content=content, role=\"user\")\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef _create_messages_list(\\\\\\\\n    self,\\\\\\\\n    system_message: str,\\\\\\\\n    user_message: str,\\\\\\\\n) -> list[ChatCompletionMessageParam]:\\\\\\\\n    \"\"\"\\\\\\\\n        Creates a list of messages for chat completion, including both system and user messages.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            system_message (str): The system message content.\\\\\\\\n            user_message (str): The user message content.\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\\\\\\\\\\\\\'s\\\\\\\\n                ChatCompletionMessageParam classes.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    return [\\\\\\\\n        self._create_system_message(system_message),\\\\\\\\n        self._create_user_message(user_message),\\\\\\\\n    ]\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef _interpolate_prompt(\\\\\\\\n    self,\\\\\\\\n    code: str,\\\\\\\\n    *,\\\\\\\\n    children_summaries: str = \"\",\\\\\\\\n    dependency_summaries: str = \"\",\\\\\\\\n    prompt_template: str | None = None,\\\\\\\\n) -> str:\\\\\\\\n    \"\"\"\\\\\\\\n        Returns the prompt_template for the code snippet.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            code (str): The code snippet.\\\\\\\\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            str: The formatted prompt.\\\\\\\\n\\\\\\\\n        Notes:\\\\\\\\n            - If prompt_template is not provided, the default prompt will be used.\\\\\\\\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\\\\\\\\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    if children_summaries and dependency_summaries:\\\\\\\\n        if not prompt_template:\\\\\\\\n            prompt_template = (\\\\\\\\n                COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES\\\\\\\\n            )\\\\\\\\n        if (\\\\\\\\n            \"{code}\" in prompt_template\\\\\\\\n            and \"{children_summaries}\" in prompt_template\\\\\\\\n            and \"{dependency_summaries}\" in prompt_template\\\\\\\\n        ):\\\\\\\\n            return prompt_template.format(\\\\\\\\n                code=code,\\\\\\\\n                children_summaries=children_summaries,\\\\\\\\n                dependency_summaries=dependency_summaries,\\\\\\\\n            )\\\\\\\\n        else:\\\\\\\\n            return f\"\"\"\\\\\\\\n                    {prompt_template}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n{code}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\\\\\\\\\n{children_summaries}\\\\\\\\\\\\\\\\n\\\\\\\\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\\\\\\\\\\\\\n{dependency_summaries}\\\\\\\\n                    \"\"\"\\\\\\\\n\\\\\\\\n    elif children_summaries:\\\\\\\\n        if not prompt_template:\\\\\\\\n            prompt_template = COD_SUMMARIZATION_PROMPT_WITH_CHILDREN\\\\\\\\n        if (\\\\\\\\n            \"{code}\" in prompt_template\\\\\\\\n            and \"{children_summaries}\" in prompt_template\\\\\\\\n        ):\\\\\\\\n            return prompt_template.format(\\\\\\\\n                code=code, children_summaries=children_summaries\\\\\\\\n            )\\\\\\\\n        else:\\\\\\\\n            return f\"{prompt_template}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n{code}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\\\\\\\\\n{children_summaries}\"\\\\\\\\n\\\\\\\\n    elif dependency_summaries:\\\\\\\\n        if not prompt_template:\\\\\\\\n            prompt_template = COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES\\\\\\\\n        if (\\\\\\\\n            \"{code}\" in prompt_template\\\\\\\\n            and \"{dependency_summaries}\" in prompt_template\\\\\\\\n        ):\\\\\\\\n            return prompt_template.format(\\\\\\\\n                code=code, dependency_summaries=dependency_summaries\\\\\\\\n            )\\\\\\\\n        else:\\\\\\\\n            return f\"\"\"\\\\\\\\n                    {prompt_template}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n{code}\\\\\\\\\\\\\\\\n\\\\\\\\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\\\\\\\\\\\\\n{dependency_summaries}\\\\\\\\n                    \"\"\"\\\\\\\\n\\\\\\\\n    else:\\\\\\\\n        if prompt_template and \"{code}\" in prompt_template:\\\\\\\\n            return prompt_template.format(code=code)\\\\\\\\n        else:\\\\\\\\n            return f\"{prompt_template}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n{code}\"\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef _create_prompt(\\\\\\\\n    self,\\\\\\\\n    code: str,\\\\\\\\n    children_summaries: str | None,\\\\\\\\n    dependency_summaries: str | None,\\\\\\\\n) -> str:\\\\\\\\n    if children_summaries and dependency_summaries:\\\\\\\\n        prompt: str = self._interpolate_prompt(\\\\\\\\n            code,\\\\\\\\n            children_summaries=children_summaries,\\\\\\\\n            dependency_summaries=dependency_summaries,\\\\\\\\n        )\\\\\\\\n    elif children_summaries:\\\\\\\\n        prompt: str = self._interpolate_prompt(\\\\\\\\n            code,\\\\\\\\n            children_summaries=children_summaries,\\\\\\\\n        )\\\\\\\\n    elif dependency_summaries:\\\\\\\\n        prompt: str = self._interpolate_prompt(\\\\\\\\n            code,\\\\\\\\n            dependency_summaries=dependency_summaries,\\\\\\\\n        )\\\\\\\\n    else:\\\\\\\\n        prompt: str = self._interpolate_prompt(code)\\\\\\\\n\\\\\\\\n    return prompt\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef _get_summary(\\\\\\\\n    self,\\\\\\\\n    messages: list[ChatCompletionMessageParam],\\\\\\\\n    *,\\\\\\\\n    configs: SummaryCompletionConfigs,\\\\\\\\n) -> str | None:\\\\\\\\n    \"\"\"\\\\\\\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\\\\\\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    response = self.client.chat.completions.create(\\\\\\\\n        messages=messages,\\\\\\\\n        model=configs.model,\\\\\\\\n        max_tokens=configs.max_tokens,\\\\\\\\n        stream=configs.stream,\\\\\\\\n        temperature=configs.temperature,\\\\\\\\n    )\\\\\\\\n    return response.choices[0].message.content  # type: ignore # FIXME: Fix type error\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef summarize_code(\\\\\\\\n    self,\\\\\\\\n    code: str,\\\\\\\\n    *,\\\\\\\\n    children_summaries: str | None,\\\\\\\\n    dependency_summaries: str | None,\\\\\\\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\\\\\n) -> str:\\\\\\\\n    \"\"\"\\\\\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            code (str): The code snippet to summarize.\\\\\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\\\\\n                Defaults to SummaryCompletionConfigs().\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            str: The summary of the provided code snippet.\\\\\\\\n\\\\\\\\n        Examples:\\\\\\\\n            >>> client = OpenAI()\\\\\\\\n            >>> summarizer = Summarizer(client=client)\\\\\\\\n            >>> code_example = \"print(\\\\\\\\\\\\\\'Hello, world\\\\\\\\\\\\\\')\"\\\\\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\\\\\n            >>> print(summary)\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    print(\"Summarizing code...\")\\\\\\\\n    prompt: str = self._create_prompt(\\\\\\\\n        code, children_summaries, dependency_summaries\\\\\\\\n    )\\\\\\\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\\\\\n        system_message=configs.system_message, user_message=prompt\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    final_summary: str | None = None\\\\\\\\n    if summary := self._get_summary(messages, configs=configs):\\\\\\\\n        print(\"Full Summary:\\\\\\\\\\\\\\\\n\", summary)\\\\\\\\n        final_summary = summary.split(\"FINAL_SUMMARY:\")[-1]\\\\\\\\n        print(\"Final Summary:\\\\\\\\\\\\\\\\n\", final_summary)\\\\\\\\n\\\\\\\\n    return final_summary if final_summary else \"Summary not found.\"\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'None\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n\\\\\\\\ndef test_summarize_code(\\\\\\\\n    self,\\\\\\\\n    code: str,\\\\\\\\n    *,\\\\\\\\n    children_summaries: str | None,\\\\\\\\n    dependency_summaries: str | None,\\\\\\\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\\\\\n) -> str:\\\\\\\\n    \"\"\"\\\\\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            code (str): The code snippet to summarize.\\\\\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\\\\\n                Defaults to SummaryCompletionConfigs().\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            str: The summary of the provided code snippet.\\\\\\\\n\\\\\\\\n        Examples:\\\\\\\\n            >>> client = OpenAI()\\\\\\\\n            >>> summarizer = Summarizer(client=client)\\\\\\\\n            >>> code_example = \"print(\\\\\\\\\\\\\\'Hello, world\\\\\\\\\\\\\\')\"\\\\\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\\\\\n            >>> print(summary)\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    print(\"Summarizing code...\")\\\\\\\\n    prompt: str = self._create_prompt(\\\\\\\\n        code, children_summaries, dependency_summaries\\\\\\\\n    )\\\\\\\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\\\\\n        system_message=configs.system_message, user_message=prompt\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    summary: str = f\"\"\"Summary:\\\\\\\\\\\\\\\\n\\\\\\\\n        {messages}\\\\\\\\\\\\\\\\n \\\\\\\\n        \"\"\"\\\\\\\\n    print(\"Full Summary:\\\\\\\\\\\\\\\\n\", summary)\\\\\\\\n\\\\\\\\n    return summary\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "variable_assignments": [],
            "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__STANDALONE_BLOCK-1",
            "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE",
            "block_type": "STANDALONE_BLOCK",
            "start_line_num": 424,
            "end_line_num": 437,
            "code_content": "if __name__ == \"__main__\":\n    client = OpenAI()\n    summarizer = OpenAISummarizer(client=client)\n    children_summaries = \"\"\n    dependency_summaries = \"\"\n    summary = summarizer.summarize_code(\n        code_example,\n        children_summaries=children_summaries,\n        dependency_summaries=dependency_summaries,\n    )\n    print(summary)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-Summarizer"
                },
                {
                    "code_block_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer"
                },
                {
                    "import_names": [
                        {
                            "name": "OpenAI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "code_example",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "ai_services.temp",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:ai_services:temp.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\nif __name__ == \"__main__\":\\n    client = OpenAI()\\n    summarizer = OpenAISummarizer(client=client)\\n    children_summaries = \"\"\\n    dependency_summaries = \"\"\\n    summary = summarizer.summarize_code(\\n        code_example,\\n        children_summaries=children_summaries,\\n        dependency_summaries=dependency_summaries,\\n    )\\n    print(summary)\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "class_name": "SummaryCompletionConfigs",
            "decorators": null,
            "bases": [
                "BaseModel"
            ],
            "docstring": "Configs for the summarization completion.\n\nUsed to set the chat completion parameters for the OpenAI chat completions method call.\n\nArgs:\n    - system_message (str): The system message used for chat completion.\n    - prompt_template (str): The prompt template used for chat completion. This should contain \"{code}\" to\n        insert the code at that point; otherwise, the code snippet will be appended below the prompt.\n    - model (str): The model to use for the completion. Default is \"gpt-4-1106-preview\".\n    - max_tokens (int | None): The maximum number of tokens to generate. 'None' implies no limit. Default is None.\n    - presence_penalty (float | None): Penalty for new tokens based on their presence in the text so far.\n        Default is None.\n    - stream (bool): Whether to stream back partial progress. Default is False.\n    - temperature (float): Sampling temperature to use. Default is 0.0.\n\nNotes:\n    - prompt_template should contain \"{code}\", if not, the code snippet will be appended below the prompt.\n    - model must be a valid OpenAI model name.\n\nExamples:\n    >>> system_message = \"Summarize the following code.\"\n    >>> prompt_template = '''Summarize the following code.\n    ... CODE:\n    ... ```Python\n    ... {code}\n    ... ```\n    ... '''\n    >>> summary_completion_configs = SummaryCompletionConfigs(\n    ...     system_message=system_message,\n    ...     prompt_template=prompt_template,\n    ...     model=\"gpt-4-1106-preview\",\n    ...     max_tokens=100,\n    ...     presence_penalty=0.0,\n    ...     stream=False,\n    ...     temperature=0.0,\n    ... )",
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-SummaryCompletionConfigs",
            "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 23,
            "end_line_num": 85,
            "code_content": "\n\nclass SummaryCompletionConfigs(BaseModel):\n    \"\"\"\n    Configs for the summarization completion.\n\n    Used to set the chat completion parameters for the OpenAI chat completions method call.\n\n    Args:\n        - system_message (str): The system message used for chat completion.\n        - prompt_template (str): The prompt template used for chat completion. This should contain \"{code}\" to\n            insert the code at that point; otherwise, the code snippet will be appended below the prompt.\n        - model (str): The model to use for the completion. Default is \"gpt-4-1106-preview\".\n        - max_tokens (int | None): The maximum number of tokens to generate. 'None' implies no limit. Default is None.\n        - presence_penalty (float | None): Penalty for new tokens based on their presence in the text so far.\n            Default is None.\n        - stream (bool): Whether to stream back partial progress. Default is False.\n        - temperature (float): Sampling temperature to use. Default is 0.0.\n\n    Notes:\n        - prompt_template should contain \"{code}\", if not, the code snippet will be appended below the prompt.\n        - model must be a valid OpenAI model name.\n\n    Examples:\n        >>> system_message = \"Summarize the following code.\"\n        >>> prompt_template = '''Summarize the following code.\n        ... CODE:\n        ... ```Python\n        ... {code}\n        ... ```\n        ... '''\n        >>> summary_completion_configs = SummaryCompletionConfigs(\n        ...     system_message=system_message,\n        ...     prompt_template=prompt_template,\n        ...     model=\"gpt-4-1106-preview\",\n        ...     max_tokens=100,\n        ...     presence_penalty=0.0,\n        ...     stream=False,\n        ...     temperature=0.0,\n        ... )\n    \"\"\"\n\n    system_message: str = SUMMARIZER_DEFAULT_INSTRUCTIONS\n    model: Literal[\n        \"gpt-4-1106-preview\",\n        \"gpt-4-vision-preview\",\n        \"gpt-4\",\n        \"gpt-4-0314\",\n        \"gpt-4-0613\",\n        \"gpt-4-32k\",\n        \"gpt-4-32k-0314\",\n        \"gpt-4-32k-0613\",\n        \"gpt-3.5-turbo-1106\",\n        \"gpt-3.5-turbo\",\n        \"gpt-3.5-turbo-16k\",\n        \"gpt-3.5-turbo-0301\",\n        \"gpt-3.5-turbo-0613\",\n        \"gpt-3.5-turbo-16k-0613\",\n    ] = \"gpt-4-1106-preview\"\n    max_tokens: int | None = None\n    stream: bool = False\n    temperature: float = 0.0\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "Literal",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Protocol",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "BaseModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "pydantic",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "OpenAI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "summary_prompt_list",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "ai_services.prompts.summarization_prompts",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:ai_services:prompts:summarization_prompts.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\n\\nclass SummaryCompletionConfigs(BaseModel):\\n    \"\"\"\\n    Configs for the summarization completion.\\n\\n    Used to set the chat completion parameters for the OpenAI chat completions method call.\\n\\n    Args:\\n        - system_message (str): The system message used for chat completion.\\n        - prompt_template (str): The prompt template used for chat completion. This should contain \"{code}\" to\\n            insert the code at that point; otherwise, the code snippet will be appended below the prompt.\\n        - model (str): The model to use for the completion. Default is \"gpt-4-1106-preview\".\\n        - max_tokens (int | None): The maximum number of tokens to generate. \\'None\\' implies no limit. Default is None.\\n        - presence_penalty (float | None): Penalty for new tokens based on their presence in the text so far.\\n            Default is None.\\n        - stream (bool): Whether to stream back partial progress. Default is False.\\n        - temperature (float): Sampling temperature to use. Default is 0.0.\\n\\n    Notes:\\n        - prompt_template should contain \"{code}\", if not, the code snippet will be appended below the prompt.\\n        - model must be a valid OpenAI model name.\\n\\n    Examples:\\n        >>> system_message = \"Summarize the following code.\"\\n        >>> prompt_template = \\'\\'\\'Summarize the following code.\\n        ... CODE:\\n        ... ```Python\\n        ... {code}\\n        ... ```\\n        ... \\'\\'\\'\\n        >>> summary_completion_configs = SummaryCompletionConfigs(\\n        ...     system_message=system_message,\\n        ...     prompt_template=prompt_template,\\n        ...     model=\"gpt-4-1106-preview\",\\n        ...     max_tokens=100,\\n        ...     presence_penalty=0.0,\\n        ...     stream=False,\\n        ...     temperature=0.0,\\n        ... )\\n    \"\"\"\\n\\n    system_message: str = SUMMARIZER_DEFAULT_INSTRUCTIONS\\n    model: Literal[\\n        \"gpt-4-1106-preview\",\\n        \"gpt-4-vision-preview\",\\n        \"gpt-4\",\\n        \"gpt-4-0314\",\\n        \"gpt-4-0613\",\\n        \"gpt-4-32k\",\\n        \"gpt-4-32k-0314\",\\n        \"gpt-4-32k-0613\",\\n        \"gpt-3.5-turbo-1106\",\\n        \"gpt-3.5-turbo\",\\n        \"gpt-3.5-turbo-16k\",\\n        \"gpt-3.5-turbo-0301\",\\n        \"gpt-3.5-turbo-0613\",\\n        \"gpt-3.5-turbo-16k-0613\",\\n    ] = \"gpt-4-1106-preview\"\\n    max_tokens: int | None = None\\n    stream: bool = False\\n    temperature: float = 0.0\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "class_name": "Summarizer",
            "decorators": null,
            "bases": [
                "Protocol"
            ],
            "docstring": null,
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-Summarizer",
            "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 85,
            "end_line_num": 143,
            "code_content": "\n\nclass Summarizer(Protocol):\n    def summarize_code(\n        self,\n        code: str,\n        *,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n    ) -> str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n        ...\n\n    def test_summarize_code(\n        self,\n        code: str,\n        *,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n    ) -> str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize (pass in dummy string).\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n        ...\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-SummaryCompletionConfigs"
                },
                {
                    "import_names": [
                        {
                            "name": "Literal",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Protocol",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "OpenAI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "code_example",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "ai_services.temp",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:ai_services:temp.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\n\\nCODE:\\n```Python\\n\\n\\nclass Summarizer(Protocol):\\n    def summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n    ) -> str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n        ...\\n\\n    def test_summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n    ) -> str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize (pass in dummy string).\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n        ...\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\ndef summarize_code(\\\\n    self,\\\\n    code: str,\\\\n    *,\\\\n    children_summaries: str | None,\\\\n    dependency_summaries: str | None,\\\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\n) -> str:\\\\n    \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n    ...\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef test_summarize_code(\\\\n    self,\\\\n    code: str,\\\\n    *,\\\\n    children_summaries: str | None,\\\\n    dependency_summaries: str | None,\\\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\n) -> str:\\\\n    \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize (pass in dummy string).\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n    ...\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "summarize_code",
                    "docstring": "Summarizes the provided code snippet using the OpenAI API.\n\nArgs:\n    code (str): The code snippet to summarize.\n    configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n        Defaults to SummaryCompletionConfigs().\n\nReturns:\n    str: The summary of the provided code snippet.\n\nExamples:\n    >>> client = OpenAI()\n    >>> summarizer = Summarizer(client=client)\n    >>> code_example = \"print('Hello, world')\"\n    >>> summary = summarizer.summarize_code(code_example)\n    >>> print(summary)",
                    "decorators": null,
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-Summarizer__*__FUNCTION-summarize_code",
                    "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-Summarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 88,
                    "end_line_num": 115,
                    "code_content": "def summarize_code(\n    self,\n    code: str,\n    *,\n    children_summaries: str | None,\n    dependency_summaries: str | None,\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n) -> str:\n    \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n    ...\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\ndef summarize_code(\\n    self,\\n    code: str,\\n    *,\\n    children_summaries: str | None,\\n    dependency_summaries: str | None,\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n) -> str:\\n    \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n    ...\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "test_summarize_code",
                    "docstring": "Summarizes the provided code snippet using the OpenAI API.\n\nArgs:\n    code (str): The code snippet to summarize (pass in dummy string).\n    configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n        Defaults to SummaryCompletionConfigs().\n\nReturns:\n    str: The summary of the provided code snippet.\n\nExamples:\n    >>> client = OpenAI()\n    >>> summarizer = Summarizer(client=client)\n    >>> code_example = \"print('Hello, world')\"\n    >>> summary = summarizer.summarize_code(code_example)\n    >>> print(summary)",
                    "decorators": null,
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-Summarizer__*__FUNCTION-test_summarize_code",
                    "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-Summarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 115,
                    "end_line_num": 143,
                    "code_content": "\ndef test_summarize_code(\n    self,\n    code: str,\n    *,\n    children_summaries: str | None,\n    dependency_summaries: str | None,\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n) -> str:\n    \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize (pass in dummy string).\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n    ...\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef test_summarize_code(\\n    self,\\n    code: str,\\n    *,\\n    children_summaries: str | None,\\n    dependency_summaries: str | None,\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n) -> str:\\n    \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize (pass in dummy string).\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n    ...\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        },
        {
            "class_name": "OpenAISummarizer",
            "decorators": null,
            "bases": null,
            "docstring": "A class for summarizing code snippets using the OpenAI API.\n\nArgs:\n    - client (OpenAI): The OpenAI client used for making API requests.\n    - summary_prompt_list (list[str], optional): A list of summary prompts to be used. Defaults to an empty list.\n\nAttributes:\n    - client (OpenAI): The OpenAI client used for making API requests.\n    - prompt_list (list[str]): A list of summary prompts.\n    - default_prompt (str): The default summary prompt.\n\nMethods:\n    summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\n        Summarizes the provided code snippet using the OpenAI API.\n\nExamples:\n    >>> client = OpenAI()\n    >>> summarizer = Summarizer(client=client)\n    >>> code_example = \"print('Hello, world')\"\n    >>> summary = summarizer.summarize_code(code_example)\n    >>> print(summary)",
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
            "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 143,
            "end_line_num": 424,
            "code_content": "\n\nclass OpenAISummarizer:\n    \"\"\"\n    A class for summarizing code snippets using the OpenAI API.\n\n    Args:\n        - client (OpenAI): The OpenAI client used for making API requests.\n        - summary_prompt_list (list[str], optional): A list of summary prompts to be used. Defaults to an empty list.\n\n    Attributes:\n        - client (OpenAI): The OpenAI client used for making API requests.\n        - prompt_list (list[str]): A list of summary prompts.\n        - default_prompt (str): The default summary prompt.\n\n    Methods:\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\n            Summarizes the provided code snippet using the OpenAI API.\n\n    Examples:\n        >>> client = OpenAI()\n        >>> summarizer = Summarizer(client=client)\n        >>> code_example = \"print('Hello, world')\"\n        >>> summary = summarizer.summarize_code(code_example)\n        >>> print(summary)\n    \"\"\"\n\n    def __init__(\n        self, client: OpenAI, *, summary_prompt_list: list[str] = summary_prompt_list\n    ) -> None:\n        self.client: OpenAI = client\n        self.prompt_list: list[str] = summary_prompt_list\n        self.default_prompt: str = self.prompt_list[0]\n\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\n        \"\"\"Creates a system message for chat completion using OpenAi's ChatCompletionSystemMessageParam class.\"\"\"\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\n\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\n        \"\"\"Creates a user message for chat completion using OpenAi's ChatCompletionUserMessageParam class.\"\"\"\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\n\n    def _create_messages_list(\n        self,\n        system_message: str,\n        user_message: str,\n    ) -> list[ChatCompletionMessageParam]:\n        \"\"\"\n        Creates a list of messages for chat completion, including both system and user messages.\n\n        Args:\n            system_message (str): The system message content.\n            user_message (str): The user message content.\n\n        Returns:\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI's\n                ChatCompletionMessageParam classes.\n        \"\"\"\n\n        return [\n            self._create_system_message(system_message),\n            self._create_user_message(user_message),\n        ]\n\n    def _interpolate_prompt(\n        self,\n        code: str,\n        *,\n        children_summaries: str = \"\",\n        dependency_summaries: str = \"\",\n        prompt_template: str | None = None,\n    ) -> str:\n        \"\"\"\n        Returns the prompt_template for the code snippet.\n\n        Args:\n            code (str): The code snippet.\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\n\n        Returns:\n            str: The formatted prompt.\n\n        Notes:\n            - If prompt_template is not provided, the default prompt will be used.\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\n        \"\"\"\n\n        if children_summaries and dependency_summaries:\n            if not prompt_template:\n                prompt_template = (\n                    COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES\n                )\n            if (\n                \"{code}\" in prompt_template\n                and \"{children_summaries}\" in prompt_template\n                and \"{dependency_summaries}\" in prompt_template\n            ):\n                return prompt_template.format(\n                    code=code,\n                    children_summaries=children_summaries,\n                    dependency_summaries=dependency_summaries,\n                )\n            else:\n                return f\"\"\"\n                    {prompt_template}\\n\\nCODE:\\n{code}\\n\\nCHILDREN_SUMMARIES:\\n{children_summaries}\\n\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\n{dependency_summaries}\n                    \"\"\"\n\n        elif children_summaries:\n            if not prompt_template:\n                prompt_template = COD_SUMMARIZATION_PROMPT_WITH_CHILDREN\n            if (\n                \"{code}\" in prompt_template\n                and \"{children_summaries}\" in prompt_template\n            ):\n                return prompt_template.format(\n                    code=code, children_summaries=children_summaries\n                )\n            else:\n                return f\"{prompt_template}\\n\\nCODE:\\n{code}\\n\\nCHILDREN_SUMMARIES:\\n{children_summaries}\"\n\n        elif dependency_summaries:\n            if not prompt_template:\n                prompt_template = COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES\n            if (\n                \"{code}\" in prompt_template\n                and \"{dependency_summaries}\" in prompt_template\n            ):\n                return prompt_template.format(\n                    code=code, dependency_summaries=dependency_summaries\n                )\n            else:\n                return f\"\"\"\n                    {prompt_template}\\n\\nCODE:\\n{code}\\n\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\n{dependency_summaries}\n                    \"\"\"\n\n        else:\n            if prompt_template and \"{code}\" in prompt_template:\n                return prompt_template.format(code=code)\n            else:\n                return f\"{prompt_template}\\n\\nCODE:\\n{code}\"\n\n    def _create_prompt(\n        self,\n        code: str,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n    ) -> str:\n        if children_summaries and dependency_summaries:\n            prompt: str = self._interpolate_prompt(\n                code,\n                children_summaries=children_summaries,\n                dependency_summaries=dependency_summaries,\n            )\n        elif children_summaries:\n            prompt: str = self._interpolate_prompt(\n                code,\n                children_summaries=children_summaries,\n            )\n        elif dependency_summaries:\n            prompt: str = self._interpolate_prompt(\n                code,\n                dependency_summaries=dependency_summaries,\n            )\n        else:\n            prompt: str = self._interpolate_prompt(code)\n\n        return prompt\n\n    def _get_summary(\n        self,\n        messages: list[ChatCompletionMessageParam],\n        *,\n        configs: SummaryCompletionConfigs,\n    ) -> str | None:\n        \"\"\"\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\n        Args:\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\n        Returns:\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\n        \"\"\"\n\n        response = self.client.chat.completions.create(\n            messages=messages,\n            model=configs.model,\n            max_tokens=configs.max_tokens,\n            stream=configs.stream,\n            temperature=configs.temperature,\n        )\n        return response.choices[0].message.content  # type: ignore # FIXME: Fix type error\n\n    def summarize_code(\n        self,\n        code: str,\n        *,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n    ) -> str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n        print(\"Summarizing code...\")\n        prompt: str = self._create_prompt(\n            code, children_summaries, dependency_summaries\n        )\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n            system_message=configs.system_message, user_message=prompt\n        )\n\n        final_summary: str | None = None\n        if summary := self._get_summary(messages, configs=configs):\n            print(\"Full Summary:\\n\", summary)\n            final_summary = summary.split(\"FINAL_SUMMARY:\")[-1]\n            print(\"Final Summary:\\n\", final_summary)\n\n        return final_summary if final_summary else \"Summary not found.\"\n\n    def test_summarize_code(\n        self,\n        code: str,\n        *,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n    ) -> str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n        print(\"Summarizing code...\")\n        prompt: str = self._create_prompt(\n            code, children_summaries, dependency_summaries\n        )\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n            system_message=configs.system_message, user_message=prompt\n        )\n\n        summary: str = f\"\"\"Summary:\\n\n        {messages}\\n \n        \"\"\"\n        print(\"Full Summary:\\n\", summary)\n\n        return summary\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-SummaryCompletionConfigs"
                },
                {
                    "code_block_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-Summarizer"
                },
                {
                    "import_names": [
                        {
                            "name": "OpenAI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ChatCompletionSystemMessageParam",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.chat.chat_completion_system_message_param",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ChatCompletionUserMessageParam",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.chat.chat_completion_user_message_param",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ChatCompletionMessageParam",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.chat.chat_completion_message_param",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "code_example",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "ai_services.temp",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:ai_services:temp.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "summary_prompt_list",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "ai_services.prompts.summarization_prompts",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:ai_services:prompts:summarization_prompts.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "summary_prompt_list",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "ai_services.prompts.summarization_prompts",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:ai_services:prompts:summarization_prompts.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "summary_prompt_list",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "ai_services.prompts.summarization_prompts",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:ai_services:prompts:summarization_prompts.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "summary_prompt_list",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "ai_services.prompts.summarization_prompts",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:ai_services:prompts:summarization_prompts.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_CHILDREN",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "summary_prompt_list",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "ai_services.prompts.summarization_prompts",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:ai_services:prompts:summarization_prompts.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\n\\nCODE:\\n```Python\\n\\n\\nclass OpenAISummarizer:\\n    \"\"\"\\n    A class for summarizing code snippets using the OpenAI API.\\n\\n    Args:\\n        - client (OpenAI): The OpenAI client used for making API requests.\\n        - summary_prompt_list (list[str], optional): A list of summary prompts to be used. Defaults to an empty list.\\n\\n    Attributes:\\n        - client (OpenAI): The OpenAI client used for making API requests.\\n        - prompt_list (list[str]): A list of summary prompts.\\n        - default_prompt (str): The default summary prompt.\\n\\n    Methods:\\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\\n            Summarizes the provided code snippet using the OpenAI API.\\n\\n    Examples:\\n        >>> client = OpenAI()\\n        >>> summarizer = Summarizer(client=client)\\n        >>> code_example = \"print(\\'Hello, world\\')\"\\n        >>> summary = summarizer.summarize_code(code_example)\\n        >>> print(summary)\\n    \"\"\"\\n\\n    def __init__(\\n        self, client: OpenAI, *, summary_prompt_list: list[str] = summary_prompt_list\\n    ) -> None:\\n        self.client: OpenAI = client\\n        self.prompt_list: list[str] = summary_prompt_list\\n        self.default_prompt: str = self.prompt_list[0]\\n\\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\n        \"\"\"Creates a system message for chat completion using OpenAi\\'s ChatCompletionSystemMessageParam class.\"\"\"\\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\n\\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\n        \"\"\"Creates a user message for chat completion using OpenAi\\'s ChatCompletionUserMessageParam class.\"\"\"\\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\\n\\n    def _create_messages_list(\\n        self,\\n        system_message: str,\\n        user_message: str,\\n    ) -> list[ChatCompletionMessageParam]:\\n        \"\"\"\\n        Creates a list of messages for chat completion, including both system and user messages.\\n\\n        Args:\\n            system_message (str): The system message content.\\n            user_message (str): The user message content.\\n\\n        Returns:\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\'s\\n                ChatCompletionMessageParam classes.\\n        \"\"\"\\n\\n        return [\\n            self._create_system_message(system_message),\\n            self._create_user_message(user_message),\\n        ]\\n\\n    def _interpolate_prompt(\\n        self,\\n        code: str,\\n        *,\\n        children_summaries: str = \"\",\\n        dependency_summaries: str = \"\",\\n        prompt_template: str | None = None,\\n    ) -> str:\\n        \"\"\"\\n        Returns the prompt_template for the code snippet.\\n\\n        Args:\\n            code (str): The code snippet.\\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\\n\\n        Returns:\\n            str: The formatted prompt.\\n\\n        Notes:\\n            - If prompt_template is not provided, the default prompt will be used.\\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\\n        \"\"\"\\n\\n        if children_summaries and dependency_summaries:\\n            if not prompt_template:\\n                prompt_template = (\\n                    COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES\\n                )\\n            if (\\n                \"{code}\" in prompt_template\\n                and \"{children_summaries}\" in prompt_template\\n                and \"{dependency_summaries}\" in prompt_template\\n            ):\\n                return prompt_template.format(\\n                    code=code,\\n                    children_summaries=children_summaries,\\n                    dependency_summaries=dependency_summaries,\\n                )\\n            else:\\n                return f\"\"\"\\n                    {prompt_template}\\\\n\\\\nCODE:\\\\n{code}\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n{children_summaries}\\\\n\\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\n{dependency_summaries}\\n                    \"\"\"\\n\\n        elif children_summaries:\\n            if not prompt_template:\\n                prompt_template = COD_SUMMARIZATION_PROMPT_WITH_CHILDREN\\n            if (\\n                \"{code}\" in prompt_template\\n                and \"{children_summaries}\" in prompt_template\\n            ):\\n                return prompt_template.format(\\n                    code=code, children_summaries=children_summaries\\n                )\\n            else:\\n                return f\"{prompt_template}\\\\n\\\\nCODE:\\\\n{code}\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n{children_summaries}\"\\n\\n        elif dependency_summaries:\\n            if not prompt_template:\\n                prompt_template = COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES\\n            if (\\n                \"{code}\" in prompt_template\\n                and \"{dependency_summaries}\" in prompt_template\\n            ):\\n                return prompt_template.format(\\n                    code=code, dependency_summaries=dependency_summaries\\n                )\\n            else:\\n                return f\"\"\"\\n                    {prompt_template}\\\\n\\\\nCODE:\\\\n{code}\\\\n\\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\n{dependency_summaries}\\n                    \"\"\"\\n\\n        else:\\n            if prompt_template and \"{code}\" in prompt_template:\\n                return prompt_template.format(code=code)\\n            else:\\n                return f\"{prompt_template}\\\\n\\\\nCODE:\\\\n{code}\"\\n\\n    def _create_prompt(\\n        self,\\n        code: str,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n    ) -> str:\\n        if children_summaries and dependency_summaries:\\n            prompt: str = self._interpolate_prompt(\\n                code,\\n                children_summaries=children_summaries,\\n                dependency_summaries=dependency_summaries,\\n            )\\n        elif children_summaries:\\n            prompt: str = self._interpolate_prompt(\\n                code,\\n                children_summaries=children_summaries,\\n            )\\n        elif dependency_summaries:\\n            prompt: str = self._interpolate_prompt(\\n                code,\\n                dependency_summaries=dependency_summaries,\\n            )\\n        else:\\n            prompt: str = self._interpolate_prompt(code)\\n\\n        return prompt\\n\\n    def _get_summary(\\n        self,\\n        messages: list[ChatCompletionMessageParam],\\n        *,\\n        configs: SummaryCompletionConfigs,\\n    ) -> str | None:\\n        \"\"\"\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\n\\n        Args:\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\n\\n        Returns:\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\n        \"\"\"\\n\\n        response = self.client.chat.completions.create(\\n            messages=messages,\\n            model=configs.model,\\n            max_tokens=configs.max_tokens,\\n            stream=configs.stream,\\n            temperature=configs.temperature,\\n        )\\n        return response.choices[0].message.content  # type: ignore # FIXME: Fix type error\\n\\n    def summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n    ) -> str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n        print(\"Summarizing code...\")\\n        prompt: str = self._create_prompt(\\n            code, children_summaries, dependency_summaries\\n        )\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n            system_message=configs.system_message, user_message=prompt\\n        )\\n\\n        final_summary: str | None = None\\n        if summary := self._get_summary(messages, configs=configs):\\n            print(\"Full Summary:\\\\n\", summary)\\n            final_summary = summary.split(\"FINAL_SUMMARY:\")[-1]\\n            print(\"Final Summary:\\\\n\", final_summary)\\n\\n        return final_summary if final_summary else \"Summary not found.\"\\n\\n    def test_summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n    ) -> str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n        print(\"Summarizing code...\")\\n        prompt: str = self._create_prompt(\\n            code, children_summaries, dependency_summaries\\n        )\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n            system_message=configs.system_message, user_message=prompt\\n        )\\n\\n        summary: str = f\"\"\"Summary:\\\\n\\n        {messages}\\\\n \\n        \"\"\"\\n        print(\"Full Summary:\\\\n\", summary)\\n\\n        return summary\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef __init__(\\\\n    self, client: OpenAI, *, summary_prompt_list: list[str] = summary_prompt_list\\\\n) -> None:\\\\n    self.client: OpenAI = client\\\\n    self.prompt_list: list[str] = summary_prompt_list\\\\n    self.default_prompt: str = self.prompt_list[0]\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\\\n    \"\"\"Creates a system message for chat completion using OpenAi\\\\\\'s ChatCompletionSystemMessageParam class.\"\"\"\\\\n    return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\\\n    \"\"\"Creates a user message for chat completion using OpenAi\\\\\\'s ChatCompletionUserMessageParam class.\"\"\"\\\\n    return ChatCompletionUserMessageParam(content=content, role=\"user\")\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef _create_messages_list(\\\\n    self,\\\\n    system_message: str,\\\\n    user_message: str,\\\\n) -> list[ChatCompletionMessageParam]:\\\\n    \"\"\"\\\\n        Creates a list of messages for chat completion, including both system and user messages.\\\\n\\\\n        Args:\\\\n            system_message (str): The system message content.\\\\n            user_message (str): The user message content.\\\\n\\\\n        Returns:\\\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\\\\\'s\\\\n                ChatCompletionMessageParam classes.\\\\n        \"\"\"\\\\n\\\\n    return [\\\\n        self._create_system_message(system_message),\\\\n        self._create_user_message(user_message),\\\\n    ]\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef _interpolate_prompt(\\\\n    self,\\\\n    code: str,\\\\n    *,\\\\n    children_summaries: str = \"\",\\\\n    dependency_summaries: str = \"\",\\\\n    prompt_template: str | None = None,\\\\n) -> str:\\\\n    \"\"\"\\\\n        Returns the prompt_template for the code snippet.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet.\\\\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\\\\n\\\\n        Returns:\\\\n            str: The formatted prompt.\\\\n\\\\n        Notes:\\\\n            - If prompt_template is not provided, the default prompt will be used.\\\\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\\\\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\\\\n        \"\"\"\\\\n\\\\n    if children_summaries and dependency_summaries:\\\\n        if not prompt_template:\\\\n            prompt_template = (\\\\n                COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES\\\\n            )\\\\n        if (\\\\n            \"{code}\" in prompt_template\\\\n            and \"{children_summaries}\" in prompt_template\\\\n            and \"{dependency_summaries}\" in prompt_template\\\\n        ):\\\\n            return prompt_template.format(\\\\n                code=code,\\\\n                children_summaries=children_summaries,\\\\n                dependency_summaries=dependency_summaries,\\\\n            )\\\\n        else:\\\\n            return f\"\"\"\\\\n                    {prompt_template}\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n{code}\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n{children_summaries}\\\\\\\\n\\\\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\\\\\n{dependency_summaries}\\\\n                    \"\"\"\\\\n\\\\n    elif children_summaries:\\\\n        if not prompt_template:\\\\n            prompt_template = COD_SUMMARIZATION_PROMPT_WITH_CHILDREN\\\\n        if (\\\\n            \"{code}\" in prompt_template\\\\n            and \"{children_summaries}\" in prompt_template\\\\n        ):\\\\n            return prompt_template.format(\\\\n                code=code, children_summaries=children_summaries\\\\n            )\\\\n        else:\\\\n            return f\"{prompt_template}\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n{code}\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n{children_summaries}\"\\\\n\\\\n    elif dependency_summaries:\\\\n        if not prompt_template:\\\\n            prompt_template = COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES\\\\n        if (\\\\n            \"{code}\" in prompt_template\\\\n            and \"{dependency_summaries}\" in prompt_template\\\\n        ):\\\\n            return prompt_template.format(\\\\n                code=code, dependency_summaries=dependency_summaries\\\\n            )\\\\n        else:\\\\n            return f\"\"\"\\\\n                    {prompt_template}\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n{code}\\\\\\\\n\\\\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\\\\\n{dependency_summaries}\\\\n                    \"\"\"\\\\n\\\\n    else:\\\\n        if prompt_template and \"{code}\" in prompt_template:\\\\n            return prompt_template.format(code=code)\\\\n        else:\\\\n            return f\"{prompt_template}\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n{code}\"\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef _create_prompt(\\\\n    self,\\\\n    code: str,\\\\n    children_summaries: str | None,\\\\n    dependency_summaries: str | None,\\\\n) -> str:\\\\n    if children_summaries and dependency_summaries:\\\\n        prompt: str = self._interpolate_prompt(\\\\n            code,\\\\n            children_summaries=children_summaries,\\\\n            dependency_summaries=dependency_summaries,\\\\n        )\\\\n    elif children_summaries:\\\\n        prompt: str = self._interpolate_prompt(\\\\n            code,\\\\n            children_summaries=children_summaries,\\\\n        )\\\\n    elif dependency_summaries:\\\\n        prompt: str = self._interpolate_prompt(\\\\n            code,\\\\n            dependency_summaries=dependency_summaries,\\\\n        )\\\\n    else:\\\\n        prompt: str = self._interpolate_prompt(code)\\\\n\\\\n    return prompt\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef _get_summary(\\\\n    self,\\\\n    messages: list[ChatCompletionMessageParam],\\\\n    *,\\\\n    configs: SummaryCompletionConfigs,\\\\n) -> str | None:\\\\n    \"\"\"\\\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\\\n\\\\n        Args:\\\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\\\n\\\\n        Returns:\\\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\\\n        \"\"\"\\\\n\\\\n    response = self.client.chat.completions.create(\\\\n        messages=messages,\\\\n        model=configs.model,\\\\n        max_tokens=configs.max_tokens,\\\\n        stream=configs.stream,\\\\n        temperature=configs.temperature,\\\\n    )\\\\n    return response.choices[0].message.content  # type: ignore # FIXME: Fix type error\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef summarize_code(\\\\n    self,\\\\n    code: str,\\\\n    *,\\\\n    children_summaries: str | None,\\\\n    dependency_summaries: str | None,\\\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\n) -> str:\\\\n    \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n\\\\n    print(\"Summarizing code...\")\\\\n    prompt: str = self._create_prompt(\\\\n        code, children_summaries, dependency_summaries\\\\n    )\\\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\n        system_message=configs.system_message, user_message=prompt\\\\n    )\\\\n\\\\n    final_summary: str | None = None\\\\n    if summary := self._get_summary(messages, configs=configs):\\\\n        print(\"Full Summary:\\\\\\\\n\", summary)\\\\n        final_summary = summary.split(\"FINAL_SUMMARY:\")[-1]\\\\n        print(\"Final Summary:\\\\\\\\n\", final_summary)\\\\n\\\\n    return final_summary if final_summary else \"Summary not found.\"\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\n\\\\ndef test_summarize_code(\\\\n    self,\\\\n    code: str,\\\\n    *,\\\\n    children_summaries: str | None,\\\\n    dependency_summaries: str | None,\\\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\n) -> str:\\\\n    \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n\\\\n    print(\"Summarizing code...\")\\\\n    prompt: str = self._create_prompt(\\\\n        code, children_summaries, dependency_summaries\\\\n    )\\\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\n        system_message=configs.system_message, user_message=prompt\\\\n    )\\\\n\\\\n    summary: str = f\"\"\"Summary:\\\\\\\\n\\\\n        {messages}\\\\\\\\n \\\\n        \"\"\"\\\\n    print(\"Full Summary:\\\\\\\\n\", summary)\\\\n\\\\n    return summary\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-__init__",
                    "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 169,
                    "end_line_num": 176,
                    "code_content": "\ndef __init__(\n    self, client: OpenAI, *, summary_prompt_list: list[str] = summary_prompt_list\n) -> None:\n    self.client: OpenAI = client\n    self.prompt_list: list[str] = summary_prompt_list\n    self.default_prompt: str = self.prompt_list[0]\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef __init__(\\n    self, client: OpenAI, *, summary_prompt_list: list[str] = summary_prompt_list\\n) -> None:\\n    self.client: OpenAI = client\\n    self.prompt_list: list[str] = summary_prompt_list\\n    self.default_prompt: str = self.prompt_list[0]\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_create_system_message",
                    "docstring": "Creates a system message for chat completion using OpenAi's ChatCompletionSystemMessageParam class.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "ChatCompletionSystemMessageParam",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_create_system_message",
                    "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 176,
                    "end_line_num": 180,
                    "code_content": "\ndef _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\n    \"\"\"Creates a system message for chat completion using OpenAi's ChatCompletionSystemMessageParam class.\"\"\"\n    return ChatCompletionSystemMessageParam(content=content, role=\"system\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\n    \"\"\"Creates a system message for chat completion using OpenAi\\'s ChatCompletionSystemMessageParam class.\"\"\"\\n    return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_create_user_message",
                    "docstring": "Creates a user message for chat completion using OpenAi's ChatCompletionUserMessageParam class.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "ChatCompletionUserMessageParam",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_create_user_message",
                    "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 180,
                    "end_line_num": 184,
                    "code_content": "\ndef _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\n    \"\"\"Creates a user message for chat completion using OpenAi's ChatCompletionUserMessageParam class.\"\"\"\n    return ChatCompletionUserMessageParam(content=content, role=\"user\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\n    \"\"\"Creates a user message for chat completion using OpenAi\\'s ChatCompletionUserMessageParam class.\"\"\"\\n    return ChatCompletionUserMessageParam(content=content, role=\"user\")\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_create_messages_list",
                    "docstring": "Creates a list of messages for chat completion, including both system and user messages.\n\nArgs:\n    system_message (str): The system message content.\n    user_message (str): The user message content.\n\nReturns:\n    list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI's\n        ChatCompletionMessageParam classes.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "list[ChatCompletionMessageParam]",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_create_messages_list",
                    "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 184,
                    "end_line_num": 206,
                    "code_content": "\ndef _create_messages_list(\n    self,\n    system_message: str,\n    user_message: str,\n) -> list[ChatCompletionMessageParam]:\n    \"\"\"\n        Creates a list of messages for chat completion, including both system and user messages.\n\n        Args:\n            system_message (str): The system message content.\n            user_message (str): The user message content.\n\n        Returns:\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI's\n                ChatCompletionMessageParam classes.\n        \"\"\"\n\n    return [\n        self._create_system_message(system_message),\n        self._create_user_message(user_message),\n    ]\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef _create_messages_list(\\n    self,\\n    system_message: str,\\n    user_message: str,\\n) -> list[ChatCompletionMessageParam]:\\n    \"\"\"\\n        Creates a list of messages for chat completion, including both system and user messages.\\n\\n        Args:\\n            system_message (str): The system message content.\\n            user_message (str): The user message content.\\n\\n        Returns:\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\'s\\n                ChatCompletionMessageParam classes.\\n        \"\"\"\\n\\n    return [\\n        self._create_system_message(system_message),\\n        self._create_user_message(user_message),\\n    ]\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_interpolate_prompt",
                    "docstring": "Returns the prompt_template for the code snippet.\n\nArgs:\n    code (str): The code snippet.\n    prompt_template (str | None): Custom prompt to be used. Defaults to None.\n\nReturns:\n    str: The formatted prompt.\n\nNotes:\n    - If prompt_template is not provided, the default prompt will be used.\n    - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\n    - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_interpolate_prompt",
                    "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 206,
                    "end_line_num": 286,
                    "code_content": "\ndef _interpolate_prompt(\n    self,\n    code: str,\n    *,\n    children_summaries: str = \"\",\n    dependency_summaries: str = \"\",\n    prompt_template: str | None = None,\n) -> str:\n    \"\"\"\n        Returns the prompt_template for the code snippet.\n\n        Args:\n            code (str): The code snippet.\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\n\n        Returns:\n            str: The formatted prompt.\n\n        Notes:\n            - If prompt_template is not provided, the default prompt will be used.\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\n        \"\"\"\n\n    if children_summaries and dependency_summaries:\n        if not prompt_template:\n            prompt_template = (\n                COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES\n            )\n        if (\n            \"{code}\" in prompt_template\n            and \"{children_summaries}\" in prompt_template\n            and \"{dependency_summaries}\" in prompt_template\n        ):\n            return prompt_template.format(\n                code=code,\n                children_summaries=children_summaries,\n                dependency_summaries=dependency_summaries,\n            )\n        else:\n            return f\"\"\"\n                    {prompt_template}\\n\\nCODE:\\n{code}\\n\\nCHILDREN_SUMMARIES:\\n{children_summaries}\\n\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\n{dependency_summaries}\n                    \"\"\"\n\n    elif children_summaries:\n        if not prompt_template:\n            prompt_template = COD_SUMMARIZATION_PROMPT_WITH_CHILDREN\n        if (\n            \"{code}\" in prompt_template\n            and \"{children_summaries}\" in prompt_template\n        ):\n            return prompt_template.format(\n                code=code, children_summaries=children_summaries\n            )\n        else:\n            return f\"{prompt_template}\\n\\nCODE:\\n{code}\\n\\nCHILDREN_SUMMARIES:\\n{children_summaries}\"\n\n    elif dependency_summaries:\n        if not prompt_template:\n            prompt_template = COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES\n        if (\n            \"{code}\" in prompt_template\n            and \"{dependency_summaries}\" in prompt_template\n        ):\n            return prompt_template.format(\n                code=code, dependency_summaries=dependency_summaries\n            )\n        else:\n            return f\"\"\"\n                    {prompt_template}\\n\\nCODE:\\n{code}\\n\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\n{dependency_summaries}\n                    \"\"\"\n\n    else:\n        if prompt_template and \"{code}\" in prompt_template:\n            return prompt_template.format(code=code)\n        else:\n            return f\"{prompt_template}\\n\\nCODE:\\n{code}\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef _interpolate_prompt(\\n    self,\\n    code: str,\\n    *,\\n    children_summaries: str = \"\",\\n    dependency_summaries: str = \"\",\\n    prompt_template: str | None = None,\\n) -> str:\\n    \"\"\"\\n        Returns the prompt_template for the code snippet.\\n\\n        Args:\\n            code (str): The code snippet.\\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\\n\\n        Returns:\\n            str: The formatted prompt.\\n\\n        Notes:\\n            - If prompt_template is not provided, the default prompt will be used.\\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\\n        \"\"\"\\n\\n    if children_summaries and dependency_summaries:\\n        if not prompt_template:\\n            prompt_template = (\\n                COD_SUMMARIZATION_PROMPT_WITH_CHILDREN_AND_DEPENDENCIES\\n            )\\n        if (\\n            \"{code}\" in prompt_template\\n            and \"{children_summaries}\" in prompt_template\\n            and \"{dependency_summaries}\" in prompt_template\\n        ):\\n            return prompt_template.format(\\n                code=code,\\n                children_summaries=children_summaries,\\n                dependency_summaries=dependency_summaries,\\n            )\\n        else:\\n            return f\"\"\"\\n                    {prompt_template}\\\\n\\\\nCODE:\\\\n{code}\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n{children_summaries}\\\\n\\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\n{dependency_summaries}\\n                    \"\"\"\\n\\n    elif children_summaries:\\n        if not prompt_template:\\n            prompt_template = COD_SUMMARIZATION_PROMPT_WITH_CHILDREN\\n        if (\\n            \"{code}\" in prompt_template\\n            and \"{children_summaries}\" in prompt_template\\n        ):\\n            return prompt_template.format(\\n                code=code, children_summaries=children_summaries\\n            )\\n        else:\\n            return f\"{prompt_template}\\\\n\\\\nCODE:\\\\n{code}\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n{children_summaries}\"\\n\\n    elif dependency_summaries:\\n        if not prompt_template:\\n            prompt_template = COD_SUMMARIZATION_PROMPT_WITH_DEPENDENCIES\\n        if (\\n            \"{code}\" in prompt_template\\n            and \"{dependency_summaries}\" in prompt_template\\n        ):\\n            return prompt_template.format(\\n                code=code, dependency_summaries=dependency_summaries\\n            )\\n        else:\\n            return f\"\"\"\\n                    {prompt_template}\\\\n\\\\nCODE:\\\\n{code}\\\\n\\n                    LOCAL_IMPORT_AND_DEPENDENCY_SUMMARIES:\\\\n{dependency_summaries}\\n                    \"\"\"\\n\\n    else:\\n        if prompt_template and \"{code}\" in prompt_template:\\n            return prompt_template.format(code=code)\\n        else:\\n            return f\"{prompt_template}\\\\n\\\\nCODE:\\\\n{code}\"\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_create_prompt",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_create_prompt",
                    "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 286,
                    "end_line_num": 313,
                    "code_content": "\ndef _create_prompt(\n    self,\n    code: str,\n    children_summaries: str | None,\n    dependency_summaries: str | None,\n) -> str:\n    if children_summaries and dependency_summaries:\n        prompt: str = self._interpolate_prompt(\n            code,\n            children_summaries=children_summaries,\n            dependency_summaries=dependency_summaries,\n        )\n    elif children_summaries:\n        prompt: str = self._interpolate_prompt(\n            code,\n            children_summaries=children_summaries,\n        )\n    elif dependency_summaries:\n        prompt: str = self._interpolate_prompt(\n            code,\n            dependency_summaries=dependency_summaries,\n        )\n    else:\n        prompt: str = self._interpolate_prompt(code)\n\n    return prompt\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef _create_prompt(\\n    self,\\n    code: str,\\n    children_summaries: str | None,\\n    dependency_summaries: str | None,\\n) -> str:\\n    if children_summaries and dependency_summaries:\\n        prompt: str = self._interpolate_prompt(\\n            code,\\n            children_summaries=children_summaries,\\n            dependency_summaries=dependency_summaries,\\n        )\\n    elif children_summaries:\\n        prompt: str = self._interpolate_prompt(\\n            code,\\n            children_summaries=children_summaries,\\n        )\\n    elif dependency_summaries:\\n        prompt: str = self._interpolate_prompt(\\n            code,\\n            dependency_summaries=dependency_summaries,\\n        )\\n    else:\\n        prompt: str = self._interpolate_prompt(code)\\n\\n    return prompt\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_get_summary",
                    "docstring": "Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\nArgs:\n    messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n    configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\nReturns:\n    str | None: The summary generated by the OpenAI API, or None if no summary is found.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "str | None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_get_summary",
                    "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 313,
                    "end_line_num": 339,
                    "code_content": "\ndef _get_summary(\n    self,\n    messages: list[ChatCompletionMessageParam],\n    *,\n    configs: SummaryCompletionConfigs,\n) -> str | None:\n    \"\"\"\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\n        Args:\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\n        Returns:\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\n        \"\"\"\n\n    response = self.client.chat.completions.create(\n        messages=messages,\n        model=configs.model,\n        max_tokens=configs.max_tokens,\n        stream=configs.stream,\n        temperature=configs.temperature,\n    )\n    return response.choices[0].message.content  # type: ignore # FIXME: Fix type error\n",
                    "important_comments": [
                        {
                            "content": "# type: ignore # FIXME: Fix type error",
                            "comment_types": [
                                "FIXME"
                            ]
                        }
                    ],
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef _get_summary(\\n    self,\\n    messages: list[ChatCompletionMessageParam],\\n    *,\\n    configs: SummaryCompletionConfigs,\\n) -> str | None:\\n    \"\"\"\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\n\\n        Args:\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\n\\n        Returns:\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\n        \"\"\"\\n\\n    response = self.client.chat.completions.create(\\n        messages=messages,\\n        model=configs.model,\\n        max_tokens=configs.max_tokens,\\n        stream=configs.stream,\\n        temperature=configs.temperature,\\n    )\\n    return response.choices[0].message.content  # type: ignore # FIXME: Fix type error\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "summarize_code",
                    "docstring": "Summarizes the provided code snippet using the OpenAI API.\n\nArgs:\n    code (str): The code snippet to summarize.\n    configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n        Defaults to SummaryCompletionConfigs().\n\nReturns:\n    str: The summary of the provided code snippet.\n\nExamples:\n    >>> client = OpenAI()\n    >>> summarizer = Summarizer(client=client)\n    >>> code_example = \"print('Hello, world')\"\n    >>> summary = summarizer.summarize_code(code_example)\n    >>> print(summary)",
                    "decorators": null,
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-summarize_code",
                    "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 339,
                    "end_line_num": 382,
                    "code_content": "\ndef summarize_code(\n    self,\n    code: str,\n    *,\n    children_summaries: str | None,\n    dependency_summaries: str | None,\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n) -> str:\n    \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n    print(\"Summarizing code...\")\n    prompt: str = self._create_prompt(\n        code, children_summaries, dependency_summaries\n    )\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n        system_message=configs.system_message, user_message=prompt\n    )\n\n    final_summary: str | None = None\n    if summary := self._get_summary(messages, configs=configs):\n        print(\"Full Summary:\\n\", summary)\n        final_summary = summary.split(\"FINAL_SUMMARY:\")[-1]\n        print(\"Final Summary:\\n\", final_summary)\n\n    return final_summary if final_summary else \"Summary not found.\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef summarize_code(\\n    self,\\n    code: str,\\n    *,\\n    children_summaries: str | None,\\n    dependency_summaries: str | None,\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n) -> str:\\n    \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n    print(\"Summarizing code...\")\\n    prompt: str = self._create_prompt(\\n        code, children_summaries, dependency_summaries\\n    )\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n        system_message=configs.system_message, user_message=prompt\\n    )\\n\\n    final_summary: str | None = None\\n    if summary := self._get_summary(messages, configs=configs):\\n        print(\"Full Summary:\\\\n\", summary)\\n        final_summary = summary.split(\"FINAL_SUMMARY:\")[-1]\\n        print(\"Final Summary:\\\\n\", final_summary)\\n\\n    return final_summary if final_summary else \"Summary not found.\"\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "test_summarize_code",
                    "docstring": "Summarizes the provided code snippet using the OpenAI API.\n\nArgs:\n    code (str): The code snippet to summarize.\n    configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n        Defaults to SummaryCompletionConfigs().\n\nReturns:\n    str: The summary of the provided code snippet.\n\nExamples:\n    >>> client = OpenAI()\n    >>> summarizer = Summarizer(client=client)\n    >>> code_example = \"print('Hello, world')\"\n    >>> summary = summarizer.summarize_code(code_example)\n    >>> print(summary)",
                    "decorators": null,
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-test_summarize_code",
                    "parent_id": ".:python_parser:ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 382,
                    "end_line_num": 424,
                    "code_content": "\ndef test_summarize_code(\n    self,\n    code: str,\n    *,\n    children_summaries: str | None,\n    dependency_summaries: str | None,\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n) -> str:\n    \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n    print(\"Summarizing code...\")\n    prompt: str = self._create_prompt(\n        code, children_summaries, dependency_summaries\n    )\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n        system_message=configs.system_message, user_message=prompt\n    )\n\n    summary: str = f\"\"\"Summary:\\n\n        {messages}\\n \n        \"\"\"\n    print(\"Full Summary:\\n\", summary)\n\n    return summary\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\n\\ndef test_summarize_code(\\n    self,\\n    code: str,\\n    *,\\n    children_summaries: str | None,\\n    dependency_summaries: str | None,\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n) -> str:\\n    \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n    print(\"Summarizing code...\")\\n    prompt: str = self._create_prompt(\\n        code, children_summaries, dependency_summaries\\n    )\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n        system_message=configs.system_message, user_message=prompt\\n    )\\n\\n    summary: str = f\"\"\"Summary:\\\\n\\n        {messages}\\\\n \\n        \"\"\"\\n    print(\"Full Summary:\\\\n\", summary)\\n\\n    return summary\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        }
    ]
}