{
    "file_path": "./python_parser/ai_services/temp.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": null,
    "id": ".:python_parser:ai_services:temp.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 142,
    "code_content": "code_example = '''\nimport time\nfrom openai import OpenAI\nfrom openai.types.beta.assistant import Assistant\nfrom openai.types.beta.thread import Thread\nfrom openai.types.beta.threads.run import Run\nfrom openai.types.beta.threads.thread_message import ThreadMessage, Content\nfrom openai.types.beta.threads.message_content_text import MessageContentText\nfrom openai.types.beta.assistant_create_params import Tool\nfrom openai._types import NotGiven, NOT_GIVEN\nfrom openai.pagination import SyncCursorPage\n\nfrom prompts.summarization_prompts import (\n    SUMMARIZER_DEFAULT_INSTRUCTIONS,\n    SUMMARIZER_DEFAULT_DESCRIPTION,\n    summary_prompt_list,\n)\n\n\nclass Summarizer:\n    def __init__(\n        self,\n        assistant: Assistant | None = None,\n    ) -> None:\n        self.client = OpenAI()\n        self.prompt_list: list[str] = summary_prompt_list\n        self.default_prompt: str = self.prompt_list[0]\n        self.assistant: Assistant = assistant if assistant else self._create_assistant()\n        self.assistant_id: str = self.assistant.id\n\n    def _create_assistant(\n        self,\n        *,\n        name: str = \"Python Code Summarizer\",\n        model: str = \"gpt-4-1106-preview\",\n        instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\n        description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\n        tools: list[Tool] | NotGiven = NOT_GIVEN,\n    ) -> Assistant:\n        try:\n            return self.client.beta.assistants.create(\n                name=name,\n                model=model,\n                instructions=instructions,\n                description=description,\n                tools=tools,\n            )\n        except Exception as e:\n            raise Exception(f\"Error creating assistant (OpenAI): {e}\")\n\n    def _delete_assistant(self) -> None:\n        try:\n            self.client.beta.assistants.delete(self.assistant_id)\n        except Exception as e:\n            print(f\"Error deleting assistant (OpenAI): {e}\")\n\n    def _create_thread(self) -> Thread:\n        return self.client.beta.threads.create()\n\n    def _delete_thread(self, thread_id: str) -> None:\n        try:\n            self.client.beta.threads.delete(thread_id)\n        except Exception as e:\n            print(f\"Error deleting thread (OpenAI): {e}\")\n\n    def _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\n        \"\"\"\n        Returns the prompt for the code snippet.\n\n        Args:\n            code (str): The code snippet.\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\n\n        Returns:\n            str: The formatted prompt.\n\n        Notes:\n            - If custom_prompt is not provided, the default prompt will be used.\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\n        \"\"\"\n\n        if not custom_prompt:\n            return self.default_prompt.format(code=code)\n\n        else:\n            if \"{code}\" in custom_prompt:\n                return custom_prompt.format(code=code)\n            else:\n                return f\"{custom_prompt}\\n\\n{code}\"\n\n    def _add_message_to_thread(self, thread_id: str, message: str) -> None:\n        try:\n            self.client.beta.threads.messages.create(\n                thread_id, content=message, role=\"user\"\n            )\n        except Exception as e:\n            raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\n\n    def _run_thread(self, thread_id: str) -> Run:\n        try:\n            return self.client.beta.threads.runs.create(\n                thread_id, assistant_id=self.assistant_id\n            )\n        except Exception as e:\n            raise Exception(f\"Error running thread (OpenAI): {e}\")\n\n    def _get_response(self, thread_id: str, run_id: str) -> list[str]:\n        run: Run = self._run_thread(thread_id)\n\n        while True:\n            run_retrieval: Run = self.client.beta.threads.runs.retrieve(\n                thread_id=thread_id, run_id=run.id\n            )\n            print(f\"Run status: {run_retrieval.status}\")\n            if run_retrieval.status == \"completed\":\n                break\n            time.sleep(1)\n\n        messages: SyncCursorPage[\n            ThreadMessage\n        ] = self.client.beta.threads.messages.list(thread_id=thread_id)\n        return [\n            item.text.value\n            for content in messages\n            for item in content.content\n            if type(item) == MessageContentText and content.role == \"assistant\"\n        ]\n\n    def summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\n        try:\n            thread: Thread = self._create_thread()\n            self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\n            summary: list[str] = self._get_response(thread.id, code)\n            self._delete_thread(thread.id)\n            return summary\n        except Exception as e:\n            return f\"An error occurred while summarizing '{file_path}' (OpenAI): {e}\"\n\n    def print_assistants_list(self) -> None:\n        print(f\"Assistants list: {self.client.beta.assistants.list()}\")'''\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nChain of Density Steps:\\n\\n1. **Initial Summary**: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nor purpose of the code. For example, \"This code implements a basic sorting algorithm.\"\\n\\n2. **Identify Missing Key Components**: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, or important variables used in the code.\\n\\n3. **Incorporate Missing Components**: Rewrite the summary to include the identified components, making it more detailed and informative. Ensure \\nthat the length of the summary does not increase. For example, \"This code implements a quicksort algorithm using a pivot selection function and \\npartitioning logic.\"\\n\\n4. **Repeat the Process**: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code without becoming longer.\\n\\n5. **Final Summary**: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code. It should provide a clear and concise overview of the code\\'s content.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon that is not directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code.\\n\\nBelow the code are summaries, `CHILDREN_SUMMARIES`, from the children in the `CODE`. Use these summaries to help you write your summary of the `CODE`.\\n\\nCODE:\\n```Python\\ncode_example = \\'\\'\\'\\nimport time\\nfrom openai import OpenAI\\nfrom openai.types.beta.assistant import Assistant\\nfrom openai.types.beta.thread import Thread\\nfrom openai.types.beta.threads.run import Run\\nfrom openai.types.beta.threads.thread_message import ThreadMessage, Content\\nfrom openai.types.beta.threads.message_content_text import MessageContentText\\nfrom openai.types.beta.assistant_create_params import Tool\\nfrom openai._types import NotGiven, NOT_GIVEN\\nfrom openai.pagination import SyncCursorPage\\n\\nfrom prompts.summarization_prompts import (\\n    SUMMARIZER_DEFAULT_INSTRUCTIONS,\\n    SUMMARIZER_DEFAULT_DESCRIPTION,\\n    summary_prompt_list,\\n)\\n\\n\\nclass Summarizer:\\n    def __init__(\\n        self,\\n        assistant: Assistant | None = None,\\n    ) -> None:\\n        self.client = OpenAI()\\n        self.prompt_list: list[str] = summary_prompt_list\\n        self.default_prompt: str = self.prompt_list[0]\\n        self.assistant: Assistant = assistant if assistant else self._create_assistant()\\n        self.assistant_id: str = self.assistant.id\\n\\n    def _create_assistant(\\n        self,\\n        *,\\n        name: str = \"Python Code Summarizer\",\\n        model: str = \"gpt-4-1106-preview\",\\n        instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\\n        description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\\n        tools: list[Tool] | NotGiven = NOT_GIVEN,\\n    ) -> Assistant:\\n        try:\\n            return self.client.beta.assistants.create(\\n                name=name,\\n                model=model,\\n                instructions=instructions,\\n                description=description,\\n                tools=tools,\\n            )\\n        except Exception as e:\\n            raise Exception(f\"Error creating assistant (OpenAI): {e}\")\\n\\n    def _delete_assistant(self) -> None:\\n        try:\\n            self.client.beta.assistants.delete(self.assistant_id)\\n        except Exception as e:\\n            print(f\"Error deleting assistant (OpenAI): {e}\")\\n\\n    def _create_thread(self) -> Thread:\\n        return self.client.beta.threads.create()\\n\\n    def _delete_thread(self, thread_id: str) -> None:\\n        try:\\n            self.client.beta.threads.delete(thread_id)\\n        except Exception as e:\\n            print(f\"Error deleting thread (OpenAI): {e}\")\\n\\n    def _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\\n        \"\"\"\\n        Returns the prompt for the code snippet.\\n\\n        Args:\\n            code (str): The code snippet.\\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\\n\\n        Returns:\\n            str: The formatted prompt.\\n\\n        Notes:\\n            - If custom_prompt is not provided, the default prompt will be used.\\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\\n        \"\"\"\\n\\n        if not custom_prompt:\\n            return self.default_prompt.format(code=code)\\n\\n        else:\\n            if \"{code}\" in custom_prompt:\\n                return custom_prompt.format(code=code)\\n            else:\\n                return f\"{custom_prompt}\\\\n\\\\n{code}\"\\n\\n    def _add_message_to_thread(self, thread_id: str, message: str) -> None:\\n        try:\\n            self.client.beta.threads.messages.create(\\n                thread_id, content=message, role=\"user\"\\n            )\\n        except Exception as e:\\n            raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\\n\\n    def _run_thread(self, thread_id: str) -> Run:\\n        try:\\n            return self.client.beta.threads.runs.create(\\n                thread_id, assistant_id=self.assistant_id\\n            )\\n        except Exception as e:\\n            raise Exception(f\"Error running thread (OpenAI): {e}\")\\n\\n    def _get_response(self, thread_id: str, run_id: str) -> list[str]:\\n        run: Run = self._run_thread(thread_id)\\n\\n        while True:\\n            run_retrieval: Run = self.client.beta.threads.runs.retrieve(\\n                thread_id=thread_id, run_id=run.id\\n            )\\n            print(f\"Run status: {run_retrieval.status}\")\\n            if run_retrieval.status == \"completed\":\\n                break\\n            time.sleep(1)\\n\\n        messages: SyncCursorPage[\\n            ThreadMessage\\n        ] = self.client.beta.threads.messages.list(thread_id=thread_id)\\n        return [\\n            item.text.value\\n            for content in messages\\n            for item in content.content\\n            if type(item) == MessageContentText and content.role == \"assistant\"\\n        ]\\n\\n    def summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\\n        try:\\n            thread: Thread = self._create_thread()\\n            self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\\n            summary: list[str] = self._get_response(thread.id, code)\\n            self._delete_thread(thread.id)\\n            return summary\\n        except Exception as e:\\n            return f\"An error occurred while summarizing \\'{file_path}\\' (OpenAI): {e}\"\\n\\n    def print_assistants_list(self) -> None:\\n        print(f\"Assistants list: {self.client.beta.assistants.list()}\")\\'\\'\\'\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'None\\\\n\\\\nCODE:\\\\ncode_example = \\\\\\'\\\\\\'\\\\\\'\\\\nimport time\\\\nfrom openai import OpenAI\\\\nfrom openai.types.beta.assistant import Assistant\\\\nfrom openai.types.beta.thread import Thread\\\\nfrom openai.types.beta.threads.run import Run\\\\nfrom openai.types.beta.threads.thread_message import ThreadMessage, Content\\\\nfrom openai.types.beta.threads.message_content_text import MessageContentText\\\\nfrom openai.types.beta.assistant_create_params import Tool\\\\nfrom openai._types import NotGiven, NOT_GIVEN\\\\nfrom openai.pagination import SyncCursorPage\\\\n\\\\nfrom prompts.summarization_prompts import (\\\\n    SUMMARIZER_DEFAULT_INSTRUCTIONS,\\\\n    SUMMARIZER_DEFAULT_DESCRIPTION,\\\\n    summary_prompt_list,\\\\n)\\\\n\\\\n\\\\nclass Summarizer:\\\\n    def __init__(\\\\n        self,\\\\n        assistant: Assistant | None = None,\\\\n    ) -> None:\\\\n        self.client = OpenAI()\\\\n        self.prompt_list: list[str] = summary_prompt_list\\\\n        self.default_prompt: str = self.prompt_list[0]\\\\n        self.assistant: Assistant = assistant if assistant else self._create_assistant()\\\\n        self.assistant_id: str = self.assistant.id\\\\n\\\\n    def _create_assistant(\\\\n        self,\\\\n        *,\\\\n        name: str = \"Python Code Summarizer\",\\\\n        model: str = \"gpt-4-1106-preview\",\\\\n        instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\\\\n        description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\\\\n        tools: list[Tool] | NotGiven = NOT_GIVEN,\\\\n    ) -> Assistant:\\\\n        try:\\\\n            return self.client.beta.assistants.create(\\\\n                name=name,\\\\n                model=model,\\\\n                instructions=instructions,\\\\n                description=description,\\\\n                tools=tools,\\\\n            )\\\\n        except Exception as e:\\\\n            raise Exception(f\"Error creating assistant (OpenAI): {e}\")\\\\n\\\\n    def _delete_assistant(self) -> None:\\\\n        try:\\\\n            self.client.beta.assistants.delete(self.assistant_id)\\\\n        except Exception as e:\\\\n            print(f\"Error deleting assistant (OpenAI): {e}\")\\\\n\\\\n    def _create_thread(self) -> Thread:\\\\n        return self.client.beta.threads.create()\\\\n\\\\n    def _delete_thread(self, thread_id: str) -> None:\\\\n        try:\\\\n            self.client.beta.threads.delete(thread_id)\\\\n        except Exception as e:\\\\n            print(f\"Error deleting thread (OpenAI): {e}\")\\\\n\\\\n    def _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\\\\n        \"\"\"\\\\n        Returns the prompt for the code snippet.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet.\\\\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\\\\n\\\\n        Returns:\\\\n            str: The formatted prompt.\\\\n\\\\n        Notes:\\\\n            - If custom_prompt is not provided, the default prompt will be used.\\\\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\\\\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\\\\n        \"\"\"\\\\n\\\\n        if not custom_prompt:\\\\n            return self.default_prompt.format(code=code)\\\\n\\\\n        else:\\\\n            if \"{code}\" in custom_prompt:\\\\n                return custom_prompt.format(code=code)\\\\n            else:\\\\n                return f\"{custom_prompt}\\\\\\\\n\\\\\\\\n{code}\"\\\\n\\\\n    def _add_message_to_thread(self, thread_id: str, message: str) -> None:\\\\n        try:\\\\n            self.client.beta.threads.messages.create(\\\\n                thread_id, content=message, role=\"user\"\\\\n            )\\\\n        except Exception as e:\\\\n            raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\\\\n\\\\n    def _run_thread(self, thread_id: str) -> Run:\\\\n        try:\\\\n            return self.client.beta.threads.runs.create(\\\\n                thread_id, assistant_id=self.assistant_id\\\\n            )\\\\n        except Exception as e:\\\\n            raise Exception(f\"Error running thread (OpenAI): {e}\")\\\\n\\\\n    def _get_response(self, thread_id: str, run_id: str) -> list[str]:\\\\n        run: Run = self._run_thread(thread_id)\\\\n\\\\n        while True:\\\\n            run_retrieval: Run = self.client.beta.threads.runs.retrieve(\\\\n                thread_id=thread_id, run_id=run.id\\\\n            )\\\\n            print(f\"Run status: {run_retrieval.status}\")\\\\n            if run_retrieval.status == \"completed\":\\\\n                break\\\\n            time.sleep(1)\\\\n\\\\n        messages: SyncCursorPage[\\\\n            ThreadMessage\\\\n        ] = self.client.beta.threads.messages.list(thread_id=thread_id)\\\\n        return [\\\\n            item.text.value\\\\n            for content in messages\\\\n            for item in content.content\\\\n            if type(item) == MessageContentText and content.role == \"assistant\"\\\\n        ]\\\\n\\\\n    def summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\\\\n        try:\\\\n            thread: Thread = self._create_thread()\\\\n            self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\\\\n            summary: list[str] = self._get_response(thread.id, code)\\\\n            self._delete_thread(thread.id)\\\\n            return summary\\\\n        except Exception as e:\\\\n            return f\"An error occurred while summarizing \\\\\\'{file_path}\\\\\\' (OpenAI): {e}\"\\\\n\\\\n    def print_assistants_list(self) -> None:\\\\n        print(f\"Assistants list: {self.client.beta.assistants.list()}\")\\\\\\'\\\\\\'\\\\\\'\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL_SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "variable_assignments": [
                "code_example = '''\nimport time\nfrom openai import OpenAI\nfrom openai.types.beta.assistant import Assistant\nfrom openai.types.beta.thread import Thread\nfrom openai.types.beta.threads.run import Run\nfrom openai.types.beta.threads.thread_message import ThreadMessage, Content\nfrom openai.types.beta.threads.message_content_text import MessageContentText\nfrom openai.types.beta.assistant_create_params import Tool\nfrom openai._types import NotGiven, NOT_GIVEN\nfrom openai.pagination import SyncCursorPage\n\nfrom prompts.summarization_prompts import (\n    SUMMARIZER_DEFAULT_INSTRUCTIONS,\n    SUMMARIZER_DEFAULT_DESCRIPTION,\n    summary_prompt_list,\n)\n\n\nclass Summarizer:\n    def __init__(\n        self,\n        assistant: Assistant | None = None,\n    ) -> None:\n        self.client = OpenAI()\n        self.prompt_list: list[str] = summary_prompt_list\n        self.default_prompt: str = self.prompt_list[0]\n        self.assistant: Assistant = assistant if assistant else self._create_assistant()\n        self.assistant_id: str = self.assistant.id\n\n    def _create_assistant(\n        self,\n        *,\n        name: str = \"Python Code Summarizer\",\n        model: str = \"gpt-4-1106-preview\",\n        instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\n        description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\n        tools: list[Tool] | NotGiven = NOT_GIVEN,\n    ) -> Assistant:\n        try:\n            return self.client.beta.assistants.create(\n                name=name,\n                model=model,\n                instructions=instructions,\n                description=description,\n                tools=tools,\n            )\n        except Exception as e:\n            raise Exception(f\"Error creating assistant (OpenAI): {e}\")\n\n    def _delete_assistant(self) -> None:\n        try:\n            self.client.beta.assistants.delete(self.assistant_id)\n        except Exception as e:\n            print(f\"Error deleting assistant (OpenAI): {e}\")\n\n    def _create_thread(self) -> Thread:\n        return self.client.beta.threads.create()\n\n    def _delete_thread(self, thread_id: str) -> None:\n        try:\n            self.client.beta.threads.delete(thread_id)\n        except Exception as e:\n            print(f\"Error deleting thread (OpenAI): {e}\")\n\n    def _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\n        \"\"\"\n        Returns the prompt for the code snippet.\n\n        Args:\n            code (str): The code snippet.\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\n\n        Returns:\n            str: The formatted prompt.\n\n        Notes:\n            - If custom_prompt is not provided, the default prompt will be used.\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\n        \"\"\"\n\n        if not custom_prompt:\n            return self.default_prompt.format(code=code)\n\n        else:\n            if \"{code}\" in custom_prompt:\n                return custom_prompt.format(code=code)\n            else:\n                return f\"{custom_prompt}\\n\\n{code}\"\n\n    def _add_message_to_thread(self, thread_id: str, message: str) -> None:\n        try:\n            self.client.beta.threads.messages.create(\n                thread_id, content=message, role=\"user\"\n            )\n        except Exception as e:\n            raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\n\n    def _run_thread(self, thread_id: str) -> Run:\n        try:\n            return self.client.beta.threads.runs.create(\n                thread_id, assistant_id=self.assistant_id\n            )\n        except Exception as e:\n            raise Exception(f\"Error running thread (OpenAI): {e}\")\n\n    def _get_response(self, thread_id: str, run_id: str) -> list[str]:\n        run: Run = self._run_thread(thread_id)\n\n        while True:\n            run_retrieval: Run = self.client.beta.threads.runs.retrieve(\n                thread_id=thread_id, run_id=run.id\n            )\n            print(f\"Run status: {run_retrieval.status}\")\n            if run_retrieval.status == \"completed\":\n                break\n            time.sleep(1)\n\n        messages: SyncCursorPage[\n            ThreadMessage\n        ] = self.client.beta.threads.messages.list(thread_id=thread_id)\n        return [\n            item.text.value\n            for content in messages\n            for item in content.content\n            if type(item) == MessageContentText and content.role == \"assistant\"\n        ]\n\n    def summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\n        try:\n            thread: Thread = self._create_thread()\n            self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\n            summary: list[str] = self._get_response(thread.id, code)\n            self._delete_thread(thread.id)\n            return summary\n        except Exception as e:\n            return f\"An error occurred while summarizing '{file_path}' (OpenAI): {e}\"\n\n    def print_assistants_list(self) -> None:\n        print(f\"Assistants list: {self.client.beta.assistants.list()}\")'''"
            ],
            "id": ".:python_parser:ai_services:temp.py__*__MODULE__*__STANDALONE_BLOCK-1",
            "parent_id": ".:python_parser:ai_services:temp.py__*__MODULE",
            "block_type": "STANDALONE_BLOCK",
            "start_line_num": 1,
            "end_line_num": 142,
            "code_content": "code_example = '''\nimport time\nfrom openai import OpenAI\nfrom openai.types.beta.assistant import Assistant\nfrom openai.types.beta.thread import Thread\nfrom openai.types.beta.threads.run import Run\nfrom openai.types.beta.threads.thread_message import ThreadMessage, Content\nfrom openai.types.beta.threads.message_content_text import MessageContentText\nfrom openai.types.beta.assistant_create_params import Tool\nfrom openai._types import NotGiven, NOT_GIVEN\nfrom openai.pagination import SyncCursorPage\n\nfrom prompts.summarization_prompts import (\n    SUMMARIZER_DEFAULT_INSTRUCTIONS,\n    SUMMARIZER_DEFAULT_DESCRIPTION,\n    summary_prompt_list,\n)\n\n\nclass Summarizer:\n    def __init__(\n        self,\n        assistant: Assistant | None = None,\n    ) -> None:\n        self.client = OpenAI()\n        self.prompt_list: list[str] = summary_prompt_list\n        self.default_prompt: str = self.prompt_list[0]\n        self.assistant: Assistant = assistant if assistant else self._create_assistant()\n        self.assistant_id: str = self.assistant.id\n\n    def _create_assistant(\n        self,\n        *,\n        name: str = \"Python Code Summarizer\",\n        model: str = \"gpt-4-1106-preview\",\n        instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\n        description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\n        tools: list[Tool] | NotGiven = NOT_GIVEN,\n    ) -> Assistant:\n        try:\n            return self.client.beta.assistants.create(\n                name=name,\n                model=model,\n                instructions=instructions,\n                description=description,\n                tools=tools,\n            )\n        except Exception as e:\n            raise Exception(f\"Error creating assistant (OpenAI): {e}\")\n\n    def _delete_assistant(self) -> None:\n        try:\n            self.client.beta.assistants.delete(self.assistant_id)\n        except Exception as e:\n            print(f\"Error deleting assistant (OpenAI): {e}\")\n\n    def _create_thread(self) -> Thread:\n        return self.client.beta.threads.create()\n\n    def _delete_thread(self, thread_id: str) -> None:\n        try:\n            self.client.beta.threads.delete(thread_id)\n        except Exception as e:\n            print(f\"Error deleting thread (OpenAI): {e}\")\n\n    def _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\n        \"\"\"\n        Returns the prompt for the code snippet.\n\n        Args:\n            code (str): The code snippet.\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\n\n        Returns:\n            str: The formatted prompt.\n\n        Notes:\n            - If custom_prompt is not provided, the default prompt will be used.\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\n        \"\"\"\n\n        if not custom_prompt:\n            return self.default_prompt.format(code=code)\n\n        else:\n            if \"{code}\" in custom_prompt:\n                return custom_prompt.format(code=code)\n            else:\n                return f\"{custom_prompt}\\n\\n{code}\"\n\n    def _add_message_to_thread(self, thread_id: str, message: str) -> None:\n        try:\n            self.client.beta.threads.messages.create(\n                thread_id, content=message, role=\"user\"\n            )\n        except Exception as e:\n            raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\n\n    def _run_thread(self, thread_id: str) -> Run:\n        try:\n            return self.client.beta.threads.runs.create(\n                thread_id, assistant_id=self.assistant_id\n            )\n        except Exception as e:\n            raise Exception(f\"Error running thread (OpenAI): {e}\")\n\n    def _get_response(self, thread_id: str, run_id: str) -> list[str]:\n        run: Run = self._run_thread(thread_id)\n\n        while True:\n            run_retrieval: Run = self.client.beta.threads.runs.retrieve(\n                thread_id=thread_id, run_id=run.id\n            )\n            print(f\"Run status: {run_retrieval.status}\")\n            if run_retrieval.status == \"completed\":\n                break\n            time.sleep(1)\n\n        messages: SyncCursorPage[\n            ThreadMessage\n        ] = self.client.beta.threads.messages.list(thread_id=thread_id)\n        return [\n            item.text.value\n            for content in messages\n            for item in content.content\n            if type(item) == MessageContentText and content.role == \"assistant\"\n        ]\n\n    def summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\n        try:\n            thread: Thread = self._create_thread()\n            self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\n            summary: list[str] = self._get_response(thread.id, code)\n            self._delete_thread(thread.id)\n            return summary\n        except Exception as e:\n            return f\"An error occurred while summarizing '{file_path}' (OpenAI): {e}\"\n\n    def print_assistants_list(self) -> None:\n        print(f\"Assistants list: {self.client.beta.assistants.list()}\")'''\n",
            "important_comments": null,
            "dependencies": [],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'None\\n\\nCODE:\\ncode_example = \\'\\'\\'\\nimport time\\nfrom openai import OpenAI\\nfrom openai.types.beta.assistant import Assistant\\nfrom openai.types.beta.thread import Thread\\nfrom openai.types.beta.threads.run import Run\\nfrom openai.types.beta.threads.thread_message import ThreadMessage, Content\\nfrom openai.types.beta.threads.message_content_text import MessageContentText\\nfrom openai.types.beta.assistant_create_params import Tool\\nfrom openai._types import NotGiven, NOT_GIVEN\\nfrom openai.pagination import SyncCursorPage\\n\\nfrom prompts.summarization_prompts import (\\n    SUMMARIZER_DEFAULT_INSTRUCTIONS,\\n    SUMMARIZER_DEFAULT_DESCRIPTION,\\n    summary_prompt_list,\\n)\\n\\n\\nclass Summarizer:\\n    def __init__(\\n        self,\\n        assistant: Assistant | None = None,\\n    ) -> None:\\n        self.client = OpenAI()\\n        self.prompt_list: list[str] = summary_prompt_list\\n        self.default_prompt: str = self.prompt_list[0]\\n        self.assistant: Assistant = assistant if assistant else self._create_assistant()\\n        self.assistant_id: str = self.assistant.id\\n\\n    def _create_assistant(\\n        self,\\n        *,\\n        name: str = \"Python Code Summarizer\",\\n        model: str = \"gpt-4-1106-preview\",\\n        instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\\n        description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\\n        tools: list[Tool] | NotGiven = NOT_GIVEN,\\n    ) -> Assistant:\\n        try:\\n            return self.client.beta.assistants.create(\\n                name=name,\\n                model=model,\\n                instructions=instructions,\\n                description=description,\\n                tools=tools,\\n            )\\n        except Exception as e:\\n            raise Exception(f\"Error creating assistant (OpenAI): {e}\")\\n\\n    def _delete_assistant(self) -> None:\\n        try:\\n            self.client.beta.assistants.delete(self.assistant_id)\\n        except Exception as e:\\n            print(f\"Error deleting assistant (OpenAI): {e}\")\\n\\n    def _create_thread(self) -> Thread:\\n        return self.client.beta.threads.create()\\n\\n    def _delete_thread(self, thread_id: str) -> None:\\n        try:\\n            self.client.beta.threads.delete(thread_id)\\n        except Exception as e:\\n            print(f\"Error deleting thread (OpenAI): {e}\")\\n\\n    def _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\\n        \"\"\"\\n        Returns the prompt for the code snippet.\\n\\n        Args:\\n            code (str): The code snippet.\\n            custom_prompt (str | None): Custom prompt to be used. Defaults to None.\\n\\n        Returns:\\n            str: The formatted prompt.\\n\\n        Notes:\\n            - If custom_prompt is not provided, the default prompt will be used.\\n            - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\\n            - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\\n        \"\"\"\\n\\n        if not custom_prompt:\\n            return self.default_prompt.format(code=code)\\n\\n        else:\\n            if \"{code}\" in custom_prompt:\\n                return custom_prompt.format(code=code)\\n            else:\\n                return f\"{custom_prompt}\\\\n\\\\n{code}\"\\n\\n    def _add_message_to_thread(self, thread_id: str, message: str) -> None:\\n        try:\\n            self.client.beta.threads.messages.create(\\n                thread_id, content=message, role=\"user\"\\n            )\\n        except Exception as e:\\n            raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\\n\\n    def _run_thread(self, thread_id: str) -> Run:\\n        try:\\n            return self.client.beta.threads.runs.create(\\n                thread_id, assistant_id=self.assistant_id\\n            )\\n        except Exception as e:\\n            raise Exception(f\"Error running thread (OpenAI): {e}\")\\n\\n    def _get_response(self, thread_id: str, run_id: str) -> list[str]:\\n        run: Run = self._run_thread(thread_id)\\n\\n        while True:\\n            run_retrieval: Run = self.client.beta.threads.runs.retrieve(\\n                thread_id=thread_id, run_id=run.id\\n            )\\n            print(f\"Run status: {run_retrieval.status}\")\\n            if run_retrieval.status == \"completed\":\\n                break\\n            time.sleep(1)\\n\\n        messages: SyncCursorPage[\\n            ThreadMessage\\n        ] = self.client.beta.threads.messages.list(thread_id=thread_id)\\n        return [\\n            item.text.value\\n            for content in messages\\n            for item in content.content\\n            if type(item) == MessageContentText and content.role == \"assistant\"\\n        ]\\n\\n    def summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\\n        try:\\n            thread: Thread = self._create_thread()\\n            self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\\n            summary: list[str] = self._get_response(thread.id, code)\\n            self._delete_thread(thread.id)\\n            return summary\\n        except Exception as e:\\n            return f\"An error occurred while summarizing \\'{file_path}\\' (OpenAI): {e}\"\\n\\n    def print_assistants_list(self) -> None:\\n        print(f\"Assistants list: {self.client.beta.assistants.list()}\")\\'\\'\\'\\n', 'role': 'user'}]\n \n        ",
            "children": null
        }
    ]
}