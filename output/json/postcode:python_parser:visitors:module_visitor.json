{
    "file_path": "postcode/python_parser/visitors/module_visitor.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassIDGenerationStrategy",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-ClassIDGenerationStrategy"
                },
                {
                    "name": "FunctionIDGenerationStrategy",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-FunctionIDGenerationStrategy"
                }
            ],
            "imported_from": "postcode.python_parser.id_generation.id_generation_strategies",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:id_generation:id_generation_strategies.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BuilderFactory",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.builder_factory",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:builder_factory.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModuleModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.module_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "StandaloneBlockModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.standalone_block_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                }
            ],
            "imported_from": "postcode.python_parser.models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:models:enums.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                },
                {
                    "name": "ParameterListModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ParameterListModel"
                }
            ],
            "imported_from": "postcode.python_parser.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BaseVisitor",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:visitors:base_code_block_visitor.py__*__MODULE__*__CLASS-BaseVisitor"
                }
            ],
            "imported_from": "postcode.python_parser.visitors.base_code_block_visitor",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitors:base_code_block_visitor.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "postcode.python_parser.visitors.node_processing.class_def_functions",
                    "as_name": "class_def_functions",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "postcode.python_parser.visitors.node_processing.function_def_functions",
                    "as_name": "function_def_functions",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "postcode.python_parser.visitors.node_processing.module_functions",
                    "as_name": "module_functions",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "postcode.python_parser.visitors.node_processing.standalone_code_block_functions",
                    "as_name": "standalone_code_block_functions",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitors:node_processing:standalone_code_block_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "PositionData",
                    "as_name": null,
                    "local_block_id": "postcode:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData"
                },
                {
                    "name": "NodeAndPositionData",
                    "as_name": null,
                    "local_block_id": "postcode:utilities:processing_context.py__*__MODULE__*__CLASS-NodeAndPositionData"
                }
            ],
            "imported_from": "postcode.utilities.processing_context",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:utilities:processing_context.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "gather_and_set_children_dependencies",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-gather_and_set_children_dependencies"
                }
            ],
            "imported_from": "postcode.python_parser.visitors.node_processing.gather_dependencies",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE"
        }
    ],
    "id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 214,
    "code_content": "import libcst\n\nfrom postcode.python_parser.id_generation.id_generation_strategies import (\n    ClassIDGenerationStrategy,\n    FunctionIDGenerationStrategy,\n)\n\nfrom postcode.python_parser.model_builders.builder_factory import BuilderFactory\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\nfrom postcode.python_parser.model_builders.function_model_builder import (\n    FunctionModelBuilder,\n)\nfrom postcode.python_parser.model_builders.module_model_builder import (\n    ModuleModelBuilder,\n)\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import (\n    StandaloneBlockModelBuilder,\n)\n\nfrom postcode.python_parser.models.enums import BlockType\nfrom postcode.python_parser.models.models import (\n    ImportModel,\n    ParameterListModel,\n)\nfrom postcode.python_parser.visitors.base_code_block_visitor import BaseVisitor\nimport postcode.python_parser.visitors.node_processing.class_def_functions as class_def_functions\nimport postcode.python_parser.visitors.node_processing.function_def_functions as function_def_functions\nimport postcode.python_parser.visitors.node_processing.module_functions as module_functions\nimport postcode.python_parser.visitors.node_processing.standalone_code_block_functions as standalone_code_block_functions\n\nfrom postcode.utilities.processing_context import (\n    NodeAndPositionData,\n    PositionData,\n)\nfrom postcode.python_parser.visitors.node_processing.gather_dependencies import (\n    gather_and_set_children_dependencies,\n)\n\n\nclass ModuleVisitor(BaseVisitor):\n    \"\"\"\n    Visitor class for traversing and building a model of a Python module.\n\n    This class extends BaseVisitor and is used to visit different nodes in a Python module's abstract\n    syntax tree (CST) using the libcst library. It builds a structured model of the module, including\n    imports, classes, and functions.\n\n    Attributes:\n        id (str): The ID of the module to be generated before instantiation.\n        builder (ModuleModelBuilder): The builder used to construct the module model.\n\n    Example:\n        >>> module_builder = ModuleModelBuilder(id=\"module1\", name=\"example_module\")\n        >>> visitor = ModuleVisitor(id=\"module1\", module_builder=module_builder)\n        >>> libcst.parse_module(\"import os\\\\nclass MyClass:\\\\n    pass\").visit(visitor)\n        # This will process the module and build its corresponding model using the provided module builder.\n    \"\"\"\n\n    def __init__(self, id: str, module_builder: ModuleModelBuilder) -> None:\n        super().__init__(id=id)\n        self.builder: ModuleModelBuilder = module_builder\n        self.builder_stack.append(module_builder)\n\n    def visit_Module(self, node: libcst.Module) -> bool | None:\n        \"\"\"\n        Visits the root Module node of the CST.\n\n        Extracts various components of the module such as docstring, header, footer, and code content, and\n        updates the module builder with these details.\n        \"\"\"\n\n        docstring: str | None = node.get_docstring()\n        header: list[str] = module_functions.extract_content_from_empty_lines(\n            node.header\n        )\n        footer: list[str] = module_functions.extract_content_from_empty_lines(\n            node.footer\n        )\n        content: str = node.code if node.code else \"\"\n        position_data: PositionData = self.get_node_position_data(node)\n        (\n            self.builder.set_docstring(docstring)\n            .set_header_content(header)\n            .set_footer_content(footer)\n            .set_code_content(content)\n            .set_start_line_num(position_data.start)\n            .set_end_line_num(position_data.end)\n        )\n        standalone_blocks: list[\n            NodeAndPositionData\n        ] = standalone_code_block_functions.gather_standalone_lines(node.body, self)\n        standalone_block_models: list[\n            StandaloneBlockModelBuilder\n        ] = standalone_code_block_functions.process_standalone_blocks(\n            code_blocks=standalone_blocks, parent_id=self.id\n        )\n        for standalone_block_model in standalone_block_models:\n            self.builder.add_child(standalone_block_model)\n\n    def visit_Import(self, node: libcst.Import) -> None:\n        \"\"\"\n        Visits an Import node in the CST.\n\n        Processes the import statement and updates the module builder with the import model.\n        \"\"\"\n\n        import_model: ImportModel = module_functions.process_import(node)\n        self.builder.add_import(import_model)\n\n    def visit_ImportFrom(self, node: libcst.ImportFrom) -> None:\n        \"\"\"\n        Visits an ImportFrom node in the CST.\n\n        Processes the 'from ... import ...' statement and updates the module builder with the import model.\n        \"\"\"\n\n        import_model: ImportModel = module_functions.process_import_from(node)\n        self.builder.add_import(import_model)\n\n    def visit_ClassDef(self, node: libcst.ClassDef) -> None:\n        \"\"\"\n        Visits a ClassDef node in the CST.\n\n        Initiates the process of building a class model from the class definition.\n        \"\"\"\n\n        parent_id: str = self.builder_stack[-1].id\n        class_id: str = ClassIDGenerationStrategy.generate_id(\n            parent_id=parent_id, class_name=node.name.value\n        )\n\n        class_builder: ClassModelBuilder = BuilderFactory.create_builder_instance(\n            block_type=BlockType.CLASS,\n            id=class_id,\n            name=node.name.value,\n            parent_id=parent_id,\n        )\n\n        builder = self.builder_stack[-1]\n        builder.add_child(class_builder)\n        self.builder_stack.append(class_builder)\n\n        position_data: PositionData = self.get_node_position_data(node)\n        class_def_functions.process_class_def(node, position_data, class_builder)\n\n    def leave_ClassDef(self, original_node: libcst.ClassDef) -> None:\n        \"\"\"\n        Leaves a ClassDef node in the CST.\n\n        Finalizes the class model building process by popping the current builder from the stack.\n        \"\"\"\n\n        self.builder_stack.pop()\n\n    def visit_FunctionDef(self, node: libcst.FunctionDef) -> None:\n        \"\"\"\n        Visits a FunctionDef node in the CST.\n\n        Initiates the process of building a function model from the function definition.\n        \"\"\"\n\n        parent_id: str = self.builder_stack[-1].id\n        func_id: str = FunctionIDGenerationStrategy.generate_id(\n            parent_id=parent_id, function_name=node.name.value\n        )\n\n        func_builder: FunctionModelBuilder = BuilderFactory.create_builder_instance(\n            block_type=BlockType.FUNCTION,\n            id=func_id,\n            name=node.name.value,\n            parent_id=parent_id,\n        )\n        builder = self.builder_stack[-1]\n        builder.add_child(func_builder)\n        self.builder_stack.append(func_builder)\n\n        position_data: PositionData = self.get_node_position_data(node)\n        function_def_functions.process_func_def(\n            func_id, node, position_data, func_builder\n        )\n\n    def visit_Parameters(self, node: libcst.Parameters) -> None:\n        \"\"\"\n        Visits a Parameters node in the CST.\n\n        Processes the parameters of a function and updates the current function model builder with these parameters.\n        \"\"\"\n\n        builder = self.builder_stack[-1]\n        parameter_list: ParameterListModel | None = (\n            function_def_functions.process_parameters(node)\n        )\n\n        if isinstance(builder, FunctionModelBuilder):\n            builder.set_parameters_list(parameter_list)\n\n    def leave_FunctionDef(self, original_node: libcst.FunctionDef) -> None:\n        \"\"\"\n        Leaves a FunctionDef node in the CST.\n\n        Finalizes the function model building process by popping the current builder from the stack.\n        \"\"\"\n\n        self.builder_stack.pop()\n\n    def leave_Module(self, original_node: libcst.Module) -> None:\n        \"\"\"\n        Leaves the root Module node in the CST.\n\n        Finalizes the module model building process by setting dependencies for children of the module.\n        \"\"\"\n\n        gather_and_set_children_dependencies(self.builder)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nimport libcst\\n\\nfrom postcode.python_parser.id_generation.id_generation_strategies import (\\n    ClassIDGenerationStrategy,\\n    FunctionIDGenerationStrategy,\\n)\\n\\nfrom postcode.python_parser.model_builders.builder_factory import BuilderFactory\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\nfrom postcode.python_parser.model_builders.function_model_builder import (\\n    FunctionModelBuilder,\\n)\\nfrom postcode.python_parser.model_builders.module_model_builder import (\\n    ModuleModelBuilder,\\n)\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import (\\n    StandaloneBlockModelBuilder,\\n)\\n\\nfrom postcode.python_parser.models.enums import BlockType\\nfrom postcode.python_parser.models.models import (\\n    ImportModel,\\n    ParameterListModel,\\n)\\nfrom postcode.python_parser.visitors.base_code_block_visitor import BaseVisitor\\nimport postcode.python_parser.visitors.node_processing.class_def_functions as class_def_functions\\nimport postcode.python_parser.visitors.node_processing.function_def_functions as function_def_functions\\nimport postcode.python_parser.visitors.node_processing.module_functions as module_functions\\nimport postcode.python_parser.visitors.node_processing.standalone_code_block_functions as standalone_code_block_functions\\n\\nfrom postcode.utilities.processing_context import (\\n    NodeAndPositionData,\\n    PositionData,\\n)\\nfrom postcode.python_parser.visitors.node_processing.gather_dependencies import (\\n    gather_and_set_children_dependencies,\\n)\\n\\n\\nclass ModuleVisitor(BaseVisitor):\\n    \"\"\"\\n    Visitor class for traversing and building a model of a Python module.\\n\\n    This class extends BaseVisitor and is used to visit different nodes in a Python module\\'s abstract\\n    syntax tree (CST) using the libcst library. It builds a structured model of the module, including\\n    imports, classes, and functions.\\n\\n    Attributes:\\n        id (str): The ID of the module to be generated before instantiation.\\n        builder (ModuleModelBuilder): The builder used to construct the module model.\\n\\n    Example:\\n        >>> module_builder = ModuleModelBuilder(id=\"module1\", name=\"example_module\")\\n        >>> visitor = ModuleVisitor(id=\"module1\", module_builder=module_builder)\\n        >>> libcst.parse_module(\"import os\\\\\\\\nclass MyClass:\\\\\\\\n    pass\").visit(visitor)\\n        # This will process the module and build its corresponding model using the provided module builder.\\n    \"\"\"\\n\\n    def __init__(self, id: str, module_builder: ModuleModelBuilder) -> None:\\n        super().__init__(id=id)\\n        self.builder: ModuleModelBuilder = module_builder\\n        self.builder_stack.append(module_builder)\\n\\n    def visit_Module(self, node: libcst.Module) -> bool | None:\\n        \"\"\"\\n        Visits the root Module node of the CST.\\n\\n        Extracts various components of the module such as docstring, header, footer, and code content, and\\n        updates the module builder with these details.\\n        \"\"\"\\n\\n        docstring: str | None = node.get_docstring()\\n        header: list[str] = module_functions.extract_content_from_empty_lines(\\n            node.header\\n        )\\n        footer: list[str] = module_functions.extract_content_from_empty_lines(\\n            node.footer\\n        )\\n        content: str = node.code if node.code else \"\"\\n        position_data: PositionData = self.get_node_position_data(node)\\n        (\\n            self.builder.set_docstring(docstring)\\n            .set_header_content(header)\\n            .set_footer_content(footer)\\n            .set_code_content(content)\\n            .set_start_line_num(position_data.start)\\n            .set_end_line_num(position_data.end)\\n        )\\n        standalone_blocks: list[\\n            NodeAndPositionData\\n        ] = standalone_code_block_functions.gather_standalone_lines(node.body, self)\\n        standalone_block_models: list[\\n            StandaloneBlockModelBuilder\\n        ] = standalone_code_block_functions.process_standalone_blocks(\\n            code_blocks=standalone_blocks, parent_id=self.id\\n        )\\n        for standalone_block_model in standalone_block_models:\\n            self.builder.add_child(standalone_block_model)\\n\\n    def visit_Import(self, node: libcst.Import) -> None:\\n        \"\"\"\\n        Visits an Import node in the CST.\\n\\n        Processes the import statement and updates the module builder with the import model.\\n        \"\"\"\\n\\n        import_model: ImportModel = module_functions.process_import(node)\\n        self.builder.add_import(import_model)\\n\\n    def visit_ImportFrom(self, node: libcst.ImportFrom) -> None:\\n        \"\"\"\\n        Visits an ImportFrom node in the CST.\\n\\n        Processes the \\'from ... import ...\\' statement and updates the module builder with the import model.\\n        \"\"\"\\n\\n        import_model: ImportModel = module_functions.process_import_from(node)\\n        self.builder.add_import(import_model)\\n\\n    def visit_ClassDef(self, node: libcst.ClassDef) -> None:\\n        \"\"\"\\n        Visits a ClassDef node in the CST.\\n\\n        Initiates the process of building a class model from the class definition.\\n        \"\"\"\\n\\n        parent_id: str = self.builder_stack[-1].id\\n        class_id: str = ClassIDGenerationStrategy.generate_id(\\n            parent_id=parent_id, class_name=node.name.value\\n        )\\n\\n        class_builder: ClassModelBuilder = BuilderFactory.create_builder_instance(\\n            block_type=BlockType.CLASS,\\n            id=class_id,\\n            name=node.name.value,\\n            parent_id=parent_id,\\n        )\\n\\n        builder = self.builder_stack[-1]\\n        builder.add_child(class_builder)\\n        self.builder_stack.append(class_builder)\\n\\n        position_data: PositionData = self.get_node_position_data(node)\\n        class_def_functions.process_class_def(node, position_data, class_builder)\\n\\n    def leave_ClassDef(self, original_node: libcst.ClassDef) -> None:\\n        \"\"\"\\n        Leaves a ClassDef node in the CST.\\n\\n        Finalizes the class model building process by popping the current builder from the stack.\\n        \"\"\"\\n\\n        self.builder_stack.pop()\\n\\n    def visit_FunctionDef(self, node: libcst.FunctionDef) -> None:\\n        \"\"\"\\n        Visits a FunctionDef node in the CST.\\n\\n        Initiates the process of building a function model from the function definition.\\n        \"\"\"\\n\\n        parent_id: str = self.builder_stack[-1].id\\n        func_id: str = FunctionIDGenerationStrategy.generate_id(\\n            parent_id=parent_id, function_name=node.name.value\\n        )\\n\\n        func_builder: FunctionModelBuilder = BuilderFactory.create_builder_instance(\\n            block_type=BlockType.FUNCTION,\\n            id=func_id,\\n            name=node.name.value,\\n            parent_id=parent_id,\\n        )\\n        builder = self.builder_stack[-1]\\n        builder.add_child(func_builder)\\n        self.builder_stack.append(func_builder)\\n\\n        position_data: PositionData = self.get_node_position_data(node)\\n        function_def_functions.process_func_def(\\n            func_id, node, position_data, func_builder\\n        )\\n\\n    def visit_Parameters(self, node: libcst.Parameters) -> None:\\n        \"\"\"\\n        Visits a Parameters node in the CST.\\n\\n        Processes the parameters of a function and updates the current function model builder with these parameters.\\n        \"\"\"\\n\\n        builder = self.builder_stack[-1]\\n        parameter_list: ParameterListModel | None = (\\n            function_def_functions.process_parameters(node)\\n        )\\n\\n        if isinstance(builder, FunctionModelBuilder):\\n            builder.set_parameters_list(parameter_list)\\n\\n    def leave_FunctionDef(self, original_node: libcst.FunctionDef) -> None:\\n        \"\"\"\\n        Leaves a FunctionDef node in the CST.\\n\\n        Finalizes the function model building process by popping the current builder from the stack.\\n        \"\"\"\\n\\n        self.builder_stack.pop()\\n\\n    def leave_Module(self, original_node: libcst.Module) -> None:\\n        \"\"\"\\n        Leaves the root Module node in the CST.\\n\\n        Finalizes the module model building process by setting dependencies for children of the module.\\n        \"\"\"\\n\\n        gather_and_set_children_dependencies(self.builder)\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass ModuleVisitor(BaseVisitor):\\\\n    \"\"\"\\\\n    Visitor class for traversing and building a model of a Python module.\\\\n\\\\n    This class extends BaseVisitor and is used to visit different nodes in a Python module\\\\\\'s abstract\\\\n    syntax tree (CST) using the libcst library. It builds a structured model of the module, including\\\\n    imports, classes, and functions.\\\\n\\\\n    Attributes:\\\\n        id (str): The ID of the module to be generated before instantiation.\\\\n        builder (ModuleModelBuilder): The builder used to construct the module model.\\\\n\\\\n    Example:\\\\n        >>> module_builder = ModuleModelBuilder(id=\"module1\", name=\"example_module\")\\\\n        >>> visitor = ModuleVisitor(id=\"module1\", module_builder=module_builder)\\\\n        >>> libcst.parse_module(\"import os\\\\\\\\\\\\\\\\nclass MyClass:\\\\\\\\\\\\\\\\n    pass\").visit(visitor)\\\\n        # This will process the module and build its corresponding model using the provided module builder.\\\\n    \"\"\"\\\\n\\\\n    def __init__(self, id: str, module_builder: ModuleModelBuilder) -> None:\\\\n        super().__init__(id=id)\\\\n        self.builder: ModuleModelBuilder = module_builder\\\\n        self.builder_stack.append(module_builder)\\\\n\\\\n    def visit_Module(self, node: libcst.Module) -> bool | None:\\\\n        \"\"\"\\\\n        Visits the root Module node of the CST.\\\\n\\\\n        Extracts various components of the module such as docstring, header, footer, and code content, and\\\\n        updates the module builder with these details.\\\\n        \"\"\"\\\\n\\\\n        docstring: str | None = node.get_docstring()\\\\n        header: list[str] = module_functions.extract_content_from_empty_lines(\\\\n            node.header\\\\n        )\\\\n        footer: list[str] = module_functions.extract_content_from_empty_lines(\\\\n            node.footer\\\\n        )\\\\n        content: str = node.code if node.code else \"\"\\\\n        position_data: PositionData = self.get_node_position_data(node)\\\\n        (\\\\n            self.builder.set_docstring(docstring)\\\\n            .set_header_content(header)\\\\n            .set_footer_content(footer)\\\\n            .set_code_content(content)\\\\n            .set_start_line_num(position_data.start)\\\\n            .set_end_line_num(position_data.end)\\\\n        )\\\\n        standalone_blocks: list[\\\\n            NodeAndPositionData\\\\n        ] = standalone_code_block_functions.gather_standalone_lines(node.body, self)\\\\n        standalone_block_models: list[\\\\n            StandaloneBlockModelBuilder\\\\n        ] = standalone_code_block_functions.process_standalone_blocks(\\\\n            code_blocks=standalone_blocks, parent_id=self.id\\\\n        )\\\\n        for standalone_block_model in standalone_block_models:\\\\n            self.builder.add_child(standalone_block_model)\\\\n\\\\n    def visit_Import(self, node: libcst.Import) -> None:\\\\n        \"\"\"\\\\n        Visits an Import node in the CST.\\\\n\\\\n        Processes the import statement and updates the module builder with the import model.\\\\n        \"\"\"\\\\n\\\\n        import_model: ImportModel = module_functions.process_import(node)\\\\n        self.builder.add_import(import_model)\\\\n\\\\n    def visit_ImportFrom(self, node: libcst.ImportFrom) -> None:\\\\n        \"\"\"\\\\n        Visits an ImportFrom node in the CST.\\\\n\\\\n        Processes the \\\\\\'from ... import ...\\\\\\' statement and updates the module builder with the import model.\\\\n        \"\"\"\\\\n\\\\n        import_model: ImportModel = module_functions.process_import_from(node)\\\\n        self.builder.add_import(import_model)\\\\n\\\\n    def visit_ClassDef(self, node: libcst.ClassDef) -> None:\\\\n        \"\"\"\\\\n        Visits a ClassDef node in the CST.\\\\n\\\\n        Initiates the process of building a class model from the class definition.\\\\n        \"\"\"\\\\n\\\\n        parent_id: str = self.builder_stack[-1].id\\\\n        class_id: str = ClassIDGenerationStrategy.generate_id(\\\\n            parent_id=parent_id, class_name=node.name.value\\\\n        )\\\\n\\\\n        class_builder: ClassModelBuilder = BuilderFactory.create_builder_instance(\\\\n            block_type=BlockType.CLASS,\\\\n            id=class_id,\\\\n            name=node.name.value,\\\\n            parent_id=parent_id,\\\\n        )\\\\n\\\\n        builder = self.builder_stack[-1]\\\\n        builder.add_child(class_builder)\\\\n        self.builder_stack.append(class_builder)\\\\n\\\\n        position_data: PositionData = self.get_node_position_data(node)\\\\n        class_def_functions.process_class_def(node, position_data, class_builder)\\\\n\\\\n    def leave_ClassDef(self, original_node: libcst.ClassDef) -> None:\\\\n        \"\"\"\\\\n        Leaves a ClassDef node in the CST.\\\\n\\\\n        Finalizes the class model building process by popping the current builder from the stack.\\\\n        \"\"\"\\\\n\\\\n        self.builder_stack.pop()\\\\n\\\\n    def visit_FunctionDef(self, node: libcst.FunctionDef) -> None:\\\\n        \"\"\"\\\\n        Visits a FunctionDef node in the CST.\\\\n\\\\n        Initiates the process of building a function model from the function definition.\\\\n        \"\"\"\\\\n\\\\n        parent_id: str = self.builder_stack[-1].id\\\\n        func_id: str = FunctionIDGenerationStrategy.generate_id(\\\\n            parent_id=parent_id, function_name=node.name.value\\\\n        )\\\\n\\\\n        func_builder: FunctionModelBuilder = BuilderFactory.create_builder_instance(\\\\n            block_type=BlockType.FUNCTION,\\\\n            id=func_id,\\\\n            name=node.name.value,\\\\n            parent_id=parent_id,\\\\n        )\\\\n        builder = self.builder_stack[-1]\\\\n        builder.add_child(func_builder)\\\\n        self.builder_stack.append(func_builder)\\\\n\\\\n        position_data: PositionData = self.get_node_position_data(node)\\\\n        function_def_functions.process_func_def(\\\\n            func_id, node, position_data, func_builder\\\\n        )\\\\n\\\\n    def visit_Parameters(self, node: libcst.Parameters) -> None:\\\\n        \"\"\"\\\\n        Visits a Parameters node in the CST.\\\\n\\\\n        Processes the parameters of a function and updates the current function model builder with these parameters.\\\\n        \"\"\"\\\\n\\\\n        builder = self.builder_stack[-1]\\\\n        parameter_list: ParameterListModel | None = (\\\\n            function_def_functions.process_parameters(node)\\\\n        )\\\\n\\\\n        if isinstance(builder, FunctionModelBuilder):\\\\n            builder.set_parameters_list(parameter_list)\\\\n\\\\n    def leave_FunctionDef(self, original_node: libcst.FunctionDef) -> None:\\\\n        \"\"\"\\\\n        Leaves a FunctionDef node in the CST.\\\\n\\\\n        Finalizes the function model building process by popping the current builder from the stack.\\\\n        \"\"\"\\\\n\\\\n        self.builder_stack.pop()\\\\n\\\\n    def leave_Module(self, original_node: libcst.Module) -> None:\\\\n        \"\"\"\\\\n        Leaves the root Module node in the CST.\\\\n\\\\n        Finalizes the module model building process by setting dependencies for children of the module.\\\\n        \"\"\"\\\\n\\\\n        gather_and_set_children_dependencies(self.builder)\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef __init__(self, id: str, module_builder: ModuleModelBuilder) -> None:\\\\\\\\n    super().__init__(id=id)\\\\\\\\n    self.builder: ModuleModelBuilder = module_builder\\\\\\\\n    self.builder_stack.append(module_builder)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef visit_Module(self, node: libcst.Module) -> bool | None:\\\\\\\\n    \"\"\"\\\\\\\\n        Visits the root Module node of the CST.\\\\\\\\n\\\\\\\\n        Extracts various components of the module such as docstring, header, footer, and code content, and\\\\\\\\n        updates the module builder with these details.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    docstring: str | None = node.get_docstring()\\\\\\\\n    header: list[str] = module_functions.extract_content_from_empty_lines(\\\\\\\\n        node.header\\\\\\\\n    )\\\\\\\\n    footer: list[str] = module_functions.extract_content_from_empty_lines(\\\\\\\\n        node.footer\\\\\\\\n    )\\\\\\\\n    content: str = node.code if node.code else \"\"\\\\\\\\n    position_data: PositionData = self.get_node_position_data(node)\\\\\\\\n    (\\\\\\\\n        self.builder.set_docstring(docstring)\\\\\\\\n        .set_header_content(header)\\\\\\\\n        .set_footer_content(footer)\\\\\\\\n        .set_code_content(content)\\\\\\\\n        .set_start_line_num(position_data.start)\\\\\\\\n        .set_end_line_num(position_data.end)\\\\\\\\n    )\\\\\\\\n    standalone_blocks: list[\\\\\\\\n        NodeAndPositionData\\\\\\\\n    ] = standalone_code_block_functions.gather_standalone_lines(node.body, self)\\\\\\\\n    standalone_block_models: list[\\\\\\\\n        StandaloneBlockModelBuilder\\\\\\\\n    ] = standalone_code_block_functions.process_standalone_blocks(\\\\\\\\n        code_blocks=standalone_blocks, parent_id=self.id\\\\\\\\n    )\\\\\\\\n    for standalone_block_model in standalone_block_models:\\\\\\\\n        self.builder.add_child(standalone_block_model)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef visit_Import(self, node: libcst.Import) -> None:\\\\\\\\n    \"\"\"\\\\\\\\n        Visits an Import node in the CST.\\\\\\\\n\\\\\\\\n        Processes the import statement and updates the module builder with the import model.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    import_model: ImportModel = module_functions.process_import(node)\\\\\\\\n    self.builder.add_import(import_model)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef visit_ImportFrom(self, node: libcst.ImportFrom) -> None:\\\\\\\\n    \"\"\"\\\\\\\\n        Visits an ImportFrom node in the CST.\\\\\\\\n\\\\\\\\n        Processes the \\\\\\\\\\\\\\'from ... import ...\\\\\\\\\\\\\\' statement and updates the module builder with the import model.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    import_model: ImportModel = module_functions.process_import_from(node)\\\\\\\\n    self.builder.add_import(import_model)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef visit_ClassDef(self, node: libcst.ClassDef) -> None:\\\\\\\\n    \"\"\"\\\\\\\\n        Visits a ClassDef node in the CST.\\\\\\\\n\\\\\\\\n        Initiates the process of building a class model from the class definition.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    parent_id: str = self.builder_stack[-1].id\\\\\\\\n    class_id: str = ClassIDGenerationStrategy.generate_id(\\\\\\\\n        parent_id=parent_id, class_name=node.name.value\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    class_builder: ClassModelBuilder = BuilderFactory.create_builder_instance(\\\\\\\\n        block_type=BlockType.CLASS,\\\\\\\\n        id=class_id,\\\\\\\\n        name=node.name.value,\\\\\\\\n        parent_id=parent_id,\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    builder = self.builder_stack[-1]\\\\\\\\n    builder.add_child(class_builder)\\\\\\\\n    self.builder_stack.append(class_builder)\\\\\\\\n\\\\\\\\n    position_data: PositionData = self.get_node_position_data(node)\\\\\\\\n    class_def_functions.process_class_def(node, position_data, class_builder)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef leave_ClassDef(self, original_node: libcst.ClassDef) -> None:\\\\\\\\n    \"\"\"\\\\\\\\n        Leaves a ClassDef node in the CST.\\\\\\\\n\\\\\\\\n        Finalizes the class model building process by popping the current builder from the stack.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    self.builder_stack.pop()\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef visit_FunctionDef(self, node: libcst.FunctionDef) -> None:\\\\\\\\n    \"\"\"\\\\\\\\n        Visits a FunctionDef node in the CST.\\\\\\\\n\\\\\\\\n        Initiates the process of building a function model from the function definition.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    parent_id: str = self.builder_stack[-1].id\\\\\\\\n    func_id: str = FunctionIDGenerationStrategy.generate_id(\\\\\\\\n        parent_id=parent_id, function_name=node.name.value\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    func_builder: FunctionModelBuilder = BuilderFactory.create_builder_instance(\\\\\\\\n        block_type=BlockType.FUNCTION,\\\\\\\\n        id=func_id,\\\\\\\\n        name=node.name.value,\\\\\\\\n        parent_id=parent_id,\\\\\\\\n    )\\\\\\\\n    builder = self.builder_stack[-1]\\\\\\\\n    builder.add_child(func_builder)\\\\\\\\n    self.builder_stack.append(func_builder)\\\\\\\\n\\\\\\\\n    position_data: PositionData = self.get_node_position_data(node)\\\\\\\\n    function_def_functions.process_func_def(\\\\\\\\n        func_id, node, position_data, func_builder\\\\\\\\n    )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef visit_Parameters(self, node: libcst.Parameters) -> None:\\\\\\\\n    \"\"\"\\\\\\\\n        Visits a Parameters node in the CST.\\\\\\\\n\\\\\\\\n        Processes the parameters of a function and updates the current function model builder with these parameters.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    builder = self.builder_stack[-1]\\\\\\\\n    parameter_list: ParameterListModel | None = (\\\\\\\\n        function_def_functions.process_parameters(node)\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    if isinstance(builder, FunctionModelBuilder):\\\\\\\\n        builder.set_parameters_list(parameter_list)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef leave_FunctionDef(self, original_node: libcst.FunctionDef) -> None:\\\\\\\\n    \"\"\"\\\\\\\\n        Leaves a FunctionDef node in the CST.\\\\\\\\n\\\\\\\\n        Finalizes the function model building process by popping the current builder from the stack.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    self.builder_stack.pop()\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef leave_Module(self, original_node: libcst.Module) -> None:\\\\\\\\n    \"\"\"\\\\\\\\n        Leaves the root Module node in the CST.\\\\\\\\n\\\\\\\\n        Finalizes the module model building process by setting dependencies for children of the module.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    gather_and_set_children_dependencies(self.builder)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.utilities.processing_context import NodeAndPositionData, PositionData\\\\nfrom postcode.utilities.processing_context import NodeAndPositionData, PositionData\\\\nimport libcst\\\\nfrom postcode.python_parser.id_generation.id_generation_strategies import ClassIDGenerationStrategy, FunctionIDGenerationStrategy\\\\nfrom postcode.python_parser.id_generation.id_generation_strategies import ClassIDGenerationStrategy, FunctionIDGenerationStrategy\\\\nfrom postcode.python_parser.model_builders.builder_factory import BuilderFactory\\\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\\\nfrom postcode.python_parser.models.enums import BlockType\\\\nfrom postcode.python_parser.models.models import ImportModel, ParameterListModel\\\\nfrom postcode.python_parser.models.models import ImportModel, ParameterListModel\\\\nfrom postcode.python_parser.visitors.base_code_block_visitor import BaseVisitor\\\\nimport postcode.python_parser.visitors.node_processing.class_def_functions as class_def_functions\\\\nimport postcode.python_parser.visitors.node_processing.function_def_functions as function_def_functions\\\\nimport postcode.python_parser.visitors.node_processing.module_functions as module_functions\\\\nimport postcode.python_parser.visitors.node_processing.standalone_code_block_functions as standalone_code_block_functions\\\\nfrom postcode.python_parser.visitors.node_processing.gather_dependencies import gather_and_set_children_dependencies\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport libcst\\nfrom postcode.python_parser.id_generation.id_generation_strategies import ClassIDGenerationStrategy, FunctionIDGenerationStrategy\\nfrom postcode.python_parser.model_builders.builder_factory import BuilderFactory\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\nfrom postcode.python_parser.models.enums import BlockType\\nfrom postcode.python_parser.models.models import ImportModel, ParameterListModel\\nfrom postcode.python_parser.visitors.base_code_block_visitor import BaseVisitor\\nimport postcode.python_parser.visitors.node_processing.class_def_functions as class_def_functions\\nimport postcode.python_parser.visitors.node_processing.function_def_functions as function_def_functions\\nimport postcode.python_parser.visitors.node_processing.module_functions as module_functions\\nimport postcode.python_parser.visitors.node_processing.standalone_code_block_functions as standalone_code_block_functions\\nfrom postcode.utilities.processing_context import PositionData, NodeAndPositionData\\nfrom postcode.python_parser.visitors.node_processing.gather_dependencies import gather_and_set_children_dependencies\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "class_name": "ModuleVisitor",
            "decorators": null,
            "bases": [
                "BaseVisitor"
            ],
            "docstring": "Visitor class for traversing and building a model of a Python module.\n\nThis class extends BaseVisitor and is used to visit different nodes in a Python module's abstract\nsyntax tree (CST) using the libcst library. It builds a structured model of the module, including\nimports, classes, and functions.\n\nAttributes:\n    id (str): The ID of the module to be generated before instantiation.\n    builder (ModuleModelBuilder): The builder used to construct the module model.\n\nExample:\n    >>> module_builder = ModuleModelBuilder(id=\"module1\", name=\"example_module\")\n    >>> visitor = ModuleVisitor(id=\"module1\", module_builder=module_builder)\n    >>> libcst.parse_module(\"import os\\nclass MyClass:\\n    pass\").visit(visitor)\n    # This will process the module and build its corresponding model using the provided module builder.",
            "attributes": null,
            "keywords": null,
            "id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor",
            "parent_id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 38,
            "end_line_num": 214,
            "code_content": "\n\nclass ModuleVisitor(BaseVisitor):\n    \"\"\"\n    Visitor class for traversing and building a model of a Python module.\n\n    This class extends BaseVisitor and is used to visit different nodes in a Python module's abstract\n    syntax tree (CST) using the libcst library. It builds a structured model of the module, including\n    imports, classes, and functions.\n\n    Attributes:\n        id (str): The ID of the module to be generated before instantiation.\n        builder (ModuleModelBuilder): The builder used to construct the module model.\n\n    Example:\n        >>> module_builder = ModuleModelBuilder(id=\"module1\", name=\"example_module\")\n        >>> visitor = ModuleVisitor(id=\"module1\", module_builder=module_builder)\n        >>> libcst.parse_module(\"import os\\\\nclass MyClass:\\\\n    pass\").visit(visitor)\n        # This will process the module and build its corresponding model using the provided module builder.\n    \"\"\"\n\n    def __init__(self, id: str, module_builder: ModuleModelBuilder) -> None:\n        super().__init__(id=id)\n        self.builder: ModuleModelBuilder = module_builder\n        self.builder_stack.append(module_builder)\n\n    def visit_Module(self, node: libcst.Module) -> bool | None:\n        \"\"\"\n        Visits the root Module node of the CST.\n\n        Extracts various components of the module such as docstring, header, footer, and code content, and\n        updates the module builder with these details.\n        \"\"\"\n\n        docstring: str | None = node.get_docstring()\n        header: list[str] = module_functions.extract_content_from_empty_lines(\n            node.header\n        )\n        footer: list[str] = module_functions.extract_content_from_empty_lines(\n            node.footer\n        )\n        content: str = node.code if node.code else \"\"\n        position_data: PositionData = self.get_node_position_data(node)\n        (\n            self.builder.set_docstring(docstring)\n            .set_header_content(header)\n            .set_footer_content(footer)\n            .set_code_content(content)\n            .set_start_line_num(position_data.start)\n            .set_end_line_num(position_data.end)\n        )\n        standalone_blocks: list[\n            NodeAndPositionData\n        ] = standalone_code_block_functions.gather_standalone_lines(node.body, self)\n        standalone_block_models: list[\n            StandaloneBlockModelBuilder\n        ] = standalone_code_block_functions.process_standalone_blocks(\n            code_blocks=standalone_blocks, parent_id=self.id\n        )\n        for standalone_block_model in standalone_block_models:\n            self.builder.add_child(standalone_block_model)\n\n    def visit_Import(self, node: libcst.Import) -> None:\n        \"\"\"\n        Visits an Import node in the CST.\n\n        Processes the import statement and updates the module builder with the import model.\n        \"\"\"\n\n        import_model: ImportModel = module_functions.process_import(node)\n        self.builder.add_import(import_model)\n\n    def visit_ImportFrom(self, node: libcst.ImportFrom) -> None:\n        \"\"\"\n        Visits an ImportFrom node in the CST.\n\n        Processes the 'from ... import ...' statement and updates the module builder with the import model.\n        \"\"\"\n\n        import_model: ImportModel = module_functions.process_import_from(node)\n        self.builder.add_import(import_model)\n\n    def visit_ClassDef(self, node: libcst.ClassDef) -> None:\n        \"\"\"\n        Visits a ClassDef node in the CST.\n\n        Initiates the process of building a class model from the class definition.\n        \"\"\"\n\n        parent_id: str = self.builder_stack[-1].id\n        class_id: str = ClassIDGenerationStrategy.generate_id(\n            parent_id=parent_id, class_name=node.name.value\n        )\n\n        class_builder: ClassModelBuilder = BuilderFactory.create_builder_instance(\n            block_type=BlockType.CLASS,\n            id=class_id,\n            name=node.name.value,\n            parent_id=parent_id,\n        )\n\n        builder = self.builder_stack[-1]\n        builder.add_child(class_builder)\n        self.builder_stack.append(class_builder)\n\n        position_data: PositionData = self.get_node_position_data(node)\n        class_def_functions.process_class_def(node, position_data, class_builder)\n\n    def leave_ClassDef(self, original_node: libcst.ClassDef) -> None:\n        \"\"\"\n        Leaves a ClassDef node in the CST.\n\n        Finalizes the class model building process by popping the current builder from the stack.\n        \"\"\"\n\n        self.builder_stack.pop()\n\n    def visit_FunctionDef(self, node: libcst.FunctionDef) -> None:\n        \"\"\"\n        Visits a FunctionDef node in the CST.\n\n        Initiates the process of building a function model from the function definition.\n        \"\"\"\n\n        parent_id: str = self.builder_stack[-1].id\n        func_id: str = FunctionIDGenerationStrategy.generate_id(\n            parent_id=parent_id, function_name=node.name.value\n        )\n\n        func_builder: FunctionModelBuilder = BuilderFactory.create_builder_instance(\n            block_type=BlockType.FUNCTION,\n            id=func_id,\n            name=node.name.value,\n            parent_id=parent_id,\n        )\n        builder = self.builder_stack[-1]\n        builder.add_child(func_builder)\n        self.builder_stack.append(func_builder)\n\n        position_data: PositionData = self.get_node_position_data(node)\n        function_def_functions.process_func_def(\n            func_id, node, position_data, func_builder\n        )\n\n    def visit_Parameters(self, node: libcst.Parameters) -> None:\n        \"\"\"\n        Visits a Parameters node in the CST.\n\n        Processes the parameters of a function and updates the current function model builder with these parameters.\n        \"\"\"\n\n        builder = self.builder_stack[-1]\n        parameter_list: ParameterListModel | None = (\n            function_def_functions.process_parameters(node)\n        )\n\n        if isinstance(builder, FunctionModelBuilder):\n            builder.set_parameters_list(parameter_list)\n\n    def leave_FunctionDef(self, original_node: libcst.FunctionDef) -> None:\n        \"\"\"\n        Leaves a FunctionDef node in the CST.\n\n        Finalizes the function model building process by popping the current builder from the stack.\n        \"\"\"\n\n        self.builder_stack.pop()\n\n    def leave_Module(self, original_node: libcst.Module) -> None:\n        \"\"\"\n        Leaves the root Module node in the CST.\n\n        Finalizes the module model building process by setting dependencies for children of the module.\n        \"\"\"\n\n        gather_and_set_children_dependencies(self.builder)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "NodeAndPositionData",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "PositionData",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.utilities.processing_context",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "NodeAndPositionData",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "PositionData",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.utilities.processing_context",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ClassIDGenerationStrategy",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-ClassIDGenerationStrategy"
                        },
                        {
                            "name": "FunctionIDGenerationStrategy",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-FunctionIDGenerationStrategy"
                        }
                    ],
                    "imported_from": "postcode.python_parser.id_generation.id_generation_strategies",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:id_generation:id_generation_strategies.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ClassIDGenerationStrategy",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-ClassIDGenerationStrategy"
                        },
                        {
                            "name": "FunctionIDGenerationStrategy",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-FunctionIDGenerationStrategy"
                        }
                    ],
                    "imported_from": "postcode.python_parser.id_generation.id_generation_strategies",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:id_generation:id_generation_strategies.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "BuilderFactory",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.builder_factory",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:builder_factory.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ClassModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.class_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "FunctionModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.function_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ModuleModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.module_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "StandaloneBlockModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.standalone_block_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "BlockType",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.enums",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:enums.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                        },
                        {
                            "name": "ParameterListModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ParameterListModel"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                        },
                        {
                            "name": "ParameterListModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ParameterListModel"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "BaseVisitor",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:visitors:base_code_block_visitor.py__*__MODULE__*__CLASS-BaseVisitor"
                        }
                    ],
                    "imported_from": "postcode.python_parser.visitors.base_code_block_visitor",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:visitors:base_code_block_visitor.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "postcode.python_parser.visitors.node_processing.class_def_functions",
                            "as_name": "class_def_functions",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "postcode.python_parser.visitors.node_processing.function_def_functions",
                            "as_name": "function_def_functions",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "postcode.python_parser.visitors.node_processing.module_functions",
                            "as_name": "module_functions",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "postcode.python_parser.visitors.node_processing.standalone_code_block_functions",
                            "as_name": "standalone_code_block_functions",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:visitors:node_processing:standalone_code_block_functions.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "gather_and_set_children_dependencies",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-gather_and_set_children_dependencies"
                        }
                    ],
                    "imported_from": "postcode.python_parser.visitors.node_processing.gather_dependencies",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\nclass ModuleVisitor(BaseVisitor):\\n    \"\"\"\\n    Visitor class for traversing and building a model of a Python module.\\n\\n    This class extends BaseVisitor and is used to visit different nodes in a Python module\\'s abstract\\n    syntax tree (CST) using the libcst library. It builds a structured model of the module, including\\n    imports, classes, and functions.\\n\\n    Attributes:\\n        id (str): The ID of the module to be generated before instantiation.\\n        builder (ModuleModelBuilder): The builder used to construct the module model.\\n\\n    Example:\\n        >>> module_builder = ModuleModelBuilder(id=\"module1\", name=\"example_module\")\\n        >>> visitor = ModuleVisitor(id=\"module1\", module_builder=module_builder)\\n        >>> libcst.parse_module(\"import os\\\\\\\\nclass MyClass:\\\\\\\\n    pass\").visit(visitor)\\n        # This will process the module and build its corresponding model using the provided module builder.\\n    \"\"\"\\n\\n    def __init__(self, id: str, module_builder: ModuleModelBuilder) -> None:\\n        super().__init__(id=id)\\n        self.builder: ModuleModelBuilder = module_builder\\n        self.builder_stack.append(module_builder)\\n\\n    def visit_Module(self, node: libcst.Module) -> bool | None:\\n        \"\"\"\\n        Visits the root Module node of the CST.\\n\\n        Extracts various components of the module such as docstring, header, footer, and code content, and\\n        updates the module builder with these details.\\n        \"\"\"\\n\\n        docstring: str | None = node.get_docstring()\\n        header: list[str] = module_functions.extract_content_from_empty_lines(\\n            node.header\\n        )\\n        footer: list[str] = module_functions.extract_content_from_empty_lines(\\n            node.footer\\n        )\\n        content: str = node.code if node.code else \"\"\\n        position_data: PositionData = self.get_node_position_data(node)\\n        (\\n            self.builder.set_docstring(docstring)\\n            .set_header_content(header)\\n            .set_footer_content(footer)\\n            .set_code_content(content)\\n            .set_start_line_num(position_data.start)\\n            .set_end_line_num(position_data.end)\\n        )\\n        standalone_blocks: list[\\n            NodeAndPositionData\\n        ] = standalone_code_block_functions.gather_standalone_lines(node.body, self)\\n        standalone_block_models: list[\\n            StandaloneBlockModelBuilder\\n        ] = standalone_code_block_functions.process_standalone_blocks(\\n            code_blocks=standalone_blocks, parent_id=self.id\\n        )\\n        for standalone_block_model in standalone_block_models:\\n            self.builder.add_child(standalone_block_model)\\n\\n    def visit_Import(self, node: libcst.Import) -> None:\\n        \"\"\"\\n        Visits an Import node in the CST.\\n\\n        Processes the import statement and updates the module builder with the import model.\\n        \"\"\"\\n\\n        import_model: ImportModel = module_functions.process_import(node)\\n        self.builder.add_import(import_model)\\n\\n    def visit_ImportFrom(self, node: libcst.ImportFrom) -> None:\\n        \"\"\"\\n        Visits an ImportFrom node in the CST.\\n\\n        Processes the \\'from ... import ...\\' statement and updates the module builder with the import model.\\n        \"\"\"\\n\\n        import_model: ImportModel = module_functions.process_import_from(node)\\n        self.builder.add_import(import_model)\\n\\n    def visit_ClassDef(self, node: libcst.ClassDef) -> None:\\n        \"\"\"\\n        Visits a ClassDef node in the CST.\\n\\n        Initiates the process of building a class model from the class definition.\\n        \"\"\"\\n\\n        parent_id: str = self.builder_stack[-1].id\\n        class_id: str = ClassIDGenerationStrategy.generate_id(\\n            parent_id=parent_id, class_name=node.name.value\\n        )\\n\\n        class_builder: ClassModelBuilder = BuilderFactory.create_builder_instance(\\n            block_type=BlockType.CLASS,\\n            id=class_id,\\n            name=node.name.value,\\n            parent_id=parent_id,\\n        )\\n\\n        builder = self.builder_stack[-1]\\n        builder.add_child(class_builder)\\n        self.builder_stack.append(class_builder)\\n\\n        position_data: PositionData = self.get_node_position_data(node)\\n        class_def_functions.process_class_def(node, position_data, class_builder)\\n\\n    def leave_ClassDef(self, original_node: libcst.ClassDef) -> None:\\n        \"\"\"\\n        Leaves a ClassDef node in the CST.\\n\\n        Finalizes the class model building process by popping the current builder from the stack.\\n        \"\"\"\\n\\n        self.builder_stack.pop()\\n\\n    def visit_FunctionDef(self, node: libcst.FunctionDef) -> None:\\n        \"\"\"\\n        Visits a FunctionDef node in the CST.\\n\\n        Initiates the process of building a function model from the function definition.\\n        \"\"\"\\n\\n        parent_id: str = self.builder_stack[-1].id\\n        func_id: str = FunctionIDGenerationStrategy.generate_id(\\n            parent_id=parent_id, function_name=node.name.value\\n        )\\n\\n        func_builder: FunctionModelBuilder = BuilderFactory.create_builder_instance(\\n            block_type=BlockType.FUNCTION,\\n            id=func_id,\\n            name=node.name.value,\\n            parent_id=parent_id,\\n        )\\n        builder = self.builder_stack[-1]\\n        builder.add_child(func_builder)\\n        self.builder_stack.append(func_builder)\\n\\n        position_data: PositionData = self.get_node_position_data(node)\\n        function_def_functions.process_func_def(\\n            func_id, node, position_data, func_builder\\n        )\\n\\n    def visit_Parameters(self, node: libcst.Parameters) -> None:\\n        \"\"\"\\n        Visits a Parameters node in the CST.\\n\\n        Processes the parameters of a function and updates the current function model builder with these parameters.\\n        \"\"\"\\n\\n        builder = self.builder_stack[-1]\\n        parameter_list: ParameterListModel | None = (\\n            function_def_functions.process_parameters(node)\\n        )\\n\\n        if isinstance(builder, FunctionModelBuilder):\\n            builder.set_parameters_list(parameter_list)\\n\\n    def leave_FunctionDef(self, original_node: libcst.FunctionDef) -> None:\\n        \"\"\"\\n        Leaves a FunctionDef node in the CST.\\n\\n        Finalizes the function model building process by popping the current builder from the stack.\\n        \"\"\"\\n\\n        self.builder_stack.pop()\\n\\n    def leave_Module(self, original_node: libcst.Module) -> None:\\n        \"\"\"\\n        Leaves the root Module node in the CST.\\n\\n        Finalizes the module model building process by setting dependencies for children of the module.\\n        \"\"\"\\n\\n        gather_and_set_children_dependencies(self.builder)\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef __init__(self, id: str, module_builder: ModuleModelBuilder) -> None:\\\\n    super().__init__(id=id)\\\\n    self.builder: ModuleModelBuilder = module_builder\\\\n    self.builder_stack.append(module_builder)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef visit_Module(self, node: libcst.Module) -> bool | None:\\\\n    \"\"\"\\\\n        Visits the root Module node of the CST.\\\\n\\\\n        Extracts various components of the module such as docstring, header, footer, and code content, and\\\\n        updates the module builder with these details.\\\\n        \"\"\"\\\\n\\\\n    docstring: str | None = node.get_docstring()\\\\n    header: list[str] = module_functions.extract_content_from_empty_lines(\\\\n        node.header\\\\n    )\\\\n    footer: list[str] = module_functions.extract_content_from_empty_lines(\\\\n        node.footer\\\\n    )\\\\n    content: str = node.code if node.code else \"\"\\\\n    position_data: PositionData = self.get_node_position_data(node)\\\\n    (\\\\n        self.builder.set_docstring(docstring)\\\\n        .set_header_content(header)\\\\n        .set_footer_content(footer)\\\\n        .set_code_content(content)\\\\n        .set_start_line_num(position_data.start)\\\\n        .set_end_line_num(position_data.end)\\\\n    )\\\\n    standalone_blocks: list[\\\\n        NodeAndPositionData\\\\n    ] = standalone_code_block_functions.gather_standalone_lines(node.body, self)\\\\n    standalone_block_models: list[\\\\n        StandaloneBlockModelBuilder\\\\n    ] = standalone_code_block_functions.process_standalone_blocks(\\\\n        code_blocks=standalone_blocks, parent_id=self.id\\\\n    )\\\\n    for standalone_block_model in standalone_block_models:\\\\n        self.builder.add_child(standalone_block_model)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef visit_Import(self, node: libcst.Import) -> None:\\\\n    \"\"\"\\\\n        Visits an Import node in the CST.\\\\n\\\\n        Processes the import statement and updates the module builder with the import model.\\\\n        \"\"\"\\\\n\\\\n    import_model: ImportModel = module_functions.process_import(node)\\\\n    self.builder.add_import(import_model)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef visit_ImportFrom(self, node: libcst.ImportFrom) -> None:\\\\n    \"\"\"\\\\n        Visits an ImportFrom node in the CST.\\\\n\\\\n        Processes the \\\\\\'from ... import ...\\\\\\' statement and updates the module builder with the import model.\\\\n        \"\"\"\\\\n\\\\n    import_model: ImportModel = module_functions.process_import_from(node)\\\\n    self.builder.add_import(import_model)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef visit_ClassDef(self, node: libcst.ClassDef) -> None:\\\\n    \"\"\"\\\\n        Visits a ClassDef node in the CST.\\\\n\\\\n        Initiates the process of building a class model from the class definition.\\\\n        \"\"\"\\\\n\\\\n    parent_id: str = self.builder_stack[-1].id\\\\n    class_id: str = ClassIDGenerationStrategy.generate_id(\\\\n        parent_id=parent_id, class_name=node.name.value\\\\n    )\\\\n\\\\n    class_builder: ClassModelBuilder = BuilderFactory.create_builder_instance(\\\\n        block_type=BlockType.CLASS,\\\\n        id=class_id,\\\\n        name=node.name.value,\\\\n        parent_id=parent_id,\\\\n    )\\\\n\\\\n    builder = self.builder_stack[-1]\\\\n    builder.add_child(class_builder)\\\\n    self.builder_stack.append(class_builder)\\\\n\\\\n    position_data: PositionData = self.get_node_position_data(node)\\\\n    class_def_functions.process_class_def(node, position_data, class_builder)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef leave_ClassDef(self, original_node: libcst.ClassDef) -> None:\\\\n    \"\"\"\\\\n        Leaves a ClassDef node in the CST.\\\\n\\\\n        Finalizes the class model building process by popping the current builder from the stack.\\\\n        \"\"\"\\\\n\\\\n    self.builder_stack.pop()\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef visit_FunctionDef(self, node: libcst.FunctionDef) -> None:\\\\n    \"\"\"\\\\n        Visits a FunctionDef node in the CST.\\\\n\\\\n        Initiates the process of building a function model from the function definition.\\\\n        \"\"\"\\\\n\\\\n    parent_id: str = self.builder_stack[-1].id\\\\n    func_id: str = FunctionIDGenerationStrategy.generate_id(\\\\n        parent_id=parent_id, function_name=node.name.value\\\\n    )\\\\n\\\\n    func_builder: FunctionModelBuilder = BuilderFactory.create_builder_instance(\\\\n        block_type=BlockType.FUNCTION,\\\\n        id=func_id,\\\\n        name=node.name.value,\\\\n        parent_id=parent_id,\\\\n    )\\\\n    builder = self.builder_stack[-1]\\\\n    builder.add_child(func_builder)\\\\n    self.builder_stack.append(func_builder)\\\\n\\\\n    position_data: PositionData = self.get_node_position_data(node)\\\\n    function_def_functions.process_func_def(\\\\n        func_id, node, position_data, func_builder\\\\n    )\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef visit_Parameters(self, node: libcst.Parameters) -> None:\\\\n    \"\"\"\\\\n        Visits a Parameters node in the CST.\\\\n\\\\n        Processes the parameters of a function and updates the current function model builder with these parameters.\\\\n        \"\"\"\\\\n\\\\n    builder = self.builder_stack[-1]\\\\n    parameter_list: ParameterListModel | None = (\\\\n        function_def_functions.process_parameters(node)\\\\n    )\\\\n\\\\n    if isinstance(builder, FunctionModelBuilder):\\\\n        builder.set_parameters_list(parameter_list)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef leave_FunctionDef(self, original_node: libcst.FunctionDef) -> None:\\\\n    \"\"\"\\\\n        Leaves a FunctionDef node in the CST.\\\\n\\\\n        Finalizes the function model building process by popping the current builder from the stack.\\\\n        \"\"\"\\\\n\\\\n    self.builder_stack.pop()\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef leave_Module(self, original_node: libcst.Module) -> None:\\\\n    \"\"\"\\\\n        Leaves the root Module node in the CST.\\\\n\\\\n        Finalizes the module model building process by setting dependencies for children of the module.\\\\n        \"\"\"\\\\n\\\\n    gather_and_set_children_dependencies(self.builder)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.utilities.processing_context import NodeAndPositionData, PositionData\\nfrom postcode.utilities.processing_context import NodeAndPositionData, PositionData\\nimport libcst\\nfrom postcode.python_parser.id_generation.id_generation_strategies import ClassIDGenerationStrategy, FunctionIDGenerationStrategy\\nfrom postcode.python_parser.id_generation.id_generation_strategies import ClassIDGenerationStrategy, FunctionIDGenerationStrategy\\nfrom postcode.python_parser.model_builders.builder_factory import BuilderFactory\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\nfrom postcode.python_parser.models.enums import BlockType\\nfrom postcode.python_parser.models.models import ImportModel, ParameterListModel\\nfrom postcode.python_parser.models.models import ImportModel, ParameterListModel\\nfrom postcode.python_parser.visitors.base_code_block_visitor import BaseVisitor\\nimport postcode.python_parser.visitors.node_processing.class_def_functions as class_def_functions\\nimport postcode.python_parser.visitors.node_processing.function_def_functions as function_def_functions\\nimport postcode.python_parser.visitors.node_processing.module_functions as module_functions\\nimport postcode.python_parser.visitors.node_processing.standalone_code_block_functions as standalone_code_block_functions\\nfrom postcode.python_parser.visitors.node_processing.gather_dependencies import gather_and_set_children_dependencies\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor__*__FUNCTION-__init__",
                    "parent_id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor",
                    "block_type": "FUNCTION",
                    "start_line_num": 58,
                    "end_line_num": 63,
                    "code_content": "\ndef __init__(self, id: str, module_builder: ModuleModelBuilder) -> None:\n    super().__init__(id=id)\n    self.builder: ModuleModelBuilder = module_builder\n    self.builder_stack.append(module_builder)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef __init__(self, id: str, module_builder: ModuleModelBuilder) -> None:\\n    super().__init__(id=id)\\n    self.builder: ModuleModelBuilder = module_builder\\n    self.builder_stack.append(module_builder)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "visit_Module",
                    "docstring": "Visits the root Module node of the CST.\n\nExtracts various components of the module such as docstring, header, footer, and code content, and\nupdates the module builder with these details.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "bool | None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor__*__FUNCTION-visit_Module",
                    "parent_id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor",
                    "block_type": "FUNCTION",
                    "start_line_num": 63,
                    "end_line_num": 99,
                    "code_content": "\ndef visit_Module(self, node: libcst.Module) -> bool | None:\n    \"\"\"\n        Visits the root Module node of the CST.\n\n        Extracts various components of the module such as docstring, header, footer, and code content, and\n        updates the module builder with these details.\n        \"\"\"\n\n    docstring: str | None = node.get_docstring()\n    header: list[str] = module_functions.extract_content_from_empty_lines(\n        node.header\n    )\n    footer: list[str] = module_functions.extract_content_from_empty_lines(\n        node.footer\n    )\n    content: str = node.code if node.code else \"\"\n    position_data: PositionData = self.get_node_position_data(node)\n    (\n        self.builder.set_docstring(docstring)\n        .set_header_content(header)\n        .set_footer_content(footer)\n        .set_code_content(content)\n        .set_start_line_num(position_data.start)\n        .set_end_line_num(position_data.end)\n    )\n    standalone_blocks: list[\n        NodeAndPositionData\n    ] = standalone_code_block_functions.gather_standalone_lines(node.body, self)\n    standalone_block_models: list[\n        StandaloneBlockModelBuilder\n    ] = standalone_code_block_functions.process_standalone_blocks(\n        code_blocks=standalone_blocks, parent_id=self.id\n    )\n    for standalone_block_model in standalone_block_models:\n        self.builder.add_child(standalone_block_model)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef visit_Module(self, node: libcst.Module) -> bool | None:\\n    \"\"\"\\n        Visits the root Module node of the CST.\\n\\n        Extracts various components of the module such as docstring, header, footer, and code content, and\\n        updates the module builder with these details.\\n        \"\"\"\\n\\n    docstring: str | None = node.get_docstring()\\n    header: list[str] = module_functions.extract_content_from_empty_lines(\\n        node.header\\n    )\\n    footer: list[str] = module_functions.extract_content_from_empty_lines(\\n        node.footer\\n    )\\n    content: str = node.code if node.code else \"\"\\n    position_data: PositionData = self.get_node_position_data(node)\\n    (\\n        self.builder.set_docstring(docstring)\\n        .set_header_content(header)\\n        .set_footer_content(footer)\\n        .set_code_content(content)\\n        .set_start_line_num(position_data.start)\\n        .set_end_line_num(position_data.end)\\n    )\\n    standalone_blocks: list[\\n        NodeAndPositionData\\n    ] = standalone_code_block_functions.gather_standalone_lines(node.body, self)\\n    standalone_block_models: list[\\n        StandaloneBlockModelBuilder\\n    ] = standalone_code_block_functions.process_standalone_blocks(\\n        code_blocks=standalone_blocks, parent_id=self.id\\n    )\\n    for standalone_block_model in standalone_block_models:\\n        self.builder.add_child(standalone_block_model)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "visit_Import",
                    "docstring": "Visits an Import node in the CST.\n\nProcesses the import statement and updates the module builder with the import model.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor__*__FUNCTION-visit_Import",
                    "parent_id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor",
                    "block_type": "FUNCTION",
                    "start_line_num": 99,
                    "end_line_num": 109,
                    "code_content": "\ndef visit_Import(self, node: libcst.Import) -> None:\n    \"\"\"\n        Visits an Import node in the CST.\n\n        Processes the import statement and updates the module builder with the import model.\n        \"\"\"\n\n    import_model: ImportModel = module_functions.process_import(node)\n    self.builder.add_import(import_model)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef visit_Import(self, node: libcst.Import) -> None:\\n    \"\"\"\\n        Visits an Import node in the CST.\\n\\n        Processes the import statement and updates the module builder with the import model.\\n        \"\"\"\\n\\n    import_model: ImportModel = module_functions.process_import(node)\\n    self.builder.add_import(import_model)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "visit_ImportFrom",
                    "docstring": "Visits an ImportFrom node in the CST.\n\nProcesses the 'from ... import ...' statement and updates the module builder with the import model.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor__*__FUNCTION-visit_ImportFrom",
                    "parent_id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor",
                    "block_type": "FUNCTION",
                    "start_line_num": 109,
                    "end_line_num": 119,
                    "code_content": "\ndef visit_ImportFrom(self, node: libcst.ImportFrom) -> None:\n    \"\"\"\n        Visits an ImportFrom node in the CST.\n\n        Processes the 'from ... import ...' statement and updates the module builder with the import model.\n        \"\"\"\n\n    import_model: ImportModel = module_functions.process_import_from(node)\n    self.builder.add_import(import_model)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef visit_ImportFrom(self, node: libcst.ImportFrom) -> None:\\n    \"\"\"\\n        Visits an ImportFrom node in the CST.\\n\\n        Processes the \\'from ... import ...\\' statement and updates the module builder with the import model.\\n        \"\"\"\\n\\n    import_model: ImportModel = module_functions.process_import_from(node)\\n    self.builder.add_import(import_model)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "visit_ClassDef",
                    "docstring": "Visits a ClassDef node in the CST.\n\nInitiates the process of building a class model from the class definition.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor__*__FUNCTION-visit_ClassDef",
                    "parent_id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor",
                    "block_type": "FUNCTION",
                    "start_line_num": 119,
                    "end_line_num": 145,
                    "code_content": "\ndef visit_ClassDef(self, node: libcst.ClassDef) -> None:\n    \"\"\"\n        Visits a ClassDef node in the CST.\n\n        Initiates the process of building a class model from the class definition.\n        \"\"\"\n\n    parent_id: str = self.builder_stack[-1].id\n    class_id: str = ClassIDGenerationStrategy.generate_id(\n        parent_id=parent_id, class_name=node.name.value\n    )\n\n    class_builder: ClassModelBuilder = BuilderFactory.create_builder_instance(\n        block_type=BlockType.CLASS,\n        id=class_id,\n        name=node.name.value,\n        parent_id=parent_id,\n    )\n\n    builder = self.builder_stack[-1]\n    builder.add_child(class_builder)\n    self.builder_stack.append(class_builder)\n\n    position_data: PositionData = self.get_node_position_data(node)\n    class_def_functions.process_class_def(node, position_data, class_builder)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef visit_ClassDef(self, node: libcst.ClassDef) -> None:\\n    \"\"\"\\n        Visits a ClassDef node in the CST.\\n\\n        Initiates the process of building a class model from the class definition.\\n        \"\"\"\\n\\n    parent_id: str = self.builder_stack[-1].id\\n    class_id: str = ClassIDGenerationStrategy.generate_id(\\n        parent_id=parent_id, class_name=node.name.value\\n    )\\n\\n    class_builder: ClassModelBuilder = BuilderFactory.create_builder_instance(\\n        block_type=BlockType.CLASS,\\n        id=class_id,\\n        name=node.name.value,\\n        parent_id=parent_id,\\n    )\\n\\n    builder = self.builder_stack[-1]\\n    builder.add_child(class_builder)\\n    self.builder_stack.append(class_builder)\\n\\n    position_data: PositionData = self.get_node_position_data(node)\\n    class_def_functions.process_class_def(node, position_data, class_builder)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "leave_ClassDef",
                    "docstring": "Leaves a ClassDef node in the CST.\n\nFinalizes the class model building process by popping the current builder from the stack.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor__*__FUNCTION-leave_ClassDef",
                    "parent_id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor",
                    "block_type": "FUNCTION",
                    "start_line_num": 145,
                    "end_line_num": 154,
                    "code_content": "\ndef leave_ClassDef(self, original_node: libcst.ClassDef) -> None:\n    \"\"\"\n        Leaves a ClassDef node in the CST.\n\n        Finalizes the class model building process by popping the current builder from the stack.\n        \"\"\"\n\n    self.builder_stack.pop()\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef leave_ClassDef(self, original_node: libcst.ClassDef) -> None:\\n    \"\"\"\\n        Leaves a ClassDef node in the CST.\\n\\n        Finalizes the class model building process by popping the current builder from the stack.\\n        \"\"\"\\n\\n    self.builder_stack.pop()\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "visit_FunctionDef",
                    "docstring": "Visits a FunctionDef node in the CST.\n\nInitiates the process of building a function model from the function definition.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor__*__FUNCTION-visit_FunctionDef",
                    "parent_id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor",
                    "block_type": "FUNCTION",
                    "start_line_num": 154,
                    "end_line_num": 181,
                    "code_content": "\ndef visit_FunctionDef(self, node: libcst.FunctionDef) -> None:\n    \"\"\"\n        Visits a FunctionDef node in the CST.\n\n        Initiates the process of building a function model from the function definition.\n        \"\"\"\n\n    parent_id: str = self.builder_stack[-1].id\n    func_id: str = FunctionIDGenerationStrategy.generate_id(\n        parent_id=parent_id, function_name=node.name.value\n    )\n\n    func_builder: FunctionModelBuilder = BuilderFactory.create_builder_instance(\n        block_type=BlockType.FUNCTION,\n        id=func_id,\n        name=node.name.value,\n        parent_id=parent_id,\n    )\n    builder = self.builder_stack[-1]\n    builder.add_child(func_builder)\n    self.builder_stack.append(func_builder)\n\n    position_data: PositionData = self.get_node_position_data(node)\n    function_def_functions.process_func_def(\n        func_id, node, position_data, func_builder\n    )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef visit_FunctionDef(self, node: libcst.FunctionDef) -> None:\\n    \"\"\"\\n        Visits a FunctionDef node in the CST.\\n\\n        Initiates the process of building a function model from the function definition.\\n        \"\"\"\\n\\n    parent_id: str = self.builder_stack[-1].id\\n    func_id: str = FunctionIDGenerationStrategy.generate_id(\\n        parent_id=parent_id, function_name=node.name.value\\n    )\\n\\n    func_builder: FunctionModelBuilder = BuilderFactory.create_builder_instance(\\n        block_type=BlockType.FUNCTION,\\n        id=func_id,\\n        name=node.name.value,\\n        parent_id=parent_id,\\n    )\\n    builder = self.builder_stack[-1]\\n    builder.add_child(func_builder)\\n    self.builder_stack.append(func_builder)\\n\\n    position_data: PositionData = self.get_node_position_data(node)\\n    function_def_functions.process_func_def(\\n        func_id, node, position_data, func_builder\\n    )\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "visit_Parameters",
                    "docstring": "Visits a Parameters node in the CST.\n\nProcesses the parameters of a function and updates the current function model builder with these parameters.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor__*__FUNCTION-visit_Parameters",
                    "parent_id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor",
                    "block_type": "FUNCTION",
                    "start_line_num": 181,
                    "end_line_num": 196,
                    "code_content": "\ndef visit_Parameters(self, node: libcst.Parameters) -> None:\n    \"\"\"\n        Visits a Parameters node in the CST.\n\n        Processes the parameters of a function and updates the current function model builder with these parameters.\n        \"\"\"\n\n    builder = self.builder_stack[-1]\n    parameter_list: ParameterListModel | None = (\n        function_def_functions.process_parameters(node)\n    )\n\n    if isinstance(builder, FunctionModelBuilder):\n        builder.set_parameters_list(parameter_list)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef visit_Parameters(self, node: libcst.Parameters) -> None:\\n    \"\"\"\\n        Visits a Parameters node in the CST.\\n\\n        Processes the parameters of a function and updates the current function model builder with these parameters.\\n        \"\"\"\\n\\n    builder = self.builder_stack[-1]\\n    parameter_list: ParameterListModel | None = (\\n        function_def_functions.process_parameters(node)\\n    )\\n\\n    if isinstance(builder, FunctionModelBuilder):\\n        builder.set_parameters_list(parameter_list)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "leave_FunctionDef",
                    "docstring": "Leaves a FunctionDef node in the CST.\n\nFinalizes the function model building process by popping the current builder from the stack.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor__*__FUNCTION-leave_FunctionDef",
                    "parent_id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor",
                    "block_type": "FUNCTION",
                    "start_line_num": 196,
                    "end_line_num": 205,
                    "code_content": "\ndef leave_FunctionDef(self, original_node: libcst.FunctionDef) -> None:\n    \"\"\"\n        Leaves a FunctionDef node in the CST.\n\n        Finalizes the function model building process by popping the current builder from the stack.\n        \"\"\"\n\n    self.builder_stack.pop()\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef leave_FunctionDef(self, original_node: libcst.FunctionDef) -> None:\\n    \"\"\"\\n        Leaves a FunctionDef node in the CST.\\n\\n        Finalizes the function model building process by popping the current builder from the stack.\\n        \"\"\"\\n\\n    self.builder_stack.pop()\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "leave_Module",
                    "docstring": "Leaves the root Module node in the CST.\n\nFinalizes the module model building process by setting dependencies for children of the module.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor__*__FUNCTION-leave_Module",
                    "parent_id": "postcode:python_parser:visitors:module_visitor.py__*__MODULE__*__CLASS-ModuleVisitor",
                    "block_type": "FUNCTION",
                    "start_line_num": 205,
                    "end_line_num": 214,
                    "code_content": "\ndef leave_Module(self, original_node: libcst.Module) -> None:\n    \"\"\"\n        Leaves the root Module node in the CST.\n\n        Finalizes the module model building process by setting dependencies for children of the module.\n        \"\"\"\n\n    gather_and_set_children_dependencies(self.builder)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef leave_Module(self, original_node: libcst.Module) -> None:\\n    \"\"\"\\n        Leaves the root Module node in the CST.\\n\\n        Finalizes the module model building process by setting dependencies for children of the module.\\n        \"\"\"\\n\\n    gather_and_set_children_dependencies(self.builder)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        }
    ]
}