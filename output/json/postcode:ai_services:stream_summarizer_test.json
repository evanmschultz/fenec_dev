{
    "file_path": "postcode/ai_services/stream_summarizer_test.py",
    "docstring": null,
    "header": [],
    "footer": [
        "# client = OpenAI()",
        "# summarizer = OpenAISummarizer(client=client)",
        "# summary: str = summarizer.summarize_code(code_example)",
        "# print(summary)"
    ],
    "imports": [
        {
            "import_names": [
                {
                    "name": "asyncio",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "BaseModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "pydantic",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Literal",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "OpenAI",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "AsyncOpenAI",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Completions",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.resources.chat.completions",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChatCompletionSystemMessageParam",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.chat.chat_completion_system_message_param",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChatCompletionUserMessageParam",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.chat.chat_completion_user_message_param",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChatCompletion",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.chat.chat_completion",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChatCompletionChunk",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.chat.chat_completion_chunk",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChatCompletionMessageParam",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.chat.chat_completion_message_param",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "AsyncStream",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai._streaming",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "code_example",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "temp",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:temp.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "COD_SUMMARIZATION_PROMPT",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "summary_prompt_list",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "prompts.summarization_prompts",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:prompts:summarization_prompts.py__*__MODULE"
        }
    ],
    "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 316,
    "code_content": "import asyncio\nfrom pydantic import BaseModel\n\nfrom typing import Literal\nfrom openai import OpenAI, AsyncOpenAI\nfrom openai.resources.chat.completions import Completions\nfrom openai.types.chat.chat_completion_system_message_param import (\n    ChatCompletionSystemMessageParam,\n)\nfrom openai.types.chat.chat_completion_user_message_param import (\n    ChatCompletionUserMessageParam,\n)\nfrom openai.types.chat.chat_completion import ChatCompletion\nfrom openai.types.chat.chat_completion_chunk import ChatCompletionChunk\nfrom openai.types.chat.chat_completion_message_param import ChatCompletionMessageParam\n\nfrom openai._streaming import AsyncStream\n\nfrom temp import code_example\nfrom prompts.summarization_prompts import (\n    SUMMARIZER_DEFAULT_INSTRUCTIONS,\n    COD_SUMMARIZATION_PROMPT,\n    summary_prompt_list,\n)\n\n\nclass SummaryCompletionConfigs(BaseModel):\n    \"\"\"\n    Configs for the summarization completion.\n\n    Used to set the chat completion parameters for the OpenAI chat completions method call.\n\n    Args:\n        - system_message (str): The system message used for chat completion.\n        - prompt_template (str): The prompt template used for chat completion. This should contain \"{code}\" to\n            insert the code at that point; otherwise, the code snippet will be appended below the prompt.\n        - model (str): The model to use for the completion. Default is \"gpt-4-1106-preview\".\n        - max_tokens (int | None): The maximum number of tokens to generate. 'None' implies no limit. Default is None.\n        - presence_penalty (float | None): Penalty for new tokens based on their presence in the text so far.\n            Default is None.\n        - stream (bool): Whether to stream back partial progress. Default is False.\n        - temperature (float): Sampling temperature to use. Default is 0.0.\n\n    Notes:\n        - prompt_template should contain \"{code}\", if not, the code snippet will be appended below the prompt.\n        - model must be a valid OpenAI model name.\n\n    Examples:\n        >>> system_message = \"Summarize the following code.\"\n        >>> prompt_template = '''Summarize the following code.\n        ... CODE:\n        ... ```Python\n        ... {code}\n        ... ```\n        ... '''\n        >>> summary_completion_configs = SummaryCompletionConfigs(\n        ...     system_message=system_message,\n        ...     prompt_template=prompt_template,\n        ...     model=\"gpt-4-1106-preview\",\n        ...     max_tokens=100,\n        ...     presence_penalty=0.0,\n        ...     stream=False,\n        ...     temperature=0.0,\n        ... )\n    \"\"\"\n\n    system_message: str = SUMMARIZER_DEFAULT_INSTRUCTIONS\n    prompt_template: str = COD_SUMMARIZATION_PROMPT\n    model: Literal[\n        \"gpt-4-1106-preview\",\n        \"gpt-4-vision-preview\",\n        \"gpt-4\",\n        \"gpt-4-0314\",\n        \"gpt-4-0613\",\n        \"gpt-4-32k\",\n        \"gpt-4-32k-0314\",\n        \"gpt-4-32k-0613\",\n        \"gpt-3.5-turbo-1106\",\n        \"gpt-3.5-turbo\",\n        \"gpt-3.5-turbo-16k\",\n        \"gpt-3.5-turbo-0301\",\n        \"gpt-3.5-turbo-0613\",\n        \"gpt-3.5-turbo-16k-0613\",\n    ] = \"gpt-4-1106-preview\"\n    max_tokens: int | None = None\n    stream: bool = False\n    temperature: float = 0.0\n\n\nclass OpenAISummarizer:\n    \"\"\"\n    A class for summarizing code snippets using the OpenAI API.\n\n    Args:\n        - client (OpenAI): The OpenAI client used for making API requests.\n        - summary_prompt_list (list[str], optional): A list of summary prompts to be used. Defaults to an empty list.\n\n    Attributes:\n        - client (OpenAI): The OpenAI client used for making API requests.\n        - prompt_list (list[str]): A list of summary prompts.\n        - default_prompt (str): The default summary prompt.\n\n    Methods:\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\n            Summarizes the provided code snippet using the OpenAI API.\n\n    Examples:\n        >>> client = OpenAI()\n        >>> summarizer = Summarizer(client=client)\n        >>> code_example = \"print('Hello, world')\"\n        >>> summary = summarizer.summarize_code(code_example)\n        >>> print(summary)\n    \"\"\"\n\n    def __init__(\n        self,\n        client: OpenAI | AsyncOpenAI,\n        *,\n        summary_prompt_list: list[str] = summary_prompt_list,\n    ) -> None:\n        self.client: OpenAI | AsyncOpenAI = client\n        self.prompt_list: list[str] = summary_prompt_list\n        self.default_prompt: str = self.prompt_list[0]\n\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\n        \"\"\"Creates a system message for chat completion using OpenAi's ChatCompletionSystemMessageParam class.\"\"\"\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\n\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\n        \"\"\"Creates a user message for chat completion using OpenAi's ChatCompletionUserMessageParam class.\"\"\"\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\n\n    def _create_messages_list(\n        self,\n        system_message: str,\n        user_message: str,\n    ) -> list[ChatCompletionMessageParam]:\n        \"\"\"\n        Creates a list of messages for chat completion, including both system and user messages.\n\n        Args:\n            system_message (str): The system message content.\n            user_message (str): The user message content.\n\n        Returns:\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI's\n                ChatCompletionMessageParam classes.\n        \"\"\"\n\n        return [\n            self._create_system_message(system_message),\n            self._create_user_message(user_message),\n        ]\n\n    def _interpolate_prompt(self, code: str, prompt_template: str | None = None) -> str:\n        \"\"\"\n        Returns the prompt_template for the code snippet.\n\n        Args:\n            code (str): The code snippet.\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\n\n        Returns:\n            str: The formatted prompt.\n\n        Notes:\n            - If prompt_template is not provided, the default prompt will be used.\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\n        \"\"\"\n\n        if not prompt_template:\n            return self.default_prompt.format(code=code)\n\n        else:\n            if \"{code}\" in prompt_template:\n                return prompt_template.format(code=code)\n            else:\n                return f\"{prompt_template}\\n\\n{code}\"\n\n    def _get_summary(\n        self,\n        messages: list[ChatCompletionMessageParam],\n        *,\n        configs: SummaryCompletionConfigs,\n    ) -> str | None:\n        \"\"\"\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\n        Args:\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\n        Returns:\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\n        \"\"\"\n\n        response: ChatCompletion = self.client.chat.completions.create(\n            messages=messages,\n            model=configs.model,\n            max_tokens=configs.max_tokens,\n            stream=False,\n            temperature=configs.temperature,\n        )\n\n        return response.choices[0].message.content\n\n    def summarize_code(\n        self,\n        code: str,\n        *,\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n    ) -> str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n        prompt: str = self._interpolate_prompt(code, configs.prompt_template)\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n            system_message=configs.system_message, user_message=prompt\n        )\n\n        summary: str | None = self._get_summary(messages, configs=configs)\n        return summary if summary else \"Summary not found.\"\n\n    async def _stream_chat_responses(\n        self,\n        messages: list[ChatCompletionMessageParam],\n        *,\n        configs: SummaryCompletionConfigs,\n    ):\n        stream: AsyncStream[\n            ChatCompletionChunk\n        ] = await self.client.chat.completions.create(\n            messages=messages,\n            model=configs.model,\n            max_tokens=configs.max_tokens,\n            stream=True,\n            temperature=configs.temperature,\n        )\n\n        line_buffer = \"\"  # Buffer to accumulate tokens\n\n        try:\n            async for chunk in stream:\n                for choice in chunk.choices:\n                    content = choice.delta.content\n                    line_buffer += content\n\n                    if \"\\n\" in content:  # Check for newline character\n                        complete_line, _, line_buffer = line_buffer.rpartition(\"\\n\")\n                        yield complete_line + \"\\n\"\n        finally:\n            if line_buffer:\n                yield line_buffer  # Yield any remaining content in the buffer\n\n    async def stream_summarize_code(\n        self,\n        code: str,\n        *,\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n    ):\n        \"\"\"\n        Streams the summarization of provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Yields:\n            Each part of the summary as it is received from the OpenAI API.\n        \"\"\"\n\n        prompt = self._interpolate_prompt(code, configs.prompt_template)\n        messages = self._create_messages_list(\n            system_message=configs.system_message, user_message=prompt\n        )\n\n        async for summary_part in self._stream_chat_responses(\n            messages, configs=configs\n        ):\n            yield summary_part\n\n\n# Example usage\nasync def main():\n    client = AsyncOpenAI()  # Make sure to create an AsyncOpenAI instance\n    summarizer = OpenAISummarizer(client=client)\n    async for summary_part in summarizer.stream_summarize_code(code_example):\n        print(summary_part)\n\n\nasyncio.run(main())\n\n\n# client = OpenAI()\n# summarizer = OpenAISummarizer(client=client)\n# summary: str = summarizer.summarize_code(code_example)\n# print(summary)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nimport asyncio\\nfrom pydantic import BaseModel\\n\\nfrom typing import Literal\\nfrom openai import OpenAI, AsyncOpenAI\\nfrom openai.resources.chat.completions import Completions\\nfrom openai.types.chat.chat_completion_system_message_param import (\\n    ChatCompletionSystemMessageParam,\\n)\\nfrom openai.types.chat.chat_completion_user_message_param import (\\n    ChatCompletionUserMessageParam,\\n)\\nfrom openai.types.chat.chat_completion import ChatCompletion\\nfrom openai.types.chat.chat_completion_chunk import ChatCompletionChunk\\nfrom openai.types.chat.chat_completion_message_param import ChatCompletionMessageParam\\n\\nfrom openai._streaming import AsyncStream\\n\\nfrom temp import code_example\\nfrom prompts.summarization_prompts import (\\n    SUMMARIZER_DEFAULT_INSTRUCTIONS,\\n    COD_SUMMARIZATION_PROMPT,\\n    summary_prompt_list,\\n)\\n\\n\\nclass SummaryCompletionConfigs(BaseModel):\\n    \"\"\"\\n    Configs for the summarization completion.\\n\\n    Used to set the chat completion parameters for the OpenAI chat completions method call.\\n\\n    Args:\\n        - system_message (str): The system message used for chat completion.\\n        - prompt_template (str): The prompt template used for chat completion. This should contain \"{code}\" to\\n            insert the code at that point; otherwise, the code snippet will be appended below the prompt.\\n        - model (str): The model to use for the completion. Default is \"gpt-4-1106-preview\".\\n        - max_tokens (int | None): The maximum number of tokens to generate. \\'None\\' implies no limit. Default is None.\\n        - presence_penalty (float | None): Penalty for new tokens based on their presence in the text so far.\\n            Default is None.\\n        - stream (bool): Whether to stream back partial progress. Default is False.\\n        - temperature (float): Sampling temperature to use. Default is 0.0.\\n\\n    Notes:\\n        - prompt_template should contain \"{code}\", if not, the code snippet will be appended below the prompt.\\n        - model must be a valid OpenAI model name.\\n\\n    Examples:\\n        >>> system_message = \"Summarize the following code.\"\\n        >>> prompt_template = \\'\\'\\'Summarize the following code.\\n        ... CODE:\\n        ... ```Python\\n        ... {code}\\n        ... ```\\n        ... \\'\\'\\'\\n        >>> summary_completion_configs = SummaryCompletionConfigs(\\n        ...     system_message=system_message,\\n        ...     prompt_template=prompt_template,\\n        ...     model=\"gpt-4-1106-preview\",\\n        ...     max_tokens=100,\\n        ...     presence_penalty=0.0,\\n        ...     stream=False,\\n        ...     temperature=0.0,\\n        ... )\\n    \"\"\"\\n\\n    system_message: str = SUMMARIZER_DEFAULT_INSTRUCTIONS\\n    prompt_template: str = COD_SUMMARIZATION_PROMPT\\n    model: Literal[\\n        \"gpt-4-1106-preview\",\\n        \"gpt-4-vision-preview\",\\n        \"gpt-4\",\\n        \"gpt-4-0314\",\\n        \"gpt-4-0613\",\\n        \"gpt-4-32k\",\\n        \"gpt-4-32k-0314\",\\n        \"gpt-4-32k-0613\",\\n        \"gpt-3.5-turbo-1106\",\\n        \"gpt-3.5-turbo\",\\n        \"gpt-3.5-turbo-16k\",\\n        \"gpt-3.5-turbo-0301\",\\n        \"gpt-3.5-turbo-0613\",\\n        \"gpt-3.5-turbo-16k-0613\",\\n    ] = \"gpt-4-1106-preview\"\\n    max_tokens: int | None = None\\n    stream: bool = False\\n    temperature: float = 0.0\\n\\n\\nclass OpenAISummarizer:\\n    \"\"\"\\n    A class for summarizing code snippets using the OpenAI API.\\n\\n    Args:\\n        - client (OpenAI): The OpenAI client used for making API requests.\\n        - summary_prompt_list (list[str], optional): A list of summary prompts to be used. Defaults to an empty list.\\n\\n    Attributes:\\n        - client (OpenAI): The OpenAI client used for making API requests.\\n        - prompt_list (list[str]): A list of summary prompts.\\n        - default_prompt (str): The default summary prompt.\\n\\n    Methods:\\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\\n            Summarizes the provided code snippet using the OpenAI API.\\n\\n    Examples:\\n        >>> client = OpenAI()\\n        >>> summarizer = Summarizer(client=client)\\n        >>> code_example = \"print(\\'Hello, world\\')\"\\n        >>> summary = summarizer.summarize_code(code_example)\\n        >>> print(summary)\\n    \"\"\"\\n\\n    def __init__(\\n        self,\\n        client: OpenAI | AsyncOpenAI,\\n        *,\\n        summary_prompt_list: list[str] = summary_prompt_list,\\n    ) -> None:\\n        self.client: OpenAI | AsyncOpenAI = client\\n        self.prompt_list: list[str] = summary_prompt_list\\n        self.default_prompt: str = self.prompt_list[0]\\n\\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\n        \"\"\"Creates a system message for chat completion using OpenAi\\'s ChatCompletionSystemMessageParam class.\"\"\"\\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\n\\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\n        \"\"\"Creates a user message for chat completion using OpenAi\\'s ChatCompletionUserMessageParam class.\"\"\"\\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\\n\\n    def _create_messages_list(\\n        self,\\n        system_message: str,\\n        user_message: str,\\n    ) -> list[ChatCompletionMessageParam]:\\n        \"\"\"\\n        Creates a list of messages for chat completion, including both system and user messages.\\n\\n        Args:\\n            system_message (str): The system message content.\\n            user_message (str): The user message content.\\n\\n        Returns:\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\'s\\n                ChatCompletionMessageParam classes.\\n        \"\"\"\\n\\n        return [\\n            self._create_system_message(system_message),\\n            self._create_user_message(user_message),\\n        ]\\n\\n    def _interpolate_prompt(self, code: str, prompt_template: str | None = None) -> str:\\n        \"\"\"\\n        Returns the prompt_template for the code snippet.\\n\\n        Args:\\n            code (str): The code snippet.\\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\\n\\n        Returns:\\n            str: The formatted prompt.\\n\\n        Notes:\\n            - If prompt_template is not provided, the default prompt will be used.\\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\\n        \"\"\"\\n\\n        if not prompt_template:\\n            return self.default_prompt.format(code=code)\\n\\n        else:\\n            if \"{code}\" in prompt_template:\\n                return prompt_template.format(code=code)\\n            else:\\n                return f\"{prompt_template}\\\\n\\\\n{code}\"\\n\\n    def _get_summary(\\n        self,\\n        messages: list[ChatCompletionMessageParam],\\n        *,\\n        configs: SummaryCompletionConfigs,\\n    ) -> str | None:\\n        \"\"\"\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\n\\n        Args:\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\n\\n        Returns:\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\n        \"\"\"\\n\\n        response: ChatCompletion = self.client.chat.completions.create(\\n            messages=messages,\\n            model=configs.model,\\n            max_tokens=configs.max_tokens,\\n            stream=False,\\n            temperature=configs.temperature,\\n        )\\n\\n        return response.choices[0].message.content\\n\\n    def summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n    ) -> str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n        prompt: str = self._interpolate_prompt(code, configs.prompt_template)\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n            system_message=configs.system_message, user_message=prompt\\n        )\\n\\n        summary: str | None = self._get_summary(messages, configs=configs)\\n        return summary if summary else \"Summary not found.\"\\n\\n    async def _stream_chat_responses(\\n        self,\\n        messages: list[ChatCompletionMessageParam],\\n        *,\\n        configs: SummaryCompletionConfigs,\\n    ):\\n        stream: AsyncStream[\\n            ChatCompletionChunk\\n        ] = await self.client.chat.completions.create(\\n            messages=messages,\\n            model=configs.model,\\n            max_tokens=configs.max_tokens,\\n            stream=True,\\n            temperature=configs.temperature,\\n        )\\n\\n        line_buffer = \"\"  # Buffer to accumulate tokens\\n\\n        try:\\n            async for chunk in stream:\\n                for choice in chunk.choices:\\n                    content = choice.delta.content\\n                    line_buffer += content\\n\\n                    if \"\\\\n\" in content:  # Check for newline character\\n                        complete_line, _, line_buffer = line_buffer.rpartition(\"\\\\n\")\\n                        yield complete_line + \"\\\\n\"\\n        finally:\\n            if line_buffer:\\n                yield line_buffer  # Yield any remaining content in the buffer\\n\\n    async def stream_summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n    ):\\n        \"\"\"\\n        Streams the summarization of provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Yields:\\n            Each part of the summary as it is received from the OpenAI API.\\n        \"\"\"\\n\\n        prompt = self._interpolate_prompt(code, configs.prompt_template)\\n        messages = self._create_messages_list(\\n            system_message=configs.system_message, user_message=prompt\\n        )\\n\\n        async for summary_part in self._stream_chat_responses(\\n            messages, configs=configs\\n        ):\\n            yield summary_part\\n\\n\\n# Example usage\\nasync def main():\\n    client = AsyncOpenAI()  # Make sure to create an AsyncOpenAI instance\\n    summarizer = OpenAISummarizer(client=client)\\n    async for summary_part in summarizer.stream_summarize_code(code_example):\\n        print(summary_part)\\n\\n\\nasyncio.run(main())\\n\\n\\n# client = OpenAI()\\n# summarizer = OpenAISummarizer(client=client)\\n# summary: str = summarizer.summarize_code(code_example)\\n# print(summary)\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\nasyncio.run(main())\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport asyncio\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass SummaryCompletionConfigs(BaseModel):\\\\n    \"\"\"\\\\n    Configs for the summarization completion.\\\\n\\\\n    Used to set the chat completion parameters for the OpenAI chat completions method call.\\\\n\\\\n    Args:\\\\n        - system_message (str): The system message used for chat completion.\\\\n        - prompt_template (str): The prompt template used for chat completion. This should contain \"{code}\" to\\\\n            insert the code at that point; otherwise, the code snippet will be appended below the prompt.\\\\n        - model (str): The model to use for the completion. Default is \"gpt-4-1106-preview\".\\\\n        - max_tokens (int | None): The maximum number of tokens to generate. \\\\\\'None\\\\\\' implies no limit. Default is None.\\\\n        - presence_penalty (float | None): Penalty for new tokens based on their presence in the text so far.\\\\n            Default is None.\\\\n        - stream (bool): Whether to stream back partial progress. Default is False.\\\\n        - temperature (float): Sampling temperature to use. Default is 0.0.\\\\n\\\\n    Notes:\\\\n        - prompt_template should contain \"{code}\", if not, the code snippet will be appended below the prompt.\\\\n        - model must be a valid OpenAI model name.\\\\n\\\\n    Examples:\\\\n        >>> system_message = \"Summarize the following code.\"\\\\n        >>> prompt_template = \\\\\\'\\\\\\'\\\\\\'Summarize the following code.\\\\n        ... CODE:\\\\n        ... ```Python\\\\n        ... {code}\\\\n        ... ```\\\\n        ... \\\\\\'\\\\\\'\\\\\\'\\\\n        >>> summary_completion_configs = SummaryCompletionConfigs(\\\\n        ...     system_message=system_message,\\\\n        ...     prompt_template=prompt_template,\\\\n        ...     model=\"gpt-4-1106-preview\",\\\\n        ...     max_tokens=100,\\\\n        ...     presence_penalty=0.0,\\\\n        ...     stream=False,\\\\n        ...     temperature=0.0,\\\\n        ... )\\\\n    \"\"\"\\\\n\\\\n    system_message: str = SUMMARIZER_DEFAULT_INSTRUCTIONS\\\\n    prompt_template: str = COD_SUMMARIZATION_PROMPT\\\\n    model: Literal[\\\\n        \"gpt-4-1106-preview\",\\\\n        \"gpt-4-vision-preview\",\\\\n        \"gpt-4\",\\\\n        \"gpt-4-0314\",\\\\n        \"gpt-4-0613\",\\\\n        \"gpt-4-32k\",\\\\n        \"gpt-4-32k-0314\",\\\\n        \"gpt-4-32k-0613\",\\\\n        \"gpt-3.5-turbo-1106\",\\\\n        \"gpt-3.5-turbo\",\\\\n        \"gpt-3.5-turbo-16k\",\\\\n        \"gpt-3.5-turbo-0301\",\\\\n        \"gpt-3.5-turbo-0613\",\\\\n        \"gpt-3.5-turbo-16k-0613\",\\\\n    ] = \"gpt-4-1106-preview\"\\\\n    max_tokens: int | None = None\\\\n    stream: bool = False\\\\n    temperature: float = 0.0\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom pydantic import BaseModel\\\\nfrom typing import Literal\\\\nfrom openai import OpenAI, AsyncOpenAI\\\\nfrom prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, COD_SUMMARIZATION_PROMPT, summary_prompt_list\\\\nfrom prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, COD_SUMMARIZATION_PROMPT, summary_prompt_list\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass OpenAISummarizer:\\\\n    \"\"\"\\\\n    A class for summarizing code snippets using the OpenAI API.\\\\n\\\\n    Args:\\\\n        - client (OpenAI): The OpenAI client used for making API requests.\\\\n        - summary_prompt_list (list[str], optional): A list of summary prompts to be used. Defaults to an empty list.\\\\n\\\\n    Attributes:\\\\n        - client (OpenAI): The OpenAI client used for making API requests.\\\\n        - prompt_list (list[str]): A list of summary prompts.\\\\n        - default_prompt (str): The default summary prompt.\\\\n\\\\n    Methods:\\\\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\\\\n            Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n    Examples:\\\\n        >>> client = OpenAI()\\\\n        >>> summarizer = Summarizer(client=client)\\\\n        >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n        >>> summary = summarizer.summarize_code(code_example)\\\\n        >>> print(summary)\\\\n    \"\"\"\\\\n\\\\n    def __init__(\\\\n        self,\\\\n        client: OpenAI | AsyncOpenAI,\\\\n        *,\\\\n        summary_prompt_list: list[str] = summary_prompt_list,\\\\n    ) -> None:\\\\n        self.client: OpenAI | AsyncOpenAI = client\\\\n        self.prompt_list: list[str] = summary_prompt_list\\\\n        self.default_prompt: str = self.prompt_list[0]\\\\n\\\\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\\\n        \"\"\"Creates a system message for chat completion using OpenAi\\\\\\'s ChatCompletionSystemMessageParam class.\"\"\"\\\\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\\\n\\\\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\\\n        \"\"\"Creates a user message for chat completion using OpenAi\\\\\\'s ChatCompletionUserMessageParam class.\"\"\"\\\\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\\\\n\\\\n    def _create_messages_list(\\\\n        self,\\\\n        system_message: str,\\\\n        user_message: str,\\\\n    ) -> list[ChatCompletionMessageParam]:\\\\n        \"\"\"\\\\n        Creates a list of messages for chat completion, including both system and user messages.\\\\n\\\\n        Args:\\\\n            system_message (str): The system message content.\\\\n            user_message (str): The user message content.\\\\n\\\\n        Returns:\\\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\\\\\'s\\\\n                ChatCompletionMessageParam classes.\\\\n        \"\"\"\\\\n\\\\n        return [\\\\n            self._create_system_message(system_message),\\\\n            self._create_user_message(user_message),\\\\n        ]\\\\n\\\\n    def _interpolate_prompt(self, code: str, prompt_template: str | None = None) -> str:\\\\n        \"\"\"\\\\n        Returns the prompt_template for the code snippet.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet.\\\\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\\\\n\\\\n        Returns:\\\\n            str: The formatted prompt.\\\\n\\\\n        Notes:\\\\n            - If prompt_template is not provided, the default prompt will be used.\\\\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\\\\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\\\\n        \"\"\"\\\\n\\\\n        if not prompt_template:\\\\n            return self.default_prompt.format(code=code)\\\\n\\\\n        else:\\\\n            if \"{code}\" in prompt_template:\\\\n                return prompt_template.format(code=code)\\\\n            else:\\\\n                return f\"{prompt_template}\\\\\\\\n\\\\\\\\n{code}\"\\\\n\\\\n    def _get_summary(\\\\n        self,\\\\n        messages: list[ChatCompletionMessageParam],\\\\n        *,\\\\n        configs: SummaryCompletionConfigs,\\\\n    ) -> str | None:\\\\n        \"\"\"\\\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\\\n\\\\n        Args:\\\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\\\n\\\\n        Returns:\\\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\\\n        \"\"\"\\\\n\\\\n        response: ChatCompletion = self.client.chat.completions.create(\\\\n            messages=messages,\\\\n            model=configs.model,\\\\n            max_tokens=configs.max_tokens,\\\\n            stream=False,\\\\n            temperature=configs.temperature,\\\\n        )\\\\n\\\\n        return response.choices[0].message.content\\\\n\\\\n    def summarize_code(\\\\n        self,\\\\n        code: str,\\\\n        *,\\\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\n    ) -> str:\\\\n        \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n\\\\n        prompt: str = self._interpolate_prompt(code, configs.prompt_template)\\\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\n            system_message=configs.system_message, user_message=prompt\\\\n        )\\\\n\\\\n        summary: str | None = self._get_summary(messages, configs=configs)\\\\n        return summary if summary else \"Summary not found.\"\\\\n\\\\n    async def _stream_chat_responses(\\\\n        self,\\\\n        messages: list[ChatCompletionMessageParam],\\\\n        *,\\\\n        configs: SummaryCompletionConfigs,\\\\n    ):\\\\n        stream: AsyncStream[\\\\n            ChatCompletionChunk\\\\n        ] = await self.client.chat.completions.create(\\\\n            messages=messages,\\\\n            model=configs.model,\\\\n            max_tokens=configs.max_tokens,\\\\n            stream=True,\\\\n            temperature=configs.temperature,\\\\n        )\\\\n\\\\n        line_buffer = \"\"  # Buffer to accumulate tokens\\\\n\\\\n        try:\\\\n            async for chunk in stream:\\\\n                for choice in chunk.choices:\\\\n                    content = choice.delta.content\\\\n                    line_buffer += content\\\\n\\\\n                    if \"\\\\\\\\n\" in content:  # Check for newline character\\\\n                        complete_line, _, line_buffer = line_buffer.rpartition(\"\\\\\\\\n\")\\\\n                        yield complete_line + \"\\\\\\\\n\"\\\\n        finally:\\\\n            if line_buffer:\\\\n                yield line_buffer  # Yield any remaining content in the buffer\\\\n\\\\n    async def stream_summarize_code(\\\\n        self,\\\\n        code: str,\\\\n        *,\\\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\n    ):\\\\n        \"\"\"\\\\n        Streams the summarization of provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Yields:\\\\n            Each part of the summary as it is received from the OpenAI API.\\\\n        \"\"\"\\\\n\\\\n        prompt = self._interpolate_prompt(code, configs.prompt_template)\\\\n        messages = self._create_messages_list(\\\\n            system_message=configs.system_message, user_message=prompt\\\\n        )\\\\n\\\\n        async for summary_part in self._stream_chat_responses(\\\\n            messages, configs=configs\\\\n        ):\\\\n            yield summary_part\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef __init__(\\\\\\\\n    self,\\\\\\\\n    client: OpenAI | AsyncOpenAI,\\\\\\\\n    *,\\\\\\\\n    summary_prompt_list: list[str] = summary_prompt_list,\\\\\\\\n) -> None:\\\\\\\\n    self.client: OpenAI | AsyncOpenAI = client\\\\\\\\n    self.prompt_list: list[str] = summary_prompt_list\\\\\\\\n    self.default_prompt: str = self.prompt_list[0]\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\\\\\\\n    \"\"\"Creates a system message for chat completion using OpenAi\\\\\\\\\\\\\\'s ChatCompletionSystemMessageParam class.\"\"\"\\\\\\\\n    return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\\\\\\\n    \"\"\"Creates a user message for chat completion using OpenAi\\\\\\\\\\\\\\'s ChatCompletionUserMessageParam class.\"\"\"\\\\\\\\n    return ChatCompletionUserMessageParam(content=content, role=\"user\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _create_messages_list(\\\\\\\\n    self,\\\\\\\\n    system_message: str,\\\\\\\\n    user_message: str,\\\\\\\\n) -> list[ChatCompletionMessageParam]:\\\\\\\\n    \"\"\"\\\\\\\\n        Creates a list of messages for chat completion, including both system and user messages.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            system_message (str): The system message content.\\\\\\\\n            user_message (str): The user message content.\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\\\\\\\\\\\\\'s\\\\\\\\n                ChatCompletionMessageParam classes.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    return [\\\\\\\\n        self._create_system_message(system_message),\\\\\\\\n        self._create_user_message(user_message),\\\\\\\\n    ]\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _interpolate_prompt(self, code: str, prompt_template: str | None = None) -> str:\\\\\\\\n    \"\"\"\\\\\\\\n        Returns the prompt_template for the code snippet.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            code (str): The code snippet.\\\\\\\\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            str: The formatted prompt.\\\\\\\\n\\\\\\\\n        Notes:\\\\\\\\n            - If prompt_template is not provided, the default prompt will be used.\\\\\\\\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\\\\\\\\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    if not prompt_template:\\\\\\\\n        return self.default_prompt.format(code=code)\\\\\\\\n\\\\\\\\n    else:\\\\\\\\n        if \"{code}\" in prompt_template:\\\\\\\\n            return prompt_template.format(code=code)\\\\\\\\n        else:\\\\\\\\n            return f\"{prompt_template}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n{code}\"\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _get_summary(\\\\\\\\n    self,\\\\\\\\n    messages: list[ChatCompletionMessageParam],\\\\\\\\n    *,\\\\\\\\n    configs: SummaryCompletionConfigs,\\\\\\\\n) -> str | None:\\\\\\\\n    \"\"\"\\\\\\\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\\\\\\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    response: ChatCompletion = self.client.chat.completions.create(\\\\\\\\n        messages=messages,\\\\\\\\n        model=configs.model,\\\\\\\\n        max_tokens=configs.max_tokens,\\\\\\\\n        stream=False,\\\\\\\\n        temperature=configs.temperature,\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    return response.choices[0].message.content\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef summarize_code(\\\\\\\\n    self,\\\\\\\\n    code: str,\\\\\\\\n    *,\\\\\\\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\\\\\n) -> str:\\\\\\\\n    \"\"\"\\\\\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            code (str): The code snippet to summarize.\\\\\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\\\\\n                Defaults to SummaryCompletionConfigs().\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            str: The summary of the provided code snippet.\\\\\\\\n\\\\\\\\n        Examples:\\\\\\\\n            >>> client = OpenAI()\\\\\\\\n            >>> summarizer = Summarizer(client=client)\\\\\\\\n            >>> code_example = \"print(\\\\\\\\\\\\\\'Hello, world\\\\\\\\\\\\\\')\"\\\\\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\\\\\n            >>> print(summary)\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    prompt: str = self._interpolate_prompt(code, configs.prompt_template)\\\\\\\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\\\\\n        system_message=configs.system_message, user_message=prompt\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    summary: str | None = self._get_summary(messages, configs=configs)\\\\\\\\n    return summary if summary else \"Summary not found.\"\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\nasync def _stream_chat_responses(\\\\\\\\n    self,\\\\\\\\n    messages: list[ChatCompletionMessageParam],\\\\\\\\n    *,\\\\\\\\n    configs: SummaryCompletionConfigs,\\\\\\\\n):\\\\\\\\n    stream: AsyncStream[\\\\\\\\n        ChatCompletionChunk\\\\\\\\n    ] = await self.client.chat.completions.create(\\\\\\\\n        messages=messages,\\\\\\\\n        model=configs.model,\\\\\\\\n        max_tokens=configs.max_tokens,\\\\\\\\n        stream=True,\\\\\\\\n        temperature=configs.temperature,\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    line_buffer = \"\"  # Buffer to accumulate tokens\\\\\\\\n\\\\\\\\n    try:\\\\\\\\n        async for chunk in stream:\\\\\\\\n            for choice in chunk.choices:\\\\\\\\n                content = choice.delta.content\\\\\\\\n                line_buffer += content\\\\\\\\n\\\\\\\\n                if \"\\\\\\\\\\\\\\\\n\" in content:  # Check for newline character\\\\\\\\n                    complete_line, _, line_buffer = line_buffer.rpartition(\"\\\\\\\\\\\\\\\\n\")\\\\\\\\n                    yield complete_line + \"\\\\\\\\\\\\\\\\n\"\\\\\\\\n    finally:\\\\\\\\n        if line_buffer:\\\\\\\\n            yield line_buffer  # Yield any remaining content in the buffer\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\nasync def stream_summarize_code(\\\\\\\\n    self,\\\\\\\\n    code: str,\\\\\\\\n    *,\\\\\\\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\\\\\n):\\\\\\\\n    \"\"\"\\\\\\\\n        Streams the summarization of provided code snippet using the OpenAI API.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            code (str): The code snippet to summarize.\\\\\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\\\\\n                Defaults to SummaryCompletionConfigs().\\\\\\\\n\\\\\\\\n        Yields:\\\\\\\\n            Each part of the summary as it is received from the OpenAI API.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    prompt = self._interpolate_prompt(code, configs.prompt_template)\\\\\\\\n    messages = self._create_messages_list(\\\\\\\\n        system_message=configs.system_message, user_message=prompt\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    async for summary_part in self._stream_chat_responses(\\\\\\\\n        messages, configs=configs\\\\\\\\n    ):\\\\\\\\n        yield summary_part\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom openai import OpenAI, AsyncOpenAI\\\\nfrom openai import OpenAI, AsyncOpenAI\\\\nfrom openai.types.chat.chat_completion_system_message_param import ChatCompletionSystemMessageParam\\\\nfrom openai.types.chat.chat_completion_user_message_param import ChatCompletionUserMessageParam\\\\nfrom openai.types.chat.chat_completion import ChatCompletion\\\\nfrom openai.types.chat.chat_completion_chunk import ChatCompletionChunk\\\\nfrom openai.types.chat.chat_completion_message_param import ChatCompletionMessageParam\\\\nfrom openai._streaming import AsyncStream\\\\nfrom temp import code_example\\\\nfrom prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, COD_SUMMARIZATION_PROMPT, summary_prompt_list\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\n# Example usage\\\\nasync def main():\\\\n    client = AsyncOpenAI()  # Make sure to create an AsyncOpenAI instance\\\\n    summarizer = OpenAISummarizer(client=client)\\\\n    async for summary_part in summarizer.stream_summarize_code(code_example):\\\\n        print(summary_part)\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom openai import OpenAI, AsyncOpenAI\\\\nfrom openai import OpenAI, AsyncOpenAI\\\\nfrom temp import code_example\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport asyncio\\nfrom pydantic import BaseModel\\nfrom typing import Literal\\nfrom openai import OpenAI, AsyncOpenAI\\nfrom openai.resources.chat.completions import Completions\\nfrom openai.types.chat.chat_completion_system_message_param import ChatCompletionSystemMessageParam\\nfrom openai.types.chat.chat_completion_user_message_param import ChatCompletionUserMessageParam\\nfrom openai.types.chat.chat_completion import ChatCompletion\\nfrom openai.types.chat.chat_completion_chunk import ChatCompletionChunk\\nfrom openai.types.chat.chat_completion_message_param import ChatCompletionMessageParam\\nfrom openai._streaming import AsyncStream\\nfrom temp import code_example\\nfrom prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, COD_SUMMARIZATION_PROMPT, summary_prompt_list\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "variable_assignments": [],
            "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__STANDALONE_BLOCK-1",
            "parent_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE",
            "block_type": "STANDALONE_BLOCK",
            "start_line_num": 307,
            "end_line_num": 310,
            "code_content": "asyncio.run(main())\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__FUNCTION-main"
                },
                {
                    "import_names": [
                        {
                            "name": "asyncio",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nasyncio.run(main())\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport asyncio\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "class_name": "SummaryCompletionConfigs",
            "decorators": null,
            "bases": [
                "BaseModel"
            ],
            "docstring": "Configs for the summarization completion.\n\nUsed to set the chat completion parameters for the OpenAI chat completions method call.\n\nArgs:\n    - system_message (str): The system message used for chat completion.\n    - prompt_template (str): The prompt template used for chat completion. This should contain \"{code}\" to\n        insert the code at that point; otherwise, the code snippet will be appended below the prompt.\n    - model (str): The model to use for the completion. Default is \"gpt-4-1106-preview\".\n    - max_tokens (int | None): The maximum number of tokens to generate. 'None' implies no limit. Default is None.\n    - presence_penalty (float | None): Penalty for new tokens based on their presence in the text so far.\n        Default is None.\n    - stream (bool): Whether to stream back partial progress. Default is False.\n    - temperature (float): Sampling temperature to use. Default is 0.0.\n\nNotes:\n    - prompt_template should contain \"{code}\", if not, the code snippet will be appended below the prompt.\n    - model must be a valid OpenAI model name.\n\nExamples:\n    >>> system_message = \"Summarize the following code.\"\n    >>> prompt_template = '''Summarize the following code.\n    ... CODE:\n    ... ```Python\n    ... {code}\n    ... ```\n    ... '''\n    >>> summary_completion_configs = SummaryCompletionConfigs(\n    ...     system_message=system_message,\n    ...     prompt_template=prompt_template,\n    ...     model=\"gpt-4-1106-preview\",\n    ...     max_tokens=100,\n    ...     presence_penalty=0.0,\n    ...     stream=False,\n    ...     temperature=0.0,\n    ... )",
            "attributes": null,
            "keywords": null,
            "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-SummaryCompletionConfigs",
            "parent_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 25,
            "end_line_num": 88,
            "code_content": "\n\nclass SummaryCompletionConfigs(BaseModel):\n    \"\"\"\n    Configs for the summarization completion.\n\n    Used to set the chat completion parameters for the OpenAI chat completions method call.\n\n    Args:\n        - system_message (str): The system message used for chat completion.\n        - prompt_template (str): The prompt template used for chat completion. This should contain \"{code}\" to\n            insert the code at that point; otherwise, the code snippet will be appended below the prompt.\n        - model (str): The model to use for the completion. Default is \"gpt-4-1106-preview\".\n        - max_tokens (int | None): The maximum number of tokens to generate. 'None' implies no limit. Default is None.\n        - presence_penalty (float | None): Penalty for new tokens based on their presence in the text so far.\n            Default is None.\n        - stream (bool): Whether to stream back partial progress. Default is False.\n        - temperature (float): Sampling temperature to use. Default is 0.0.\n\n    Notes:\n        - prompt_template should contain \"{code}\", if not, the code snippet will be appended below the prompt.\n        - model must be a valid OpenAI model name.\n\n    Examples:\n        >>> system_message = \"Summarize the following code.\"\n        >>> prompt_template = '''Summarize the following code.\n        ... CODE:\n        ... ```Python\n        ... {code}\n        ... ```\n        ... '''\n        >>> summary_completion_configs = SummaryCompletionConfigs(\n        ...     system_message=system_message,\n        ...     prompt_template=prompt_template,\n        ...     model=\"gpt-4-1106-preview\",\n        ...     max_tokens=100,\n        ...     presence_penalty=0.0,\n        ...     stream=False,\n        ...     temperature=0.0,\n        ... )\n    \"\"\"\n\n    system_message: str = SUMMARIZER_DEFAULT_INSTRUCTIONS\n    prompt_template: str = COD_SUMMARIZATION_PROMPT\n    model: Literal[\n        \"gpt-4-1106-preview\",\n        \"gpt-4-vision-preview\",\n        \"gpt-4\",\n        \"gpt-4-0314\",\n        \"gpt-4-0613\",\n        \"gpt-4-32k\",\n        \"gpt-4-32k-0314\",\n        \"gpt-4-32k-0613\",\n        \"gpt-3.5-turbo-1106\",\n        \"gpt-3.5-turbo\",\n        \"gpt-3.5-turbo-16k\",\n        \"gpt-3.5-turbo-0301\",\n        \"gpt-3.5-turbo-0613\",\n        \"gpt-3.5-turbo-16k-0613\",\n    ] = \"gpt-4-1106-preview\"\n    max_tokens: int | None = None\n    stream: bool = False\n    temperature: float = 0.0\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "BaseModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "pydantic",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Literal",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "OpenAI",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "AsyncOpenAI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "summary_prompt_list",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "prompts.summarization_prompts",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:ai_services:prompts:summarization_prompts.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "summary_prompt_list",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "prompts.summarization_prompts",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:ai_services:prompts:summarization_prompts.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\nclass SummaryCompletionConfigs(BaseModel):\\n    \"\"\"\\n    Configs for the summarization completion.\\n\\n    Used to set the chat completion parameters for the OpenAI chat completions method call.\\n\\n    Args:\\n        - system_message (str): The system message used for chat completion.\\n        - prompt_template (str): The prompt template used for chat completion. This should contain \"{code}\" to\\n            insert the code at that point; otherwise, the code snippet will be appended below the prompt.\\n        - model (str): The model to use for the completion. Default is \"gpt-4-1106-preview\".\\n        - max_tokens (int | None): The maximum number of tokens to generate. \\'None\\' implies no limit. Default is None.\\n        - presence_penalty (float | None): Penalty for new tokens based on their presence in the text so far.\\n            Default is None.\\n        - stream (bool): Whether to stream back partial progress. Default is False.\\n        - temperature (float): Sampling temperature to use. Default is 0.0.\\n\\n    Notes:\\n        - prompt_template should contain \"{code}\", if not, the code snippet will be appended below the prompt.\\n        - model must be a valid OpenAI model name.\\n\\n    Examples:\\n        >>> system_message = \"Summarize the following code.\"\\n        >>> prompt_template = \\'\\'\\'Summarize the following code.\\n        ... CODE:\\n        ... ```Python\\n        ... {code}\\n        ... ```\\n        ... \\'\\'\\'\\n        >>> summary_completion_configs = SummaryCompletionConfigs(\\n        ...     system_message=system_message,\\n        ...     prompt_template=prompt_template,\\n        ...     model=\"gpt-4-1106-preview\",\\n        ...     max_tokens=100,\\n        ...     presence_penalty=0.0,\\n        ...     stream=False,\\n        ...     temperature=0.0,\\n        ... )\\n    \"\"\"\\n\\n    system_message: str = SUMMARIZER_DEFAULT_INSTRUCTIONS\\n    prompt_template: str = COD_SUMMARIZATION_PROMPT\\n    model: Literal[\\n        \"gpt-4-1106-preview\",\\n        \"gpt-4-vision-preview\",\\n        \"gpt-4\",\\n        \"gpt-4-0314\",\\n        \"gpt-4-0613\",\\n        \"gpt-4-32k\",\\n        \"gpt-4-32k-0314\",\\n        \"gpt-4-32k-0613\",\\n        \"gpt-3.5-turbo-1106\",\\n        \"gpt-3.5-turbo\",\\n        \"gpt-3.5-turbo-16k\",\\n        \"gpt-3.5-turbo-0301\",\\n        \"gpt-3.5-turbo-0613\",\\n        \"gpt-3.5-turbo-16k-0613\",\\n    ] = \"gpt-4-1106-preview\"\\n    max_tokens: int | None = None\\n    stream: bool = False\\n    temperature: float = 0.0\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom pydantic import BaseModel\\nfrom typing import Literal\\nfrom openai import OpenAI, AsyncOpenAI\\nfrom prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, COD_SUMMARIZATION_PROMPT, summary_prompt_list\\nfrom prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, COD_SUMMARIZATION_PROMPT, summary_prompt_list\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "class_name": "OpenAISummarizer",
            "decorators": null,
            "bases": null,
            "docstring": "A class for summarizing code snippets using the OpenAI API.\n\nArgs:\n    - client (OpenAI): The OpenAI client used for making API requests.\n    - summary_prompt_list (list[str], optional): A list of summary prompts to be used. Defaults to an empty list.\n\nAttributes:\n    - client (OpenAI): The OpenAI client used for making API requests.\n    - prompt_list (list[str]): A list of summary prompts.\n    - default_prompt (str): The default summary prompt.\n\nMethods:\n    summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\n        Summarizes the provided code snippet using the OpenAI API.\n\nExamples:\n    >>> client = OpenAI()\n    >>> summarizer = Summarizer(client=client)\n    >>> code_example = \"print('Hello, world')\"\n    >>> summary = summarizer.summarize_code(code_example)\n    >>> print(summary)",
            "attributes": null,
            "keywords": null,
            "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer",
            "parent_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 88,
            "end_line_num": 299,
            "code_content": "\n\nclass OpenAISummarizer:\n    \"\"\"\n    A class for summarizing code snippets using the OpenAI API.\n\n    Args:\n        - client (OpenAI): The OpenAI client used for making API requests.\n        - summary_prompt_list (list[str], optional): A list of summary prompts to be used. Defaults to an empty list.\n\n    Attributes:\n        - client (OpenAI): The OpenAI client used for making API requests.\n        - prompt_list (list[str]): A list of summary prompts.\n        - default_prompt (str): The default summary prompt.\n\n    Methods:\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\n            Summarizes the provided code snippet using the OpenAI API.\n\n    Examples:\n        >>> client = OpenAI()\n        >>> summarizer = Summarizer(client=client)\n        >>> code_example = \"print('Hello, world')\"\n        >>> summary = summarizer.summarize_code(code_example)\n        >>> print(summary)\n    \"\"\"\n\n    def __init__(\n        self,\n        client: OpenAI | AsyncOpenAI,\n        *,\n        summary_prompt_list: list[str] = summary_prompt_list,\n    ) -> None:\n        self.client: OpenAI | AsyncOpenAI = client\n        self.prompt_list: list[str] = summary_prompt_list\n        self.default_prompt: str = self.prompt_list[0]\n\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\n        \"\"\"Creates a system message for chat completion using OpenAi's ChatCompletionSystemMessageParam class.\"\"\"\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\n\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\n        \"\"\"Creates a user message for chat completion using OpenAi's ChatCompletionUserMessageParam class.\"\"\"\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\n\n    def _create_messages_list(\n        self,\n        system_message: str,\n        user_message: str,\n    ) -> list[ChatCompletionMessageParam]:\n        \"\"\"\n        Creates a list of messages for chat completion, including both system and user messages.\n\n        Args:\n            system_message (str): The system message content.\n            user_message (str): The user message content.\n\n        Returns:\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI's\n                ChatCompletionMessageParam classes.\n        \"\"\"\n\n        return [\n            self._create_system_message(system_message),\n            self._create_user_message(user_message),\n        ]\n\n    def _interpolate_prompt(self, code: str, prompt_template: str | None = None) -> str:\n        \"\"\"\n        Returns the prompt_template for the code snippet.\n\n        Args:\n            code (str): The code snippet.\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\n\n        Returns:\n            str: The formatted prompt.\n\n        Notes:\n            - If prompt_template is not provided, the default prompt will be used.\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\n        \"\"\"\n\n        if not prompt_template:\n            return self.default_prompt.format(code=code)\n\n        else:\n            if \"{code}\" in prompt_template:\n                return prompt_template.format(code=code)\n            else:\n                return f\"{prompt_template}\\n\\n{code}\"\n\n    def _get_summary(\n        self,\n        messages: list[ChatCompletionMessageParam],\n        *,\n        configs: SummaryCompletionConfigs,\n    ) -> str | None:\n        \"\"\"\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\n        Args:\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\n        Returns:\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\n        \"\"\"\n\n        response: ChatCompletion = self.client.chat.completions.create(\n            messages=messages,\n            model=configs.model,\n            max_tokens=configs.max_tokens,\n            stream=False,\n            temperature=configs.temperature,\n        )\n\n        return response.choices[0].message.content\n\n    def summarize_code(\n        self,\n        code: str,\n        *,\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n    ) -> str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n        prompt: str = self._interpolate_prompt(code, configs.prompt_template)\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n            system_message=configs.system_message, user_message=prompt\n        )\n\n        summary: str | None = self._get_summary(messages, configs=configs)\n        return summary if summary else \"Summary not found.\"\n\n    async def _stream_chat_responses(\n        self,\n        messages: list[ChatCompletionMessageParam],\n        *,\n        configs: SummaryCompletionConfigs,\n    ):\n        stream: AsyncStream[\n            ChatCompletionChunk\n        ] = await self.client.chat.completions.create(\n            messages=messages,\n            model=configs.model,\n            max_tokens=configs.max_tokens,\n            stream=True,\n            temperature=configs.temperature,\n        )\n\n        line_buffer = \"\"  # Buffer to accumulate tokens\n\n        try:\n            async for chunk in stream:\n                for choice in chunk.choices:\n                    content = choice.delta.content\n                    line_buffer += content\n\n                    if \"\\n\" in content:  # Check for newline character\n                        complete_line, _, line_buffer = line_buffer.rpartition(\"\\n\")\n                        yield complete_line + \"\\n\"\n        finally:\n            if line_buffer:\n                yield line_buffer  # Yield any remaining content in the buffer\n\n    async def stream_summarize_code(\n        self,\n        code: str,\n        *,\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n    ):\n        \"\"\"\n        Streams the summarization of provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Yields:\n            Each part of the summary as it is received from the OpenAI API.\n        \"\"\"\n\n        prompt = self._interpolate_prompt(code, configs.prompt_template)\n        messages = self._create_messages_list(\n            system_message=configs.system_message, user_message=prompt\n        )\n\n        async for summary_part in self._stream_chat_responses(\n            messages, configs=configs\n        ):\n            yield summary_part\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-SummaryCompletionConfigs"
                },
                {
                    "code_block_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__FUNCTION-main"
                },
                {
                    "import_names": [
                        {
                            "name": "OpenAI",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "AsyncOpenAI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "OpenAI",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "AsyncOpenAI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ChatCompletionSystemMessageParam",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.chat.chat_completion_system_message_param",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ChatCompletionUserMessageParam",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.chat.chat_completion_user_message_param",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ChatCompletion",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.chat.chat_completion",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ChatCompletionChunk",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.chat.chat_completion_chunk",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ChatCompletionMessageParam",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.chat.chat_completion_message_param",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "AsyncStream",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai._streaming",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "code_example",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "temp",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:ai_services:temp.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "SUMMARIZER_DEFAULT_INSTRUCTIONS",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "COD_SUMMARIZATION_PROMPT",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "summary_prompt_list",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "prompts.summarization_prompts",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:ai_services:prompts:summarization_prompts.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\nclass OpenAISummarizer:\\n    \"\"\"\\n    A class for summarizing code snippets using the OpenAI API.\\n\\n    Args:\\n        - client (OpenAI): The OpenAI client used for making API requests.\\n        - summary_prompt_list (list[str], optional): A list of summary prompts to be used. Defaults to an empty list.\\n\\n    Attributes:\\n        - client (OpenAI): The OpenAI client used for making API requests.\\n        - prompt_list (list[str]): A list of summary prompts.\\n        - default_prompt (str): The default summary prompt.\\n\\n    Methods:\\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\\n            Summarizes the provided code snippet using the OpenAI API.\\n\\n    Examples:\\n        >>> client = OpenAI()\\n        >>> summarizer = Summarizer(client=client)\\n        >>> code_example = \"print(\\'Hello, world\\')\"\\n        >>> summary = summarizer.summarize_code(code_example)\\n        >>> print(summary)\\n    \"\"\"\\n\\n    def __init__(\\n        self,\\n        client: OpenAI | AsyncOpenAI,\\n        *,\\n        summary_prompt_list: list[str] = summary_prompt_list,\\n    ) -> None:\\n        self.client: OpenAI | AsyncOpenAI = client\\n        self.prompt_list: list[str] = summary_prompt_list\\n        self.default_prompt: str = self.prompt_list[0]\\n\\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\n        \"\"\"Creates a system message for chat completion using OpenAi\\'s ChatCompletionSystemMessageParam class.\"\"\"\\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\n\\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\n        \"\"\"Creates a user message for chat completion using OpenAi\\'s ChatCompletionUserMessageParam class.\"\"\"\\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\\n\\n    def _create_messages_list(\\n        self,\\n        system_message: str,\\n        user_message: str,\\n    ) -> list[ChatCompletionMessageParam]:\\n        \"\"\"\\n        Creates a list of messages for chat completion, including both system and user messages.\\n\\n        Args:\\n            system_message (str): The system message content.\\n            user_message (str): The user message content.\\n\\n        Returns:\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\'s\\n                ChatCompletionMessageParam classes.\\n        \"\"\"\\n\\n        return [\\n            self._create_system_message(system_message),\\n            self._create_user_message(user_message),\\n        ]\\n\\n    def _interpolate_prompt(self, code: str, prompt_template: str | None = None) -> str:\\n        \"\"\"\\n        Returns the prompt_template for the code snippet.\\n\\n        Args:\\n            code (str): The code snippet.\\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\\n\\n        Returns:\\n            str: The formatted prompt.\\n\\n        Notes:\\n            - If prompt_template is not provided, the default prompt will be used.\\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\\n        \"\"\"\\n\\n        if not prompt_template:\\n            return self.default_prompt.format(code=code)\\n\\n        else:\\n            if \"{code}\" in prompt_template:\\n                return prompt_template.format(code=code)\\n            else:\\n                return f\"{prompt_template}\\\\n\\\\n{code}\"\\n\\n    def _get_summary(\\n        self,\\n        messages: list[ChatCompletionMessageParam],\\n        *,\\n        configs: SummaryCompletionConfigs,\\n    ) -> str | None:\\n        \"\"\"\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\n\\n        Args:\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\n\\n        Returns:\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\n        \"\"\"\\n\\n        response: ChatCompletion = self.client.chat.completions.create(\\n            messages=messages,\\n            model=configs.model,\\n            max_tokens=configs.max_tokens,\\n            stream=False,\\n            temperature=configs.temperature,\\n        )\\n\\n        return response.choices[0].message.content\\n\\n    def summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n    ) -> str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n        prompt: str = self._interpolate_prompt(code, configs.prompt_template)\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n            system_message=configs.system_message, user_message=prompt\\n        )\\n\\n        summary: str | None = self._get_summary(messages, configs=configs)\\n        return summary if summary else \"Summary not found.\"\\n\\n    async def _stream_chat_responses(\\n        self,\\n        messages: list[ChatCompletionMessageParam],\\n        *,\\n        configs: SummaryCompletionConfigs,\\n    ):\\n        stream: AsyncStream[\\n            ChatCompletionChunk\\n        ] = await self.client.chat.completions.create(\\n            messages=messages,\\n            model=configs.model,\\n            max_tokens=configs.max_tokens,\\n            stream=True,\\n            temperature=configs.temperature,\\n        )\\n\\n        line_buffer = \"\"  # Buffer to accumulate tokens\\n\\n        try:\\n            async for chunk in stream:\\n                for choice in chunk.choices:\\n                    content = choice.delta.content\\n                    line_buffer += content\\n\\n                    if \"\\\\n\" in content:  # Check for newline character\\n                        complete_line, _, line_buffer = line_buffer.rpartition(\"\\\\n\")\\n                        yield complete_line + \"\\\\n\"\\n        finally:\\n            if line_buffer:\\n                yield line_buffer  # Yield any remaining content in the buffer\\n\\n    async def stream_summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n    ):\\n        \"\"\"\\n        Streams the summarization of provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Yields:\\n            Each part of the summary as it is received from the OpenAI API.\\n        \"\"\"\\n\\n        prompt = self._interpolate_prompt(code, configs.prompt_template)\\n        messages = self._create_messages_list(\\n            system_message=configs.system_message, user_message=prompt\\n        )\\n\\n        async for summary_part in self._stream_chat_responses(\\n            messages, configs=configs\\n        ):\\n            yield summary_part\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef __init__(\\\\n    self,\\\\n    client: OpenAI | AsyncOpenAI,\\\\n    *,\\\\n    summary_prompt_list: list[str] = summary_prompt_list,\\\\n) -> None:\\\\n    self.client: OpenAI | AsyncOpenAI = client\\\\n    self.prompt_list: list[str] = summary_prompt_list\\\\n    self.default_prompt: str = self.prompt_list[0]\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\\\n    \"\"\"Creates a system message for chat completion using OpenAi\\\\\\'s ChatCompletionSystemMessageParam class.\"\"\"\\\\n    return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\\\n    \"\"\"Creates a user message for chat completion using OpenAi\\\\\\'s ChatCompletionUserMessageParam class.\"\"\"\\\\n    return ChatCompletionUserMessageParam(content=content, role=\"user\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _create_messages_list(\\\\n    self,\\\\n    system_message: str,\\\\n    user_message: str,\\\\n) -> list[ChatCompletionMessageParam]:\\\\n    \"\"\"\\\\n        Creates a list of messages for chat completion, including both system and user messages.\\\\n\\\\n        Args:\\\\n            system_message (str): The system message content.\\\\n            user_message (str): The user message content.\\\\n\\\\n        Returns:\\\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\\\\\'s\\\\n                ChatCompletionMessageParam classes.\\\\n        \"\"\"\\\\n\\\\n    return [\\\\n        self._create_system_message(system_message),\\\\n        self._create_user_message(user_message),\\\\n    ]\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _interpolate_prompt(self, code: str, prompt_template: str | None = None) -> str:\\\\n    \"\"\"\\\\n        Returns the prompt_template for the code snippet.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet.\\\\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\\\\n\\\\n        Returns:\\\\n            str: The formatted prompt.\\\\n\\\\n        Notes:\\\\n            - If prompt_template is not provided, the default prompt will be used.\\\\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\\\\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\\\\n        \"\"\"\\\\n\\\\n    if not prompt_template:\\\\n        return self.default_prompt.format(code=code)\\\\n\\\\n    else:\\\\n        if \"{code}\" in prompt_template:\\\\n            return prompt_template.format(code=code)\\\\n        else:\\\\n            return f\"{prompt_template}\\\\\\\\n\\\\\\\\n{code}\"\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _get_summary(\\\\n    self,\\\\n    messages: list[ChatCompletionMessageParam],\\\\n    *,\\\\n    configs: SummaryCompletionConfigs,\\\\n) -> str | None:\\\\n    \"\"\"\\\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\\\n\\\\n        Args:\\\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\\\n\\\\n        Returns:\\\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\\\n        \"\"\"\\\\n\\\\n    response: ChatCompletion = self.client.chat.completions.create(\\\\n        messages=messages,\\\\n        model=configs.model,\\\\n        max_tokens=configs.max_tokens,\\\\n        stream=False,\\\\n        temperature=configs.temperature,\\\\n    )\\\\n\\\\n    return response.choices[0].message.content\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef summarize_code(\\\\n    self,\\\\n    code: str,\\\\n    *,\\\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\n) -> str:\\\\n    \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n\\\\n    prompt: str = self._interpolate_prompt(code, configs.prompt_template)\\\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\n        system_message=configs.system_message, user_message=prompt\\\\n    )\\\\n\\\\n    summary: str | None = self._get_summary(messages, configs=configs)\\\\n    return summary if summary else \"Summary not found.\"\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\nasync def _stream_chat_responses(\\\\n    self,\\\\n    messages: list[ChatCompletionMessageParam],\\\\n    *,\\\\n    configs: SummaryCompletionConfigs,\\\\n):\\\\n    stream: AsyncStream[\\\\n        ChatCompletionChunk\\\\n    ] = await self.client.chat.completions.create(\\\\n        messages=messages,\\\\n        model=configs.model,\\\\n        max_tokens=configs.max_tokens,\\\\n        stream=True,\\\\n        temperature=configs.temperature,\\\\n    )\\\\n\\\\n    line_buffer = \"\"  # Buffer to accumulate tokens\\\\n\\\\n    try:\\\\n        async for chunk in stream:\\\\n            for choice in chunk.choices:\\\\n                content = choice.delta.content\\\\n                line_buffer += content\\\\n\\\\n                if \"\\\\\\\\n\" in content:  # Check for newline character\\\\n                    complete_line, _, line_buffer = line_buffer.rpartition(\"\\\\\\\\n\")\\\\n                    yield complete_line + \"\\\\\\\\n\"\\\\n    finally:\\\\n        if line_buffer:\\\\n            yield line_buffer  # Yield any remaining content in the buffer\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\nasync def stream_summarize_code(\\\\n    self,\\\\n    code: str,\\\\n    *,\\\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\\\n):\\\\n    \"\"\"\\\\n        Streams the summarization of provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Yields:\\\\n            Each part of the summary as it is received from the OpenAI API.\\\\n        \"\"\"\\\\n\\\\n    prompt = self._interpolate_prompt(code, configs.prompt_template)\\\\n    messages = self._create_messages_list(\\\\n        system_message=configs.system_message, user_message=prompt\\\\n    )\\\\n\\\\n    async for summary_part in self._stream_chat_responses(\\\\n        messages, configs=configs\\\\n    ):\\\\n        yield summary_part\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom openai import OpenAI, AsyncOpenAI\\nfrom openai import OpenAI, AsyncOpenAI\\nfrom openai.types.chat.chat_completion_system_message_param import ChatCompletionSystemMessageParam\\nfrom openai.types.chat.chat_completion_user_message_param import ChatCompletionUserMessageParam\\nfrom openai.types.chat.chat_completion import ChatCompletion\\nfrom openai.types.chat.chat_completion_chunk import ChatCompletionChunk\\nfrom openai.types.chat.chat_completion_message_param import ChatCompletionMessageParam\\nfrom openai._streaming import AsyncStream\\nfrom temp import code_example\\nfrom prompts.summarization_prompts import SUMMARIZER_DEFAULT_INSTRUCTIONS, COD_SUMMARIZATION_PROMPT, summary_prompt_list\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-__init__",
                    "parent_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 114,
                    "end_line_num": 124,
                    "code_content": "\ndef __init__(\n    self,\n    client: OpenAI | AsyncOpenAI,\n    *,\n    summary_prompt_list: list[str] = summary_prompt_list,\n) -> None:\n    self.client: OpenAI | AsyncOpenAI = client\n    self.prompt_list: list[str] = summary_prompt_list\n    self.default_prompt: str = self.prompt_list[0]\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef __init__(\\n    self,\\n    client: OpenAI | AsyncOpenAI,\\n    *,\\n    summary_prompt_list: list[str] = summary_prompt_list,\\n) -> None:\\n    self.client: OpenAI | AsyncOpenAI = client\\n    self.prompt_list: list[str] = summary_prompt_list\\n    self.default_prompt: str = self.prompt_list[0]\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_create_system_message",
                    "docstring": "Creates a system message for chat completion using OpenAi's ChatCompletionSystemMessageParam class.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "ChatCompletionSystemMessageParam",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_create_system_message",
                    "parent_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 124,
                    "end_line_num": 128,
                    "code_content": "\ndef _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\n    \"\"\"Creates a system message for chat completion using OpenAi's ChatCompletionSystemMessageParam class.\"\"\"\n    return ChatCompletionSystemMessageParam(content=content, role=\"system\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\n    \"\"\"Creates a system message for chat completion using OpenAi\\'s ChatCompletionSystemMessageParam class.\"\"\"\\n    return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_create_user_message",
                    "docstring": "Creates a user message for chat completion using OpenAi's ChatCompletionUserMessageParam class.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "ChatCompletionUserMessageParam",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_create_user_message",
                    "parent_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 128,
                    "end_line_num": 132,
                    "code_content": "\ndef _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\n    \"\"\"Creates a user message for chat completion using OpenAi's ChatCompletionUserMessageParam class.\"\"\"\n    return ChatCompletionUserMessageParam(content=content, role=\"user\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\n    \"\"\"Creates a user message for chat completion using OpenAi\\'s ChatCompletionUserMessageParam class.\"\"\"\\n    return ChatCompletionUserMessageParam(content=content, role=\"user\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_create_messages_list",
                    "docstring": "Creates a list of messages for chat completion, including both system and user messages.\n\nArgs:\n    system_message (str): The system message content.\n    user_message (str): The user message content.\n\nReturns:\n    list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI's\n        ChatCompletionMessageParam classes.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "list[ChatCompletionMessageParam]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_create_messages_list",
                    "parent_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 132,
                    "end_line_num": 154,
                    "code_content": "\ndef _create_messages_list(\n    self,\n    system_message: str,\n    user_message: str,\n) -> list[ChatCompletionMessageParam]:\n    \"\"\"\n        Creates a list of messages for chat completion, including both system and user messages.\n\n        Args:\n            system_message (str): The system message content.\n            user_message (str): The user message content.\n\n        Returns:\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI's\n                ChatCompletionMessageParam classes.\n        \"\"\"\n\n    return [\n        self._create_system_message(system_message),\n        self._create_user_message(user_message),\n    ]\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _create_messages_list(\\n    self,\\n    system_message: str,\\n    user_message: str,\\n) -> list[ChatCompletionMessageParam]:\\n    \"\"\"\\n        Creates a list of messages for chat completion, including both system and user messages.\\n\\n        Args:\\n            system_message (str): The system message content.\\n            user_message (str): The user message content.\\n\\n        Returns:\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\'s\\n                ChatCompletionMessageParam classes.\\n        \"\"\"\\n\\n    return [\\n        self._create_system_message(system_message),\\n        self._create_user_message(user_message),\\n    ]\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_interpolate_prompt",
                    "docstring": "Returns the prompt_template for the code snippet.\n\nArgs:\n    code (str): The code snippet.\n    prompt_template (str | None): Custom prompt to be used. Defaults to None.\n\nReturns:\n    str: The formatted prompt.\n\nNotes:\n    - If prompt_template is not provided, the default prompt will be used.\n    - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\n    - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_interpolate_prompt",
                    "parent_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 154,
                    "end_line_num": 180,
                    "code_content": "\ndef _interpolate_prompt(self, code: str, prompt_template: str | None = None) -> str:\n    \"\"\"\n        Returns the prompt_template for the code snippet.\n\n        Args:\n            code (str): The code snippet.\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\n\n        Returns:\n            str: The formatted prompt.\n\n        Notes:\n            - If prompt_template is not provided, the default prompt will be used.\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\n        \"\"\"\n\n    if not prompt_template:\n        return self.default_prompt.format(code=code)\n\n    else:\n        if \"{code}\" in prompt_template:\n            return prompt_template.format(code=code)\n        else:\n            return f\"{prompt_template}\\n\\n{code}\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _interpolate_prompt(self, code: str, prompt_template: str | None = None) -> str:\\n    \"\"\"\\n        Returns the prompt_template for the code snippet.\\n\\n        Args:\\n            code (str): The code snippet.\\n            prompt_template (str | None): Custom prompt to be used. Defaults to None.\\n\\n        Returns:\\n            str: The formatted prompt.\\n\\n        Notes:\\n            - If prompt_template is not provided, the default prompt will be used.\\n            - If prompt_template contains \"{code}\", it will be replaced with the code snippet.\\n            - If prompt_template does not contain \"{code}\", the code snippet will be appended below the prompt_template.\\n        \"\"\"\\n\\n    if not prompt_template:\\n        return self.default_prompt.format(code=code)\\n\\n    else:\\n        if \"{code}\" in prompt_template:\\n            return prompt_template.format(code=code)\\n        else:\\n            return f\"{prompt_template}\\\\n\\\\n{code}\"\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_get_summary",
                    "docstring": "Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\nArgs:\n    messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n    configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\nReturns:\n    str | None: The summary generated by the OpenAI API, or None if no summary is found.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "str | None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_get_summary",
                    "parent_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 180,
                    "end_line_num": 207,
                    "code_content": "\ndef _get_summary(\n    self,\n    messages: list[ChatCompletionMessageParam],\n    *,\n    configs: SummaryCompletionConfigs,\n) -> str | None:\n    \"\"\"\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\n        Args:\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\n        Returns:\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\n        \"\"\"\n\n    response: ChatCompletion = self.client.chat.completions.create(\n        messages=messages,\n        model=configs.model,\n        max_tokens=configs.max_tokens,\n        stream=False,\n        temperature=configs.temperature,\n    )\n\n    return response.choices[0].message.content\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _get_summary(\\n    self,\\n    messages: list[ChatCompletionMessageParam],\\n    *,\\n    configs: SummaryCompletionConfigs,\\n) -> str | None:\\n    \"\"\"\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\n\\n        Args:\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\n\\n        Returns:\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\n        \"\"\"\\n\\n    response: ChatCompletion = self.client.chat.completions.create(\\n        messages=messages,\\n        model=configs.model,\\n        max_tokens=configs.max_tokens,\\n        stream=False,\\n        temperature=configs.temperature,\\n    )\\n\\n    return response.choices[0].message.content\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "summarize_code",
                    "docstring": "Summarizes the provided code snippet using the OpenAI API.\n\nArgs:\n    code (str): The code snippet to summarize.\n    configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n        Defaults to SummaryCompletionConfigs().\n\nReturns:\n    str: The summary of the provided code snippet.\n\nExamples:\n    >>> client = OpenAI()\n    >>> summarizer = Summarizer(client=client)\n    >>> code_example = \"print('Hello, world')\"\n    >>> summary = summarizer.summarize_code(code_example)\n    >>> print(summary)",
                    "decorators": null,
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-summarize_code",
                    "parent_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 207,
                    "end_line_num": 240,
                    "code_content": "\ndef summarize_code(\n    self,\n    code: str,\n    *,\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n) -> str:\n    \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n    prompt: str = self._interpolate_prompt(code, configs.prompt_template)\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n        system_message=configs.system_message, user_message=prompt\n    )\n\n    summary: str | None = self._get_summary(messages, configs=configs)\n    return summary if summary else \"Summary not found.\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef summarize_code(\\n    self,\\n    code: str,\\n    *,\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n) -> str:\\n    \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n    prompt: str = self._interpolate_prompt(code, configs.prompt_template)\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n        system_message=configs.system_message, user_message=prompt\\n    )\\n\\n    summary: str | None = self._get_summary(messages, configs=configs)\\n    return summary if summary else \"Summary not found.\"\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_stream_chat_responses",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "Function has no return annotation",
                    "is_method": true,
                    "is_async": true,
                    "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_stream_chat_responses",
                    "parent_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 240,
                    "end_line_num": 271,
                    "code_content": "\nasync def _stream_chat_responses(\n    self,\n    messages: list[ChatCompletionMessageParam],\n    *,\n    configs: SummaryCompletionConfigs,\n):\n    stream: AsyncStream[\n        ChatCompletionChunk\n    ] = await self.client.chat.completions.create(\n        messages=messages,\n        model=configs.model,\n        max_tokens=configs.max_tokens,\n        stream=True,\n        temperature=configs.temperature,\n    )\n\n    line_buffer = \"\"  # Buffer to accumulate tokens\n\n    try:\n        async for chunk in stream:\n            for choice in chunk.choices:\n                content = choice.delta.content\n                line_buffer += content\n\n                if \"\\n\" in content:  # Check for newline character\n                    complete_line, _, line_buffer = line_buffer.rpartition(\"\\n\")\n                    yield complete_line + \"\\n\"\n    finally:\n        if line_buffer:\n            yield line_buffer  # Yield any remaining content in the buffer\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\nasync def _stream_chat_responses(\\n    self,\\n    messages: list[ChatCompletionMessageParam],\\n    *,\\n    configs: SummaryCompletionConfigs,\\n):\\n    stream: AsyncStream[\\n        ChatCompletionChunk\\n    ] = await self.client.chat.completions.create(\\n        messages=messages,\\n        model=configs.model,\\n        max_tokens=configs.max_tokens,\\n        stream=True,\\n        temperature=configs.temperature,\\n    )\\n\\n    line_buffer = \"\"  # Buffer to accumulate tokens\\n\\n    try:\\n        async for chunk in stream:\\n            for choice in chunk.choices:\\n                content = choice.delta.content\\n                line_buffer += content\\n\\n                if \"\\\\n\" in content:  # Check for newline character\\n                    complete_line, _, line_buffer = line_buffer.rpartition(\"\\\\n\")\\n                    yield complete_line + \"\\\\n\"\\n    finally:\\n        if line_buffer:\\n            yield line_buffer  # Yield any remaining content in the buffer\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "stream_summarize_code",
                    "docstring": "Streams the summarization of provided code snippet using the OpenAI API.\n\nArgs:\n    code (str): The code snippet to summarize.\n    configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n        Defaults to SummaryCompletionConfigs().\n\nYields:\n    Each part of the summary as it is received from the OpenAI API.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "Function has no return annotation",
                    "is_method": true,
                    "is_async": true,
                    "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-stream_summarize_code",
                    "parent_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 271,
                    "end_line_num": 299,
                    "code_content": "\nasync def stream_summarize_code(\n    self,\n    code: str,\n    *,\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n):\n    \"\"\"\n        Streams the summarization of provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Yields:\n            Each part of the summary as it is received from the OpenAI API.\n        \"\"\"\n\n    prompt = self._interpolate_prompt(code, configs.prompt_template)\n    messages = self._create_messages_list(\n        system_message=configs.system_message, user_message=prompt\n    )\n\n    async for summary_part in self._stream_chat_responses(\n        messages, configs=configs\n    ):\n        yield summary_part\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\nasync def stream_summarize_code(\\n    self,\\n    code: str,\\n    *,\\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\\n):\\n    \"\"\"\\n        Streams the summarization of provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Yields:\\n            Each part of the summary as it is received from the OpenAI API.\\n        \"\"\"\\n\\n    prompt = self._interpolate_prompt(code, configs.prompt_template)\\n    messages = self._create_messages_list(\\n        system_message=configs.system_message, user_message=prompt\\n    )\\n\\n    async for summary_part in self._stream_chat_responses(\\n        messages, configs=configs\\n    ):\\n        yield summary_part\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        },
        {
            "function_name": "main",
            "docstring": null,
            "decorators": null,
            "parameters": null,
            "returns": "Function has no return annotation",
            "is_method": false,
            "is_async": true,
            "id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__FUNCTION-main",
            "parent_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 299,
            "end_line_num": 307,
            "code_content": "\n\n# Example usage\nasync def main():\n    client = AsyncOpenAI()  # Make sure to create an AsyncOpenAI instance\n    summarizer = OpenAISummarizer(client=client)\n    async for summary_part in summarizer.stream_summarize_code(code_example):\n        print(summary_part)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:ai_services:stream_summarizer_test.py__*__MODULE__*__CLASS-OpenAISummarizer"
                },
                {
                    "import_names": [
                        {
                            "name": "OpenAI",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "AsyncOpenAI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "OpenAI",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "AsyncOpenAI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "code_example",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "temp",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:ai_services:temp.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\n# Example usage\\nasync def main():\\n    client = AsyncOpenAI()  # Make sure to create an AsyncOpenAI instance\\n    summarizer = OpenAISummarizer(client=client)\\n    async for summary_part in summarizer.stream_summarize_code(code_example):\\n        print(summary_part)\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom openai import OpenAI, AsyncOpenAI\\nfrom openai import OpenAI, AsyncOpenAI\\nfrom temp import code_example\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        }
    ]
}