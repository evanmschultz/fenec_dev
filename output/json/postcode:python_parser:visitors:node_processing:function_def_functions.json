{
    "file_path": "postcode/python_parser/visitors/node_processing/function_def_functions.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Sequence",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                }
            ],
            "imported_from": "postcode.python_parser.models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:models:enums.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "DecoratorModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-DecoratorModel"
                },
                {
                    "name": "ParameterModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ParameterModel"
                },
                {
                    "name": "ParameterListModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ParameterListModel"
                }
            ],
            "imported_from": "postcode.python_parser.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "postcode.python_parser.visitors.node_processing.common_functions",
                    "as_name": "common_functions",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "PositionData",
                    "as_name": null,
                    "local_block_id": "postcode:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData"
                }
            ],
            "imported_from": "postcode.utilities.processing_context",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:utilities:processing_context.py__*__MODULE"
        }
    ],
    "id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 162,
    "code_content": "from typing import Sequence\n\nimport libcst\n\nfrom postcode.python_parser.model_builders.function_model_builder import (\n    FunctionModelBuilder,\n)\n\nfrom postcode.python_parser.models.enums import BlockType\nfrom postcode.python_parser.models.models import (\n    DecoratorModel,\n    ParameterListModel,\n    ParameterModel,\n)\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\n\nfrom postcode.utilities.processing_context import PositionData\n\n\ndef process_func_def(\n    func_id: str,\n    node: libcst.FunctionDef,\n    position_data: PositionData,\n    func_builder: FunctionModelBuilder,\n) -> None:\n    \"\"\"\n    Processes a libcst.FunctionDef node to build a function model.\n\n    Extracts various components of a function definition such as its docstring, code content, decorators, and return annotations, and updates the provided FunctionModelBuilder with these details.\n\n    Args:\n        func_id (str): The unique identifier for the function.\n        node (libcst.FunctionDef): The function definition node from the CST.\n        position_data (PositionData): Positional data for the function in the source code.\n        func_builder (FunctionModelBuilder): The builder used to construct the function model.\n\n    Example:\n        >>> func_builder = FunctionModelBuilder(id=\"func1\", ...)\n        >>> process_func_def(\"func1\", function_node, position_data, func_builder)\n        # Processes the function definition and updates the function builder.\n    \"\"\"\n\n    docstring: str | None = node.get_docstring()\n    code_content: str = common_functions.extract_code_content(node)\n    decorators: list[DecoratorModel] | None = common_functions.extract_decorators(\n        node.decorators\n    )\n\n    returns: str = (\n        _extract_return_annotation(node.returns)\n        if node.returns\n        else \"Function has no return annotation\"\n    )\n    (\n        func_builder.set_docstring(docstring)\n        .set_code_content(code_content)\n        .set_start_line_num(position_data.start)\n        .set_end_line_num(position_data.end)\n    )\n    (\n        func_builder.set_decorators(decorators)\n        .set_is_method(_func_is_method(func_id))\n        .set_is_async(_func_is_async(node))\n        .set_return_annotation(returns)\n    )\n\n\ndef process_parameters(\n    node: libcst.Parameters,\n) -> ParameterListModel | None:\n    \"\"\"\n    Processes libcst.Parameters node to create a ParameterListModel.\n\n    Extracts parameters, keyword-only parameters, positional-only parameters, and special arguments (like *args and **kwargs) from the function definition and forms a model representing these parameters.\n\n    Args:\n        node (libcst.Parameters): The parameters node from a function definition.\n\n    Returns:\n        ParameterListModel | None: A model representing the function's parameters, or None if there are no parameters.\n\n    Example:\n        >>> parameters_model = process_parameters(function_node.params)\n        # Processes the function parameters and returns a parameter model.\n    \"\"\"\n\n    params: list[ParameterModel] | None = (\n        _get_parameters_list(node.params) if node.params else []\n    )\n    kwonly_params: list[ParameterModel] | None = (\n        _get_parameters_list(node.kwonly_params) if node.kwonly_params else []\n    )\n    posonly_params: list[ParameterModel] | None = (\n        _get_parameters_list(node.posonly_params) if node.posonly_params else []\n    )\n\n    star_arg: ParameterModel | None = (\n        ParameterModel(\n            content=common_functions.extract_stripped_code_content(node.star_arg)\n        )\n        if node.star_arg and isinstance(node.star_arg, libcst.Param)\n        else None\n    )\n    star_kwarg: ParameterModel | None = (\n        ParameterModel(\n            content=common_functions.extract_stripped_code_content(node.star_kwarg)\n        )\n        if node.star_kwarg\n        else None\n    )\n\n    if params and kwonly_params and posonly_params and star_arg and star_kwarg:\n        return ParameterListModel(\n            params=params,\n            kwonly_params=kwonly_params,\n            posonly_params=posonly_params,\n            star_arg=star_arg,\n            star_kwarg=star_kwarg,\n        )\n\n\ndef _func_is_method(id: str) -> bool:\n    \"\"\"Returns true if an ancestor of the function is a class.\"\"\"\n\n    return str(BlockType.CLASS) in id\n\n\ndef _func_is_async(node: libcst.FunctionDef) -> bool:\n    \"\"\"Returns true if the function is async.\"\"\"\n\n    return True if node.asynchronous else False\n\n\ndef _get_parameters_list(\n    parameter_sequence: Sequence[libcst.Param],\n) -> list[ParameterModel] | None:\n    \"\"\"Returns a list of ParameterModel representing the parameters in a function definition.\"\"\"\n\n    params: list[ParameterModel] | None = None\n\n    if parameter_sequence:\n        params = []\n        for parameter in parameter_sequence:\n            param: ParameterModel = ParameterModel(\n                content=common_functions.extract_stripped_code_content(parameter)\n            )\n            params.append(param)\n\n    return params if params else None\n\n\ndef _extract_return_annotation(\n    node_returns: libcst.Annotation | None,\n) -> str:\n    \"\"\"Extracts the return annotation from a function definition.\"\"\"\n\n    if isinstance(node_returns, libcst.Annotation) and node_returns:\n        annotation: str | None = common_functions.extract_type_annotation(node_returns)\n        return annotation if annotation else \"No return annotation\"\n    else:\n        return \"No return annotation\"\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nfrom typing import Sequence\\n\\nimport libcst\\n\\nfrom postcode.python_parser.model_builders.function_model_builder import (\\n    FunctionModelBuilder,\\n)\\n\\nfrom postcode.python_parser.models.enums import BlockType\\nfrom postcode.python_parser.models.models import (\\n    DecoratorModel,\\n    ParameterListModel,\\n    ParameterModel,\\n)\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\n\\nfrom postcode.utilities.processing_context import PositionData\\n\\n\\ndef process_func_def(\\n    func_id: str,\\n    node: libcst.FunctionDef,\\n    position_data: PositionData,\\n    func_builder: FunctionModelBuilder,\\n) -> None:\\n    \"\"\"\\n    Processes a libcst.FunctionDef node to build a function model.\\n\\n    Extracts various components of a function definition such as its docstring, code content, decorators, and return annotations, and updates the provided FunctionModelBuilder with these details.\\n\\n    Args:\\n        func_id (str): The unique identifier for the function.\\n        node (libcst.FunctionDef): The function definition node from the CST.\\n        position_data (PositionData): Positional data for the function in the source code.\\n        func_builder (FunctionModelBuilder): The builder used to construct the function model.\\n\\n    Example:\\n        >>> func_builder = FunctionModelBuilder(id=\"func1\", ...)\\n        >>> process_func_def(\"func1\", function_node, position_data, func_builder)\\n        # Processes the function definition and updates the function builder.\\n    \"\"\"\\n\\n    docstring: str | None = node.get_docstring()\\n    code_content: str = common_functions.extract_code_content(node)\\n    decorators: list[DecoratorModel] | None = common_functions.extract_decorators(\\n        node.decorators\\n    )\\n\\n    returns: str = (\\n        _extract_return_annotation(node.returns)\\n        if node.returns\\n        else \"Function has no return annotation\"\\n    )\\n    (\\n        func_builder.set_docstring(docstring)\\n        .set_code_content(code_content)\\n        .set_start_line_num(position_data.start)\\n        .set_end_line_num(position_data.end)\\n    )\\n    (\\n        func_builder.set_decorators(decorators)\\n        .set_is_method(_func_is_method(func_id))\\n        .set_is_async(_func_is_async(node))\\n        .set_return_annotation(returns)\\n    )\\n\\n\\ndef process_parameters(\\n    node: libcst.Parameters,\\n) -> ParameterListModel | None:\\n    \"\"\"\\n    Processes libcst.Parameters node to create a ParameterListModel.\\n\\n    Extracts parameters, keyword-only parameters, positional-only parameters, and special arguments (like *args and **kwargs) from the function definition and forms a model representing these parameters.\\n\\n    Args:\\n        node (libcst.Parameters): The parameters node from a function definition.\\n\\n    Returns:\\n        ParameterListModel | None: A model representing the function\\'s parameters, or None if there are no parameters.\\n\\n    Example:\\n        >>> parameters_model = process_parameters(function_node.params)\\n        # Processes the function parameters and returns a parameter model.\\n    \"\"\"\\n\\n    params: list[ParameterModel] | None = (\\n        _get_parameters_list(node.params) if node.params else []\\n    )\\n    kwonly_params: list[ParameterModel] | None = (\\n        _get_parameters_list(node.kwonly_params) if node.kwonly_params else []\\n    )\\n    posonly_params: list[ParameterModel] | None = (\\n        _get_parameters_list(node.posonly_params) if node.posonly_params else []\\n    )\\n\\n    star_arg: ParameterModel | None = (\\n        ParameterModel(\\n            content=common_functions.extract_stripped_code_content(node.star_arg)\\n        )\\n        if node.star_arg and isinstance(node.star_arg, libcst.Param)\\n        else None\\n    )\\n    star_kwarg: ParameterModel | None = (\\n        ParameterModel(\\n            content=common_functions.extract_stripped_code_content(node.star_kwarg)\\n        )\\n        if node.star_kwarg\\n        else None\\n    )\\n\\n    if params and kwonly_params and posonly_params and star_arg and star_kwarg:\\n        return ParameterListModel(\\n            params=params,\\n            kwonly_params=kwonly_params,\\n            posonly_params=posonly_params,\\n            star_arg=star_arg,\\n            star_kwarg=star_kwarg,\\n        )\\n\\n\\ndef _func_is_method(id: str) -> bool:\\n    \"\"\"Returns true if an ancestor of the function is a class.\"\"\"\\n\\n    return str(BlockType.CLASS) in id\\n\\n\\ndef _func_is_async(node: libcst.FunctionDef) -> bool:\\n    \"\"\"Returns true if the function is async.\"\"\"\\n\\n    return True if node.asynchronous else False\\n\\n\\ndef _get_parameters_list(\\n    parameter_sequence: Sequence[libcst.Param],\\n) -> list[ParameterModel] | None:\\n    \"\"\"Returns a list of ParameterModel representing the parameters in a function definition.\"\"\"\\n\\n    params: list[ParameterModel] | None = None\\n\\n    if parameter_sequence:\\n        params = []\\n        for parameter in parameter_sequence:\\n            param: ParameterModel = ParameterModel(\\n                content=common_functions.extract_stripped_code_content(parameter)\\n            )\\n            params.append(param)\\n\\n    return params if params else None\\n\\n\\ndef _extract_return_annotation(\\n    node_returns: libcst.Annotation | None,\\n) -> str:\\n    \"\"\"Extracts the return annotation from a function definition.\"\"\"\\n\\n    if isinstance(node_returns, libcst.Annotation) and node_returns:\\n        annotation: str | None = common_functions.extract_type_annotation(node_returns)\\n        return annotation if annotation else \"No return annotation\"\\n    else:\\n        return \"No return annotation\"\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef process_func_def(\\\\n    func_id: str,\\\\n    node: libcst.FunctionDef,\\\\n    position_data: PositionData,\\\\n    func_builder: FunctionModelBuilder,\\\\n) -> None:\\\\n    \"\"\"\\\\n    Processes a libcst.FunctionDef node to build a function model.\\\\n\\\\n    Extracts various components of a function definition such as its docstring, code content, decorators, and return annotations, and updates the provided FunctionModelBuilder with these details.\\\\n\\\\n    Args:\\\\n        func_id (str): The unique identifier for the function.\\\\n        node (libcst.FunctionDef): The function definition node from the CST.\\\\n        position_data (PositionData): Positional data for the function in the source code.\\\\n        func_builder (FunctionModelBuilder): The builder used to construct the function model.\\\\n\\\\n    Example:\\\\n        >>> func_builder = FunctionModelBuilder(id=\"func1\", ...)\\\\n        >>> process_func_def(\"func1\", function_node, position_data, func_builder)\\\\n        # Processes the function definition and updates the function builder.\\\\n    \"\"\"\\\\n\\\\n    docstring: str | None = node.get_docstring()\\\\n    code_content: str = common_functions.extract_code_content(node)\\\\n    decorators: list[DecoratorModel] | None = common_functions.extract_decorators(\\\\n        node.decorators\\\\n    )\\\\n\\\\n    returns: str = (\\\\n        _extract_return_annotation(node.returns)\\\\n        if node.returns\\\\n        else \"Function has no return annotation\"\\\\n    )\\\\n    (\\\\n        func_builder.set_docstring(docstring)\\\\n        .set_code_content(code_content)\\\\n        .set_start_line_num(position_data.start)\\\\n        .set_end_line_num(position_data.end)\\\\n    )\\\\n    (\\\\n        func_builder.set_decorators(decorators)\\\\n        .set_is_method(_func_is_method(func_id))\\\\n        .set_is_async(_func_is_async(node))\\\\n        .set_return_annotation(returns)\\\\n    )\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.models import DecoratorModel, ParameterListModel, ParameterModel\\\\nimport libcst\\\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\\\nfrom postcode.utilities.processing_context import PositionData\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef process_parameters(\\\\n    node: libcst.Parameters,\\\\n) -> ParameterListModel | None:\\\\n    \"\"\"\\\\n    Processes libcst.Parameters node to create a ParameterListModel.\\\\n\\\\n    Extracts parameters, keyword-only parameters, positional-only parameters, and special arguments (like *args and **kwargs) from the function definition and forms a model representing these parameters.\\\\n\\\\n    Args:\\\\n        node (libcst.Parameters): The parameters node from a function definition.\\\\n\\\\n    Returns:\\\\n        ParameterListModel | None: A model representing the function\\\\\\'s parameters, or None if there are no parameters.\\\\n\\\\n    Example:\\\\n        >>> parameters_model = process_parameters(function_node.params)\\\\n        # Processes the function parameters and returns a parameter model.\\\\n    \"\"\"\\\\n\\\\n    params: list[ParameterModel] | None = (\\\\n        _get_parameters_list(node.params) if node.params else []\\\\n    )\\\\n    kwonly_params: list[ParameterModel] | None = (\\\\n        _get_parameters_list(node.kwonly_params) if node.kwonly_params else []\\\\n    )\\\\n    posonly_params: list[ParameterModel] | None = (\\\\n        _get_parameters_list(node.posonly_params) if node.posonly_params else []\\\\n    )\\\\n\\\\n    star_arg: ParameterModel | None = (\\\\n        ParameterModel(\\\\n            content=common_functions.extract_stripped_code_content(node.star_arg)\\\\n        )\\\\n        if node.star_arg and isinstance(node.star_arg, libcst.Param)\\\\n        else None\\\\n    )\\\\n    star_kwarg: ParameterModel | None = (\\\\n        ParameterModel(\\\\n            content=common_functions.extract_stripped_code_content(node.star_kwarg)\\\\n        )\\\\n        if node.star_kwarg\\\\n        else None\\\\n    )\\\\n\\\\n    if params and kwonly_params and posonly_params and star_arg and star_kwarg:\\\\n        return ParameterListModel(\\\\n            params=params,\\\\n            kwonly_params=kwonly_params,\\\\n            posonly_params=posonly_params,\\\\n            star_arg=star_arg,\\\\n            star_kwarg=star_kwarg,\\\\n        )\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.models import DecoratorModel, ParameterListModel, ParameterModel\\\\nfrom postcode.python_parser.models.models import DecoratorModel, ParameterListModel, ParameterModel\\\\nimport libcst\\\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _func_is_method(id: str) -> bool:\\\\n    \"\"\"Returns true if an ancestor of the function is a class.\"\"\"\\\\n\\\\n    return str(BlockType.CLASS) in id\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.enums import BlockType\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _func_is_async(node: libcst.FunctionDef) -> bool:\\\\n    \"\"\"Returns true if the function is async.\"\"\"\\\\n\\\\n    return True if node.asynchronous else False\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport libcst\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _get_parameters_list(\\\\n    parameter_sequence: Sequence[libcst.Param],\\\\n) -> list[ParameterModel] | None:\\\\n    \"\"\"Returns a list of ParameterModel representing the parameters in a function definition.\"\"\"\\\\n\\\\n    params: list[ParameterModel] | None = None\\\\n\\\\n    if parameter_sequence:\\\\n        params = []\\\\n        for parameter in parameter_sequence:\\\\n            param: ParameterModel = ParameterModel(\\\\n                content=common_functions.extract_stripped_code_content(parameter)\\\\n            )\\\\n            params.append(param)\\\\n\\\\n    return params if params else None\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.models import DecoratorModel, ParameterListModel, ParameterModel\\\\nfrom typing import Sequence\\\\nimport libcst\\\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _extract_return_annotation(\\\\n    node_returns: libcst.Annotation | None,\\\\n) -> str:\\\\n    \"\"\"Extracts the return annotation from a function definition.\"\"\"\\\\n\\\\n    if isinstance(node_returns, libcst.Annotation) and node_returns:\\\\n        annotation: str | None = common_functions.extract_type_annotation(node_returns)\\\\n        return annotation if annotation else \"No return annotation\"\\\\n    else:\\\\n        return \"No return annotation\"\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport libcst\\\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom typing import Sequence\\nimport libcst\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\nfrom postcode.python_parser.models.enums import BlockType\\nfrom postcode.python_parser.models.models import DecoratorModel, ParameterModel, ParameterListModel\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\nfrom postcode.utilities.processing_context import PositionData\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "function_name": "process_func_def",
            "docstring": "Processes a libcst.FunctionDef node to build a function model.\n\nExtracts various components of a function definition such as its docstring, code content, decorators, and return annotations, and updates the provided FunctionModelBuilder with these details.\n\nArgs:\n    func_id (str): The unique identifier for the function.\n    node (libcst.FunctionDef): The function definition node from the CST.\n    position_data (PositionData): Positional data for the function in the source code.\n    func_builder (FunctionModelBuilder): The builder used to construct the function model.\n\nExample:\n    >>> func_builder = FunctionModelBuilder(id=\"func1\", ...)\n    >>> process_func_def(\"func1\", function_node, position_data, func_builder)\n    # Processes the function definition and updates the function builder.",
            "decorators": null,
            "parameters": null,
            "returns": "None",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-process_func_def",
            "parent_id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 18,
            "end_line_num": 66,
            "code_content": "\n\ndef process_func_def(\n    func_id: str,\n    node: libcst.FunctionDef,\n    position_data: PositionData,\n    func_builder: FunctionModelBuilder,\n) -> None:\n    \"\"\"\n    Processes a libcst.FunctionDef node to build a function model.\n\n    Extracts various components of a function definition such as its docstring, code content, decorators, and return annotations, and updates the provided FunctionModelBuilder with these details.\n\n    Args:\n        func_id (str): The unique identifier for the function.\n        node (libcst.FunctionDef): The function definition node from the CST.\n        position_data (PositionData): Positional data for the function in the source code.\n        func_builder (FunctionModelBuilder): The builder used to construct the function model.\n\n    Example:\n        >>> func_builder = FunctionModelBuilder(id=\"func1\", ...)\n        >>> process_func_def(\"func1\", function_node, position_data, func_builder)\n        # Processes the function definition and updates the function builder.\n    \"\"\"\n\n    docstring: str | None = node.get_docstring()\n    code_content: str = common_functions.extract_code_content(node)\n    decorators: list[DecoratorModel] | None = common_functions.extract_decorators(\n        node.decorators\n    )\n\n    returns: str = (\n        _extract_return_annotation(node.returns)\n        if node.returns\n        else \"Function has no return annotation\"\n    )\n    (\n        func_builder.set_docstring(docstring)\n        .set_code_content(code_content)\n        .set_start_line_num(position_data.start)\n        .set_end_line_num(position_data.end)\n    )\n    (\n        func_builder.set_decorators(decorators)\n        .set_is_method(_func_is_method(func_id))\n        .set_is_async(_func_is_async(node))\n        .set_return_annotation(returns)\n    )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_func_is_method"
                },
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_func_is_async"
                },
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_extract_return_annotation"
                },
                {
                    "import_names": [
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterListModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "FunctionModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.function_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "postcode.python_parser.visitors.node_processing.common_functions",
                            "as_name": "common_functions",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "PositionData",
                            "as_name": null,
                            "local_block_id": "postcode:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData"
                        }
                    ],
                    "imported_from": "postcode.utilities.processing_context",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:utilities:processing_context.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef process_func_def(\\n    func_id: str,\\n    node: libcst.FunctionDef,\\n    position_data: PositionData,\\n    func_builder: FunctionModelBuilder,\\n) -> None:\\n    \"\"\"\\n    Processes a libcst.FunctionDef node to build a function model.\\n\\n    Extracts various components of a function definition such as its docstring, code content, decorators, and return annotations, and updates the provided FunctionModelBuilder with these details.\\n\\n    Args:\\n        func_id (str): The unique identifier for the function.\\n        node (libcst.FunctionDef): The function definition node from the CST.\\n        position_data (PositionData): Positional data for the function in the source code.\\n        func_builder (FunctionModelBuilder): The builder used to construct the function model.\\n\\n    Example:\\n        >>> func_builder = FunctionModelBuilder(id=\"func1\", ...)\\n        >>> process_func_def(\"func1\", function_node, position_data, func_builder)\\n        # Processes the function definition and updates the function builder.\\n    \"\"\"\\n\\n    docstring: str | None = node.get_docstring()\\n    code_content: str = common_functions.extract_code_content(node)\\n    decorators: list[DecoratorModel] | None = common_functions.extract_decorators(\\n        node.decorators\\n    )\\n\\n    returns: str = (\\n        _extract_return_annotation(node.returns)\\n        if node.returns\\n        else \"Function has no return annotation\"\\n    )\\n    (\\n        func_builder.set_docstring(docstring)\\n        .set_code_content(code_content)\\n        .set_start_line_num(position_data.start)\\n        .set_end_line_num(position_data.end)\\n    )\\n    (\\n        func_builder.set_decorators(decorators)\\n        .set_is_method(_func_is_method(func_id))\\n        .set_is_async(_func_is_async(node))\\n        .set_return_annotation(returns)\\n    )\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.models import DecoratorModel, ParameterListModel, ParameterModel\\nimport libcst\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\nfrom postcode.utilities.processing_context import PositionData\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "process_parameters",
            "docstring": "Processes libcst.Parameters node to create a ParameterListModel.\n\nExtracts parameters, keyword-only parameters, positional-only parameters, and special arguments (like *args and **kwargs) from the function definition and forms a model representing these parameters.\n\nArgs:\n    node (libcst.Parameters): The parameters node from a function definition.\n\nReturns:\n    ParameterListModel | None: A model representing the function's parameters, or None if there are no parameters.\n\nExample:\n    >>> parameters_model = process_parameters(function_node.params)\n    # Processes the function parameters and returns a parameter model.",
            "decorators": null,
            "parameters": null,
            "returns": "ParameterListModel | None",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-process_parameters",
            "parent_id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 66,
            "end_line_num": 120,
            "code_content": "\n\ndef process_parameters(\n    node: libcst.Parameters,\n) -> ParameterListModel | None:\n    \"\"\"\n    Processes libcst.Parameters node to create a ParameterListModel.\n\n    Extracts parameters, keyword-only parameters, positional-only parameters, and special arguments (like *args and **kwargs) from the function definition and forms a model representing these parameters.\n\n    Args:\n        node (libcst.Parameters): The parameters node from a function definition.\n\n    Returns:\n        ParameterListModel | None: A model representing the function's parameters, or None if there are no parameters.\n\n    Example:\n        >>> parameters_model = process_parameters(function_node.params)\n        # Processes the function parameters and returns a parameter model.\n    \"\"\"\n\n    params: list[ParameterModel] | None = (\n        _get_parameters_list(node.params) if node.params else []\n    )\n    kwonly_params: list[ParameterModel] | None = (\n        _get_parameters_list(node.kwonly_params) if node.kwonly_params else []\n    )\n    posonly_params: list[ParameterModel] | None = (\n        _get_parameters_list(node.posonly_params) if node.posonly_params else []\n    )\n\n    star_arg: ParameterModel | None = (\n        ParameterModel(\n            content=common_functions.extract_stripped_code_content(node.star_arg)\n        )\n        if node.star_arg and isinstance(node.star_arg, libcst.Param)\n        else None\n    )\n    star_kwarg: ParameterModel | None = (\n        ParameterModel(\n            content=common_functions.extract_stripped_code_content(node.star_kwarg)\n        )\n        if node.star_kwarg\n        else None\n    )\n\n    if params and kwonly_params and posonly_params and star_arg and star_kwarg:\n        return ParameterListModel(\n            params=params,\n            kwonly_params=kwonly_params,\n            posonly_params=posonly_params,\n            star_arg=star_arg,\n            star_kwarg=star_kwarg,\n        )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_get_parameters_list"
                },
                {
                    "import_names": [
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterListModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterListModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "postcode.python_parser.visitors.node_processing.common_functions",
                            "as_name": "common_functions",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef process_parameters(\\n    node: libcst.Parameters,\\n) -> ParameterListModel | None:\\n    \"\"\"\\n    Processes libcst.Parameters node to create a ParameterListModel.\\n\\n    Extracts parameters, keyword-only parameters, positional-only parameters, and special arguments (like *args and **kwargs) from the function definition and forms a model representing these parameters.\\n\\n    Args:\\n        node (libcst.Parameters): The parameters node from a function definition.\\n\\n    Returns:\\n        ParameterListModel | None: A model representing the function\\'s parameters, or None if there are no parameters.\\n\\n    Example:\\n        >>> parameters_model = process_parameters(function_node.params)\\n        # Processes the function parameters and returns a parameter model.\\n    \"\"\"\\n\\n    params: list[ParameterModel] | None = (\\n        _get_parameters_list(node.params) if node.params else []\\n    )\\n    kwonly_params: list[ParameterModel] | None = (\\n        _get_parameters_list(node.kwonly_params) if node.kwonly_params else []\\n    )\\n    posonly_params: list[ParameterModel] | None = (\\n        _get_parameters_list(node.posonly_params) if node.posonly_params else []\\n    )\\n\\n    star_arg: ParameterModel | None = (\\n        ParameterModel(\\n            content=common_functions.extract_stripped_code_content(node.star_arg)\\n        )\\n        if node.star_arg and isinstance(node.star_arg, libcst.Param)\\n        else None\\n    )\\n    star_kwarg: ParameterModel | None = (\\n        ParameterModel(\\n            content=common_functions.extract_stripped_code_content(node.star_kwarg)\\n        )\\n        if node.star_kwarg\\n        else None\\n    )\\n\\n    if params and kwonly_params and posonly_params and star_arg and star_kwarg:\\n        return ParameterListModel(\\n            params=params,\\n            kwonly_params=kwonly_params,\\n            posonly_params=posonly_params,\\n            star_arg=star_arg,\\n            star_kwarg=star_kwarg,\\n        )\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.models import DecoratorModel, ParameterListModel, ParameterModel\\nfrom postcode.python_parser.models.models import DecoratorModel, ParameterListModel, ParameterModel\\nimport libcst\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_func_is_method",
            "docstring": "Returns true if an ancestor of the function is a class.",
            "decorators": null,
            "parameters": null,
            "returns": "bool",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_func_is_method",
            "parent_id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 120,
            "end_line_num": 126,
            "code_content": "\n\ndef _func_is_method(id: str) -> bool:\n    \"\"\"Returns true if an ancestor of the function is a class.\"\"\"\n\n    return str(BlockType.CLASS) in id\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "BlockType",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.enums",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:enums.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _func_is_method(id: str) -> bool:\\n    \"\"\"Returns true if an ancestor of the function is a class.\"\"\"\\n\\n    return str(BlockType.CLASS) in id\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.enums import BlockType\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_func_is_async",
            "docstring": "Returns true if the function is async.",
            "decorators": null,
            "parameters": null,
            "returns": "bool",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_func_is_async",
            "parent_id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 126,
            "end_line_num": 132,
            "code_content": "\n\ndef _func_is_async(node: libcst.FunctionDef) -> bool:\n    \"\"\"Returns true if the function is async.\"\"\"\n\n    return True if node.asynchronous else False\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _func_is_async(node: libcst.FunctionDef) -> bool:\\n    \"\"\"Returns true if the function is async.\"\"\"\\n\\n    return True if node.asynchronous else False\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport libcst\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_get_parameters_list",
            "docstring": "Returns a list of ParameterModel representing the parameters in a function definition.",
            "decorators": null,
            "parameters": null,
            "returns": "list[ParameterModel] | None",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_get_parameters_list",
            "parent_id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 132,
            "end_line_num": 150,
            "code_content": "\n\ndef _get_parameters_list(\n    parameter_sequence: Sequence[libcst.Param],\n) -> list[ParameterModel] | None:\n    \"\"\"Returns a list of ParameterModel representing the parameters in a function definition.\"\"\"\n\n    params: list[ParameterModel] | None = None\n\n    if parameter_sequence:\n        params = []\n        for parameter in parameter_sequence:\n            param: ParameterModel = ParameterModel(\n                content=common_functions.extract_stripped_code_content(parameter)\n            )\n            params.append(param)\n\n    return params if params else None\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "DecoratorModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterListModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ParameterModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Sequence",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "postcode.python_parser.visitors.node_processing.common_functions",
                            "as_name": "common_functions",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _get_parameters_list(\\n    parameter_sequence: Sequence[libcst.Param],\\n) -> list[ParameterModel] | None:\\n    \"\"\"Returns a list of ParameterModel representing the parameters in a function definition.\"\"\"\\n\\n    params: list[ParameterModel] | None = None\\n\\n    if parameter_sequence:\\n        params = []\\n        for parameter in parameter_sequence:\\n            param: ParameterModel = ParameterModel(\\n                content=common_functions.extract_stripped_code_content(parameter)\\n            )\\n            params.append(param)\\n\\n    return params if params else None\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.models import DecoratorModel, ParameterListModel, ParameterModel\\nfrom typing import Sequence\\nimport libcst\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_extract_return_annotation",
            "docstring": "Extracts the return annotation from a function definition.",
            "decorators": null,
            "parameters": null,
            "returns": "str",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_extract_return_annotation",
            "parent_id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 150,
            "end_line_num": 162,
            "code_content": "\n\ndef _extract_return_annotation(\n    node_returns: libcst.Annotation | None,\n) -> str:\n    \"\"\"Extracts the return annotation from a function definition.\"\"\"\n\n    if isinstance(node_returns, libcst.Annotation) and node_returns:\n        annotation: str | None = common_functions.extract_type_annotation(node_returns)\n        return annotation if annotation else \"No return annotation\"\n    else:\n        return \"No return annotation\"\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "postcode.python_parser.visitors.node_processing.common_functions",
                            "as_name": "common_functions",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _extract_return_annotation(\\n    node_returns: libcst.Annotation | None,\\n) -> str:\\n    \"\"\"Extracts the return annotation from a function definition.\"\"\"\\n\\n    if isinstance(node_returns, libcst.Annotation) and node_returns:\\n        annotation: str | None = common_functions.extract_type_annotation(node_returns)\\n        return annotation if annotation else \"No return annotation\"\\n    else:\\n        return \"No return annotation\"\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport libcst\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        }
    ]
}