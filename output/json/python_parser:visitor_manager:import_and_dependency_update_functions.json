{
    "file_path": "./python_parser/visitor_manager/import_and_dependency_update_functions.py",
    "docstring": null,
    "header": [
        "# TODO: Add logic to update imports when defined in a StandaloneCodeBlock",
        "# TODO: Add logic to track down the import's definition location",
        "# FIXME: There is still an issue with the imports being updated twice for some reason"
    ],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "ModuleModelBuilder",
                    "as_name": null,
                    "local_block_id": ".:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                }
            ],
            "imported_from": "model_builders.module_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:model_builders:module_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ImportModuleType",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:enums.py__*__MODULE__*__CLASS-ImportModuleType"
                }
            ],
            "imported_from": "models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:models:enums.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ImportNameModel",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-ImportNameModel"
                },
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": ".:python_parser:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                }
            ],
            "imported_from": "models.models",
            "import_module_type": "LOCAL",
            "local_module_id": ".:python_parser:models:models.py__*__MODULE"
        }
    ],
    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 318,
    "code_content": "# TODO: Add logic to update imports when defined in a StandaloneCodeBlock\n# TODO: Add logic to track down the import's definition location\n# FIXME: There is still an issue with the imports being updated twice for some reason\n\nfrom model_builders.module_model_builder import ModuleModelBuilder\nfrom models.enums import ImportModuleType\nfrom models.models import DependencyModel, ImportModel, ImportNameModel\n\n\nclass ImportAndDependencyUpdater:\n    \"\"\"\n    The ImportAndDependencyUpdater class is designed to update import statements and\n    dependencies in a set of module model builders. It manages two main tasks: updating\n    import statements using an ImportUpdater and updating dependencies using a DependencyUpdater.\n    This class ensures that both imports and dependencies are consistent and up-to-date\n    across the provided module model builders.\n\n    Attributes:\n        model_builder_list (list[ModuleModelBuilder]): A list of ModuleModelBuilder instances\n        to be processed for import and dependency updates.\n\n    Example:\n        model_builders = [ModuleModelBuilder(), ModuleModelBuilder()]\n        updater = ImportAndDependencyUpdater(model_builders)\n        updater.update_imports()\n    \"\"\"\n\n    def __init__(self, model_builder_tuple: tuple[ModuleModelBuilder, ...]) -> None:\n        self.model_builder_tuple: tuple[ModuleModelBuilder, ...] = model_builder_tuple\n\n    def update_imports(self) -> None:\n        \"\"\"\n        Processes each module model builder in the model_builder_list and updates their import\n        statements. This method is the primary entry point for initiating the import update process.\n\n        Example:\n            updater = ImportAndDependencyUpdater(model_builders)\n            updater.update_imports()\n        \"\"\"\n\n        for model_builder in self.model_builder_tuple:\n            import_updater: ImportUpdater = ImportUpdater(self.model_builder_tuple)\n            import_updater.process_builder(model_builder)\n\n\nclass ImportUpdater:\n    \"\"\"\n    The ImportUpdater class is designed to manage and update import statements across\n    a collection of module model builders. It processes each builder in the provided\n    list, handling and updating import models as required. This class plays a crucial\n    role in ensuring that import statements are correctly managed and updated in response\n    to changes in the module models.\n\n    Attributes:\n        model_builder_list (list[ModuleModelBuilder]): A list of ModuleModelBuilder\n        instances to be processed for import updates.\n\n    Example:\n        model_builders = [ModuleModelBuilder(), ModuleModelBuilder()]\n        import_updater = ImportUpdater(model_builders)\n        for builder in model_builders:\n            import_updater.process_builder(builder)\n    \"\"\"\n\n    def __init__(self, model_builder_tuple: tuple[ModuleModelBuilder, ...]) -> None:\n        self.model_builder_tuple: tuple[ModuleModelBuilder, ...] = model_builder_tuple\n\n    def process_builder(self, builder: ModuleModelBuilder) -> None:\n        \"\"\"\n        Processes a single module model builder to update its import statements.\n\n        Args:\n            builder (ModuleModelBuilder): The module model builder to process.\n        \"\"\"\n\n        if module_imports := builder.module_attributes.imports:\n            module_imports_tuple = tuple(module_imports)\n            self.handle_import_models(builder, module_imports_tuple)\n\n    def handle_import_models(\n        self, builder: ModuleModelBuilder, module_imports: tuple[ImportModel, ...]\n    ) -> None:\n        \"\"\"\n        Handles the import models for a given builder and updates them as necessary.\n\n        Args:\n            builder (ModuleModelBuilder): The builder whose import models are to be handled.\n            module_imports (tuple[ImportModel]): A tuple of import models to process.\n        \"\"\"\n\n        module_imports_tuple = tuple(module_imports)\n        # HACK: Converts to tuple in order to prevent missing elements as the list was getting modified during iteration\n\n        for import_model in module_imports_tuple:\n            self.update_import_for_builder(builder, import_model)\n\n            dependency_updater: DependencyUpdater = DependencyUpdater(builder)\n            dependency_updater.update_dependencies()\n\n    def update_import_for_builder(\n        self, builder: ModuleModelBuilder, import_model: ImportModel\n    ) -> None:\n        \"\"\"\n        Updates a single import model for the given builder. Determines if the import is local,\n        and if so, updates the import path and names accordingly.\n\n        Args:\n            builder (ModuleModelBuilder): The builder that owns the import model.\n            import_model (ImportModel): The import model to be updated.\n        \"\"\"\n\n        if self.is_local_import(import_model):\n            import_path: str = self.get_import_path(import_model)\n            import_names: list[str] | None = None\n\n            if import_model.imported_from:\n                import_names = self.get_import_names(import_model)\n            else:\n                import_path: str = self.get_import_path(import_model)\n\n            for external_builder in self.model_builder_tuple:\n                if self.should_skip_builder(\n                    builder, external_builder, import_path, import_model\n                ):\n                    continue\n\n                self.update_import_model(\n                    import_model, import_names, builder, external_builder\n                )\n\n    def is_local_import(self, import_model: ImportModel) -> bool:\n        \"\"\"Returns True if the import is local.\"\"\"\n        return import_model.import_module_type == ImportModuleType.LOCAL\n\n    def get_import_names(self, import_model: ImportModel) -> list[str]:\n        \"\"\"Returns a list of import names for the given import model.\"\"\"\n        return [name.name for name in import_model.import_names]\n\n    def get_import_path(self, import_model: ImportModel) -> str:\n        \"\"\"Returns the import path for the given import model.\"\"\"\n\n        if import_model.imported_from:\n            return import_model.imported_from.replace(\".\", \":\")\n        else:\n            return import_model.import_names[0].name.replace(\".\", \":\")\n\n    def should_skip_builder(\n        self,\n        builder: ModuleModelBuilder,\n        external_builder: ModuleModelBuilder,\n        import_path: str,\n        import_model: ImportModel,\n    ) -> bool:\n        \"\"\"Returns boolean indicating if the given builder should be skipped.\"\"\"\n\n        return (\n            external_builder.id == builder.id\n            or not import_path in external_builder.id\n            or import_model.local_module_id is not None\n        )\n\n    def update_import_model(\n        self,\n        import_model: ImportModel,\n        import_names: list[str] | None,\n        builder: ModuleModelBuilder,\n        external_builder: ModuleModelBuilder,\n    ) -> None:\n        \"\"\"\n        Updates the import model with new import names and assigns the local module ID to the external builder.\n\n        Args:\n            import_model (ImportModel): The import model to be updated.\n            import_names (list[str] | None): The list of new import names.\n            builder (ModuleModelBuilder): The module model builder.\n            external_builder (ModuleModelBuilder): The external module model builder.\n\n        Returns:\n            None\n        \"\"\"\n\n        new_import_model: ImportModel = import_model.model_copy()\n        new_import_model.local_module_id = external_builder.id\n\n        if not import_model.imported_from:\n            builder.update_import(new_import_model, import_model)\n            return\n\n        if import_names:\n            new_import_name_models: list[\n                ImportNameModel\n            ] = self.get_new_import_name_models(\n                external_builder, import_names, import_model\n            )\n            # print(f\"{len(new_import_name_models)} : {len(import_model.import_names)}\")\n            if len(new_import_name_models) < len(import_model.import_names):\n                # TODO: Add logic to track down the import's definition location\n\n                new_import_name_models = self.add_missing_imports(\n                    new_import_name_models, import_model.import_names\n                )\n\n            new_import_model.import_names = new_import_name_models\n            builder.update_import(new_import_model, import_model)\n\n    def get_new_import_name_models(\n        self,\n        external_builder: ModuleModelBuilder,\n        import_names: list[str],\n        import_model: ImportModel,\n    ) -> list[ImportNameModel]:\n        \"\"\"\n        Returns a list of new ImportNameModel objects based on the given import names.\n\n        Args:\n            external_builder (ModuleModelBuilder): The external module builder.\n            import_names (list[str]): The list of import names.\n            import_model (ImportModel): The import model.\n\n        Returns:\n            list[ImportNameModel]: The list of new ImportNameModel objects.\n        \"\"\"\n\n        new_import_name_models: list = []\n        for child_builder in external_builder.children_builders:\n            for import_name in import_names:\n                child_builder_id_split: list[str] = child_builder.id.split(\"-\")\n\n                if import_name == child_builder_id_split[-1]:\n                    for import_name_model in import_model.import_names:\n                        if import_name_model.name == import_name:\n                            new_import_name_model: ImportNameModel = (\n                                import_name_model.model_copy()\n                            )\n                            # if import_name_model.name == \"OpenAISummarizer\":\n                            #     print(f\"Found OpenAISummarizer: id\")\n\n                            new_import_name_model.local_block_id = child_builder.id\n                            new_import_name_models.append(new_import_name_model)\n                            break\n\n        return new_import_name_models\n\n    def add_missing_imports(\n        self,\n        new_import_name_models: list[ImportNameModel],\n        existing_import_names: list[ImportNameModel],\n    ) -> list[ImportNameModel]:\n        for import_name_model in existing_import_names:\n            if import_name_model.name not in [\n                name.name for name in new_import_name_models\n            ]:\n                new_import_name_models.append(import_name_model)\n\n        return new_import_name_models\n\n\nclass DependencyUpdater:\n    \"\"\"\n    Class responsible for updating dependencies in a module.\n\n    Args:\n        model_builder (ModuleModelBuilder): The module model builder.\n\n    Attributes:\n        model_builder (ModuleModelBuilder): The module model builder.\n        import_model_list (list[ImportModel] | None): The list of import models.\n\n    Examples:\n        >>> model_builder = ModuleModelBuilder()\n        >>> updater = DependencyUpdater(model_builder)\n        >>> updater.update_dependencies()\n    \"\"\"\n\n    def __init__(self, model_builder: ModuleModelBuilder) -> None:\n        self.model_builder: ModuleModelBuilder = model_builder\n        self.import_model_list: list[\n            ImportModel\n        ] | None = model_builder.module_attributes.imports\n\n    def update_dependencies(self) -> None:\n        \"\"\"Updates the dependencies in the module.\"\"\"\n        if self.model_builder.children_builders:\n            for child_builder in self.model_builder.children_builders:\n                if (\n                    not child_builder.common_attributes.dependencies\n                    or not self.import_model_list\n                ):\n                    continue\n\n                dependencies_to_process: tuple[\n                    ImportModel | DependencyModel, ...\n                ] = tuple(child_builder.common_attributes.dependencies)\n                imports_to_process: tuple[ImportModel, ...] = tuple(\n                    self.import_model_list\n                )\n                for dependency in dependencies_to_process:\n                    if isinstance(dependency, DependencyModel):\n                        continue\n\n                    dependency_import_names: list[str] = [\n                        name.name for name in dependency.import_names\n                    ]\n\n                    for import_model in imports_to_process:\n                        import_model_import_names: list[str] = [\n                            name.name for name in import_model.import_names\n                        ]\n\n                        if (\n                            dependency_import_names == import_model_import_names\n                            and dependency.imported_from == import_model.imported_from\n                        ):\n                            child_builder.update_import_dependency(\n                                import_model, dependency\n                            )\n                            break\n",
    "important_comments": [
        {
            "content": "# TODO: Add logic to update imports when defined in a StandaloneCodeBlock",
            "comment_types": [
                "TODO"
            ]
        },
        {
            "content": "# TODO: Add logic to track down the import's definition location",
            "comment_types": [
                "TODO"
            ]
        },
        {
            "content": "# FIXME: There is still an issue with the imports being updated twice for some reason",
            "comment_types": [
                "FIXME"
            ]
        }
    ],
    "dependencies": null,
    "summary": "summary complete",
    "children": [
        {
            "class_name": "ImportAndDependencyUpdater",
            "decorators": null,
            "bases": null,
            "docstring": "The ImportAndDependencyUpdater class is designed to update import statements and\ndependencies in a set of module model builders. It manages two main tasks: updating\nimport statements using an ImportUpdater and updating dependencies using a DependencyUpdater.\nThis class ensures that both imports and dependencies are consistent and up-to-date\nacross the provided module model builders.\n\nAttributes:\n    model_builder_list (list[ModuleModelBuilder]): A list of ModuleModelBuilder instances\n    to be processed for import and dependency updates.\n\nExample:\n    model_builders = [ModuleModelBuilder(), ModuleModelBuilder()]\n    updater = ImportAndDependencyUpdater(model_builders)\n    updater.update_imports()",
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportAndDependencyUpdater",
            "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 8,
            "end_line_num": 44,
            "code_content": "\n\nclass ImportAndDependencyUpdater:\n    \"\"\"\n    The ImportAndDependencyUpdater class is designed to update import statements and\n    dependencies in a set of module model builders. It manages two main tasks: updating\n    import statements using an ImportUpdater and updating dependencies using a DependencyUpdater.\n    This class ensures that both imports and dependencies are consistent and up-to-date\n    across the provided module model builders.\n\n    Attributes:\n        model_builder_list (list[ModuleModelBuilder]): A list of ModuleModelBuilder instances\n        to be processed for import and dependency updates.\n\n    Example:\n        model_builders = [ModuleModelBuilder(), ModuleModelBuilder()]\n        updater = ImportAndDependencyUpdater(model_builders)\n        updater.update_imports()\n    \"\"\"\n\n    def __init__(self, model_builder_tuple: tuple[ModuleModelBuilder, ...]) -> None:\n        self.model_builder_tuple: tuple[ModuleModelBuilder, ...] = model_builder_tuple\n\n    def update_imports(self) -> None:\n        \"\"\"\n        Processes each module model builder in the model_builder_list and updates their import\n        statements. This method is the primary entry point for initiating the import update process.\n\n        Example:\n            updater = ImportAndDependencyUpdater(model_builders)\n            updater.update_imports()\n        \"\"\"\n\n        for model_builder in self.model_builder_tuple:\n            import_updater: ImportUpdater = ImportUpdater(self.model_builder_tuple)\n            import_updater.process_builder(model_builder)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater"
                },
                {
                    "code_block_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-DependencyUpdater"
                },
                {
                    "import_names": [
                        {
                            "name": "ModuleModelBuilder",
                            "as_name": null,
                            "local_block_id": ".:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                        }
                    ],
                    "imported_from": "model_builders.module_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:model_builders:module_model_builder.py__*__MODULE"
                }
            ],
            "summary": "summary complete",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportAndDependencyUpdater__*__FUNCTION-__init__",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportAndDependencyUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 27,
                    "end_line_num": 30,
                    "code_content": "\ndef __init__(self, model_builder_tuple: tuple[ModuleModelBuilder, ...]) -> None:\n    self.model_builder_tuple: tuple[ModuleModelBuilder, ...] = model_builder_tuple\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                },
                {
                    "function_name": "update_imports",
                    "docstring": "Processes each module model builder in the model_builder_list and updates their import\nstatements. This method is the primary entry point for initiating the import update process.\n\nExample:\n    updater = ImportAndDependencyUpdater(model_builders)\n    updater.update_imports()",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportAndDependencyUpdater__*__FUNCTION-update_imports",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportAndDependencyUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 30,
                    "end_line_num": 44,
                    "code_content": "\ndef update_imports(self) -> None:\n    \"\"\"\n        Processes each module model builder in the model_builder_list and updates their import\n        statements. This method is the primary entry point for initiating the import update process.\n\n        Example:\n            updater = ImportAndDependencyUpdater(model_builders)\n            updater.update_imports()\n        \"\"\"\n\n    for model_builder in self.model_builder_tuple:\n        import_updater: ImportUpdater = ImportUpdater(self.model_builder_tuple)\n        import_updater.process_builder(model_builder)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                }
            ]
        },
        {
            "class_name": "ImportUpdater",
            "decorators": null,
            "bases": null,
            "docstring": "The ImportUpdater class is designed to manage and update import statements across\na collection of module model builders. It processes each builder in the provided\nlist, handling and updating import models as required. This class plays a crucial\nrole in ensuring that import statements are correctly managed and updated in response\nto changes in the module models.\n\nAttributes:\n    model_builder_list (list[ModuleModelBuilder]): A list of ModuleModelBuilder\n    instances to be processed for import updates.\n\nExample:\n    model_builders = [ModuleModelBuilder(), ModuleModelBuilder()]\n    import_updater = ImportUpdater(model_builders)\n    for builder in model_builders:\n        import_updater.process_builder(builder)",
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater",
            "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 44,
            "end_line_num": 256,
            "code_content": "\n\nclass ImportUpdater:\n    \"\"\"\n    The ImportUpdater class is designed to manage and update import statements across\n    a collection of module model builders. It processes each builder in the provided\n    list, handling and updating import models as required. This class plays a crucial\n    role in ensuring that import statements are correctly managed and updated in response\n    to changes in the module models.\n\n    Attributes:\n        model_builder_list (list[ModuleModelBuilder]): A list of ModuleModelBuilder\n        instances to be processed for import updates.\n\n    Example:\n        model_builders = [ModuleModelBuilder(), ModuleModelBuilder()]\n        import_updater = ImportUpdater(model_builders)\n        for builder in model_builders:\n            import_updater.process_builder(builder)\n    \"\"\"\n\n    def __init__(self, model_builder_tuple: tuple[ModuleModelBuilder, ...]) -> None:\n        self.model_builder_tuple: tuple[ModuleModelBuilder, ...] = model_builder_tuple\n\n    def process_builder(self, builder: ModuleModelBuilder) -> None:\n        \"\"\"\n        Processes a single module model builder to update its import statements.\n\n        Args:\n            builder (ModuleModelBuilder): The module model builder to process.\n        \"\"\"\n\n        if module_imports := builder.module_attributes.imports:\n            module_imports_tuple = tuple(module_imports)\n            self.handle_import_models(builder, module_imports_tuple)\n\n    def handle_import_models(\n        self, builder: ModuleModelBuilder, module_imports: tuple[ImportModel, ...]\n    ) -> None:\n        \"\"\"\n        Handles the import models for a given builder and updates them as necessary.\n\n        Args:\n            builder (ModuleModelBuilder): The builder whose import models are to be handled.\n            module_imports (tuple[ImportModel]): A tuple of import models to process.\n        \"\"\"\n\n        module_imports_tuple = tuple(module_imports)\n        # HACK: Converts to tuple in order to prevent missing elements as the list was getting modified during iteration\n\n        for import_model in module_imports_tuple:\n            self.update_import_for_builder(builder, import_model)\n\n            dependency_updater: DependencyUpdater = DependencyUpdater(builder)\n            dependency_updater.update_dependencies()\n\n    def update_import_for_builder(\n        self, builder: ModuleModelBuilder, import_model: ImportModel\n    ) -> None:\n        \"\"\"\n        Updates a single import model for the given builder. Determines if the import is local,\n        and if so, updates the import path and names accordingly.\n\n        Args:\n            builder (ModuleModelBuilder): The builder that owns the import model.\n            import_model (ImportModel): The import model to be updated.\n        \"\"\"\n\n        if self.is_local_import(import_model):\n            import_path: str = self.get_import_path(import_model)\n            import_names: list[str] | None = None\n\n            if import_model.imported_from:\n                import_names = self.get_import_names(import_model)\n            else:\n                import_path: str = self.get_import_path(import_model)\n\n            for external_builder in self.model_builder_tuple:\n                if self.should_skip_builder(\n                    builder, external_builder, import_path, import_model\n                ):\n                    continue\n\n                self.update_import_model(\n                    import_model, import_names, builder, external_builder\n                )\n\n    def is_local_import(self, import_model: ImportModel) -> bool:\n        \"\"\"Returns True if the import is local.\"\"\"\n        return import_model.import_module_type == ImportModuleType.LOCAL\n\n    def get_import_names(self, import_model: ImportModel) -> list[str]:\n        \"\"\"Returns a list of import names for the given import model.\"\"\"\n        return [name.name for name in import_model.import_names]\n\n    def get_import_path(self, import_model: ImportModel) -> str:\n        \"\"\"Returns the import path for the given import model.\"\"\"\n\n        if import_model.imported_from:\n            return import_model.imported_from.replace(\".\", \":\")\n        else:\n            return import_model.import_names[0].name.replace(\".\", \":\")\n\n    def should_skip_builder(\n        self,\n        builder: ModuleModelBuilder,\n        external_builder: ModuleModelBuilder,\n        import_path: str,\n        import_model: ImportModel,\n    ) -> bool:\n        \"\"\"Returns boolean indicating if the given builder should be skipped.\"\"\"\n\n        return (\n            external_builder.id == builder.id\n            or not import_path in external_builder.id\n            or import_model.local_module_id is not None\n        )\n\n    def update_import_model(\n        self,\n        import_model: ImportModel,\n        import_names: list[str] | None,\n        builder: ModuleModelBuilder,\n        external_builder: ModuleModelBuilder,\n    ) -> None:\n        \"\"\"\n        Updates the import model with new import names and assigns the local module ID to the external builder.\n\n        Args:\n            import_model (ImportModel): The import model to be updated.\n            import_names (list[str] | None): The list of new import names.\n            builder (ModuleModelBuilder): The module model builder.\n            external_builder (ModuleModelBuilder): The external module model builder.\n\n        Returns:\n            None\n        \"\"\"\n\n        new_import_model: ImportModel = import_model.model_copy()\n        new_import_model.local_module_id = external_builder.id\n\n        if not import_model.imported_from:\n            builder.update_import(new_import_model, import_model)\n            return\n\n        if import_names:\n            new_import_name_models: list[\n                ImportNameModel\n            ] = self.get_new_import_name_models(\n                external_builder, import_names, import_model\n            )\n            # print(f\"{len(new_import_name_models)} : {len(import_model.import_names)}\")\n            if len(new_import_name_models) < len(import_model.import_names):\n                # TODO: Add logic to track down the import's definition location\n\n                new_import_name_models = self.add_missing_imports(\n                    new_import_name_models, import_model.import_names\n                )\n\n            new_import_model.import_names = new_import_name_models\n            builder.update_import(new_import_model, import_model)\n\n    def get_new_import_name_models(\n        self,\n        external_builder: ModuleModelBuilder,\n        import_names: list[str],\n        import_model: ImportModel,\n    ) -> list[ImportNameModel]:\n        \"\"\"\n        Returns a list of new ImportNameModel objects based on the given import names.\n\n        Args:\n            external_builder (ModuleModelBuilder): The external module builder.\n            import_names (list[str]): The list of import names.\n            import_model (ImportModel): The import model.\n\n        Returns:\n            list[ImportNameModel]: The list of new ImportNameModel objects.\n        \"\"\"\n\n        new_import_name_models: list = []\n        for child_builder in external_builder.children_builders:\n            for import_name in import_names:\n                child_builder_id_split: list[str] = child_builder.id.split(\"-\")\n\n                if import_name == child_builder_id_split[-1]:\n                    for import_name_model in import_model.import_names:\n                        if import_name_model.name == import_name:\n                            new_import_name_model: ImportNameModel = (\n                                import_name_model.model_copy()\n                            )\n                            # if import_name_model.name == \"OpenAISummarizer\":\n                            #     print(f\"Found OpenAISummarizer: id\")\n\n                            new_import_name_model.local_block_id = child_builder.id\n                            new_import_name_models.append(new_import_name_model)\n                            break\n\n        return new_import_name_models\n\n    def add_missing_imports(\n        self,\n        new_import_name_models: list[ImportNameModel],\n        existing_import_names: list[ImportNameModel],\n    ) -> list[ImportNameModel]:\n        for import_name_model in existing_import_names:\n            if import_name_model.name not in [\n                name.name for name in new_import_name_models\n            ]:\n                new_import_name_models.append(import_name_model)\n\n        return new_import_name_models\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-DependencyUpdater"
                },
                {
                    "import_names": [
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportNameModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportNameModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ModuleModelBuilder",
                            "as_name": null,
                            "local_block_id": ".:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                        }
                    ],
                    "imported_from": "model_builders.module_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:model_builders:module_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModuleType",
                            "as_name": null,
                            "local_block_id": ".:python_parser:models:enums.py__*__MODULE__*__CLASS-ImportModuleType"
                        }
                    ],
                    "imported_from": "models.enums",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:models:enums.py__*__MODULE"
                }
            ],
            "summary": "summary complete",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-__init__",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 64,
                    "end_line_num": 67,
                    "code_content": "\ndef __init__(self, model_builder_tuple: tuple[ModuleModelBuilder, ...]) -> None:\n    self.model_builder_tuple: tuple[ModuleModelBuilder, ...] = model_builder_tuple\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                },
                {
                    "function_name": "process_builder",
                    "docstring": "Processes a single module model builder to update its import statements.\n\nArgs:\n    builder (ModuleModelBuilder): The module model builder to process.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-process_builder",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 67,
                    "end_line_num": 79,
                    "code_content": "\ndef process_builder(self, builder: ModuleModelBuilder) -> None:\n    \"\"\"\n        Processes a single module model builder to update its import statements.\n\n        Args:\n            builder (ModuleModelBuilder): The module model builder to process.\n        \"\"\"\n\n    if module_imports := builder.module_attributes.imports:\n        module_imports_tuple = tuple(module_imports)\n        self.handle_import_models(builder, module_imports_tuple)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                },
                {
                    "function_name": "handle_import_models",
                    "docstring": "Handles the import models for a given builder and updates them as necessary.\n\nArgs:\n    builder (ModuleModelBuilder): The builder whose import models are to be handled.\n    module_imports (tuple[ImportModel]): A tuple of import models to process.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-handle_import_models",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 79,
                    "end_line_num": 99,
                    "code_content": "\ndef handle_import_models(\n    self, builder: ModuleModelBuilder, module_imports: tuple[ImportModel, ...]\n) -> None:\n    \"\"\"\n        Handles the import models for a given builder and updates them as necessary.\n\n        Args:\n            builder (ModuleModelBuilder): The builder whose import models are to be handled.\n            module_imports (tuple[ImportModel]): A tuple of import models to process.\n        \"\"\"\n\n    module_imports_tuple = tuple(module_imports)\n    # HACK: Converts to tuple in order to prevent missing elements as the list was getting modified during iteration\n\n    for import_model in module_imports_tuple:\n        self.update_import_for_builder(builder, import_model)\n\n        dependency_updater: DependencyUpdater = DependencyUpdater(builder)\n        dependency_updater.update_dependencies()\n",
                    "important_comments": [
                        {
                            "content": "# HACK: Converts to tuple in order to prevent missing elements as the list was getting modified during iteration",
                            "comment_types": [
                                "HACK"
                            ]
                        }
                    ],
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                },
                {
                    "function_name": "update_import_for_builder",
                    "docstring": "Updates a single import model for the given builder. Determines if the import is local,\nand if so, updates the import path and names accordingly.\n\nArgs:\n    builder (ModuleModelBuilder): The builder that owns the import model.\n    import_model (ImportModel): The import model to be updated.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-update_import_for_builder",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 99,
                    "end_line_num": 130,
                    "code_content": "\ndef update_import_for_builder(\n    self, builder: ModuleModelBuilder, import_model: ImportModel\n) -> None:\n    \"\"\"\n        Updates a single import model for the given builder. Determines if the import is local,\n        and if so, updates the import path and names accordingly.\n\n        Args:\n            builder (ModuleModelBuilder): The builder that owns the import model.\n            import_model (ImportModel): The import model to be updated.\n        \"\"\"\n\n    if self.is_local_import(import_model):\n        import_path: str = self.get_import_path(import_model)\n        import_names: list[str] | None = None\n\n        if import_model.imported_from:\n            import_names = self.get_import_names(import_model)\n        else:\n            import_path: str = self.get_import_path(import_model)\n\n        for external_builder in self.model_builder_tuple:\n            if self.should_skip_builder(\n                builder, external_builder, import_path, import_model\n            ):\n                continue\n\n            self.update_import_model(\n                import_model, import_names, builder, external_builder\n            )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                },
                {
                    "function_name": "is_local_import",
                    "docstring": "Returns True if the import is local.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "bool",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-is_local_import",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 130,
                    "end_line_num": 134,
                    "code_content": "\ndef is_local_import(self, import_model: ImportModel) -> bool:\n    \"\"\"Returns True if the import is local.\"\"\"\n    return import_model.import_module_type == ImportModuleType.LOCAL\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                },
                {
                    "function_name": "get_import_names",
                    "docstring": "Returns a list of import names for the given import model.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "list[str]",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-get_import_names",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 134,
                    "end_line_num": 138,
                    "code_content": "\ndef get_import_names(self, import_model: ImportModel) -> list[str]:\n    \"\"\"Returns a list of import names for the given import model.\"\"\"\n    return [name.name for name in import_model.import_names]\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                },
                {
                    "function_name": "get_import_path",
                    "docstring": "Returns the import path for the given import model.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-get_import_path",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 138,
                    "end_line_num": 146,
                    "code_content": "\ndef get_import_path(self, import_model: ImportModel) -> str:\n    \"\"\"Returns the import path for the given import model.\"\"\"\n\n    if import_model.imported_from:\n        return import_model.imported_from.replace(\".\", \":\")\n    else:\n        return import_model.import_names[0].name.replace(\".\", \":\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                },
                {
                    "function_name": "should_skip_builder",
                    "docstring": "Returns boolean indicating if the given builder should be skipped.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "bool",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-should_skip_builder",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 146,
                    "end_line_num": 161,
                    "code_content": "\ndef should_skip_builder(\n    self,\n    builder: ModuleModelBuilder,\n    external_builder: ModuleModelBuilder,\n    import_path: str,\n    import_model: ImportModel,\n) -> bool:\n    \"\"\"Returns boolean indicating if the given builder should be skipped.\"\"\"\n\n    return (\n        external_builder.id == builder.id\n        or not import_path in external_builder.id\n        or import_model.local_module_id is not None\n    )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                },
                {
                    "function_name": "update_import_model",
                    "docstring": "Updates the import model with new import names and assigns the local module ID to the external builder.\n\nArgs:\n    import_model (ImportModel): The import model to be updated.\n    import_names (list[str] | None): The list of new import names.\n    builder (ModuleModelBuilder): The module model builder.\n    external_builder (ModuleModelBuilder): The external module model builder.\n\nReturns:\n    None",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-update_import_model",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 161,
                    "end_line_num": 205,
                    "code_content": "\ndef update_import_model(\n    self,\n    import_model: ImportModel,\n    import_names: list[str] | None,\n    builder: ModuleModelBuilder,\n    external_builder: ModuleModelBuilder,\n) -> None:\n    \"\"\"\n        Updates the import model with new import names and assigns the local module ID to the external builder.\n\n        Args:\n            import_model (ImportModel): The import model to be updated.\n            import_names (list[str] | None): The list of new import names.\n            builder (ModuleModelBuilder): The module model builder.\n            external_builder (ModuleModelBuilder): The external module model builder.\n\n        Returns:\n            None\n        \"\"\"\n\n    new_import_model: ImportModel = import_model.model_copy()\n    new_import_model.local_module_id = external_builder.id\n\n    if not import_model.imported_from:\n        builder.update_import(new_import_model, import_model)\n        return\n\n    if import_names:\n        new_import_name_models: list[\n            ImportNameModel\n        ] = self.get_new_import_name_models(\n            external_builder, import_names, import_model\n        )\n        # print(f\"{len(new_import_name_models)} : {len(import_model.import_names)}\")\n        if len(new_import_name_models) < len(import_model.import_names):\n            # TODO: Add logic to track down the import's definition location\n\n            new_import_name_models = self.add_missing_imports(\n                new_import_name_models, import_model.import_names\n            )\n\n        new_import_model.import_names = new_import_name_models\n        builder.update_import(new_import_model, import_model)\n",
                    "important_comments": [
                        {
                            "content": "# TODO: Add logic to track down the import's definition location",
                            "comment_types": [
                                "TODO"
                            ]
                        }
                    ],
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                },
                {
                    "function_name": "get_new_import_name_models",
                    "docstring": "Returns a list of new ImportNameModel objects based on the given import names.\n\nArgs:\n    external_builder (ModuleModelBuilder): The external module builder.\n    import_names (list[str]): The list of import names.\n    import_model (ImportModel): The import model.\n\nReturns:\n    list[ImportNameModel]: The list of new ImportNameModel objects.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "list[ImportNameModel]",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-get_new_import_name_models",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 205,
                    "end_line_num": 243,
                    "code_content": "\ndef get_new_import_name_models(\n    self,\n    external_builder: ModuleModelBuilder,\n    import_names: list[str],\n    import_model: ImportModel,\n) -> list[ImportNameModel]:\n    \"\"\"\n        Returns a list of new ImportNameModel objects based on the given import names.\n\n        Args:\n            external_builder (ModuleModelBuilder): The external module builder.\n            import_names (list[str]): The list of import names.\n            import_model (ImportModel): The import model.\n\n        Returns:\n            list[ImportNameModel]: The list of new ImportNameModel objects.\n        \"\"\"\n\n    new_import_name_models: list = []\n    for child_builder in external_builder.children_builders:\n        for import_name in import_names:\n            child_builder_id_split: list[str] = child_builder.id.split(\"-\")\n\n            if import_name == child_builder_id_split[-1]:\n                for import_name_model in import_model.import_names:\n                    if import_name_model.name == import_name:\n                        new_import_name_model: ImportNameModel = (\n                            import_name_model.model_copy()\n                        )\n                        # if import_name_model.name == \"OpenAISummarizer\":\n                        #     print(f\"Found OpenAISummarizer: id\")\n\n                        new_import_name_model.local_block_id = child_builder.id\n                        new_import_name_models.append(new_import_name_model)\n                        break\n\n    return new_import_name_models\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                },
                {
                    "function_name": "add_missing_imports",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "list[ImportNameModel]",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-add_missing_imports",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-ImportUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 243,
                    "end_line_num": 256,
                    "code_content": "\ndef add_missing_imports(\n    self,\n    new_import_name_models: list[ImportNameModel],\n    existing_import_names: list[ImportNameModel],\n) -> list[ImportNameModel]:\n    for import_name_model in existing_import_names:\n        if import_name_model.name not in [\n            name.name for name in new_import_name_models\n        ]:\n            new_import_name_models.append(import_name_model)\n\n    return new_import_name_models\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                }
            ]
        },
        {
            "class_name": "DependencyUpdater",
            "decorators": null,
            "bases": null,
            "docstring": "Class responsible for updating dependencies in a module.\n\nArgs:\n    model_builder (ModuleModelBuilder): The module model builder.\n\nAttributes:\n    model_builder (ModuleModelBuilder): The module model builder.\n    import_model_list (list[ImportModel] | None): The list of import models.\n\nExamples:\n    >>> model_builder = ModuleModelBuilder()\n    >>> updater = DependencyUpdater(model_builder)\n    >>> updater.update_dependencies()",
            "attributes": null,
            "keywords": null,
            "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-DependencyUpdater",
            "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 256,
            "end_line_num": 318,
            "code_content": "\n\nclass DependencyUpdater:\n    \"\"\"\n    Class responsible for updating dependencies in a module.\n\n    Args:\n        model_builder (ModuleModelBuilder): The module model builder.\n\n    Attributes:\n        model_builder (ModuleModelBuilder): The module model builder.\n        import_model_list (list[ImportModel] | None): The list of import models.\n\n    Examples:\n        >>> model_builder = ModuleModelBuilder()\n        >>> updater = DependencyUpdater(model_builder)\n        >>> updater.update_dependencies()\n    \"\"\"\n\n    def __init__(self, model_builder: ModuleModelBuilder) -> None:\n        self.model_builder: ModuleModelBuilder = model_builder\n        self.import_model_list: list[\n            ImportModel\n        ] | None = model_builder.module_attributes.imports\n\n    def update_dependencies(self) -> None:\n        \"\"\"Updates the dependencies in the module.\"\"\"\n        if self.model_builder.children_builders:\n            for child_builder in self.model_builder.children_builders:\n                if (\n                    not child_builder.common_attributes.dependencies\n                    or not self.import_model_list\n                ):\n                    continue\n\n                dependencies_to_process: tuple[\n                    ImportModel | DependencyModel, ...\n                ] = tuple(child_builder.common_attributes.dependencies)\n                imports_to_process: tuple[ImportModel, ...] = tuple(\n                    self.import_model_list\n                )\n                for dependency in dependencies_to_process:\n                    if isinstance(dependency, DependencyModel):\n                        continue\n\n                    dependency_import_names: list[str] = [\n                        name.name for name in dependency.import_names\n                    ]\n\n                    for import_model in imports_to_process:\n                        import_model_import_names: list[str] = [\n                            name.name for name in import_model.import_names\n                        ]\n\n                        if (\n                            dependency_import_names == import_model_import_names\n                            and dependency.imported_from == import_model.imported_from\n                        ):\n                            child_builder.update_import_dependency(\n                                import_model, dependency\n                            )\n                            break\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportNameModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportNameModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ModuleModelBuilder",
                            "as_name": null,
                            "local_block_id": ".:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                        }
                    ],
                    "imported_from": "model_builders.module_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": ".:python_parser:model_builders:module_model_builder.py__*__MODULE"
                }
            ],
            "summary": "summary complete",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-DependencyUpdater__*__FUNCTION-__init__",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-DependencyUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 274,
                    "end_line_num": 280,
                    "code_content": "\ndef __init__(self, model_builder: ModuleModelBuilder) -> None:\n    self.model_builder: ModuleModelBuilder = model_builder\n    self.import_model_list: list[\n        ImportModel\n    ] | None = model_builder.module_attributes.imports\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                },
                {
                    "function_name": "update_dependencies",
                    "docstring": "Updates the dependencies in the module.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-DependencyUpdater__*__FUNCTION-update_dependencies",
                    "parent_id": ".:python_parser:visitor_manager:import_and_dependency_update_functions.py__*__MODULE__*__CLASS-DependencyUpdater",
                    "block_type": "FUNCTION",
                    "start_line_num": 280,
                    "end_line_num": 318,
                    "code_content": "\ndef update_dependencies(self) -> None:\n    \"\"\"Updates the dependencies in the module.\"\"\"\n    if self.model_builder.children_builders:\n        for child_builder in self.model_builder.children_builders:\n            if (\n                not child_builder.common_attributes.dependencies\n                or not self.import_model_list\n            ):\n                continue\n\n            dependencies_to_process: tuple[\n                ImportModel | DependencyModel, ...\n            ] = tuple(child_builder.common_attributes.dependencies)\n            imports_to_process: tuple[ImportModel, ...] = tuple(\n                self.import_model_list\n            )\n            for dependency in dependencies_to_process:\n                if isinstance(dependency, DependencyModel):\n                    continue\n\n                dependency_import_names: list[str] = [\n                    name.name for name in dependency.import_names\n                ]\n\n                for import_model in imports_to_process:\n                    import_model_import_names: list[str] = [\n                        name.name for name in import_model.import_names\n                    ]\n\n                    if (\n                        dependency_import_names == import_model_import_names\n                        and dependency.imported_from == import_model.imported_from\n                    ):\n                        child_builder.update_import_dependency(\n                            import_model, dependency\n                        )\n                        break\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "summary complete",
                    "children": null
                }
            ]
        }
    ]
}