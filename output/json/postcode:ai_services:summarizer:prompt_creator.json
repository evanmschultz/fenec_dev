{
    "file_path": "postcode/ai_services/summarizer/prompt_creator.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Callable",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "LiteralString",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "postcode.ai_services.summarizer.prompts.summarization_prompts",
                    "as_name": "prompts",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:summarizer:prompts:summarization_prompts.py__*__MODULE"
        }
    ],
    "id": "postcode:ai_services:summarizer:prompt_creator.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 153,
    "code_content": "from typing import Callable, LiteralString\n\nimport postcode.ai_services.summarizer.prompts.summarization_prompts as prompts\n\n\nclass PromptCreator:\n    _interpolation_strategies: dict[str, Callable[..., str]] = {\n        \"children_dependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_WITH_EVERYTHING,\n            code=code,\n            children_summaries=children_summaries,\n            dependencies=dependencies,\n            import_details=import_details,\n        ),\n        \"children_dependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_NO_IMPORTS,\n            code=code,\n            children_summaries=children_summaries,\n            dependencies=dependencies,\n        ),\n        \"children_nodependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES,\n            code=code,\n            children_summaries=children_summaries,\n            import_details=import_details,\n        ),\n        \"children_nodependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES_NO_IMPORTS,\n            code=code,\n            children_summaries=children_summaries,\n        ),\n        \"nochildren_dependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_NO_CHILDREN,\n            code=code,\n            dependencies=dependencies,\n            import_details=import_details,\n        ),\n        \"nochildren_dependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_NO_CHILDREN_NO_IMPORTS,\n            code=code,\n            dependencies=dependencies,\n        ),\n        \"nochildren_nodependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES_NO_CHILDREN,\n            code=code,\n            import_details=import_details,\n        ),\n        \"nochildren_nodependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_WITHOUT_ANYTHING,\n            code=code,\n        ),\n    }\n\n    @staticmethod\n    def _interpolate_prompt_string(prompt_template: str, **kwargs) -> str:\n        prompt_string: str = prompt_template\n        for key, value in kwargs.items():\n            if value:\n                prompt_string = prompt_string.replace(f\"{{{key}}}\", value)\n\n        return prompt_string\n\n    def create_prompt(\n        self,\n        code: str,\n        children_summaries: str | None = None,\n        dependency_summaries: str | None = None,\n        import_details: str | None = None,\n    ) -> str | None:\n        strategy_key: LiteralString = \"_\".join(\n            [\n                \"children\" if children_summaries else \"nochildren\",\n                \"dependencies\" if dependency_summaries else \"nodependencies\",\n                \"import_details\" if import_details else \"noimport_details\",\n            ]\n        )\n        strategy: Callable[..., str] | None = self._interpolation_strategies.get(\n            strategy_key\n        )\n        if strategy:\n            return strategy(\n                code, children_summaries, dependency_summaries, import_details\n            )\n        else:\n            raise ValueError(f\"Could not find strategy for {strategy_key}\")\n\n\ndef main() -> None:\n    prompt_creator = PromptCreator()\n    prompt_1: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        children_summaries=\"example children summaries\",\n        dependency_summaries=\"example dependencies\",\n        import_details=\"example import details\",\n    )\n    print(\"Everything:\\n\")\n    print(prompt_1, \"\\n\")\n\n    prompt_2: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        children_summaries=\"example children summaries\",\n        dependency_summaries=\"example dependencies\",\n    )\n    print(\"No import details:\\n\")\n    print(prompt_2, \"\\n\")\n\n    prompt_3: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        children_summaries=\"example children summaries\",\n        import_details=\"example import details\",\n    )\n    print(\"No dependencies:\\n\")\n    print(prompt_3, \"\\n\")\n\n    prompt_4: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        children_summaries=\"example children summaries\",\n    )\n    print(\"No dependencies and no import details:\\n\")\n    print(prompt_4, \"\\n\")\n\n    prompt_5: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        dependency_summaries=\"example dependencies\",\n        import_details=\"example import details\",\n    )\n    print(\"No children:\\n\")\n    print(prompt_5, \"\\n\")\n\n    prompt_6: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        dependency_summaries=\"example dependencies\",\n    )\n    print(\"No children and no import details:\\n\")\n    print(prompt_6, \"\\n\")\n\n    prompt_7: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        import_details=\"example import details\",\n    )\n    print(\"No children and no dependencies:\\n\")\n    print(prompt_7, \"\\n\")\n\n    prompt_8: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n    )\n    print(\"No children, no dependencies, and no import details:\\n\")\n    print(prompt_8, \"\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nfrom typing import Callable, LiteralString\\n\\nimport postcode.ai_services.summarizer.prompts.summarization_prompts as prompts\\n\\n\\nclass PromptCreator:\\n    _interpolation_strategies: dict[str, Callable[..., str]] = {\\n        \"children_dependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_WITH_EVERYTHING,\\n            code=code,\\n            children_summaries=children_summaries,\\n            dependencies=dependencies,\\n            import_details=import_details,\\n        ),\\n        \"children_dependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_IMPORTS,\\n            code=code,\\n            children_summaries=children_summaries,\\n            dependencies=dependencies,\\n        ),\\n        \"children_nodependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES,\\n            code=code,\\n            children_summaries=children_summaries,\\n            import_details=import_details,\\n        ),\\n        \"children_nodependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES_NO_IMPORTS,\\n            code=code,\\n            children_summaries=children_summaries,\\n        ),\\n        \"nochildren_dependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_CHILDREN,\\n            code=code,\\n            dependencies=dependencies,\\n            import_details=import_details,\\n        ),\\n        \"nochildren_dependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_CHILDREN_NO_IMPORTS,\\n            code=code,\\n            dependencies=dependencies,\\n        ),\\n        \"nochildren_nodependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES_NO_CHILDREN,\\n            code=code,\\n            import_details=import_details,\\n        ),\\n        \"nochildren_nodependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_WITHOUT_ANYTHING,\\n            code=code,\\n        ),\\n    }\\n\\n    @staticmethod\\n    def _interpolate_prompt_string(prompt_template: str, **kwargs) -> str:\\n        prompt_string: str = prompt_template\\n        for key, value in kwargs.items():\\n            if value:\\n                prompt_string = prompt_string.replace(f\"{{{key}}}\", value)\\n\\n        return prompt_string\\n\\n    def create_prompt(\\n        self,\\n        code: str,\\n        children_summaries: str | None = None,\\n        dependency_summaries: str | None = None,\\n        import_details: str | None = None,\\n    ) -> str | None:\\n        strategy_key: LiteralString = \"_\".join(\\n            [\\n                \"children\" if children_summaries else \"nochildren\",\\n                \"dependencies\" if dependency_summaries else \"nodependencies\",\\n                \"import_details\" if import_details else \"noimport_details\",\\n            ]\\n        )\\n        strategy: Callable[..., str] | None = self._interpolation_strategies.get(\\n            strategy_key\\n        )\\n        if strategy:\\n            return strategy(\\n                code, children_summaries, dependency_summaries, import_details\\n            )\\n        else:\\n            raise ValueError(f\"Could not find strategy for {strategy_key}\")\\n\\n\\ndef main() -> None:\\n    prompt_creator = PromptCreator()\\n    prompt_1: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        children_summaries=\"example children summaries\",\\n        dependency_summaries=\"example dependencies\",\\n        import_details=\"example import details\",\\n    )\\n    print(\"Everything:\\\\n\")\\n    print(prompt_1, \"\\\\n\")\\n\\n    prompt_2: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        children_summaries=\"example children summaries\",\\n        dependency_summaries=\"example dependencies\",\\n    )\\n    print(\"No import details:\\\\n\")\\n    print(prompt_2, \"\\\\n\")\\n\\n    prompt_3: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        children_summaries=\"example children summaries\",\\n        import_details=\"example import details\",\\n    )\\n    print(\"No dependencies:\\\\n\")\\n    print(prompt_3, \"\\\\n\")\\n\\n    prompt_4: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        children_summaries=\"example children summaries\",\\n    )\\n    print(\"No dependencies and no import details:\\\\n\")\\n    print(prompt_4, \"\\\\n\")\\n\\n    prompt_5: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        dependency_summaries=\"example dependencies\",\\n        import_details=\"example import details\",\\n    )\\n    print(\"No children:\\\\n\")\\n    print(prompt_5, \"\\\\n\")\\n\\n    prompt_6: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        dependency_summaries=\"example dependencies\",\\n    )\\n    print(\"No children and no import details:\\\\n\")\\n    print(prompt_6, \"\\\\n\")\\n\\n    prompt_7: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        import_details=\"example import details\",\\n    )\\n    print(\"No children and no dependencies:\\\\n\")\\n    print(prompt_7, \"\\\\n\")\\n\\n    prompt_8: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n    )\\n    print(\"No children, no dependencies, and no import details:\\\\n\")\\n    print(prompt_8, \"\\\\n\")\\n\\n\\nif __name__ == \"__main__\":\\n    main()\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\nif __name__ == \"__main__\":\\\\n    main()\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass PromptCreator:\\\\n    _interpolation_strategies: dict[str, Callable[..., str]] = {\\\\n        \"children_dependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\\\n            prompts.COD_SUMMARIZATION_PROMPT_WITH_EVERYTHING,\\\\n            code=code,\\\\n            children_summaries=children_summaries,\\\\n            dependencies=dependencies,\\\\n            import_details=import_details,\\\\n        ),\\\\n        \"children_dependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_IMPORTS,\\\\n            code=code,\\\\n            children_summaries=children_summaries,\\\\n            dependencies=dependencies,\\\\n        ),\\\\n        \"children_nodependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES,\\\\n            code=code,\\\\n            children_summaries=children_summaries,\\\\n            import_details=import_details,\\\\n        ),\\\\n        \"children_nodependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES_NO_IMPORTS,\\\\n            code=code,\\\\n            children_summaries=children_summaries,\\\\n        ),\\\\n        \"nochildren_dependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_CHILDREN,\\\\n            code=code,\\\\n            dependencies=dependencies,\\\\n            import_details=import_details,\\\\n        ),\\\\n        \"nochildren_dependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_CHILDREN_NO_IMPORTS,\\\\n            code=code,\\\\n            dependencies=dependencies,\\\\n        ),\\\\n        \"nochildren_nodependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES_NO_CHILDREN,\\\\n            code=code,\\\\n            import_details=import_details,\\\\n        ),\\\\n        \"nochildren_nodependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\\\n            prompts.COD_SUMMARIZATION_PROMPT_WITHOUT_ANYTHING,\\\\n            code=code,\\\\n        ),\\\\n    }\\\\n\\\\n    @staticmethod\\\\n    def _interpolate_prompt_string(prompt_template: str, **kwargs) -> str:\\\\n        prompt_string: str = prompt_template\\\\n        for key, value in kwargs.items():\\\\n            if value:\\\\n                prompt_string = prompt_string.replace(f\"{{{key}}}\", value)\\\\n\\\\n        return prompt_string\\\\n\\\\n    def create_prompt(\\\\n        self,\\\\n        code: str,\\\\n        children_summaries: str | None = None,\\\\n        dependency_summaries: str | None = None,\\\\n        import_details: str | None = None,\\\\n    ) -> str | None:\\\\n        strategy_key: LiteralString = \"_\".join(\\\\n            [\\\\n                \"children\" if children_summaries else \"nochildren\",\\\\n                \"dependencies\" if dependency_summaries else \"nodependencies\",\\\\n                \"import_details\" if import_details else \"noimport_details\",\\\\n            ]\\\\n        )\\\\n        strategy: Callable[..., str] | None = self._interpolation_strategies.get(\\\\n            strategy_key\\\\n        )\\\\n        if strategy:\\\\n            return strategy(\\\\n                code, children_summaries, dependency_summaries, import_details\\\\n            )\\\\n        else:\\\\n            raise ValueError(f\"Could not find strategy for {strategy_key}\")\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n@staticmethod\\\\\\\\ndef _interpolate_prompt_string(prompt_template: str, **kwargs) -> str:\\\\\\\\n    prompt_string: str = prompt_template\\\\\\\\n    for key, value in kwargs.items():\\\\\\\\n        if value:\\\\\\\\n            prompt_string = prompt_string.replace(f\"{{{key}}}\", value)\\\\\\\\n\\\\\\\\n    return prompt_string\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef create_prompt(\\\\\\\\n    self,\\\\\\\\n    code: str,\\\\\\\\n    children_summaries: str | None = None,\\\\\\\\n    dependency_summaries: str | None = None,\\\\\\\\n    import_details: str | None = None,\\\\\\\\n) -> str | None:\\\\\\\\n    strategy_key: LiteralString = \"_\".join(\\\\\\\\n        [\\\\\\\\n            \"children\" if children_summaries else \"nochildren\",\\\\\\\\n            \"dependencies\" if dependency_summaries else \"nodependencies\",\\\\\\\\n            \"import_details\" if import_details else \"noimport_details\",\\\\\\\\n        ]\\\\\\\\n    )\\\\\\\\n    strategy: Callable[..., str] | None = self._interpolation_strategies.get(\\\\\\\\n        strategy_key\\\\\\\\n    )\\\\\\\\n    if strategy:\\\\\\\\n        return strategy(\\\\\\\\n            code, children_summaries, dependency_summaries, import_details\\\\\\\\n        )\\\\\\\\n    else:\\\\\\\\n        raise ValueError(f\"Could not find strategy for {strategy_key}\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom typing import Callable, LiteralString\\\\nfrom typing import Callable, LiteralString\\\\nimport postcode.ai_services.summarizer.prompts.summarization_prompts as prompts\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef main() -> None:\\\\n    prompt_creator = PromptCreator()\\\\n    prompt_1: str | None = prompt_creator.create_prompt(\\\\n        code=\"example code\",\\\\n        children_summaries=\"example children summaries\",\\\\n        dependency_summaries=\"example dependencies\",\\\\n        import_details=\"example import details\",\\\\n    )\\\\n    print(\"Everything:\\\\\\\\n\")\\\\n    print(prompt_1, \"\\\\\\\\n\")\\\\n\\\\n    prompt_2: str | None = prompt_creator.create_prompt(\\\\n        code=\"example code\",\\\\n        children_summaries=\"example children summaries\",\\\\n        dependency_summaries=\"example dependencies\",\\\\n    )\\\\n    print(\"No import details:\\\\\\\\n\")\\\\n    print(prompt_2, \"\\\\\\\\n\")\\\\n\\\\n    prompt_3: str | None = prompt_creator.create_prompt(\\\\n        code=\"example code\",\\\\n        children_summaries=\"example children summaries\",\\\\n        import_details=\"example import details\",\\\\n    )\\\\n    print(\"No dependencies:\\\\\\\\n\")\\\\n    print(prompt_3, \"\\\\\\\\n\")\\\\n\\\\n    prompt_4: str | None = prompt_creator.create_prompt(\\\\n        code=\"example code\",\\\\n        children_summaries=\"example children summaries\",\\\\n    )\\\\n    print(\"No dependencies and no import details:\\\\\\\\n\")\\\\n    print(prompt_4, \"\\\\\\\\n\")\\\\n\\\\n    prompt_5: str | None = prompt_creator.create_prompt(\\\\n        code=\"example code\",\\\\n        dependency_summaries=\"example dependencies\",\\\\n        import_details=\"example import details\",\\\\n    )\\\\n    print(\"No children:\\\\\\\\n\")\\\\n    print(prompt_5, \"\\\\\\\\n\")\\\\n\\\\n    prompt_6: str | None = prompt_creator.create_prompt(\\\\n        code=\"example code\",\\\\n        dependency_summaries=\"example dependencies\",\\\\n    )\\\\n    print(\"No children and no import details:\\\\\\\\n\")\\\\n    print(prompt_6, \"\\\\\\\\n\")\\\\n\\\\n    prompt_7: str | None = prompt_creator.create_prompt(\\\\n        code=\"example code\",\\\\n        import_details=\"example import details\",\\\\n    )\\\\n    print(\"No children and no dependencies:\\\\\\\\n\")\\\\n    print(prompt_7, \"\\\\\\\\n\")\\\\n\\\\n    prompt_8: str | None = prompt_creator.create_prompt(\\\\n        code=\"example code\",\\\\n    )\\\\n    print(\"No children, no dependencies, and no import details:\\\\\\\\n\")\\\\n    print(prompt_8, \"\\\\\\\\n\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom typing import Callable, LiteralString\\nimport postcode.ai_services.summarizer.prompts.summarization_prompts as prompts\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "variable_assignments": [],
            "id": "postcode:ai_services:summarizer:prompt_creator.py__*__MODULE__*__STANDALONE_BLOCK-1",
            "parent_id": "postcode:ai_services:summarizer:prompt_creator.py__*__MODULE",
            "block_type": "STANDALONE_BLOCK",
            "start_line_num": 149,
            "end_line_num": 153,
            "code_content": "if __name__ == \"__main__\":\n    main()\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:ai_services:summarizer:prompt_creator.py__*__MODULE__*__FUNCTION-main"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nif __name__ == \"__main__\":\\n    main()\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "class_name": "PromptCreator",
            "decorators": null,
            "bases": null,
            "docstring": null,
            "attributes": null,
            "keywords": null,
            "id": "postcode:ai_services:summarizer:prompt_creator.py__*__MODULE__*__CLASS-PromptCreator",
            "parent_id": "postcode:ai_services:summarizer:prompt_creator.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 4,
            "end_line_num": 86,
            "code_content": "\n\nclass PromptCreator:\n    _interpolation_strategies: dict[str, Callable[..., str]] = {\n        \"children_dependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_WITH_EVERYTHING,\n            code=code,\n            children_summaries=children_summaries,\n            dependencies=dependencies,\n            import_details=import_details,\n        ),\n        \"children_dependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_NO_IMPORTS,\n            code=code,\n            children_summaries=children_summaries,\n            dependencies=dependencies,\n        ),\n        \"children_nodependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES,\n            code=code,\n            children_summaries=children_summaries,\n            import_details=import_details,\n        ),\n        \"children_nodependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES_NO_IMPORTS,\n            code=code,\n            children_summaries=children_summaries,\n        ),\n        \"nochildren_dependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_NO_CHILDREN,\n            code=code,\n            dependencies=dependencies,\n            import_details=import_details,\n        ),\n        \"nochildren_dependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_NO_CHILDREN_NO_IMPORTS,\n            code=code,\n            dependencies=dependencies,\n        ),\n        \"nochildren_nodependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES_NO_CHILDREN,\n            code=code,\n            import_details=import_details,\n        ),\n        \"nochildren_nodependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\n            prompts.COD_SUMMARIZATION_PROMPT_WITHOUT_ANYTHING,\n            code=code,\n        ),\n    }\n\n    @staticmethod\n    def _interpolate_prompt_string(prompt_template: str, **kwargs) -> str:\n        prompt_string: str = prompt_template\n        for key, value in kwargs.items():\n            if value:\n                prompt_string = prompt_string.replace(f\"{{{key}}}\", value)\n\n        return prompt_string\n\n    def create_prompt(\n        self,\n        code: str,\n        children_summaries: str | None = None,\n        dependency_summaries: str | None = None,\n        import_details: str | None = None,\n    ) -> str | None:\n        strategy_key: LiteralString = \"_\".join(\n            [\n                \"children\" if children_summaries else \"nochildren\",\n                \"dependencies\" if dependency_summaries else \"nodependencies\",\n                \"import_details\" if import_details else \"noimport_details\",\n            ]\n        )\n        strategy: Callable[..., str] | None = self._interpolation_strategies.get(\n            strategy_key\n        )\n        if strategy:\n            return strategy(\n                code, children_summaries, dependency_summaries, import_details\n            )\n        else:\n            raise ValueError(f\"Could not find strategy for {strategy_key}\")\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "Callable",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "LiteralString",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Callable",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "LiteralString",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "postcode.ai_services.summarizer.prompts.summarization_prompts",
                            "as_name": "prompts",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:ai_services:summarizer:prompts:summarization_prompts.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\nclass PromptCreator:\\n    _interpolation_strategies: dict[str, Callable[..., str]] = {\\n        \"children_dependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_WITH_EVERYTHING,\\n            code=code,\\n            children_summaries=children_summaries,\\n            dependencies=dependencies,\\n            import_details=import_details,\\n        ),\\n        \"children_dependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_IMPORTS,\\n            code=code,\\n            children_summaries=children_summaries,\\n            dependencies=dependencies,\\n        ),\\n        \"children_nodependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES,\\n            code=code,\\n            children_summaries=children_summaries,\\n            import_details=import_details,\\n        ),\\n        \"children_nodependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES_NO_IMPORTS,\\n            code=code,\\n            children_summaries=children_summaries,\\n        ),\\n        \"nochildren_dependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_CHILDREN,\\n            code=code,\\n            dependencies=dependencies,\\n            import_details=import_details,\\n        ),\\n        \"nochildren_dependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_CHILDREN_NO_IMPORTS,\\n            code=code,\\n            dependencies=dependencies,\\n        ),\\n        \"nochildren_nodependencies_import_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_NO_DEPENDENCIES_NO_CHILDREN,\\n            code=code,\\n            import_details=import_details,\\n        ),\\n        \"nochildren_nodependencies_noimport_details\": lambda code, children_summaries, dependencies, import_details: PromptCreator._interpolate_prompt_string(\\n            prompts.COD_SUMMARIZATION_PROMPT_WITHOUT_ANYTHING,\\n            code=code,\\n        ),\\n    }\\n\\n    @staticmethod\\n    def _interpolate_prompt_string(prompt_template: str, **kwargs) -> str:\\n        prompt_string: str = prompt_template\\n        for key, value in kwargs.items():\\n            if value:\\n                prompt_string = prompt_string.replace(f\"{{{key}}}\", value)\\n\\n        return prompt_string\\n\\n    def create_prompt(\\n        self,\\n        code: str,\\n        children_summaries: str | None = None,\\n        dependency_summaries: str | None = None,\\n        import_details: str | None = None,\\n    ) -> str | None:\\n        strategy_key: LiteralString = \"_\".join(\\n            [\\n                \"children\" if children_summaries else \"nochildren\",\\n                \"dependencies\" if dependency_summaries else \"nodependencies\",\\n                \"import_details\" if import_details else \"noimport_details\",\\n            ]\\n        )\\n        strategy: Callable[..., str] | None = self._interpolation_strategies.get(\\n            strategy_key\\n        )\\n        if strategy:\\n            return strategy(\\n                code, children_summaries, dependency_summaries, import_details\\n            )\\n        else:\\n            raise ValueError(f\"Could not find strategy for {strategy_key}\")\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n@staticmethod\\\\ndef _interpolate_prompt_string(prompt_template: str, **kwargs) -> str:\\\\n    prompt_string: str = prompt_template\\\\n    for key, value in kwargs.items():\\\\n        if value:\\\\n            prompt_string = prompt_string.replace(f\"{{{key}}}\", value)\\\\n\\\\n    return prompt_string\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef create_prompt(\\\\n    self,\\\\n    code: str,\\\\n    children_summaries: str | None = None,\\\\n    dependency_summaries: str | None = None,\\\\n    import_details: str | None = None,\\\\n) -> str | None:\\\\n    strategy_key: LiteralString = \"_\".join(\\\\n        [\\\\n            \"children\" if children_summaries else \"nochildren\",\\\\n            \"dependencies\" if dependency_summaries else \"nodependencies\",\\\\n            \"import_details\" if import_details else \"noimport_details\",\\\\n        ]\\\\n    )\\\\n    strategy: Callable[..., str] | None = self._interpolation_strategies.get(\\\\n        strategy_key\\\\n    )\\\\n    if strategy:\\\\n        return strategy(\\\\n            code, children_summaries, dependency_summaries, import_details\\\\n        )\\\\n    else:\\\\n        raise ValueError(f\"Could not find strategy for {strategy_key}\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom typing import Callable, LiteralString\\nfrom typing import Callable, LiteralString\\nimport postcode.ai_services.summarizer.prompts.summarization_prompts as prompts\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "_interpolate_prompt_string",
                    "docstring": null,
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:prompt_creator.py__*__MODULE__*__CLASS-PromptCreator__*__FUNCTION-_interpolate_prompt_string",
                    "parent_id": "postcode:ai_services:summarizer:prompt_creator.py__*__MODULE__*__CLASS-PromptCreator",
                    "block_type": "FUNCTION",
                    "start_line_num": 53,
                    "end_line_num": 62,
                    "code_content": "\n@staticmethod\ndef _interpolate_prompt_string(prompt_template: str, **kwargs) -> str:\n    prompt_string: str = prompt_template\n    for key, value in kwargs.items():\n        if value:\n            prompt_string = prompt_string.replace(f\"{{{key}}}\", value)\n\n    return prompt_string\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n@staticmethod\\ndef _interpolate_prompt_string(prompt_template: str, **kwargs) -> str:\\n    prompt_string: str = prompt_template\\n    for key, value in kwargs.items():\\n        if value:\\n            prompt_string = prompt_string.replace(f\"{{{key}}}\", value)\\n\\n    return prompt_string\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "create_prompt",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "str | None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:ai_services:summarizer:prompt_creator.py__*__MODULE__*__CLASS-PromptCreator__*__FUNCTION-create_prompt",
                    "parent_id": "postcode:ai_services:summarizer:prompt_creator.py__*__MODULE__*__CLASS-PromptCreator",
                    "block_type": "FUNCTION",
                    "start_line_num": 62,
                    "end_line_num": 86,
                    "code_content": "\ndef create_prompt(\n    self,\n    code: str,\n    children_summaries: str | None = None,\n    dependency_summaries: str | None = None,\n    import_details: str | None = None,\n) -> str | None:\n    strategy_key: LiteralString = \"_\".join(\n        [\n            \"children\" if children_summaries else \"nochildren\",\n            \"dependencies\" if dependency_summaries else \"nodependencies\",\n            \"import_details\" if import_details else \"noimport_details\",\n        ]\n    )\n    strategy: Callable[..., str] | None = self._interpolation_strategies.get(\n        strategy_key\n    )\n    if strategy:\n        return strategy(\n            code, children_summaries, dependency_summaries, import_details\n        )\n    else:\n        raise ValueError(f\"Could not find strategy for {strategy_key}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef create_prompt(\\n    self,\\n    code: str,\\n    children_summaries: str | None = None,\\n    dependency_summaries: str | None = None,\\n    import_details: str | None = None,\\n) -> str | None:\\n    strategy_key: LiteralString = \"_\".join(\\n        [\\n            \"children\" if children_summaries else \"nochildren\",\\n            \"dependencies\" if dependency_summaries else \"nodependencies\",\\n            \"import_details\" if import_details else \"noimport_details\",\\n        ]\\n    )\\n    strategy: Callable[..., str] | None = self._interpolation_strategies.get(\\n        strategy_key\\n    )\\n    if strategy:\\n        return strategy(\\n            code, children_summaries, dependency_summaries, import_details\\n        )\\n    else:\\n        raise ValueError(f\"Could not find strategy for {strategy_key}\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        },
        {
            "function_name": "main",
            "docstring": null,
            "decorators": null,
            "parameters": null,
            "returns": "None",
            "is_method": false,
            "is_async": false,
            "id": "postcode:ai_services:summarizer:prompt_creator.py__*__MODULE__*__FUNCTION-main",
            "parent_id": "postcode:ai_services:summarizer:prompt_creator.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 86,
            "end_line_num": 149,
            "code_content": "\n\ndef main() -> None:\n    prompt_creator = PromptCreator()\n    prompt_1: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        children_summaries=\"example children summaries\",\n        dependency_summaries=\"example dependencies\",\n        import_details=\"example import details\",\n    )\n    print(\"Everything:\\n\")\n    print(prompt_1, \"\\n\")\n\n    prompt_2: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        children_summaries=\"example children summaries\",\n        dependency_summaries=\"example dependencies\",\n    )\n    print(\"No import details:\\n\")\n    print(prompt_2, \"\\n\")\n\n    prompt_3: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        children_summaries=\"example children summaries\",\n        import_details=\"example import details\",\n    )\n    print(\"No dependencies:\\n\")\n    print(prompt_3, \"\\n\")\n\n    prompt_4: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        children_summaries=\"example children summaries\",\n    )\n    print(\"No dependencies and no import details:\\n\")\n    print(prompt_4, \"\\n\")\n\n    prompt_5: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        dependency_summaries=\"example dependencies\",\n        import_details=\"example import details\",\n    )\n    print(\"No children:\\n\")\n    print(prompt_5, \"\\n\")\n\n    prompt_6: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        dependency_summaries=\"example dependencies\",\n    )\n    print(\"No children and no import details:\\n\")\n    print(prompt_6, \"\\n\")\n\n    prompt_7: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n        import_details=\"example import details\",\n    )\n    print(\"No children and no dependencies:\\n\")\n    print(prompt_7, \"\\n\")\n\n    prompt_8: str | None = prompt_creator.create_prompt(\n        code=\"example code\",\n    )\n    print(\"No children, no dependencies, and no import details:\\n\")\n    print(prompt_8, \"\\n\")\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:ai_services:summarizer:prompt_creator.py__*__MODULE__*__CLASS-PromptCreator"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef main() -> None:\\n    prompt_creator = PromptCreator()\\n    prompt_1: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        children_summaries=\"example children summaries\",\\n        dependency_summaries=\"example dependencies\",\\n        import_details=\"example import details\",\\n    )\\n    print(\"Everything:\\\\n\")\\n    print(prompt_1, \"\\\\n\")\\n\\n    prompt_2: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        children_summaries=\"example children summaries\",\\n        dependency_summaries=\"example dependencies\",\\n    )\\n    print(\"No import details:\\\\n\")\\n    print(prompt_2, \"\\\\n\")\\n\\n    prompt_3: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        children_summaries=\"example children summaries\",\\n        import_details=\"example import details\",\\n    )\\n    print(\"No dependencies:\\\\n\")\\n    print(prompt_3, \"\\\\n\")\\n\\n    prompt_4: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        children_summaries=\"example children summaries\",\\n    )\\n    print(\"No dependencies and no import details:\\\\n\")\\n    print(prompt_4, \"\\\\n\")\\n\\n    prompt_5: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        dependency_summaries=\"example dependencies\",\\n        import_details=\"example import details\",\\n    )\\n    print(\"No children:\\\\n\")\\n    print(prompt_5, \"\\\\n\")\\n\\n    prompt_6: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        dependency_summaries=\"example dependencies\",\\n    )\\n    print(\"No children and no import details:\\\\n\")\\n    print(prompt_6, \"\\\\n\")\\n\\n    prompt_7: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n        import_details=\"example import details\",\\n    )\\n    print(\"No children and no dependencies:\\\\n\")\\n    print(prompt_7, \"\\\\n\")\\n\\n    prompt_8: str | None = prompt_creator.create_prompt(\\n        code=\"example code\",\\n    )\\n    print(\"No children, no dependencies, and no import details:\\\\n\")\\n    print(prompt_8, \"\\\\n\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        }
    ]
}