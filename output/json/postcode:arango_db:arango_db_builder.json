{
    "file_path": "postcode/arango_db/arango_db_builder.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "json",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "os",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Result",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "arango.result",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Json",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "arango.typings",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Cursor",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "arango.cursor",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Any",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ArangoDBManager",
                    "as_name": null,
                    "local_block_id": "postcode:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager"
                }
            ],
            "imported_from": "arango_db.arango_db_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:arango_db:arango_db_manager.py__*__MODULE"
        }
    ],
    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 256,
    "code_content": "import json\nimport os\nfrom arango.result import Result\nfrom arango.typings import Json\nfrom arango.cursor import Cursor\n\nfrom typing import Any\n\nfrom arango_db.arango_db_manager import ArangoDBManager\n\n# NOTE: Remember, when adding logic to connect dependencies, the `from` the external dependency `to` the internal definition using it\n\n\nclass GraphDBBuilder:\n    def __init__(self, db_manager: ArangoDBManager) -> None:\n        self.db_manager: ArangoDBManager = db_manager\n        self.processed_id_set = set()\n\n    def process_json_directory(self, directory_path: str) -> None:\n        for filename in os.listdir(directory_path):\n            if filename.endswith(\".json\"):\n                file_path: str = os.path.join(directory_path, filename)\n                # print(f\"Processing file: {file_path}\")\n                try:\n                    with open(file_path, \"r\") as file:\n                        json_data = json.load(file)\n                        self.process_json_data(json_data)\n                except Exception as e:\n                    print(f\"Error processing file {file_path}: {e}\")\n\n    def process_json_data(self, json_data: dict[str, Any]) -> None:\n        if json_data.get(\"block_type\") == \"MODULE\":\n            module_id: str | None = json_data.get(\"id\")\n            self.create_vertex_for_module(json_data)\n            if module_id:\n                self.process_children(json_data, module_id)\n\n    def create_vertex_for_module(self, module_data: dict[str, Any]) -> None:\n        if \"_key\" not in module_data and \"id\" in module_data:\n            module_data[\"_key\"] = module_data[\"id\"]\n\n        # print(f\"Creating module vertex with attributes: {module_data['_key']}\")\n        try:\n            response: Result[bool | Json] = self.db_manager.db.collection(\n                \"modules\"\n            ).insert(module_data)\n            # print(f\"Module vertex created, response: {response}\")\n        except Exception as e:\n            print(f\"Error inserting module vertex (ArangoDB): {e}\")\n\n    count = 0\n\n    def process_children(self, parent_data: dict[str, Any], parent_key: str) -> None:\n        children = parent_data.get(\"children\")\n        if not isinstance(children, list):\n            return\n\n        for child in parent_data.get(\"children\", []):\n            child_key = child.get(\"id\")\n            child_block_type = child.get(\"block_type\")\n            if child_key:\n                if child_key in self.processed_id_set:\n                    print(f\"Duplicate child key: {child_key}\")\n                    continue\n                self.processed_id_set.add(child_key)\n\n            if child_block_type == \"CLASS\":\n                self.create_vertex_for_class(child, parent_key)\n\n            elif child_block_type == \"FUNCTION\":\n                self.create_vertex_for_function(child, parent_key)\n\n            elif child_block_type == \"STANDALONE_BLOCK\":\n                self.create_vertex_for_standalone_block(child, parent_key)\n\n            if child_key and \"children\" in child:\n                self.count += 1\n                self.process_children(child, child_key)\n\n        # print(f\"Total children: {self.count}\")\n        # print(f\"Total unique children: {len(self.processed_id_set)}\")\n\n    def create_vertex(\n        self, data: dict[str, Any], parent_key: str, vertex_type: str\n    ) -> None:\n        key: str | None = data.get(\"id\")\n        if \"_key\" not in data and key:\n            data[\"_key\"] = key\n        data[\"parent_id\"] = parent_key\n\n        # print(f\"Creating {vertex_type} vertex with attributes: {data['_key']}\")\n        try:\n            vertex_type_str: str = (\n                f\"{vertex_type}s\" if not vertex_type == \"class\" else f\"{vertex_type}es\"\n            )\n            self.db_manager.ensure_collection(f\"{vertex_type_str}\")\n            self.db_manager.db.collection(f\"{vertex_type_str}\").insert(data)\n            # print(f\"{vertex_type.capitalize()} vertex created for {key}\")\n\n            if key:\n                parent_type: str = self.get_block_type_from_id(parent_key)\n                self.create_edge(key, parent_key, vertex_type, parent_type)\n        except Exception as e:\n            print(f\"Error inserting {vertex_type} vertex (ArangoDB): {e}\")\n\n    def create_vertex_for_class(\n        self, class_data: dict[str, Any], parent_key: str\n    ) -> None:\n        self.create_vertex(class_data, parent_key, \"class\")\n\n    def create_vertex_for_function(\n        self, function_data: dict[str, Any], parent_key: str\n    ) -> None:\n        self.create_vertex(function_data, parent_key, \"function\")\n\n    def create_vertex_for_standalone_block(\n        self, standalone_block_data: dict[str, Any], parent_key: str\n    ) -> None:\n        self.create_vertex(standalone_block_data, parent_key, \"standalone_block\")\n\n    def create_edge(\n        self, from_key: str, to_key: str, source_type: str, target_type: str\n    ) -> None:\n        source_string: str = (\n            f\"{source_type}s/{from_key}\"\n            if not source_type == \"class\"\n            else f\"{source_type}es/{from_key}\"\n        )\n        target_string: str = (\n            f\"{target_type}s/{to_key}\"\n            if not target_type == \"class\"\n            else f\"{target_type}es/{to_key}\"\n        )\n        edge_data: dict[str, str] = {\n            \"_from\": f\"{source_string}\",\n            \"_to\": f\"{target_string}\",\n            \"source_type\": source_type,\n            \"target_type\": target_type,\n        }\n        try:\n            self.db_manager.ensure_edge_collection(\"code_edges\")\n            self.db_manager.db.collection(\"code_edges\").insert(edge_data)\n            # print(f\"Edge created between {from_key} and {to_key}\")\n        except Exception as e:\n            print(f\"Error creating edge (ArangoDB): {e}\")\n\n    def get_block_type_from_id(self, block_id) -> str:\n        block_id_parts: list[str] = block_id.split(\"__*__\")\n\n        block_type_part: str = block_id_parts[-1]\n        if block_type_part.startswith(\"MODULE\"):\n            return \"module\"\n        elif block_type_part.startswith(\"CLASS\"):\n            return \"class\"\n        elif block_type_part.startswith(\"FUNCTION\"):\n            return \"function\"\n        elif block_type_part.startswith(\"STANDALONE_BLOCK\"):\n            return \"standalone_block\"\n        else:\n            return \"unknown\"\n\n    def process_imports_and_dependencies(self):\n        # Process each vertex in the database\n        for vertex_collection in [\n            \"modules\",\n            \"classes\",\n            \"functions\",\n            \"standalone_blocks\",\n        ]:\n            cursor: Result[Cursor] = self.db_manager.db.collection(\n                vertex_collection\n            ).all()\n            if isinstance(cursor, Cursor):\n                for vertex in cursor:\n                    vertex_key = vertex[\"_key\"]\n                    if vertex_collection == \"modules\":\n                        self.create_edges_for_imports(\n                            vertex_key, vertex.get(\"imports\", [])\n                        )\n                    else:\n                        self.create_edges_for_dependencies(\n                            vertex_key, vertex.get(\"dependencies\", [])\n                        )\n            else:\n                print(\n                    f\"Error getting cursor for vertex collection: {vertex_collection}\"\n                )\n\n    def create_edges_for_imports(\n        self, module_key: str, imports: list[dict[str, Any]]\n    ) -> None:\n        if not imports:\n            print(f\"No imports found for module {module_key}\")\n            return\n\n        print(f\"Processing imports for module {module_key}\")\n\n        for imp in imports:\n            import_names = imp.get(\"import_names\", [])\n            if not import_names:\n                print(f\"No import names found in import {imp}\")\n                continue\n\n            for imp_name in import_names:\n                local_block_id = imp_name.get(\"local_block_id\")\n\n                if local_block_id:\n                    print(f\"\\nLocal block id: {local_block_id}\")\n                    target_type = self.get_block_type_from_id(local_block_id)\n                    try:\n                        self.create_edge(\n                            module_key, local_block_id, \"module\", target_type\n                        )\n                        print(\n                            f\"Created edge for import {module_key} to {local_block_id}\"\n                        )\n                    except Exception as e:\n                        print(\n                            f\"Error creating edge for import {module_key} to {local_block_id}: {e}\"\n                        )\n                else:\n                    print(f\"Skipped import {imp_name} in module {module_key}\")\n\n    def create_edges_for_dependencies(\n        self, block_key: str, dependencies: list[dict[str, Any]]\n    ) -> None:\n        if not dependencies:\n            return\n\n        for dependency in dependencies:\n            code_block_id = dependency.get(\"code_block_id\")\n            if code_block_id:\n                source_type = self.get_block_type_from_id(block_key)\n                target_type = self.get_block_type_from_id(code_block_id)\n                try:\n                    self.create_edge(block_key, code_block_id, source_type, target_type)\n                except Exception as e:\n                    print(\n                        f\"Error creating edge for dependency {block_key} to {code_block_id}: {e}\"\n                    )\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    db_manager = ArangoDBManager()\n    db_manager.delete_all_collections()  # Delete all collections in the database\n    db_manager.setup_collections()  # Create the required collections\n    graph_builder = GraphDBBuilder(db_manager)\n\n    # Directory containing JSON files\n    json_directory = \"/Users/evanschultz/Documents/Code/post-code/output/json/\"\n\n    # Process all JSON files in the directory\n    graph_builder.process_json_directory(json_directory)\n    graph_builder.process_imports_and_dependencies()\n",
    "important_comments": [
        {
            "content": "# Create the required collections",
            "comment_types": [
                "Q"
            ]
        }
    ],
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nimport json\\nimport os\\nfrom arango.result import Result\\nfrom arango.typings import Json\\nfrom arango.cursor import Cursor\\n\\nfrom typing import Any\\n\\nfrom arango_db.arango_db_manager import ArangoDBManager\\n\\n# NOTE: Remember, when adding logic to connect dependencies, the `from` the external dependency `to` the internal definition using it\\n\\n\\nclass GraphDBBuilder:\\n    def __init__(self, db_manager: ArangoDBManager) -> None:\\n        self.db_manager: ArangoDBManager = db_manager\\n        self.processed_id_set = set()\\n\\n    def process_json_directory(self, directory_path: str) -> None:\\n        for filename in os.listdir(directory_path):\\n            if filename.endswith(\".json\"):\\n                file_path: str = os.path.join(directory_path, filename)\\n                # print(f\"Processing file: {file_path}\")\\n                try:\\n                    with open(file_path, \"r\") as file:\\n                        json_data = json.load(file)\\n                        self.process_json_data(json_data)\\n                except Exception as e:\\n                    print(f\"Error processing file {file_path}: {e}\")\\n\\n    def process_json_data(self, json_data: dict[str, Any]) -> None:\\n        if json_data.get(\"block_type\") == \"MODULE\":\\n            module_id: str | None = json_data.get(\"id\")\\n            self.create_vertex_for_module(json_data)\\n            if module_id:\\n                self.process_children(json_data, module_id)\\n\\n    def create_vertex_for_module(self, module_data: dict[str, Any]) -> None:\\n        if \"_key\" not in module_data and \"id\" in module_data:\\n            module_data[\"_key\"] = module_data[\"id\"]\\n\\n        # print(f\"Creating module vertex with attributes: {module_data[\\'_key\\']}\")\\n        try:\\n            response: Result[bool | Json] = self.db_manager.db.collection(\\n                \"modules\"\\n            ).insert(module_data)\\n            # print(f\"Module vertex created, response: {response}\")\\n        except Exception as e:\\n            print(f\"Error inserting module vertex (ArangoDB): {e}\")\\n\\n    count = 0\\n\\n    def process_children(self, parent_data: dict[str, Any], parent_key: str) -> None:\\n        children = parent_data.get(\"children\")\\n        if not isinstance(children, list):\\n            return\\n\\n        for child in parent_data.get(\"children\", []):\\n            child_key = child.get(\"id\")\\n            child_block_type = child.get(\"block_type\")\\n            if child_key:\\n                if child_key in self.processed_id_set:\\n                    print(f\"Duplicate child key: {child_key}\")\\n                    continue\\n                self.processed_id_set.add(child_key)\\n\\n            if child_block_type == \"CLASS\":\\n                self.create_vertex_for_class(child, parent_key)\\n\\n            elif child_block_type == \"FUNCTION\":\\n                self.create_vertex_for_function(child, parent_key)\\n\\n            elif child_block_type == \"STANDALONE_BLOCK\":\\n                self.create_vertex_for_standalone_block(child, parent_key)\\n\\n            if child_key and \"children\" in child:\\n                self.count += 1\\n                self.process_children(child, child_key)\\n\\n        # print(f\"Total children: {self.count}\")\\n        # print(f\"Total unique children: {len(self.processed_id_set)}\")\\n\\n    def create_vertex(\\n        self, data: dict[str, Any], parent_key: str, vertex_type: str\\n    ) -> None:\\n        key: str | None = data.get(\"id\")\\n        if \"_key\" not in data and key:\\n            data[\"_key\"] = key\\n        data[\"parent_id\"] = parent_key\\n\\n        # print(f\"Creating {vertex_type} vertex with attributes: {data[\\'_key\\']}\")\\n        try:\\n            vertex_type_str: str = (\\n                f\"{vertex_type}s\" if not vertex_type == \"class\" else f\"{vertex_type}es\"\\n            )\\n            self.db_manager.ensure_collection(f\"{vertex_type_str}\")\\n            self.db_manager.db.collection(f\"{vertex_type_str}\").insert(data)\\n            # print(f\"{vertex_type.capitalize()} vertex created for {key}\")\\n\\n            if key:\\n                parent_type: str = self.get_block_type_from_id(parent_key)\\n                self.create_edge(key, parent_key, vertex_type, parent_type)\\n        except Exception as e:\\n            print(f\"Error inserting {vertex_type} vertex (ArangoDB): {e}\")\\n\\n    def create_vertex_for_class(\\n        self, class_data: dict[str, Any], parent_key: str\\n    ) -> None:\\n        self.create_vertex(class_data, parent_key, \"class\")\\n\\n    def create_vertex_for_function(\\n        self, function_data: dict[str, Any], parent_key: str\\n    ) -> None:\\n        self.create_vertex(function_data, parent_key, \"function\")\\n\\n    def create_vertex_for_standalone_block(\\n        self, standalone_block_data: dict[str, Any], parent_key: str\\n    ) -> None:\\n        self.create_vertex(standalone_block_data, parent_key, \"standalone_block\")\\n\\n    def create_edge(\\n        self, from_key: str, to_key: str, source_type: str, target_type: str\\n    ) -> None:\\n        source_string: str = (\\n            f\"{source_type}s/{from_key}\"\\n            if not source_type == \"class\"\\n            else f\"{source_type}es/{from_key}\"\\n        )\\n        target_string: str = (\\n            f\"{target_type}s/{to_key}\"\\n            if not target_type == \"class\"\\n            else f\"{target_type}es/{to_key}\"\\n        )\\n        edge_data: dict[str, str] = {\\n            \"_from\": f\"{source_string}\",\\n            \"_to\": f\"{target_string}\",\\n            \"source_type\": source_type,\\n            \"target_type\": target_type,\\n        }\\n        try:\\n            self.db_manager.ensure_edge_collection(\"code_edges\")\\n            self.db_manager.db.collection(\"code_edges\").insert(edge_data)\\n            # print(f\"Edge created between {from_key} and {to_key}\")\\n        except Exception as e:\\n            print(f\"Error creating edge (ArangoDB): {e}\")\\n\\n    def get_block_type_from_id(self, block_id) -> str:\\n        block_id_parts: list[str] = block_id.split(\"__*__\")\\n\\n        block_type_part: str = block_id_parts[-1]\\n        if block_type_part.startswith(\"MODULE\"):\\n            return \"module\"\\n        elif block_type_part.startswith(\"CLASS\"):\\n            return \"class\"\\n        elif block_type_part.startswith(\"FUNCTION\"):\\n            return \"function\"\\n        elif block_type_part.startswith(\"STANDALONE_BLOCK\"):\\n            return \"standalone_block\"\\n        else:\\n            return \"unknown\"\\n\\n    def process_imports_and_dependencies(self):\\n        # Process each vertex in the database\\n        for vertex_collection in [\\n            \"modules\",\\n            \"classes\",\\n            \"functions\",\\n            \"standalone_blocks\",\\n        ]:\\n            cursor: Result[Cursor] = self.db_manager.db.collection(\\n                vertex_collection\\n            ).all()\\n            if isinstance(cursor, Cursor):\\n                for vertex in cursor:\\n                    vertex_key = vertex[\"_key\"]\\n                    if vertex_collection == \"modules\":\\n                        self.create_edges_for_imports(\\n                            vertex_key, vertex.get(\"imports\", [])\\n                        )\\n                    else:\\n                        self.create_edges_for_dependencies(\\n                            vertex_key, vertex.get(\"dependencies\", [])\\n                        )\\n            else:\\n                print(\\n                    f\"Error getting cursor for vertex collection: {vertex_collection}\"\\n                )\\n\\n    def create_edges_for_imports(\\n        self, module_key: str, imports: list[dict[str, Any]]\\n    ) -> None:\\n        if not imports:\\n            print(f\"No imports found for module {module_key}\")\\n            return\\n\\n        print(f\"Processing imports for module {module_key}\")\\n\\n        for imp in imports:\\n            import_names = imp.get(\"import_names\", [])\\n            if not import_names:\\n                print(f\"No import names found in import {imp}\")\\n                continue\\n\\n            for imp_name in import_names:\\n                local_block_id = imp_name.get(\"local_block_id\")\\n\\n                if local_block_id:\\n                    print(f\"\\\\nLocal block id: {local_block_id}\")\\n                    target_type = self.get_block_type_from_id(local_block_id)\\n                    try:\\n                        self.create_edge(\\n                            module_key, local_block_id, \"module\", target_type\\n                        )\\n                        print(\\n                            f\"Created edge for import {module_key} to {local_block_id}\"\\n                        )\\n                    except Exception as e:\\n                        print(\\n                            f\"Error creating edge for import {module_key} to {local_block_id}: {e}\"\\n                        )\\n                else:\\n                    print(f\"Skipped import {imp_name} in module {module_key}\")\\n\\n    def create_edges_for_dependencies(\\n        self, block_key: str, dependencies: list[dict[str, Any]]\\n    ) -> None:\\n        if not dependencies:\\n            return\\n\\n        for dependency in dependencies:\\n            code_block_id = dependency.get(\"code_block_id\")\\n            if code_block_id:\\n                source_type = self.get_block_type_from_id(block_key)\\n                target_type = self.get_block_type_from_id(code_block_id)\\n                try:\\n                    self.create_edge(block_key, code_block_id, source_type, target_type)\\n                except Exception as e:\\n                    print(\\n                        f\"Error creating edge for dependency {block_key} to {code_block_id}: {e}\"\\n                    )\\n\\n\\nif __name__ == \"__main__\":\\n    # Example usage\\n    db_manager = ArangoDBManager()\\n    db_manager.delete_all_collections()  # Delete all collections in the database\\n    db_manager.setup_collections()  # Create the required collections\\n    graph_builder = GraphDBBuilder(db_manager)\\n\\n    # Directory containing JSON files\\n    json_directory = \"/Users/evanschultz/Documents/Code/post-code/output/json/\"\\n\\n    # Process all JSON files in the directory\\n    graph_builder.process_json_directory(json_directory)\\n    graph_builder.process_imports_and_dependencies()\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\nif __name__ == \"__main__\":\\\\n    # Example usage\\\\n    db_manager = ArangoDBManager()\\\\n    db_manager.delete_all_collections()  # Delete all collections in the database\\\\n    db_manager.setup_collections()  # Create the required collections\\\\n    graph_builder = GraphDBBuilder(db_manager)\\\\n\\\\n    # Directory containing JSON files\\\\n    json_directory = \"/Users/evanschultz/Documents/Code/post-code/output/json/\"\\\\n\\\\n    # Process all JSON files in the directory\\\\n    graph_builder.process_json_directory(json_directory)\\\\n    graph_builder.process_imports_and_dependencies()\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport json\\\\nimport os\\\\nfrom arango_db.arango_db_manager import ArangoDBManager\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n# NOTE: Remember, when adding logic to connect dependencies, the `from` the external dependency `to` the internal definition using it\\\\n\\\\n\\\\nclass GraphDBBuilder:\\\\n    def __init__(self, db_manager: ArangoDBManager) -> None:\\\\n        self.db_manager: ArangoDBManager = db_manager\\\\n        self.processed_id_set = set()\\\\n\\\\n    def process_json_directory(self, directory_path: str) -> None:\\\\n        for filename in os.listdir(directory_path):\\\\n            if filename.endswith(\".json\"):\\\\n                file_path: str = os.path.join(directory_path, filename)\\\\n                # print(f\"Processing file: {file_path}\")\\\\n                try:\\\\n                    with open(file_path, \"r\") as file:\\\\n                        json_data = json.load(file)\\\\n                        self.process_json_data(json_data)\\\\n                except Exception as e:\\\\n                    print(f\"Error processing file {file_path}: {e}\")\\\\n\\\\n    def process_json_data(self, json_data: dict[str, Any]) -> None:\\\\n        if json_data.get(\"block_type\") == \"MODULE\":\\\\n            module_id: str | None = json_data.get(\"id\")\\\\n            self.create_vertex_for_module(json_data)\\\\n            if module_id:\\\\n                self.process_children(json_data, module_id)\\\\n\\\\n    def create_vertex_for_module(self, module_data: dict[str, Any]) -> None:\\\\n        if \"_key\" not in module_data and \"id\" in module_data:\\\\n            module_data[\"_key\"] = module_data[\"id\"]\\\\n\\\\n        # print(f\"Creating module vertex with attributes: {module_data[\\\\\\'_key\\\\\\']}\")\\\\n        try:\\\\n            response: Result[bool | Json] = self.db_manager.db.collection(\\\\n                \"modules\"\\\\n            ).insert(module_data)\\\\n            # print(f\"Module vertex created, response: {response}\")\\\\n        except Exception as e:\\\\n            print(f\"Error inserting module vertex (ArangoDB): {e}\")\\\\n\\\\n    count = 0\\\\n\\\\n    def process_children(self, parent_data: dict[str, Any], parent_key: str) -> None:\\\\n        children = parent_data.get(\"children\")\\\\n        if not isinstance(children, list):\\\\n            return\\\\n\\\\n        for child in parent_data.get(\"children\", []):\\\\n            child_key = child.get(\"id\")\\\\n            child_block_type = child.get(\"block_type\")\\\\n            if child_key:\\\\n                if child_key in self.processed_id_set:\\\\n                    print(f\"Duplicate child key: {child_key}\")\\\\n                    continue\\\\n                self.processed_id_set.add(child_key)\\\\n\\\\n            if child_block_type == \"CLASS\":\\\\n                self.create_vertex_for_class(child, parent_key)\\\\n\\\\n            elif child_block_type == \"FUNCTION\":\\\\n                self.create_vertex_for_function(child, parent_key)\\\\n\\\\n            elif child_block_type == \"STANDALONE_BLOCK\":\\\\n                self.create_vertex_for_standalone_block(child, parent_key)\\\\n\\\\n            if child_key and \"children\" in child:\\\\n                self.count += 1\\\\n                self.process_children(child, child_key)\\\\n\\\\n        # print(f\"Total children: {self.count}\")\\\\n        # print(f\"Total unique children: {len(self.processed_id_set)}\")\\\\n\\\\n    def create_vertex(\\\\n        self, data: dict[str, Any], parent_key: str, vertex_type: str\\\\n    ) -> None:\\\\n        key: str | None = data.get(\"id\")\\\\n        if \"_key\" not in data and key:\\\\n            data[\"_key\"] = key\\\\n        data[\"parent_id\"] = parent_key\\\\n\\\\n        # print(f\"Creating {vertex_type} vertex with attributes: {data[\\\\\\'_key\\\\\\']}\")\\\\n        try:\\\\n            vertex_type_str: str = (\\\\n                f\"{vertex_type}s\" if not vertex_type == \"class\" else f\"{vertex_type}es\"\\\\n            )\\\\n            self.db_manager.ensure_collection(f\"{vertex_type_str}\")\\\\n            self.db_manager.db.collection(f\"{vertex_type_str}\").insert(data)\\\\n            # print(f\"{vertex_type.capitalize()} vertex created for {key}\")\\\\n\\\\n            if key:\\\\n                parent_type: str = self.get_block_type_from_id(parent_key)\\\\n                self.create_edge(key, parent_key, vertex_type, parent_type)\\\\n        except Exception as e:\\\\n            print(f\"Error inserting {vertex_type} vertex (ArangoDB): {e}\")\\\\n\\\\n    def create_vertex_for_class(\\\\n        self, class_data: dict[str, Any], parent_key: str\\\\n    ) -> None:\\\\n        self.create_vertex(class_data, parent_key, \"class\")\\\\n\\\\n    def create_vertex_for_function(\\\\n        self, function_data: dict[str, Any], parent_key: str\\\\n    ) -> None:\\\\n        self.create_vertex(function_data, parent_key, \"function\")\\\\n\\\\n    def create_vertex_for_standalone_block(\\\\n        self, standalone_block_data: dict[str, Any], parent_key: str\\\\n    ) -> None:\\\\n        self.create_vertex(standalone_block_data, parent_key, \"standalone_block\")\\\\n\\\\n    def create_edge(\\\\n        self, from_key: str, to_key: str, source_type: str, target_type: str\\\\n    ) -> None:\\\\n        source_string: str = (\\\\n            f\"{source_type}s/{from_key}\"\\\\n            if not source_type == \"class\"\\\\n            else f\"{source_type}es/{from_key}\"\\\\n        )\\\\n        target_string: str = (\\\\n            f\"{target_type}s/{to_key}\"\\\\n            if not target_type == \"class\"\\\\n            else f\"{target_type}es/{to_key}\"\\\\n        )\\\\n        edge_data: dict[str, str] = {\\\\n            \"_from\": f\"{source_string}\",\\\\n            \"_to\": f\"{target_string}\",\\\\n            \"source_type\": source_type,\\\\n            \"target_type\": target_type,\\\\n        }\\\\n        try:\\\\n            self.db_manager.ensure_edge_collection(\"code_edges\")\\\\n            self.db_manager.db.collection(\"code_edges\").insert(edge_data)\\\\n            # print(f\"Edge created between {from_key} and {to_key}\")\\\\n        except Exception as e:\\\\n            print(f\"Error creating edge (ArangoDB): {e}\")\\\\n\\\\n    def get_block_type_from_id(self, block_id) -> str:\\\\n        block_id_parts: list[str] = block_id.split(\"__*__\")\\\\n\\\\n        block_type_part: str = block_id_parts[-1]\\\\n        if block_type_part.startswith(\"MODULE\"):\\\\n            return \"module\"\\\\n        elif block_type_part.startswith(\"CLASS\"):\\\\n            return \"class\"\\\\n        elif block_type_part.startswith(\"FUNCTION\"):\\\\n            return \"function\"\\\\n        elif block_type_part.startswith(\"STANDALONE_BLOCK\"):\\\\n            return \"standalone_block\"\\\\n        else:\\\\n            return \"unknown\"\\\\n\\\\n    def process_imports_and_dependencies(self):\\\\n        # Process each vertex in the database\\\\n        for vertex_collection in [\\\\n            \"modules\",\\\\n            \"classes\",\\\\n            \"functions\",\\\\n            \"standalone_blocks\",\\\\n        ]:\\\\n            cursor: Result[Cursor] = self.db_manager.db.collection(\\\\n                vertex_collection\\\\n            ).all()\\\\n            if isinstance(cursor, Cursor):\\\\n                for vertex in cursor:\\\\n                    vertex_key = vertex[\"_key\"]\\\\n                    if vertex_collection == \"modules\":\\\\n                        self.create_edges_for_imports(\\\\n                            vertex_key, vertex.get(\"imports\", [])\\\\n                        )\\\\n                    else:\\\\n                        self.create_edges_for_dependencies(\\\\n                            vertex_key, vertex.get(\"dependencies\", [])\\\\n                        )\\\\n            else:\\\\n                print(\\\\n                    f\"Error getting cursor for vertex collection: {vertex_collection}\"\\\\n                )\\\\n\\\\n    def create_edges_for_imports(\\\\n        self, module_key: str, imports: list[dict[str, Any]]\\\\n    ) -> None:\\\\n        if not imports:\\\\n            print(f\"No imports found for module {module_key}\")\\\\n            return\\\\n\\\\n        print(f\"Processing imports for module {module_key}\")\\\\n\\\\n        for imp in imports:\\\\n            import_names = imp.get(\"import_names\", [])\\\\n            if not import_names:\\\\n                print(f\"No import names found in import {imp}\")\\\\n                continue\\\\n\\\\n            for imp_name in import_names:\\\\n                local_block_id = imp_name.get(\"local_block_id\")\\\\n\\\\n                if local_block_id:\\\\n                    print(f\"\\\\\\\\nLocal block id: {local_block_id}\")\\\\n                    target_type = self.get_block_type_from_id(local_block_id)\\\\n                    try:\\\\n                        self.create_edge(\\\\n                            module_key, local_block_id, \"module\", target_type\\\\n                        )\\\\n                        print(\\\\n                            f\"Created edge for import {module_key} to {local_block_id}\"\\\\n                        )\\\\n                    except Exception as e:\\\\n                        print(\\\\n                            f\"Error creating edge for import {module_key} to {local_block_id}: {e}\"\\\\n                        )\\\\n                else:\\\\n                    print(f\"Skipped import {imp_name} in module {module_key}\")\\\\n\\\\n    def create_edges_for_dependencies(\\\\n        self, block_key: str, dependencies: list[dict[str, Any]]\\\\n    ) -> None:\\\\n        if not dependencies:\\\\n            return\\\\n\\\\n        for dependency in dependencies:\\\\n            code_block_id = dependency.get(\"code_block_id\")\\\\n            if code_block_id:\\\\n                source_type = self.get_block_type_from_id(block_key)\\\\n                target_type = self.get_block_type_from_id(code_block_id)\\\\n                try:\\\\n                    self.create_edge(block_key, code_block_id, source_type, target_type)\\\\n                except Exception as e:\\\\n                    print(\\\\n                        f\"Error creating edge for dependency {block_key} to {code_block_id}: {e}\"\\\\n                    )\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\ndef __init__(self, db_manager: ArangoDBManager) -> None:\\\\\\\\n    self.db_manager: ArangoDBManager = db_manager\\\\\\\\n    self.processed_id_set = set()\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef process_json_directory(self, directory_path: str) -> None:\\\\\\\\n    for filename in os.listdir(directory_path):\\\\\\\\n        if filename.endswith(\".json\"):\\\\\\\\n            file_path: str = os.path.join(directory_path, filename)\\\\\\\\n            # print(f\"Processing file: {file_path}\")\\\\\\\\n            try:\\\\\\\\n                with open(file_path, \"r\") as file:\\\\\\\\n                    json_data = json.load(file)\\\\\\\\n                    self.process_json_data(json_data)\\\\\\\\n            except Exception as e:\\\\\\\\n                print(f\"Error processing file {file_path}: {e}\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef process_json_data(self, json_data: dict[str, Any]) -> None:\\\\\\\\n    if json_data.get(\"block_type\") == \"MODULE\":\\\\\\\\n        module_id: str | None = json_data.get(\"id\")\\\\\\\\n        self.create_vertex_for_module(json_data)\\\\\\\\n        if module_id:\\\\\\\\n            self.process_children(json_data, module_id)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef create_vertex_for_module(self, module_data: dict[str, Any]) -> None:\\\\\\\\n    if \"_key\" not in module_data and \"id\" in module_data:\\\\\\\\n        module_data[\"_key\"] = module_data[\"id\"]\\\\\\\\n\\\\\\\\n    # print(f\"Creating module vertex with attributes: {module_data[\\\\\\\\\\\\\\'_key\\\\\\\\\\\\\\']}\")\\\\\\\\n    try:\\\\\\\\n        response: Result[bool | Json] = self.db_manager.db.collection(\\\\\\\\n            \"modules\"\\\\\\\\n        ).insert(module_data)\\\\\\\\n        # print(f\"Module vertex created, response: {response}\")\\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error inserting module vertex (ArangoDB): {e}\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef process_children(self, parent_data: dict[str, Any], parent_key: str) -> None:\\\\\\\\n    children = parent_data.get(\"children\")\\\\\\\\n    if not isinstance(children, list):\\\\\\\\n        return\\\\\\\\n\\\\\\\\n    for child in parent_data.get(\"children\", []):\\\\\\\\n        child_key = child.get(\"id\")\\\\\\\\n        child_block_type = child.get(\"block_type\")\\\\\\\\n        if child_key:\\\\\\\\n            if child_key in self.processed_id_set:\\\\\\\\n                print(f\"Duplicate child key: {child_key}\")\\\\\\\\n                continue\\\\\\\\n            self.processed_id_set.add(child_key)\\\\\\\\n\\\\\\\\n        if child_block_type == \"CLASS\":\\\\\\\\n            self.create_vertex_for_class(child, parent_key)\\\\\\\\n\\\\\\\\n        elif child_block_type == \"FUNCTION\":\\\\\\\\n            self.create_vertex_for_function(child, parent_key)\\\\\\\\n\\\\\\\\n        elif child_block_type == \"STANDALONE_BLOCK\":\\\\\\\\n            self.create_vertex_for_standalone_block(child, parent_key)\\\\\\\\n\\\\\\\\n        if child_key and \"children\" in child:\\\\\\\\n            self.count += 1\\\\\\\\n            self.process_children(child, child_key)\\\\\\\\n\\\\\\\\n    # print(f\"Total children: {self.count}\")\\\\\\\\n    # print(f\"Total unique children: {len(self.processed_id_set)}\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef create_vertex(\\\\\\\\n    self, data: dict[str, Any], parent_key: str, vertex_type: str\\\\\\\\n) -> None:\\\\\\\\n    key: str | None = data.get(\"id\")\\\\\\\\n    if \"_key\" not in data and key:\\\\\\\\n        data[\"_key\"] = key\\\\\\\\n    data[\"parent_id\"] = parent_key\\\\\\\\n\\\\\\\\n    # print(f\"Creating {vertex_type} vertex with attributes: {data[\\\\\\\\\\\\\\'_key\\\\\\\\\\\\\\']}\")\\\\\\\\n    try:\\\\\\\\n        vertex_type_str: str = (\\\\\\\\n            f\"{vertex_type}s\" if not vertex_type == \"class\" else f\"{vertex_type}es\"\\\\\\\\n        )\\\\\\\\n        self.db_manager.ensure_collection(f\"{vertex_type_str}\")\\\\\\\\n        self.db_manager.db.collection(f\"{vertex_type_str}\").insert(data)\\\\\\\\n        # print(f\"{vertex_type.capitalize()} vertex created for {key}\")\\\\\\\\n\\\\\\\\n        if key:\\\\\\\\n            parent_type: str = self.get_block_type_from_id(parent_key)\\\\\\\\n            self.create_edge(key, parent_key, vertex_type, parent_type)\\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error inserting {vertex_type} vertex (ArangoDB): {e}\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef create_vertex_for_class(\\\\\\\\n    self, class_data: dict[str, Any], parent_key: str\\\\\\\\n) -> None:\\\\\\\\n    self.create_vertex(class_data, parent_key, \"class\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef create_vertex_for_function(\\\\\\\\n    self, function_data: dict[str, Any], parent_key: str\\\\\\\\n) -> None:\\\\\\\\n    self.create_vertex(function_data, parent_key, \"function\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef create_vertex_for_standalone_block(\\\\\\\\n    self, standalone_block_data: dict[str, Any], parent_key: str\\\\\\\\n) -> None:\\\\\\\\n    self.create_vertex(standalone_block_data, parent_key, \"standalone_block\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef create_edge(\\\\\\\\n    self, from_key: str, to_key: str, source_type: str, target_type: str\\\\\\\\n) -> None:\\\\\\\\n    source_string: str = (\\\\\\\\n        f\"{source_type}s/{from_key}\"\\\\\\\\n        if not source_type == \"class\"\\\\\\\\n        else f\"{source_type}es/{from_key}\"\\\\\\\\n    )\\\\\\\\n    target_string: str = (\\\\\\\\n        f\"{target_type}s/{to_key}\"\\\\\\\\n        if not target_type == \"class\"\\\\\\\\n        else f\"{target_type}es/{to_key}\"\\\\\\\\n    )\\\\\\\\n    edge_data: dict[str, str] = {\\\\\\\\n        \"_from\": f\"{source_string}\",\\\\\\\\n        \"_to\": f\"{target_string}\",\\\\\\\\n        \"source_type\": source_type,\\\\\\\\n        \"target_type\": target_type,\\\\\\\\n    }\\\\\\\\n    try:\\\\\\\\n        self.db_manager.ensure_edge_collection(\"code_edges\")\\\\\\\\n        self.db_manager.db.collection(\"code_edges\").insert(edge_data)\\\\\\\\n        # print(f\"Edge created between {from_key} and {to_key}\")\\\\\\\\n    except Exception as e:\\\\\\\\n        print(f\"Error creating edge (ArangoDB): {e}\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef get_block_type_from_id(self, block_id) -> str:\\\\\\\\n    block_id_parts: list[str] = block_id.split(\"__*__\")\\\\\\\\n\\\\\\\\n    block_type_part: str = block_id_parts[-1]\\\\\\\\n    if block_type_part.startswith(\"MODULE\"):\\\\\\\\n        return \"module\"\\\\\\\\n    elif block_type_part.startswith(\"CLASS\"):\\\\\\\\n        return \"class\"\\\\\\\\n    elif block_type_part.startswith(\"FUNCTION\"):\\\\\\\\n        return \"function\"\\\\\\\\n    elif block_type_part.startswith(\"STANDALONE_BLOCK\"):\\\\\\\\n        return \"standalone_block\"\\\\\\\\n    else:\\\\\\\\n        return \"unknown\"\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef process_imports_and_dependencies(self):\\\\\\\\n    # Process each vertex in the database\\\\\\\\n    for vertex_collection in [\\\\\\\\n        \"modules\",\\\\\\\\n        \"classes\",\\\\\\\\n        \"functions\",\\\\\\\\n        \"standalone_blocks\",\\\\\\\\n    ]:\\\\\\\\n        cursor: Result[Cursor] = self.db_manager.db.collection(\\\\\\\\n            vertex_collection\\\\\\\\n        ).all()\\\\\\\\n        if isinstance(cursor, Cursor):\\\\\\\\n            for vertex in cursor:\\\\\\\\n                vertex_key = vertex[\"_key\"]\\\\\\\\n                if vertex_collection == \"modules\":\\\\\\\\n                    self.create_edges_for_imports(\\\\\\\\n                        vertex_key, vertex.get(\"imports\", [])\\\\\\\\n                    )\\\\\\\\n                else:\\\\\\\\n                    self.create_edges_for_dependencies(\\\\\\\\n                        vertex_key, vertex.get(\"dependencies\", [])\\\\\\\\n                    )\\\\\\\\n        else:\\\\\\\\n            print(\\\\\\\\n                f\"Error getting cursor for vertex collection: {vertex_collection}\"\\\\\\\\n            )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef create_edges_for_imports(\\\\\\\\n    self, module_key: str, imports: list[dict[str, Any]]\\\\\\\\n) -> None:\\\\\\\\n    if not imports:\\\\\\\\n        print(f\"No imports found for module {module_key}\")\\\\\\\\n        return\\\\\\\\n\\\\\\\\n    print(f\"Processing imports for module {module_key}\")\\\\\\\\n\\\\\\\\n    for imp in imports:\\\\\\\\n        import_names = imp.get(\"import_names\", [])\\\\\\\\n        if not import_names:\\\\\\\\n            print(f\"No import names found in import {imp}\")\\\\\\\\n            continue\\\\\\\\n\\\\\\\\n        for imp_name in import_names:\\\\\\\\n            local_block_id = imp_name.get(\"local_block_id\")\\\\\\\\n\\\\\\\\n            if local_block_id:\\\\\\\\n                print(f\"\\\\\\\\\\\\\\\\nLocal block id: {local_block_id}\")\\\\\\\\n                target_type = self.get_block_type_from_id(local_block_id)\\\\\\\\n                try:\\\\\\\\n                    self.create_edge(\\\\\\\\n                        module_key, local_block_id, \"module\", target_type\\\\\\\\n                    )\\\\\\\\n                    print(\\\\\\\\n                        f\"Created edge for import {module_key} to {local_block_id}\"\\\\\\\\n                    )\\\\\\\\n                except Exception as e:\\\\\\\\n                    print(\\\\\\\\n                        f\"Error creating edge for import {module_key} to {local_block_id}: {e}\"\\\\\\\\n                    )\\\\\\\\n            else:\\\\\\\\n                print(f\"Skipped import {imp_name} in module {module_key}\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef create_edges_for_dependencies(\\\\\\\\n    self, block_key: str, dependencies: list[dict[str, Any]]\\\\\\\\n) -> None:\\\\\\\\n    if not dependencies:\\\\\\\\n        return\\\\\\\\n\\\\\\\\n    for dependency in dependencies:\\\\\\\\n        code_block_id = dependency.get(\"code_block_id\")\\\\\\\\n        if code_block_id:\\\\\\\\n            source_type = self.get_block_type_from_id(block_key)\\\\\\\\n            target_type = self.get_block_type_from_id(code_block_id)\\\\\\\\n            try:\\\\\\\\n                self.create_edge(block_key, code_block_id, source_type, target_type)\\\\\\\\n            except Exception as e:\\\\\\\\n                print(\\\\\\\\n                    f\"Error creating edge for dependency {block_key} to {code_block_id}: {e}\"\\\\\\\\n                )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport json\\\\nimport os\\\\nfrom arango.result import Result\\\\nfrom arango.typings import Json\\\\nfrom arango.cursor import Cursor\\\\nfrom typing import Any\\\\nfrom arango_db.arango_db_manager import ArangoDBManager\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport json\\nimport os\\nfrom arango.result import Result\\nfrom arango.typings import Json\\nfrom arango.cursor import Cursor\\nfrom typing import Any\\nfrom arango_db.arango_db_manager import ArangoDBManager\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "variable_assignments": [],
            "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__STANDALONE_BLOCK-1",
            "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE",
            "block_type": "STANDALONE_BLOCK",
            "start_line_num": 241,
            "end_line_num": 256,
            "code_content": "if __name__ == \"__main__\":\n    # Example usage\n    db_manager = ArangoDBManager()\n    db_manager.delete_all_collections()  # Delete all collections in the database\n    db_manager.setup_collections()  # Create the required collections\n    graph_builder = GraphDBBuilder(db_manager)\n\n    # Directory containing JSON files\n    json_directory = \"/Users/evanschultz/Documents/Code/post-code/output/json/\"\n\n    # Process all JSON files in the directory\n    graph_builder.process_json_directory(json_directory)\n    graph_builder.process_imports_and_dependencies()\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder"
                },
                {
                    "import_names": [
                        {
                            "name": "json",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "os",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ArangoDBManager",
                            "as_name": null,
                            "local_block_id": "postcode:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager"
                        }
                    ],
                    "imported_from": "arango_db.arango_db_manager",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:arango_db:arango_db_manager.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nif __name__ == \"__main__\":\\n    # Example usage\\n    db_manager = ArangoDBManager()\\n    db_manager.delete_all_collections()  # Delete all collections in the database\\n    db_manager.setup_collections()  # Create the required collections\\n    graph_builder = GraphDBBuilder(db_manager)\\n\\n    # Directory containing JSON files\\n    json_directory = \"/Users/evanschultz/Documents/Code/post-code/output/json/\"\\n\\n    # Process all JSON files in the directory\\n    graph_builder.process_json_directory(json_directory)\\n    graph_builder.process_imports_and_dependencies()\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport json\\nimport os\\nfrom arango_db.arango_db_manager import ArangoDBManager\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "class_name": "GraphDBBuilder",
            "decorators": null,
            "bases": null,
            "docstring": null,
            "attributes": null,
            "keywords": null,
            "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
            "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 10,
            "end_line_num": 241,
            "code_content": "\n# NOTE: Remember, when adding logic to connect dependencies, the `from` the external dependency `to` the internal definition using it\n\n\nclass GraphDBBuilder:\n    def __init__(self, db_manager: ArangoDBManager) -> None:\n        self.db_manager: ArangoDBManager = db_manager\n        self.processed_id_set = set()\n\n    def process_json_directory(self, directory_path: str) -> None:\n        for filename in os.listdir(directory_path):\n            if filename.endswith(\".json\"):\n                file_path: str = os.path.join(directory_path, filename)\n                # print(f\"Processing file: {file_path}\")\n                try:\n                    with open(file_path, \"r\") as file:\n                        json_data = json.load(file)\n                        self.process_json_data(json_data)\n                except Exception as e:\n                    print(f\"Error processing file {file_path}: {e}\")\n\n    def process_json_data(self, json_data: dict[str, Any]) -> None:\n        if json_data.get(\"block_type\") == \"MODULE\":\n            module_id: str | None = json_data.get(\"id\")\n            self.create_vertex_for_module(json_data)\n            if module_id:\n                self.process_children(json_data, module_id)\n\n    def create_vertex_for_module(self, module_data: dict[str, Any]) -> None:\n        if \"_key\" not in module_data and \"id\" in module_data:\n            module_data[\"_key\"] = module_data[\"id\"]\n\n        # print(f\"Creating module vertex with attributes: {module_data['_key']}\")\n        try:\n            response: Result[bool | Json] = self.db_manager.db.collection(\n                \"modules\"\n            ).insert(module_data)\n            # print(f\"Module vertex created, response: {response}\")\n        except Exception as e:\n            print(f\"Error inserting module vertex (ArangoDB): {e}\")\n\n    count = 0\n\n    def process_children(self, parent_data: dict[str, Any], parent_key: str) -> None:\n        children = parent_data.get(\"children\")\n        if not isinstance(children, list):\n            return\n\n        for child in parent_data.get(\"children\", []):\n            child_key = child.get(\"id\")\n            child_block_type = child.get(\"block_type\")\n            if child_key:\n                if child_key in self.processed_id_set:\n                    print(f\"Duplicate child key: {child_key}\")\n                    continue\n                self.processed_id_set.add(child_key)\n\n            if child_block_type == \"CLASS\":\n                self.create_vertex_for_class(child, parent_key)\n\n            elif child_block_type == \"FUNCTION\":\n                self.create_vertex_for_function(child, parent_key)\n\n            elif child_block_type == \"STANDALONE_BLOCK\":\n                self.create_vertex_for_standalone_block(child, parent_key)\n\n            if child_key and \"children\" in child:\n                self.count += 1\n                self.process_children(child, child_key)\n\n        # print(f\"Total children: {self.count}\")\n        # print(f\"Total unique children: {len(self.processed_id_set)}\")\n\n    def create_vertex(\n        self, data: dict[str, Any], parent_key: str, vertex_type: str\n    ) -> None:\n        key: str | None = data.get(\"id\")\n        if \"_key\" not in data and key:\n            data[\"_key\"] = key\n        data[\"parent_id\"] = parent_key\n\n        # print(f\"Creating {vertex_type} vertex with attributes: {data['_key']}\")\n        try:\n            vertex_type_str: str = (\n                f\"{vertex_type}s\" if not vertex_type == \"class\" else f\"{vertex_type}es\"\n            )\n            self.db_manager.ensure_collection(f\"{vertex_type_str}\")\n            self.db_manager.db.collection(f\"{vertex_type_str}\").insert(data)\n            # print(f\"{vertex_type.capitalize()} vertex created for {key}\")\n\n            if key:\n                parent_type: str = self.get_block_type_from_id(parent_key)\n                self.create_edge(key, parent_key, vertex_type, parent_type)\n        except Exception as e:\n            print(f\"Error inserting {vertex_type} vertex (ArangoDB): {e}\")\n\n    def create_vertex_for_class(\n        self, class_data: dict[str, Any], parent_key: str\n    ) -> None:\n        self.create_vertex(class_data, parent_key, \"class\")\n\n    def create_vertex_for_function(\n        self, function_data: dict[str, Any], parent_key: str\n    ) -> None:\n        self.create_vertex(function_data, parent_key, \"function\")\n\n    def create_vertex_for_standalone_block(\n        self, standalone_block_data: dict[str, Any], parent_key: str\n    ) -> None:\n        self.create_vertex(standalone_block_data, parent_key, \"standalone_block\")\n\n    def create_edge(\n        self, from_key: str, to_key: str, source_type: str, target_type: str\n    ) -> None:\n        source_string: str = (\n            f\"{source_type}s/{from_key}\"\n            if not source_type == \"class\"\n            else f\"{source_type}es/{from_key}\"\n        )\n        target_string: str = (\n            f\"{target_type}s/{to_key}\"\n            if not target_type == \"class\"\n            else f\"{target_type}es/{to_key}\"\n        )\n        edge_data: dict[str, str] = {\n            \"_from\": f\"{source_string}\",\n            \"_to\": f\"{target_string}\",\n            \"source_type\": source_type,\n            \"target_type\": target_type,\n        }\n        try:\n            self.db_manager.ensure_edge_collection(\"code_edges\")\n            self.db_manager.db.collection(\"code_edges\").insert(edge_data)\n            # print(f\"Edge created between {from_key} and {to_key}\")\n        except Exception as e:\n            print(f\"Error creating edge (ArangoDB): {e}\")\n\n    def get_block_type_from_id(self, block_id) -> str:\n        block_id_parts: list[str] = block_id.split(\"__*__\")\n\n        block_type_part: str = block_id_parts[-1]\n        if block_type_part.startswith(\"MODULE\"):\n            return \"module\"\n        elif block_type_part.startswith(\"CLASS\"):\n            return \"class\"\n        elif block_type_part.startswith(\"FUNCTION\"):\n            return \"function\"\n        elif block_type_part.startswith(\"STANDALONE_BLOCK\"):\n            return \"standalone_block\"\n        else:\n            return \"unknown\"\n\n    def process_imports_and_dependencies(self):\n        # Process each vertex in the database\n        for vertex_collection in [\n            \"modules\",\n            \"classes\",\n            \"functions\",\n            \"standalone_blocks\",\n        ]:\n            cursor: Result[Cursor] = self.db_manager.db.collection(\n                vertex_collection\n            ).all()\n            if isinstance(cursor, Cursor):\n                for vertex in cursor:\n                    vertex_key = vertex[\"_key\"]\n                    if vertex_collection == \"modules\":\n                        self.create_edges_for_imports(\n                            vertex_key, vertex.get(\"imports\", [])\n                        )\n                    else:\n                        self.create_edges_for_dependencies(\n                            vertex_key, vertex.get(\"dependencies\", [])\n                        )\n            else:\n                print(\n                    f\"Error getting cursor for vertex collection: {vertex_collection}\"\n                )\n\n    def create_edges_for_imports(\n        self, module_key: str, imports: list[dict[str, Any]]\n    ) -> None:\n        if not imports:\n            print(f\"No imports found for module {module_key}\")\n            return\n\n        print(f\"Processing imports for module {module_key}\")\n\n        for imp in imports:\n            import_names = imp.get(\"import_names\", [])\n            if not import_names:\n                print(f\"No import names found in import {imp}\")\n                continue\n\n            for imp_name in import_names:\n                local_block_id = imp_name.get(\"local_block_id\")\n\n                if local_block_id:\n                    print(f\"\\nLocal block id: {local_block_id}\")\n                    target_type = self.get_block_type_from_id(local_block_id)\n                    try:\n                        self.create_edge(\n                            module_key, local_block_id, \"module\", target_type\n                        )\n                        print(\n                            f\"Created edge for import {module_key} to {local_block_id}\"\n                        )\n                    except Exception as e:\n                        print(\n                            f\"Error creating edge for import {module_key} to {local_block_id}: {e}\"\n                        )\n                else:\n                    print(f\"Skipped import {imp_name} in module {module_key}\")\n\n    def create_edges_for_dependencies(\n        self, block_key: str, dependencies: list[dict[str, Any]]\n    ) -> None:\n        if not dependencies:\n            return\n\n        for dependency in dependencies:\n            code_block_id = dependency.get(\"code_block_id\")\n            if code_block_id:\n                source_type = self.get_block_type_from_id(block_key)\n                target_type = self.get_block_type_from_id(code_block_id)\n                try:\n                    self.create_edge(block_key, code_block_id, source_type, target_type)\n                except Exception as e:\n                    print(\n                        f\"Error creating edge for dependency {block_key} to {code_block_id}: {e}\"\n                    )\n",
            "important_comments": [
                {
                    "content": "# NOTE: Remember, when adding logic to connect dependencies, the `from` the external dependency `to` the internal definition using it",
                    "comment_types": [
                        "NOTE"
                    ]
                }
            ],
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "json",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "os",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Result",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "arango.result",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Json",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "arango.typings",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Cursor",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "arango.cursor",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Any",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ArangoDBManager",
                            "as_name": null,
                            "local_block_id": "postcode:arango_db:arango_db_manager.py__*__MODULE__*__CLASS-ArangoDBManager"
                        }
                    ],
                    "imported_from": "arango_db.arango_db_manager",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:arango_db:arango_db_manager.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n# NOTE: Remember, when adding logic to connect dependencies, the `from` the external dependency `to` the internal definition using it\\n\\n\\nclass GraphDBBuilder:\\n    def __init__(self, db_manager: ArangoDBManager) -> None:\\n        self.db_manager: ArangoDBManager = db_manager\\n        self.processed_id_set = set()\\n\\n    def process_json_directory(self, directory_path: str) -> None:\\n        for filename in os.listdir(directory_path):\\n            if filename.endswith(\".json\"):\\n                file_path: str = os.path.join(directory_path, filename)\\n                # print(f\"Processing file: {file_path}\")\\n                try:\\n                    with open(file_path, \"r\") as file:\\n                        json_data = json.load(file)\\n                        self.process_json_data(json_data)\\n                except Exception as e:\\n                    print(f\"Error processing file {file_path}: {e}\")\\n\\n    def process_json_data(self, json_data: dict[str, Any]) -> None:\\n        if json_data.get(\"block_type\") == \"MODULE\":\\n            module_id: str | None = json_data.get(\"id\")\\n            self.create_vertex_for_module(json_data)\\n            if module_id:\\n                self.process_children(json_data, module_id)\\n\\n    def create_vertex_for_module(self, module_data: dict[str, Any]) -> None:\\n        if \"_key\" not in module_data and \"id\" in module_data:\\n            module_data[\"_key\"] = module_data[\"id\"]\\n\\n        # print(f\"Creating module vertex with attributes: {module_data[\\'_key\\']}\")\\n        try:\\n            response: Result[bool | Json] = self.db_manager.db.collection(\\n                \"modules\"\\n            ).insert(module_data)\\n            # print(f\"Module vertex created, response: {response}\")\\n        except Exception as e:\\n            print(f\"Error inserting module vertex (ArangoDB): {e}\")\\n\\n    count = 0\\n\\n    def process_children(self, parent_data: dict[str, Any], parent_key: str) -> None:\\n        children = parent_data.get(\"children\")\\n        if not isinstance(children, list):\\n            return\\n\\n        for child in parent_data.get(\"children\", []):\\n            child_key = child.get(\"id\")\\n            child_block_type = child.get(\"block_type\")\\n            if child_key:\\n                if child_key in self.processed_id_set:\\n                    print(f\"Duplicate child key: {child_key}\")\\n                    continue\\n                self.processed_id_set.add(child_key)\\n\\n            if child_block_type == \"CLASS\":\\n                self.create_vertex_for_class(child, parent_key)\\n\\n            elif child_block_type == \"FUNCTION\":\\n                self.create_vertex_for_function(child, parent_key)\\n\\n            elif child_block_type == \"STANDALONE_BLOCK\":\\n                self.create_vertex_for_standalone_block(child, parent_key)\\n\\n            if child_key and \"children\" in child:\\n                self.count += 1\\n                self.process_children(child, child_key)\\n\\n        # print(f\"Total children: {self.count}\")\\n        # print(f\"Total unique children: {len(self.processed_id_set)}\")\\n\\n    def create_vertex(\\n        self, data: dict[str, Any], parent_key: str, vertex_type: str\\n    ) -> None:\\n        key: str | None = data.get(\"id\")\\n        if \"_key\" not in data and key:\\n            data[\"_key\"] = key\\n        data[\"parent_id\"] = parent_key\\n\\n        # print(f\"Creating {vertex_type} vertex with attributes: {data[\\'_key\\']}\")\\n        try:\\n            vertex_type_str: str = (\\n                f\"{vertex_type}s\" if not vertex_type == \"class\" else f\"{vertex_type}es\"\\n            )\\n            self.db_manager.ensure_collection(f\"{vertex_type_str}\")\\n            self.db_manager.db.collection(f\"{vertex_type_str}\").insert(data)\\n            # print(f\"{vertex_type.capitalize()} vertex created for {key}\")\\n\\n            if key:\\n                parent_type: str = self.get_block_type_from_id(parent_key)\\n                self.create_edge(key, parent_key, vertex_type, parent_type)\\n        except Exception as e:\\n            print(f\"Error inserting {vertex_type} vertex (ArangoDB): {e}\")\\n\\n    def create_vertex_for_class(\\n        self, class_data: dict[str, Any], parent_key: str\\n    ) -> None:\\n        self.create_vertex(class_data, parent_key, \"class\")\\n\\n    def create_vertex_for_function(\\n        self, function_data: dict[str, Any], parent_key: str\\n    ) -> None:\\n        self.create_vertex(function_data, parent_key, \"function\")\\n\\n    def create_vertex_for_standalone_block(\\n        self, standalone_block_data: dict[str, Any], parent_key: str\\n    ) -> None:\\n        self.create_vertex(standalone_block_data, parent_key, \"standalone_block\")\\n\\n    def create_edge(\\n        self, from_key: str, to_key: str, source_type: str, target_type: str\\n    ) -> None:\\n        source_string: str = (\\n            f\"{source_type}s/{from_key}\"\\n            if not source_type == \"class\"\\n            else f\"{source_type}es/{from_key}\"\\n        )\\n        target_string: str = (\\n            f\"{target_type}s/{to_key}\"\\n            if not target_type == \"class\"\\n            else f\"{target_type}es/{to_key}\"\\n        )\\n        edge_data: dict[str, str] = {\\n            \"_from\": f\"{source_string}\",\\n            \"_to\": f\"{target_string}\",\\n            \"source_type\": source_type,\\n            \"target_type\": target_type,\\n        }\\n        try:\\n            self.db_manager.ensure_edge_collection(\"code_edges\")\\n            self.db_manager.db.collection(\"code_edges\").insert(edge_data)\\n            # print(f\"Edge created between {from_key} and {to_key}\")\\n        except Exception as e:\\n            print(f\"Error creating edge (ArangoDB): {e}\")\\n\\n    def get_block_type_from_id(self, block_id) -> str:\\n        block_id_parts: list[str] = block_id.split(\"__*__\")\\n\\n        block_type_part: str = block_id_parts[-1]\\n        if block_type_part.startswith(\"MODULE\"):\\n            return \"module\"\\n        elif block_type_part.startswith(\"CLASS\"):\\n            return \"class\"\\n        elif block_type_part.startswith(\"FUNCTION\"):\\n            return \"function\"\\n        elif block_type_part.startswith(\"STANDALONE_BLOCK\"):\\n            return \"standalone_block\"\\n        else:\\n            return \"unknown\"\\n\\n    def process_imports_and_dependencies(self):\\n        # Process each vertex in the database\\n        for vertex_collection in [\\n            \"modules\",\\n            \"classes\",\\n            \"functions\",\\n            \"standalone_blocks\",\\n        ]:\\n            cursor: Result[Cursor] = self.db_manager.db.collection(\\n                vertex_collection\\n            ).all()\\n            if isinstance(cursor, Cursor):\\n                for vertex in cursor:\\n                    vertex_key = vertex[\"_key\"]\\n                    if vertex_collection == \"modules\":\\n                        self.create_edges_for_imports(\\n                            vertex_key, vertex.get(\"imports\", [])\\n                        )\\n                    else:\\n                        self.create_edges_for_dependencies(\\n                            vertex_key, vertex.get(\"dependencies\", [])\\n                        )\\n            else:\\n                print(\\n                    f\"Error getting cursor for vertex collection: {vertex_collection}\"\\n                )\\n\\n    def create_edges_for_imports(\\n        self, module_key: str, imports: list[dict[str, Any]]\\n    ) -> None:\\n        if not imports:\\n            print(f\"No imports found for module {module_key}\")\\n            return\\n\\n        print(f\"Processing imports for module {module_key}\")\\n\\n        for imp in imports:\\n            import_names = imp.get(\"import_names\", [])\\n            if not import_names:\\n                print(f\"No import names found in import {imp}\")\\n                continue\\n\\n            for imp_name in import_names:\\n                local_block_id = imp_name.get(\"local_block_id\")\\n\\n                if local_block_id:\\n                    print(f\"\\\\nLocal block id: {local_block_id}\")\\n                    target_type = self.get_block_type_from_id(local_block_id)\\n                    try:\\n                        self.create_edge(\\n                            module_key, local_block_id, \"module\", target_type\\n                        )\\n                        print(\\n                            f\"Created edge for import {module_key} to {local_block_id}\"\\n                        )\\n                    except Exception as e:\\n                        print(\\n                            f\"Error creating edge for import {module_key} to {local_block_id}: {e}\"\\n                        )\\n                else:\\n                    print(f\"Skipped import {imp_name} in module {module_key}\")\\n\\n    def create_edges_for_dependencies(\\n        self, block_key: str, dependencies: list[dict[str, Any]]\\n    ) -> None:\\n        if not dependencies:\\n            return\\n\\n        for dependency in dependencies:\\n            code_block_id = dependency.get(\"code_block_id\")\\n            if code_block_id:\\n                source_type = self.get_block_type_from_id(block_key)\\n                target_type = self.get_block_type_from_id(code_block_id)\\n                try:\\n                    self.create_edge(block_key, code_block_id, source_type, target_type)\\n                except Exception as e:\\n                    print(\\n                        f\"Error creating edge for dependency {block_key} to {code_block_id}: {e}\"\\n                    )\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\ndef __init__(self, db_manager: ArangoDBManager) -> None:\\\\n    self.db_manager: ArangoDBManager = db_manager\\\\n    self.processed_id_set = set()\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef process_json_directory(self, directory_path: str) -> None:\\\\n    for filename in os.listdir(directory_path):\\\\n        if filename.endswith(\".json\"):\\\\n            file_path: str = os.path.join(directory_path, filename)\\\\n            # print(f\"Processing file: {file_path}\")\\\\n            try:\\\\n                with open(file_path, \"r\") as file:\\\\n                    json_data = json.load(file)\\\\n                    self.process_json_data(json_data)\\\\n            except Exception as e:\\\\n                print(f\"Error processing file {file_path}: {e}\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef process_json_data(self, json_data: dict[str, Any]) -> None:\\\\n    if json_data.get(\"block_type\") == \"MODULE\":\\\\n        module_id: str | None = json_data.get(\"id\")\\\\n        self.create_vertex_for_module(json_data)\\\\n        if module_id:\\\\n            self.process_children(json_data, module_id)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef create_vertex_for_module(self, module_data: dict[str, Any]) -> None:\\\\n    if \"_key\" not in module_data and \"id\" in module_data:\\\\n        module_data[\"_key\"] = module_data[\"id\"]\\\\n\\\\n    # print(f\"Creating module vertex with attributes: {module_data[\\\\\\'_key\\\\\\']}\")\\\\n    try:\\\\n        response: Result[bool | Json] = self.db_manager.db.collection(\\\\n            \"modules\"\\\\n        ).insert(module_data)\\\\n        # print(f\"Module vertex created, response: {response}\")\\\\n    except Exception as e:\\\\n        print(f\"Error inserting module vertex (ArangoDB): {e}\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef process_children(self, parent_data: dict[str, Any], parent_key: str) -> None:\\\\n    children = parent_data.get(\"children\")\\\\n    if not isinstance(children, list):\\\\n        return\\\\n\\\\n    for child in parent_data.get(\"children\", []):\\\\n        child_key = child.get(\"id\")\\\\n        child_block_type = child.get(\"block_type\")\\\\n        if child_key:\\\\n            if child_key in self.processed_id_set:\\\\n                print(f\"Duplicate child key: {child_key}\")\\\\n                continue\\\\n            self.processed_id_set.add(child_key)\\\\n\\\\n        if child_block_type == \"CLASS\":\\\\n            self.create_vertex_for_class(child, parent_key)\\\\n\\\\n        elif child_block_type == \"FUNCTION\":\\\\n            self.create_vertex_for_function(child, parent_key)\\\\n\\\\n        elif child_block_type == \"STANDALONE_BLOCK\":\\\\n            self.create_vertex_for_standalone_block(child, parent_key)\\\\n\\\\n        if child_key and \"children\" in child:\\\\n            self.count += 1\\\\n            self.process_children(child, child_key)\\\\n\\\\n    # print(f\"Total children: {self.count}\")\\\\n    # print(f\"Total unique children: {len(self.processed_id_set)}\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef create_vertex(\\\\n    self, data: dict[str, Any], parent_key: str, vertex_type: str\\\\n) -> None:\\\\n    key: str | None = data.get(\"id\")\\\\n    if \"_key\" not in data and key:\\\\n        data[\"_key\"] = key\\\\n    data[\"parent_id\"] = parent_key\\\\n\\\\n    # print(f\"Creating {vertex_type} vertex with attributes: {data[\\\\\\'_key\\\\\\']}\")\\\\n    try:\\\\n        vertex_type_str: str = (\\\\n            f\"{vertex_type}s\" if not vertex_type == \"class\" else f\"{vertex_type}es\"\\\\n        )\\\\n        self.db_manager.ensure_collection(f\"{vertex_type_str}\")\\\\n        self.db_manager.db.collection(f\"{vertex_type_str}\").insert(data)\\\\n        # print(f\"{vertex_type.capitalize()} vertex created for {key}\")\\\\n\\\\n        if key:\\\\n            parent_type: str = self.get_block_type_from_id(parent_key)\\\\n            self.create_edge(key, parent_key, vertex_type, parent_type)\\\\n    except Exception as e:\\\\n        print(f\"Error inserting {vertex_type} vertex (ArangoDB): {e}\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef create_vertex_for_class(\\\\n    self, class_data: dict[str, Any], parent_key: str\\\\n) -> None:\\\\n    self.create_vertex(class_data, parent_key, \"class\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef create_vertex_for_function(\\\\n    self, function_data: dict[str, Any], parent_key: str\\\\n) -> None:\\\\n    self.create_vertex(function_data, parent_key, \"function\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef create_vertex_for_standalone_block(\\\\n    self, standalone_block_data: dict[str, Any], parent_key: str\\\\n) -> None:\\\\n    self.create_vertex(standalone_block_data, parent_key, \"standalone_block\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef create_edge(\\\\n    self, from_key: str, to_key: str, source_type: str, target_type: str\\\\n) -> None:\\\\n    source_string: str = (\\\\n        f\"{source_type}s/{from_key}\"\\\\n        if not source_type == \"class\"\\\\n        else f\"{source_type}es/{from_key}\"\\\\n    )\\\\n    target_string: str = (\\\\n        f\"{target_type}s/{to_key}\"\\\\n        if not target_type == \"class\"\\\\n        else f\"{target_type}es/{to_key}\"\\\\n    )\\\\n    edge_data: dict[str, str] = {\\\\n        \"_from\": f\"{source_string}\",\\\\n        \"_to\": f\"{target_string}\",\\\\n        \"source_type\": source_type,\\\\n        \"target_type\": target_type,\\\\n    }\\\\n    try:\\\\n        self.db_manager.ensure_edge_collection(\"code_edges\")\\\\n        self.db_manager.db.collection(\"code_edges\").insert(edge_data)\\\\n        # print(f\"Edge created between {from_key} and {to_key}\")\\\\n    except Exception as e:\\\\n        print(f\"Error creating edge (ArangoDB): {e}\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef get_block_type_from_id(self, block_id) -> str:\\\\n    block_id_parts: list[str] = block_id.split(\"__*__\")\\\\n\\\\n    block_type_part: str = block_id_parts[-1]\\\\n    if block_type_part.startswith(\"MODULE\"):\\\\n        return \"module\"\\\\n    elif block_type_part.startswith(\"CLASS\"):\\\\n        return \"class\"\\\\n    elif block_type_part.startswith(\"FUNCTION\"):\\\\n        return \"function\"\\\\n    elif block_type_part.startswith(\"STANDALONE_BLOCK\"):\\\\n        return \"standalone_block\"\\\\n    else:\\\\n        return \"unknown\"\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef process_imports_and_dependencies(self):\\\\n    # Process each vertex in the database\\\\n    for vertex_collection in [\\\\n        \"modules\",\\\\n        \"classes\",\\\\n        \"functions\",\\\\n        \"standalone_blocks\",\\\\n    ]:\\\\n        cursor: Result[Cursor] = self.db_manager.db.collection(\\\\n            vertex_collection\\\\n        ).all()\\\\n        if isinstance(cursor, Cursor):\\\\n            for vertex in cursor:\\\\n                vertex_key = vertex[\"_key\"]\\\\n                if vertex_collection == \"modules\":\\\\n                    self.create_edges_for_imports(\\\\n                        vertex_key, vertex.get(\"imports\", [])\\\\n                    )\\\\n                else:\\\\n                    self.create_edges_for_dependencies(\\\\n                        vertex_key, vertex.get(\"dependencies\", [])\\\\n                    )\\\\n        else:\\\\n            print(\\\\n                f\"Error getting cursor for vertex collection: {vertex_collection}\"\\\\n            )\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef create_edges_for_imports(\\\\n    self, module_key: str, imports: list[dict[str, Any]]\\\\n) -> None:\\\\n    if not imports:\\\\n        print(f\"No imports found for module {module_key}\")\\\\n        return\\\\n\\\\n    print(f\"Processing imports for module {module_key}\")\\\\n\\\\n    for imp in imports:\\\\n        import_names = imp.get(\"import_names\", [])\\\\n        if not import_names:\\\\n            print(f\"No import names found in import {imp}\")\\\\n            continue\\\\n\\\\n        for imp_name in import_names:\\\\n            local_block_id = imp_name.get(\"local_block_id\")\\\\n\\\\n            if local_block_id:\\\\n                print(f\"\\\\\\\\nLocal block id: {local_block_id}\")\\\\n                target_type = self.get_block_type_from_id(local_block_id)\\\\n                try:\\\\n                    self.create_edge(\\\\n                        module_key, local_block_id, \"module\", target_type\\\\n                    )\\\\n                    print(\\\\n                        f\"Created edge for import {module_key} to {local_block_id}\"\\\\n                    )\\\\n                except Exception as e:\\\\n                    print(\\\\n                        f\"Error creating edge for import {module_key} to {local_block_id}: {e}\"\\\\n                    )\\\\n            else:\\\\n                print(f\"Skipped import {imp_name} in module {module_key}\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef create_edges_for_dependencies(\\\\n    self, block_key: str, dependencies: list[dict[str, Any]]\\\\n) -> None:\\\\n    if not dependencies:\\\\n        return\\\\n\\\\n    for dependency in dependencies:\\\\n        code_block_id = dependency.get(\"code_block_id\")\\\\n        if code_block_id:\\\\n            source_type = self.get_block_type_from_id(block_key)\\\\n            target_type = self.get_block_type_from_id(code_block_id)\\\\n            try:\\\\n                self.create_edge(block_key, code_block_id, source_type, target_type)\\\\n            except Exception as e:\\\\n                print(\\\\n                    f\"Error creating edge for dependency {block_key} to {code_block_id}: {e}\"\\\\n                )\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport json\\nimport os\\nfrom arango.result import Result\\nfrom arango.typings import Json\\nfrom arango.cursor import Cursor\\nfrom typing import Any\\nfrom arango_db.arango_db_manager import ArangoDBManager\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-__init__",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 15,
                    "end_line_num": 18,
                    "code_content": "def __init__(self, db_manager: ArangoDBManager) -> None:\n    self.db_manager: ArangoDBManager = db_manager\n    self.processed_id_set = set()\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\ndef __init__(self, db_manager: ArangoDBManager) -> None:\\n    self.db_manager: ArangoDBManager = db_manager\\n    self.processed_id_set = set()\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "process_json_directory",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-process_json_directory",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 18,
                    "end_line_num": 30,
                    "code_content": "\ndef process_json_directory(self, directory_path: str) -> None:\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".json\"):\n            file_path: str = os.path.join(directory_path, filename)\n            # print(f\"Processing file: {file_path}\")\n            try:\n                with open(file_path, \"r\") as file:\n                    json_data = json.load(file)\n                    self.process_json_data(json_data)\n            except Exception as e:\n                print(f\"Error processing file {file_path}: {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef process_json_directory(self, directory_path: str) -> None:\\n    for filename in os.listdir(directory_path):\\n        if filename.endswith(\".json\"):\\n            file_path: str = os.path.join(directory_path, filename)\\n            # print(f\"Processing file: {file_path}\")\\n            try:\\n                with open(file_path, \"r\") as file:\\n                    json_data = json.load(file)\\n                    self.process_json_data(json_data)\\n            except Exception as e:\\n                print(f\"Error processing file {file_path}: {e}\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "process_json_data",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-process_json_data",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 30,
                    "end_line_num": 37,
                    "code_content": "\ndef process_json_data(self, json_data: dict[str, Any]) -> None:\n    if json_data.get(\"block_type\") == \"MODULE\":\n        module_id: str | None = json_data.get(\"id\")\n        self.create_vertex_for_module(json_data)\n        if module_id:\n            self.process_children(json_data, module_id)\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef process_json_data(self, json_data: dict[str, Any]) -> None:\\n    if json_data.get(\"block_type\") == \"MODULE\":\\n        module_id: str | None = json_data.get(\"id\")\\n        self.create_vertex_for_module(json_data)\\n        if module_id:\\n            self.process_children(json_data, module_id)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "create_vertex_for_module",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-create_vertex_for_module",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 37,
                    "end_line_num": 50,
                    "code_content": "\ndef create_vertex_for_module(self, module_data: dict[str, Any]) -> None:\n    if \"_key\" not in module_data and \"id\" in module_data:\n        module_data[\"_key\"] = module_data[\"id\"]\n\n    # print(f\"Creating module vertex with attributes: {module_data['_key']}\")\n    try:\n        response: Result[bool | Json] = self.db_manager.db.collection(\n            \"modules\"\n        ).insert(module_data)\n        # print(f\"Module vertex created, response: {response}\")\n    except Exception as e:\n        print(f\"Error inserting module vertex (ArangoDB): {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef create_vertex_for_module(self, module_data: dict[str, Any]) -> None:\\n    if \"_key\" not in module_data and \"id\" in module_data:\\n        module_data[\"_key\"] = module_data[\"id\"]\\n\\n    # print(f\"Creating module vertex with attributes: {module_data[\\'_key\\']}\")\\n    try:\\n        response: Result[bool | Json] = self.db_manager.db.collection(\\n            \"modules\"\\n        ).insert(module_data)\\n        # print(f\"Module vertex created, response: {response}\")\\n    except Exception as e:\\n        print(f\"Error inserting module vertex (ArangoDB): {e}\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "process_children",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-process_children",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 52,
                    "end_line_num": 82,
                    "code_content": "\ndef process_children(self, parent_data: dict[str, Any], parent_key: str) -> None:\n    children = parent_data.get(\"children\")\n    if not isinstance(children, list):\n        return\n\n    for child in parent_data.get(\"children\", []):\n        child_key = child.get(\"id\")\n        child_block_type = child.get(\"block_type\")\n        if child_key:\n            if child_key in self.processed_id_set:\n                print(f\"Duplicate child key: {child_key}\")\n                continue\n            self.processed_id_set.add(child_key)\n\n        if child_block_type == \"CLASS\":\n            self.create_vertex_for_class(child, parent_key)\n\n        elif child_block_type == \"FUNCTION\":\n            self.create_vertex_for_function(child, parent_key)\n\n        elif child_block_type == \"STANDALONE_BLOCK\":\n            self.create_vertex_for_standalone_block(child, parent_key)\n\n        if child_key and \"children\" in child:\n            self.count += 1\n            self.process_children(child, child_key)\n\n    # print(f\"Total children: {self.count}\")\n    # print(f\"Total unique children: {len(self.processed_id_set)}\")\n",
                    "important_comments": [
                        {
                            "content": "# print(f\"Total unique children: {len(self.processed_id_set)}\")",
                            "comment_types": [
                                "Q"
                            ]
                        }
                    ],
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef process_children(self, parent_data: dict[str, Any], parent_key: str) -> None:\\n    children = parent_data.get(\"children\")\\n    if not isinstance(children, list):\\n        return\\n\\n    for child in parent_data.get(\"children\", []):\\n        child_key = child.get(\"id\")\\n        child_block_type = child.get(\"block_type\")\\n        if child_key:\\n            if child_key in self.processed_id_set:\\n                print(f\"Duplicate child key: {child_key}\")\\n                continue\\n            self.processed_id_set.add(child_key)\\n\\n        if child_block_type == \"CLASS\":\\n            self.create_vertex_for_class(child, parent_key)\\n\\n        elif child_block_type == \"FUNCTION\":\\n            self.create_vertex_for_function(child, parent_key)\\n\\n        elif child_block_type == \"STANDALONE_BLOCK\":\\n            self.create_vertex_for_standalone_block(child, parent_key)\\n\\n        if child_key and \"children\" in child:\\n            self.count += 1\\n            self.process_children(child, child_key)\\n\\n    # print(f\"Total children: {self.count}\")\\n    # print(f\"Total unique children: {len(self.processed_id_set)}\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "create_vertex",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-create_vertex",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 82,
                    "end_line_num": 105,
                    "code_content": "\ndef create_vertex(\n    self, data: dict[str, Any], parent_key: str, vertex_type: str\n) -> None:\n    key: str | None = data.get(\"id\")\n    if \"_key\" not in data and key:\n        data[\"_key\"] = key\n    data[\"parent_id\"] = parent_key\n\n    # print(f\"Creating {vertex_type} vertex with attributes: {data['_key']}\")\n    try:\n        vertex_type_str: str = (\n            f\"{vertex_type}s\" if not vertex_type == \"class\" else f\"{vertex_type}es\"\n        )\n        self.db_manager.ensure_collection(f\"{vertex_type_str}\")\n        self.db_manager.db.collection(f\"{vertex_type_str}\").insert(data)\n        # print(f\"{vertex_type.capitalize()} vertex created for {key}\")\n\n        if key:\n            parent_type: str = self.get_block_type_from_id(parent_key)\n            self.create_edge(key, parent_key, vertex_type, parent_type)\n    except Exception as e:\n        print(f\"Error inserting {vertex_type} vertex (ArangoDB): {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef create_vertex(\\n    self, data: dict[str, Any], parent_key: str, vertex_type: str\\n) -> None:\\n    key: str | None = data.get(\"id\")\\n    if \"_key\" not in data and key:\\n        data[\"_key\"] = key\\n    data[\"parent_id\"] = parent_key\\n\\n    # print(f\"Creating {vertex_type} vertex with attributes: {data[\\'_key\\']}\")\\n    try:\\n        vertex_type_str: str = (\\n            f\"{vertex_type}s\" if not vertex_type == \"class\" else f\"{vertex_type}es\"\\n        )\\n        self.db_manager.ensure_collection(f\"{vertex_type_str}\")\\n        self.db_manager.db.collection(f\"{vertex_type_str}\").insert(data)\\n        # print(f\"{vertex_type.capitalize()} vertex created for {key}\")\\n\\n        if key:\\n            parent_type: str = self.get_block_type_from_id(parent_key)\\n            self.create_edge(key, parent_key, vertex_type, parent_type)\\n    except Exception as e:\\n        print(f\"Error inserting {vertex_type} vertex (ArangoDB): {e}\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "create_vertex_for_class",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-create_vertex_for_class",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 105,
                    "end_line_num": 110,
                    "code_content": "\ndef create_vertex_for_class(\n    self, class_data: dict[str, Any], parent_key: str\n) -> None:\n    self.create_vertex(class_data, parent_key, \"class\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef create_vertex_for_class(\\n    self, class_data: dict[str, Any], parent_key: str\\n) -> None:\\n    self.create_vertex(class_data, parent_key, \"class\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "create_vertex_for_function",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-create_vertex_for_function",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 110,
                    "end_line_num": 115,
                    "code_content": "\ndef create_vertex_for_function(\n    self, function_data: dict[str, Any], parent_key: str\n) -> None:\n    self.create_vertex(function_data, parent_key, \"function\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef create_vertex_for_function(\\n    self, function_data: dict[str, Any], parent_key: str\\n) -> None:\\n    self.create_vertex(function_data, parent_key, \"function\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "create_vertex_for_standalone_block",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-create_vertex_for_standalone_block",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 115,
                    "end_line_num": 120,
                    "code_content": "\ndef create_vertex_for_standalone_block(\n    self, standalone_block_data: dict[str, Any], parent_key: str\n) -> None:\n    self.create_vertex(standalone_block_data, parent_key, \"standalone_block\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef create_vertex_for_standalone_block(\\n    self, standalone_block_data: dict[str, Any], parent_key: str\\n) -> None:\\n    self.create_vertex(standalone_block_data, parent_key, \"standalone_block\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "create_edge",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-create_edge",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 120,
                    "end_line_num": 146,
                    "code_content": "\ndef create_edge(\n    self, from_key: str, to_key: str, source_type: str, target_type: str\n) -> None:\n    source_string: str = (\n        f\"{source_type}s/{from_key}\"\n        if not source_type == \"class\"\n        else f\"{source_type}es/{from_key}\"\n    )\n    target_string: str = (\n        f\"{target_type}s/{to_key}\"\n        if not target_type == \"class\"\n        else f\"{target_type}es/{to_key}\"\n    )\n    edge_data: dict[str, str] = {\n        \"_from\": f\"{source_string}\",\n        \"_to\": f\"{target_string}\",\n        \"source_type\": source_type,\n        \"target_type\": target_type,\n    }\n    try:\n        self.db_manager.ensure_edge_collection(\"code_edges\")\n        self.db_manager.db.collection(\"code_edges\").insert(edge_data)\n        # print(f\"Edge created between {from_key} and {to_key}\")\n    except Exception as e:\n        print(f\"Error creating edge (ArangoDB): {e}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef create_edge(\\n    self, from_key: str, to_key: str, source_type: str, target_type: str\\n) -> None:\\n    source_string: str = (\\n        f\"{source_type}s/{from_key}\"\\n        if not source_type == \"class\"\\n        else f\"{source_type}es/{from_key}\"\\n    )\\n    target_string: str = (\\n        f\"{target_type}s/{to_key}\"\\n        if not target_type == \"class\"\\n        else f\"{target_type}es/{to_key}\"\\n    )\\n    edge_data: dict[str, str] = {\\n        \"_from\": f\"{source_string}\",\\n        \"_to\": f\"{target_string}\",\\n        \"source_type\": source_type,\\n        \"target_type\": target_type,\\n    }\\n    try:\\n        self.db_manager.ensure_edge_collection(\"code_edges\")\\n        self.db_manager.db.collection(\"code_edges\").insert(edge_data)\\n        # print(f\"Edge created between {from_key} and {to_key}\")\\n    except Exception as e:\\n        print(f\"Error creating edge (ArangoDB): {e}\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "get_block_type_from_id",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-get_block_type_from_id",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 146,
                    "end_line_num": 161,
                    "code_content": "\ndef get_block_type_from_id(self, block_id) -> str:\n    block_id_parts: list[str] = block_id.split(\"__*__\")\n\n    block_type_part: str = block_id_parts[-1]\n    if block_type_part.startswith(\"MODULE\"):\n        return \"module\"\n    elif block_type_part.startswith(\"CLASS\"):\n        return \"class\"\n    elif block_type_part.startswith(\"FUNCTION\"):\n        return \"function\"\n    elif block_type_part.startswith(\"STANDALONE_BLOCK\"):\n        return \"standalone_block\"\n    else:\n        return \"unknown\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef get_block_type_from_id(self, block_id) -> str:\\n    block_id_parts: list[str] = block_id.split(\"__*__\")\\n\\n    block_type_part: str = block_id_parts[-1]\\n    if block_type_part.startswith(\"MODULE\"):\\n        return \"module\"\\n    elif block_type_part.startswith(\"CLASS\"):\\n        return \"class\"\\n    elif block_type_part.startswith(\"FUNCTION\"):\\n        return \"function\"\\n    elif block_type_part.startswith(\"STANDALONE_BLOCK\"):\\n        return \"standalone_block\"\\n    else:\\n        return \"unknown\"\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "process_imports_and_dependencies",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "Function has no return annotation",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-process_imports_and_dependencies",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 161,
                    "end_line_num": 188,
                    "code_content": "\ndef process_imports_and_dependencies(self):\n    # Process each vertex in the database\n    for vertex_collection in [\n        \"modules\",\n        \"classes\",\n        \"functions\",\n        \"standalone_blocks\",\n    ]:\n        cursor: Result[Cursor] = self.db_manager.db.collection(\n            vertex_collection\n        ).all()\n        if isinstance(cursor, Cursor):\n            for vertex in cursor:\n                vertex_key = vertex[\"_key\"]\n                if vertex_collection == \"modules\":\n                    self.create_edges_for_imports(\n                        vertex_key, vertex.get(\"imports\", [])\n                    )\n                else:\n                    self.create_edges_for_dependencies(\n                        vertex_key, vertex.get(\"dependencies\", [])\n                    )\n        else:\n            print(\n                f\"Error getting cursor for vertex collection: {vertex_collection}\"\n            )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef process_imports_and_dependencies(self):\\n    # Process each vertex in the database\\n    for vertex_collection in [\\n        \"modules\",\\n        \"classes\",\\n        \"functions\",\\n        \"standalone_blocks\",\\n    ]:\\n        cursor: Result[Cursor] = self.db_manager.db.collection(\\n            vertex_collection\\n        ).all()\\n        if isinstance(cursor, Cursor):\\n            for vertex in cursor:\\n                vertex_key = vertex[\"_key\"]\\n                if vertex_collection == \"modules\":\\n                    self.create_edges_for_imports(\\n                        vertex_key, vertex.get(\"imports\", [])\\n                    )\\n                else:\\n                    self.create_edges_for_dependencies(\\n                        vertex_key, vertex.get(\"dependencies\", [])\\n                    )\\n        else:\\n            print(\\n                f\"Error getting cursor for vertex collection: {vertex_collection}\"\\n            )\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "create_edges_for_imports",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-create_edges_for_imports",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 188,
                    "end_line_num": 223,
                    "code_content": "\ndef create_edges_for_imports(\n    self, module_key: str, imports: list[dict[str, Any]]\n) -> None:\n    if not imports:\n        print(f\"No imports found for module {module_key}\")\n        return\n\n    print(f\"Processing imports for module {module_key}\")\n\n    for imp in imports:\n        import_names = imp.get(\"import_names\", [])\n        if not import_names:\n            print(f\"No import names found in import {imp}\")\n            continue\n\n        for imp_name in import_names:\n            local_block_id = imp_name.get(\"local_block_id\")\n\n            if local_block_id:\n                print(f\"\\nLocal block id: {local_block_id}\")\n                target_type = self.get_block_type_from_id(local_block_id)\n                try:\n                    self.create_edge(\n                        module_key, local_block_id, \"module\", target_type\n                    )\n                    print(\n                        f\"Created edge for import {module_key} to {local_block_id}\"\n                    )\n                except Exception as e:\n                    print(\n                        f\"Error creating edge for import {module_key} to {local_block_id}: {e}\"\n                    )\n            else:\n                print(f\"Skipped import {imp_name} in module {module_key}\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef create_edges_for_imports(\\n    self, module_key: str, imports: list[dict[str, Any]]\\n) -> None:\\n    if not imports:\\n        print(f\"No imports found for module {module_key}\")\\n        return\\n\\n    print(f\"Processing imports for module {module_key}\")\\n\\n    for imp in imports:\\n        import_names = imp.get(\"import_names\", [])\\n        if not import_names:\\n            print(f\"No import names found in import {imp}\")\\n            continue\\n\\n        for imp_name in import_names:\\n            local_block_id = imp_name.get(\"local_block_id\")\\n\\n            if local_block_id:\\n                print(f\"\\\\nLocal block id: {local_block_id}\")\\n                target_type = self.get_block_type_from_id(local_block_id)\\n                try:\\n                    self.create_edge(\\n                        module_key, local_block_id, \"module\", target_type\\n                    )\\n                    print(\\n                        f\"Created edge for import {module_key} to {local_block_id}\"\\n                    )\\n                except Exception as e:\\n                    print(\\n                        f\"Error creating edge for import {module_key} to {local_block_id}: {e}\"\\n                    )\\n            else:\\n                print(f\"Skipped import {imp_name} in module {module_key}\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "create_edges_for_dependencies",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder__*__FUNCTION-create_edges_for_dependencies",
                    "parent_id": "postcode:arango_db:arango_db_builder.py__*__MODULE__*__CLASS-GraphDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 223,
                    "end_line_num": 241,
                    "code_content": "\ndef create_edges_for_dependencies(\n    self, block_key: str, dependencies: list[dict[str, Any]]\n) -> None:\n    if not dependencies:\n        return\n\n    for dependency in dependencies:\n        code_block_id = dependency.get(\"code_block_id\")\n        if code_block_id:\n            source_type = self.get_block_type_from_id(block_key)\n            target_type = self.get_block_type_from_id(code_block_id)\n            try:\n                self.create_edge(block_key, code_block_id, source_type, target_type)\n            except Exception as e:\n                print(\n                    f\"Error creating edge for dependency {block_key} to {code_block_id}: {e}\"\n                )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef create_edges_for_dependencies(\\n    self, block_key: str, dependencies: list[dict[str, Any]]\\n) -> None:\\n    if not dependencies:\\n        return\\n\\n    for dependency in dependencies:\\n        code_block_id = dependency.get(\"code_block_id\")\\n        if code_block_id:\\n            source_type = self.get_block_type_from_id(block_key)\\n            target_type = self.get_block_type_from_id(code_block_id)\\n            try:\\n                self.create_edge(block_key, code_block_id, source_type, target_type)\\n            except Exception as e:\\n                print(\\n                    f\"Error creating edge for dependency {block_key} to {code_block_id}: {e}\"\\n                )\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        }
    ]
}