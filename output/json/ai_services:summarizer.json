{
    "file_path": "ai_services/summarizer.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "OpenAI",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChatCompletionSystemMessageParam",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.chat.chat_completion_system_message_param",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChatCompletionUserMessageParam",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.chat.chat_completion_user_message_param",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChatCompletionMessageParam",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.chat.chat_completion_message_param",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChatCompletion",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai.types.chat.chat_completion",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Name(\n    value='ai_services',\n    lpar=[],\n    rpar=[],\n)",
                    "as_name": "configs",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Name(\n    value='ai_services',\n    lpar=[],\n    rpar=[],\n)",
                    "as_name": "context",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "code_example",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "ai_services.temp",
            "import_module_type": "LOCAL",
            "local_module_id": "ai_services:temp.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "PromptCreator",
                    "as_name": null,
                    "local_block_id": "ai_services:prompt_creator.py__*__MODULE__*__CLASS-PromptCreator"
                }
            ],
            "imported_from": "ai_services.prompt_creator",
            "import_module_type": "LOCAL",
            "local_module_id": "ai_services:prompt_creator.py__*__MODULE"
        }
    ],
    "id": "ai_services:summarizer.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 257,
    "code_content": "import logging\n\nfrom openai import OpenAI\nfrom openai.types.chat.chat_completion_system_message_param import (\n    ChatCompletionSystemMessageParam,\n)\nfrom openai.types.chat.chat_completion_user_message_param import (\n    ChatCompletionUserMessageParam,\n)\nfrom openai.types.chat.chat_completion_message_param import ChatCompletionMessageParam\nfrom openai.types.chat.chat_completion import ChatCompletion\n\nfrom ai_services.temp import code_example\nfrom ai_services.prompt_creator import PromptCreator\nimport ai_services.summarizer_configs as configs\nimport ai_services.summarizer_context as context\n\n\nclass OpenAISummarizer:\n    \"\"\"\n    A class for summarizing code snippets using the OpenAI API.\n\n    Args:\n        - client (OpenAI): The OpenAI client used for making API requests.\n\n    Attributes:\n        - client (OpenAI): The OpenAI client used for making API requests.\n        - prompt_list (list[str]): A list of summary prompts.\n        - default_prompt (str): The default summary prompt.\n\n    Methods:\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\n            Summarizes the provided code snippet using the OpenAI API.\n\n    Examples:\n        >>> client = OpenAI()\n        >>> summarizer = Summarizer(client=client)\n        >>> code_example = \"print('Hello, world')\"\n        >>> summary = summarizer.summarize_code(code_example)\n        >>> print(summary)\n    \"\"\"\n\n    def __init__(\n        self,\n        client: OpenAI,\n        # *, summary_prompt_list: list[str] = summary_prompt_list\n    ) -> None:\n        self.client: OpenAI = client\n        # self.prompt_list: list[str] = summary_prompt_list\n        # self.default_prompt: str = self.prompt_list[0]\n\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\n        \"\"\"Creates a system message for chat completion using OpenAi's ChatCompletionSystemMessageParam class.\"\"\"\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\n\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\n        \"\"\"Creates a user message for chat completion using OpenAi's ChatCompletionUserMessageParam class.\"\"\"\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\n\n    def _create_messages_list(\n        self,\n        system_message: str,\n        user_message: str,\n    ) -> list[ChatCompletionMessageParam]:\n        \"\"\"\n        Creates a list of messages for chat completion, including both system and user messages.\n\n        Args:\n            system_message (str): The system message content.\n            user_message (str): The user message content.\n\n        Returns:\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI's\n                ChatCompletionMessageParam classes.\n        \"\"\"\n\n        return [\n            self._create_system_message(system_message),\n            self._create_user_message(user_message),\n        ]\n\n    def _create_prompt(\n        self,\n        code: str,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        import_details: str | None,\n    ) -> str:\n        prompt_creator: PromptCreator = PromptCreator()\n        prompt: str | None = prompt_creator.create_prompt(\n            code,\n            children_summaries,\n            dependency_summaries,\n            import_details,\n        )\n\n        if prompt:\n            return prompt\n        else:\n            raise Exception(\"Prompt creation failed.\")\n\n    def _get_summary(\n        self,\n        messages: list[ChatCompletionMessageParam],\n        *,\n        configs: configs.SummaryCompletionConfigs,\n    ) -> context.OpenAIReturnContext | str:\n        \"\"\"\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\n        Args:\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\n        Returns:\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\n        \"\"\"\n\n        try:\n            response: ChatCompletion = self.client.chat.completions.create(\n                messages=messages,\n                model=configs.model,\n                max_tokens=configs.max_tokens,\n                temperature=configs.temperature,\n            )\n            prompt_tokens: int = 0\n            completion_tokens: int = 0\n            summary: str | None = response.choices[0].message.content\n            if response.usage:\n                prompt_tokens = response.usage.prompt_tokens\n                completion_tokens = response.usage.completion_tokens\n\n            return context.OpenAIReturnContext(\n                prompt_tokens=prompt_tokens,\n                completion_tokens=completion_tokens,\n                summary=summary,\n            )\n\n        except Exception as e:\n            logging.error(e)\n            return \"Summarization failed.\"\n\n    def summarize_code(\n        self,\n        code: str,\n        *,\n        model_id: str,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        import_details: str | None,\n        configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\n    ) -> context.OpenAIReturnContext | str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n        logging.info(f\"Summarizing code for model: {model_id}\")\n        prompt: str = self._create_prompt(\n            code, children_summaries, dependency_summaries, import_details\n        )\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n            system_message=configs.system_message, user_message=prompt\n        )\n\n        final_summary: str | None = None\n        if summary_context := self._get_summary(messages, configs=configs):\n            # print(\"Full Summary:\\n\", summary)\n            if isinstance(summary_context, context.OpenAIReturnContext):\n                if summary_context.summary:\n                    final_summary = summary_context.summary.split(\"FINAL SUMMARY:\")[-1]\n                    logging.info(f\"Full Summary:\\n\")\n                    print(final_summary)\n                    print(f\"Prompt tokens: {summary_context.prompt_tokens}\")\n                    print(f\"Completion tokens: {summary_context.completion_tokens}\")\n\n        return summary_context if summary_context else \"Summary not found.\"\n\n    def test_summarize_code(\n        self,\n        code: str,\n        *,\n        model_id: str,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        import_details: str | None,\n        configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\n    ) -> context.OpenAIReturnContext | str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n        logging.info(f\"Summarizing code for model: {model_id}\")\n        prompt: str = self._create_prompt(\n            code, children_summaries, dependency_summaries, import_details\n        )\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n            system_message=configs.system_message, user_message=prompt\n        )\n\n        summary: str = f\"\"\"Summary:\\n\n        {messages}\\n \n        \"\"\"\n        summary_context = context.OpenAIReturnContext(\n            summary=summary,\n            prompt_tokens=1,\n            completion_tokens=1,\n        )\n        logging.info(f\"Full Summary:\\n\")\n        print(summary)\n\n        return summary_context\n\n\nif __name__ == \"__main__\":\n    client = OpenAI()\n    summarizer = OpenAISummarizer(client=client)\n    children_summaries = \"\"\n    dependency_summaries = \"\"\n    summary = summarizer.summarize_code(\n        code_example,\n        model_id=\"test\",\n        children_summaries=children_summaries,\n        dependency_summaries=dependency_summaries,\n        import_details=None,\n    )\n    print(summary)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nimport logging\\n\\nfrom openai import OpenAI\\nfrom openai.types.chat.chat_completion_system_message_param import (\\n    ChatCompletionSystemMessageParam,\\n)\\nfrom openai.types.chat.chat_completion_user_message_param import (\\n    ChatCompletionUserMessageParam,\\n)\\nfrom openai.types.chat.chat_completion_message_param import ChatCompletionMessageParam\\nfrom openai.types.chat.chat_completion import ChatCompletion\\n\\nfrom ai_services.temp import code_example\\nfrom ai_services.prompt_creator import PromptCreator\\nimport ai_services.summarizer_configs as configs\\nimport ai_services.summarizer_context as context\\n\\n\\nclass OpenAISummarizer:\\n    \"\"\"\\n    A class for summarizing code snippets using the OpenAI API.\\n\\n    Args:\\n        - client (OpenAI): The OpenAI client used for making API requests.\\n\\n    Attributes:\\n        - client (OpenAI): The OpenAI client used for making API requests.\\n        - prompt_list (list[str]): A list of summary prompts.\\n        - default_prompt (str): The default summary prompt.\\n\\n    Methods:\\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\\n            Summarizes the provided code snippet using the OpenAI API.\\n\\n    Examples:\\n        >>> client = OpenAI()\\n        >>> summarizer = Summarizer(client=client)\\n        >>> code_example = \"print(\\'Hello, world\\')\"\\n        >>> summary = summarizer.summarize_code(code_example)\\n        >>> print(summary)\\n    \"\"\"\\n\\n    def __init__(\\n        self,\\n        client: OpenAI,\\n        # *, summary_prompt_list: list[str] = summary_prompt_list\\n    ) -> None:\\n        self.client: OpenAI = client\\n        # self.prompt_list: list[str] = summary_prompt_list\\n        # self.default_prompt: str = self.prompt_list[0]\\n\\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\n        \"\"\"Creates a system message for chat completion using OpenAi\\'s ChatCompletionSystemMessageParam class.\"\"\"\\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\n\\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\n        \"\"\"Creates a user message for chat completion using OpenAi\\'s ChatCompletionUserMessageParam class.\"\"\"\\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\\n\\n    def _create_messages_list(\\n        self,\\n        system_message: str,\\n        user_message: str,\\n    ) -> list[ChatCompletionMessageParam]:\\n        \"\"\"\\n        Creates a list of messages for chat completion, including both system and user messages.\\n\\n        Args:\\n            system_message (str): The system message content.\\n            user_message (str): The user message content.\\n\\n        Returns:\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\'s\\n                ChatCompletionMessageParam classes.\\n        \"\"\"\\n\\n        return [\\n            self._create_system_message(system_message),\\n            self._create_user_message(user_message),\\n        ]\\n\\n    def _create_prompt(\\n        self,\\n        code: str,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        import_details: str | None,\\n    ) -> str:\\n        prompt_creator: PromptCreator = PromptCreator()\\n        prompt: str | None = prompt_creator.create_prompt(\\n            code,\\n            children_summaries,\\n            dependency_summaries,\\n            import_details,\\n        )\\n\\n        if prompt:\\n            return prompt\\n        else:\\n            raise Exception(\"Prompt creation failed.\")\\n\\n    def _get_summary(\\n        self,\\n        messages: list[ChatCompletionMessageParam],\\n        *,\\n        configs: configs.SummaryCompletionConfigs,\\n    ) -> context.OpenAIReturnContext | str:\\n        \"\"\"\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\n\\n        Args:\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\n\\n        Returns:\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\n        \"\"\"\\n\\n        try:\\n            response: ChatCompletion = self.client.chat.completions.create(\\n                messages=messages,\\n                model=configs.model,\\n                max_tokens=configs.max_tokens,\\n                temperature=configs.temperature,\\n            )\\n            prompt_tokens: int = 0\\n            completion_tokens: int = 0\\n            summary: str | None = response.choices[0].message.content\\n            if response.usage:\\n                prompt_tokens = response.usage.prompt_tokens\\n                completion_tokens = response.usage.completion_tokens\\n\\n            return context.OpenAIReturnContext(\\n                prompt_tokens=prompt_tokens,\\n                completion_tokens=completion_tokens,\\n                summary=summary,\\n            )\\n\\n        except Exception as e:\\n            logging.error(e)\\n            return \"Summarization failed.\"\\n\\n    def summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        model_id: str,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        import_details: str | None,\\n        configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\\n    ) -> context.OpenAIReturnContext | str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n        logging.info(f\"Summarizing code for model: {model_id}\")\\n        prompt: str = self._create_prompt(\\n            code, children_summaries, dependency_summaries, import_details\\n        )\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n            system_message=configs.system_message, user_message=prompt\\n        )\\n\\n        final_summary: str | None = None\\n        if summary_context := self._get_summary(messages, configs=configs):\\n            # print(\"Full Summary:\\\\n\", summary)\\n            if isinstance(summary_context, context.OpenAIReturnContext):\\n                if summary_context.summary:\\n                    final_summary = summary_context.summary.split(\"FINAL SUMMARY:\")[-1]\\n                    logging.info(f\"Full Summary:\\\\n\")\\n                    print(final_summary)\\n                    print(f\"Prompt tokens: {summary_context.prompt_tokens}\")\\n                    print(f\"Completion tokens: {summary_context.completion_tokens}\")\\n\\n        return summary_context if summary_context else \"Summary not found.\"\\n\\n    def test_summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        model_id: str,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        import_details: str | None,\\n        configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\\n    ) -> context.OpenAIReturnContext | str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n        logging.info(f\"Summarizing code for model: {model_id}\")\\n        prompt: str = self._create_prompt(\\n            code, children_summaries, dependency_summaries, import_details\\n        )\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n            system_message=configs.system_message, user_message=prompt\\n        )\\n\\n        summary: str = f\"\"\"Summary:\\\\n\\n        {messages}\\\\n \\n        \"\"\"\\n        summary_context = context.OpenAIReturnContext(\\n            summary=summary,\\n            prompt_tokens=1,\\n            completion_tokens=1,\\n        )\\n        logging.info(f\"Full Summary:\\\\n\")\\n        print(summary)\\n\\n        return summary_context\\n\\n\\nif __name__ == \"__main__\":\\n    client = OpenAI()\\n    summarizer = OpenAISummarizer(client=client)\\n    children_summaries = \"\"\\n    dependency_summaries = \"\"\\n    summary = summarizer.summarize_code(\\n        code_example,\\n        model_id=\"test\",\\n        children_summaries=children_summaries,\\n        dependency_summaries=dependency_summaries,\\n        import_details=None,\\n    )\\n    print(summary)\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\nif __name__ == \"__main__\":\\\\n    client = OpenAI()\\\\n    summarizer = OpenAISummarizer(client=client)\\\\n    children_summaries = \"\"\\\\n    dependency_summaries = \"\"\\\\n    summary = summarizer.summarize_code(\\\\n        code_example,\\\\n        model_id=\"test\",\\\\n        children_summaries=children_summaries,\\\\n        dependency_summaries=dependency_summaries,\\\\n        import_details=None,\\\\n    )\\\\n    print(summary)\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom openai import OpenAI\\\\nfrom ai_services.temp import code_example\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass OpenAISummarizer:\\\\n    \"\"\"\\\\n    A class for summarizing code snippets using the OpenAI API.\\\\n\\\\n    Args:\\\\n        - client (OpenAI): The OpenAI client used for making API requests.\\\\n\\\\n    Attributes:\\\\n        - client (OpenAI): The OpenAI client used for making API requests.\\\\n        - prompt_list (list[str]): A list of summary prompts.\\\\n        - default_prompt (str): The default summary prompt.\\\\n\\\\n    Methods:\\\\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\\\\n            Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n    Examples:\\\\n        >>> client = OpenAI()\\\\n        >>> summarizer = Summarizer(client=client)\\\\n        >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n        >>> summary = summarizer.summarize_code(code_example)\\\\n        >>> print(summary)\\\\n    \"\"\"\\\\n\\\\n    def __init__(\\\\n        self,\\\\n        client: OpenAI,\\\\n        # *, summary_prompt_list: list[str] = summary_prompt_list\\\\n    ) -> None:\\\\n        self.client: OpenAI = client\\\\n        # self.prompt_list: list[str] = summary_prompt_list\\\\n        # self.default_prompt: str = self.prompt_list[0]\\\\n\\\\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\\\n        \"\"\"Creates a system message for chat completion using OpenAi\\\\\\'s ChatCompletionSystemMessageParam class.\"\"\"\\\\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\\\n\\\\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\\\n        \"\"\"Creates a user message for chat completion using OpenAi\\\\\\'s ChatCompletionUserMessageParam class.\"\"\"\\\\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\\\\n\\\\n    def _create_messages_list(\\\\n        self,\\\\n        system_message: str,\\\\n        user_message: str,\\\\n    ) -> list[ChatCompletionMessageParam]:\\\\n        \"\"\"\\\\n        Creates a list of messages for chat completion, including both system and user messages.\\\\n\\\\n        Args:\\\\n            system_message (str): The system message content.\\\\n            user_message (str): The user message content.\\\\n\\\\n        Returns:\\\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\\\\\'s\\\\n                ChatCompletionMessageParam classes.\\\\n        \"\"\"\\\\n\\\\n        return [\\\\n            self._create_system_message(system_message),\\\\n            self._create_user_message(user_message),\\\\n        ]\\\\n\\\\n    def _create_prompt(\\\\n        self,\\\\n        code: str,\\\\n        children_summaries: str | None,\\\\n        dependency_summaries: str | None,\\\\n        import_details: str | None,\\\\n    ) -> str:\\\\n        prompt_creator: PromptCreator = PromptCreator()\\\\n        prompt: str | None = prompt_creator.create_prompt(\\\\n            code,\\\\n            children_summaries,\\\\n            dependency_summaries,\\\\n            import_details,\\\\n        )\\\\n\\\\n        if prompt:\\\\n            return prompt\\\\n        else:\\\\n            raise Exception(\"Prompt creation failed.\")\\\\n\\\\n    def _get_summary(\\\\n        self,\\\\n        messages: list[ChatCompletionMessageParam],\\\\n        *,\\\\n        configs: configs.SummaryCompletionConfigs,\\\\n    ) -> context.OpenAIReturnContext | str:\\\\n        \"\"\"\\\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\\\n\\\\n        Args:\\\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\\\n\\\\n        Returns:\\\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\\\n        \"\"\"\\\\n\\\\n        try:\\\\n            response: ChatCompletion = self.client.chat.completions.create(\\\\n                messages=messages,\\\\n                model=configs.model,\\\\n                max_tokens=configs.max_tokens,\\\\n                temperature=configs.temperature,\\\\n            )\\\\n            prompt_tokens: int = 0\\\\n            completion_tokens: int = 0\\\\n            summary: str | None = response.choices[0].message.content\\\\n            if response.usage:\\\\n                prompt_tokens = response.usage.prompt_tokens\\\\n                completion_tokens = response.usage.completion_tokens\\\\n\\\\n            return context.OpenAIReturnContext(\\\\n                prompt_tokens=prompt_tokens,\\\\n                completion_tokens=completion_tokens,\\\\n                summary=summary,\\\\n            )\\\\n\\\\n        except Exception as e:\\\\n            logging.error(e)\\\\n            return \"Summarization failed.\"\\\\n\\\\n    def summarize_code(\\\\n        self,\\\\n        code: str,\\\\n        *,\\\\n        model_id: str,\\\\n        children_summaries: str | None,\\\\n        dependency_summaries: str | None,\\\\n        import_details: str | None,\\\\n        configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\\\\n    ) -> context.OpenAIReturnContext | str:\\\\n        \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n\\\\n        logging.info(f\"Summarizing code for model: {model_id}\")\\\\n        prompt: str = self._create_prompt(\\\\n            code, children_summaries, dependency_summaries, import_details\\\\n        )\\\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\n            system_message=configs.system_message, user_message=prompt\\\\n        )\\\\n\\\\n        final_summary: str | None = None\\\\n        if summary_context := self._get_summary(messages, configs=configs):\\\\n            # print(\"Full Summary:\\\\\\\\n\", summary)\\\\n            if isinstance(summary_context, context.OpenAIReturnContext):\\\\n                if summary_context.summary:\\\\n                    final_summary = summary_context.summary.split(\"FINAL SUMMARY:\")[-1]\\\\n                    logging.info(f\"Full Summary:\\\\\\\\n\")\\\\n                    print(final_summary)\\\\n                    print(f\"Prompt tokens: {summary_context.prompt_tokens}\")\\\\n                    print(f\"Completion tokens: {summary_context.completion_tokens}\")\\\\n\\\\n        return summary_context if summary_context else \"Summary not found.\"\\\\n\\\\n    def test_summarize_code(\\\\n        self,\\\\n        code: str,\\\\n        *,\\\\n        model_id: str,\\\\n        children_summaries: str | None,\\\\n        dependency_summaries: str | None,\\\\n        import_details: str | None,\\\\n        configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\\\\n    ) -> context.OpenAIReturnContext | str:\\\\n        \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n\\\\n        logging.info(f\"Summarizing code for model: {model_id}\")\\\\n        prompt: str = self._create_prompt(\\\\n            code, children_summaries, dependency_summaries, import_details\\\\n        )\\\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\n            system_message=configs.system_message, user_message=prompt\\\\n        )\\\\n\\\\n        summary: str = f\"\"\"Summary:\\\\\\\\n\\\\n        {messages}\\\\\\\\n \\\\n        \"\"\"\\\\n        summary_context = context.OpenAIReturnContext(\\\\n            summary=summary,\\\\n            prompt_tokens=1,\\\\n            completion_tokens=1,\\\\n        )\\\\n        logging.info(f\"Full Summary:\\\\\\\\n\")\\\\n        print(summary)\\\\n\\\\n        return summary_context\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef __init__(\\\\\\\\n    self,\\\\\\\\n    client: OpenAI,\\\\\\\\n    # *, summary_prompt_list: list[str] = summary_prompt_list\\\\\\\\n) -> None:\\\\\\\\n    self.client: OpenAI = client\\\\\\\\n    # self.prompt_list: list[str] = summary_prompt_list\\\\\\\\n    # self.default_prompt: str = self.prompt_list[0]\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\\\\\\\n    \"\"\"Creates a system message for chat completion using OpenAi\\\\\\\\\\\\\\'s ChatCompletionSystemMessageParam class.\"\"\"\\\\\\\\n    return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\\\\\\\n    \"\"\"Creates a user message for chat completion using OpenAi\\\\\\\\\\\\\\'s ChatCompletionUserMessageParam class.\"\"\"\\\\\\\\n    return ChatCompletionUserMessageParam(content=content, role=\"user\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _create_messages_list(\\\\\\\\n    self,\\\\\\\\n    system_message: str,\\\\\\\\n    user_message: str,\\\\\\\\n) -> list[ChatCompletionMessageParam]:\\\\\\\\n    \"\"\"\\\\\\\\n        Creates a list of messages for chat completion, including both system and user messages.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            system_message (str): The system message content.\\\\\\\\n            user_message (str): The user message content.\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\\\\\\\\\\\\\'s\\\\\\\\n                ChatCompletionMessageParam classes.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    return [\\\\\\\\n        self._create_system_message(system_message),\\\\\\\\n        self._create_user_message(user_message),\\\\\\\\n    ]\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _create_prompt(\\\\\\\\n    self,\\\\\\\\n    code: str,\\\\\\\\n    children_summaries: str | None,\\\\\\\\n    dependency_summaries: str | None,\\\\\\\\n    import_details: str | None,\\\\\\\\n) -> str:\\\\\\\\n    prompt_creator: PromptCreator = PromptCreator()\\\\\\\\n    prompt: str | None = prompt_creator.create_prompt(\\\\\\\\n        code,\\\\\\\\n        children_summaries,\\\\\\\\n        dependency_summaries,\\\\\\\\n        import_details,\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    if prompt:\\\\\\\\n        return prompt\\\\\\\\n    else:\\\\\\\\n        raise Exception(\"Prompt creation failed.\")\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _get_summary(\\\\\\\\n    self,\\\\\\\\n    messages: list[ChatCompletionMessageParam],\\\\\\\\n    *,\\\\\\\\n    configs: configs.SummaryCompletionConfigs,\\\\\\\\n) -> context.OpenAIReturnContext | str:\\\\\\\\n    \"\"\"\\\\\\\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\\\\\\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    try:\\\\\\\\n        response: ChatCompletion = self.client.chat.completions.create(\\\\\\\\n            messages=messages,\\\\\\\\n            model=configs.model,\\\\\\\\n            max_tokens=configs.max_tokens,\\\\\\\\n            temperature=configs.temperature,\\\\\\\\n        )\\\\\\\\n        prompt_tokens: int = 0\\\\\\\\n        completion_tokens: int = 0\\\\\\\\n        summary: str | None = response.choices[0].message.content\\\\\\\\n        if response.usage:\\\\\\\\n            prompt_tokens = response.usage.prompt_tokens\\\\\\\\n            completion_tokens = response.usage.completion_tokens\\\\\\\\n\\\\\\\\n        return context.OpenAIReturnContext(\\\\\\\\n            prompt_tokens=prompt_tokens,\\\\\\\\n            completion_tokens=completion_tokens,\\\\\\\\n            summary=summary,\\\\\\\\n        )\\\\\\\\n\\\\\\\\n    except Exception as e:\\\\\\\\n        logging.error(e)\\\\\\\\n        return \"Summarization failed.\"\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef summarize_code(\\\\\\\\n    self,\\\\\\\\n    code: str,\\\\\\\\n    *,\\\\\\\\n    model_id: str,\\\\\\\\n    children_summaries: str | None,\\\\\\\\n    dependency_summaries: str | None,\\\\\\\\n    import_details: str | None,\\\\\\\\n    configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\\\\\\\\n) -> context.OpenAIReturnContext | str:\\\\\\\\n    \"\"\"\\\\\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            code (str): The code snippet to summarize.\\\\\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\\\\\n                Defaults to SummaryCompletionConfigs().\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            str: The summary of the provided code snippet.\\\\\\\\n\\\\\\\\n        Examples:\\\\\\\\n            >>> client = OpenAI()\\\\\\\\n            >>> summarizer = Summarizer(client=client)\\\\\\\\n            >>> code_example = \"print(\\\\\\\\\\\\\\'Hello, world\\\\\\\\\\\\\\')\"\\\\\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\\\\\n            >>> print(summary)\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    logging.info(f\"Summarizing code for model: {model_id}\")\\\\\\\\n    prompt: str = self._create_prompt(\\\\\\\\n        code, children_summaries, dependency_summaries, import_details\\\\\\\\n    )\\\\\\\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\\\\\n        system_message=configs.system_message, user_message=prompt\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    final_summary: str | None = None\\\\\\\\n    if summary_context := self._get_summary(messages, configs=configs):\\\\\\\\n        # print(\"Full Summary:\\\\\\\\\\\\\\\\n\", summary)\\\\\\\\n        if isinstance(summary_context, context.OpenAIReturnContext):\\\\\\\\n            if summary_context.summary:\\\\\\\\n                final_summary = summary_context.summary.split(\"FINAL SUMMARY:\")[-1]\\\\\\\\n                logging.info(f\"Full Summary:\\\\\\\\\\\\\\\\n\")\\\\\\\\n                print(final_summary)\\\\\\\\n                print(f\"Prompt tokens: {summary_context.prompt_tokens}\")\\\\\\\\n                print(f\"Completion tokens: {summary_context.completion_tokens}\")\\\\\\\\n\\\\\\\\n    return summary_context if summary_context else \"Summary not found.\"\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef test_summarize_code(\\\\\\\\n    self,\\\\\\\\n    code: str,\\\\\\\\n    *,\\\\\\\\n    model_id: str,\\\\\\\\n    children_summaries: str | None,\\\\\\\\n    dependency_summaries: str | None,\\\\\\\\n    import_details: str | None,\\\\\\\\n    configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\\\\\\\\n) -> context.OpenAIReturnContext | str:\\\\\\\\n    \"\"\"\\\\\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            code (str): The code snippet to summarize.\\\\\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\\\\\n                Defaults to SummaryCompletionConfigs().\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            str: The summary of the provided code snippet.\\\\\\\\n\\\\\\\\n        Examples:\\\\\\\\n            >>> client = OpenAI()\\\\\\\\n            >>> summarizer = Summarizer(client=client)\\\\\\\\n            >>> code_example = \"print(\\\\\\\\\\\\\\'Hello, world\\\\\\\\\\\\\\')\"\\\\\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\\\\\n            >>> print(summary)\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    logging.info(f\"Summarizing code for model: {model_id}\")\\\\\\\\n    prompt: str = self._create_prompt(\\\\\\\\n        code, children_summaries, dependency_summaries, import_details\\\\\\\\n    )\\\\\\\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\\\\\n        system_message=configs.system_message, user_message=prompt\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    summary: str = f\"\"\"Summary:\\\\\\\\\\\\\\\\n\\\\\\\\n        {messages}\\\\\\\\\\\\\\\\n \\\\\\\\n        \"\"\"\\\\\\\\n    summary_context = context.OpenAIReturnContext(\\\\\\\\n        summary=summary,\\\\\\\\n        prompt_tokens=1,\\\\\\\\n        completion_tokens=1,\\\\\\\\n    )\\\\\\\\n    logging.info(f\"Full Summary:\\\\\\\\\\\\\\\\n\")\\\\\\\\n    print(summary)\\\\\\\\n\\\\\\\\n    return summary_context\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport logging\\\\nfrom openai import OpenAI\\\\nfrom openai.types.chat.chat_completion_system_message_param import ChatCompletionSystemMessageParam\\\\nfrom openai.types.chat.chat_completion_user_message_param import ChatCompletionUserMessageParam\\\\nfrom openai.types.chat.chat_completion_message_param import ChatCompletionMessageParam\\\\nfrom openai.types.chat.chat_completion import ChatCompletion\\\\nfrom ai_services.temp import code_example\\\\nfrom ai_services.prompt_creator import PromptCreator\\\\nimport Name(\\\\n    value=\\\\\\'ai_services\\\\\\',\\\\n    lpar=[],\\\\n    rpar=[],\\\\n) as configs\\\\nimport Name(\\\\n    value=\\\\\\'ai_services\\\\\\',\\\\n    lpar=[],\\\\n    rpar=[],\\\\n) as configs\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport logging\\nfrom openai import OpenAI\\nfrom openai.types.chat.chat_completion_system_message_param import ChatCompletionSystemMessageParam\\nfrom openai.types.chat.chat_completion_user_message_param import ChatCompletionUserMessageParam\\nfrom openai.types.chat.chat_completion_message_param import ChatCompletionMessageParam\\nfrom openai.types.chat.chat_completion import ChatCompletion\\nimport Name(\\n    value=\\'ai_services\\',\\n    lpar=[],\\n    rpar=[],\\n) as configs\\nimport Name(\\n    value=\\'ai_services\\',\\n    lpar=[],\\n    rpar=[],\\n) as context\\nfrom ai_services.temp import code_example\\nfrom ai_services.prompt_creator import PromptCreator\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "variable_assignments": [],
            "id": "ai_services:summarizer.py__*__MODULE__*__STANDALONE_BLOCK-1",
            "parent_id": "ai_services:summarizer.py__*__MODULE",
            "block_type": "STANDALONE_BLOCK",
            "start_line_num": 242,
            "end_line_num": 257,
            "code_content": "if __name__ == \"__main__\":\n    client = OpenAI()\n    summarizer = OpenAISummarizer(client=client)\n    children_summaries = \"\"\n    dependency_summaries = \"\"\n    summary = summarizer.summarize_code(\n        code_example,\n        model_id=\"test\",\n        children_summaries=children_summaries,\n        dependency_summaries=dependency_summaries,\n        import_details=None,\n    )\n    print(summary)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer"
                },
                {
                    "import_names": [
                        {
                            "name": "OpenAI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "code_example",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "ai_services.temp",
                    "import_module_type": "LOCAL",
                    "local_module_id": "ai_services:temp.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nif __name__ == \"__main__\":\\n    client = OpenAI()\\n    summarizer = OpenAISummarizer(client=client)\\n    children_summaries = \"\"\\n    dependency_summaries = \"\"\\n    summary = summarizer.summarize_code(\\n        code_example,\\n        model_id=\"test\",\\n        children_summaries=children_summaries,\\n        dependency_summaries=dependency_summaries,\\n        import_details=None,\\n    )\\n    print(summary)\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom openai import OpenAI\\nfrom ai_services.temp import code_example\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "class_name": "OpenAISummarizer",
            "decorators": null,
            "bases": null,
            "docstring": "A class for summarizing code snippets using the OpenAI API.\n\nArgs:\n    - client (OpenAI): The OpenAI client used for making API requests.\n\nAttributes:\n    - client (OpenAI): The OpenAI client used for making API requests.\n    - prompt_list (list[str]): A list of summary prompts.\n    - default_prompt (str): The default summary prompt.\n\nMethods:\n    summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\n        Summarizes the provided code snippet using the OpenAI API.\n\nExamples:\n    >>> client = OpenAI()\n    >>> summarizer = Summarizer(client=client)\n    >>> code_example = \"print('Hello, world')\"\n    >>> summary = summarizer.summarize_code(code_example)\n    >>> print(summary)",
            "attributes": null,
            "keywords": null,
            "id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
            "parent_id": "ai_services:summarizer.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 17,
            "end_line_num": 242,
            "code_content": "\n\nclass OpenAISummarizer:\n    \"\"\"\n    A class for summarizing code snippets using the OpenAI API.\n\n    Args:\n        - client (OpenAI): The OpenAI client used for making API requests.\n\n    Attributes:\n        - client (OpenAI): The OpenAI client used for making API requests.\n        - prompt_list (list[str]): A list of summary prompts.\n        - default_prompt (str): The default summary prompt.\n\n    Methods:\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\n            Summarizes the provided code snippet using the OpenAI API.\n\n    Examples:\n        >>> client = OpenAI()\n        >>> summarizer = Summarizer(client=client)\n        >>> code_example = \"print('Hello, world')\"\n        >>> summary = summarizer.summarize_code(code_example)\n        >>> print(summary)\n    \"\"\"\n\n    def __init__(\n        self,\n        client: OpenAI,\n        # *, summary_prompt_list: list[str] = summary_prompt_list\n    ) -> None:\n        self.client: OpenAI = client\n        # self.prompt_list: list[str] = summary_prompt_list\n        # self.default_prompt: str = self.prompt_list[0]\n\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\n        \"\"\"Creates a system message for chat completion using OpenAi's ChatCompletionSystemMessageParam class.\"\"\"\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\n\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\n        \"\"\"Creates a user message for chat completion using OpenAi's ChatCompletionUserMessageParam class.\"\"\"\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\n\n    def _create_messages_list(\n        self,\n        system_message: str,\n        user_message: str,\n    ) -> list[ChatCompletionMessageParam]:\n        \"\"\"\n        Creates a list of messages for chat completion, including both system and user messages.\n\n        Args:\n            system_message (str): The system message content.\n            user_message (str): The user message content.\n\n        Returns:\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI's\n                ChatCompletionMessageParam classes.\n        \"\"\"\n\n        return [\n            self._create_system_message(system_message),\n            self._create_user_message(user_message),\n        ]\n\n    def _create_prompt(\n        self,\n        code: str,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        import_details: str | None,\n    ) -> str:\n        prompt_creator: PromptCreator = PromptCreator()\n        prompt: str | None = prompt_creator.create_prompt(\n            code,\n            children_summaries,\n            dependency_summaries,\n            import_details,\n        )\n\n        if prompt:\n            return prompt\n        else:\n            raise Exception(\"Prompt creation failed.\")\n\n    def _get_summary(\n        self,\n        messages: list[ChatCompletionMessageParam],\n        *,\n        configs: configs.SummaryCompletionConfigs,\n    ) -> context.OpenAIReturnContext | str:\n        \"\"\"\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\n        Args:\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\n        Returns:\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\n        \"\"\"\n\n        try:\n            response: ChatCompletion = self.client.chat.completions.create(\n                messages=messages,\n                model=configs.model,\n                max_tokens=configs.max_tokens,\n                temperature=configs.temperature,\n            )\n            prompt_tokens: int = 0\n            completion_tokens: int = 0\n            summary: str | None = response.choices[0].message.content\n            if response.usage:\n                prompt_tokens = response.usage.prompt_tokens\n                completion_tokens = response.usage.completion_tokens\n\n            return context.OpenAIReturnContext(\n                prompt_tokens=prompt_tokens,\n                completion_tokens=completion_tokens,\n                summary=summary,\n            )\n\n        except Exception as e:\n            logging.error(e)\n            return \"Summarization failed.\"\n\n    def summarize_code(\n        self,\n        code: str,\n        *,\n        model_id: str,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        import_details: str | None,\n        configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\n    ) -> context.OpenAIReturnContext | str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n        logging.info(f\"Summarizing code for model: {model_id}\")\n        prompt: str = self._create_prompt(\n            code, children_summaries, dependency_summaries, import_details\n        )\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n            system_message=configs.system_message, user_message=prompt\n        )\n\n        final_summary: str | None = None\n        if summary_context := self._get_summary(messages, configs=configs):\n            # print(\"Full Summary:\\n\", summary)\n            if isinstance(summary_context, context.OpenAIReturnContext):\n                if summary_context.summary:\n                    final_summary = summary_context.summary.split(\"FINAL SUMMARY:\")[-1]\n                    logging.info(f\"Full Summary:\\n\")\n                    print(final_summary)\n                    print(f\"Prompt tokens: {summary_context.prompt_tokens}\")\n                    print(f\"Completion tokens: {summary_context.completion_tokens}\")\n\n        return summary_context if summary_context else \"Summary not found.\"\n\n    def test_summarize_code(\n        self,\n        code: str,\n        *,\n        model_id: str,\n        children_summaries: str | None,\n        dependency_summaries: str | None,\n        import_details: str | None,\n        configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\n    ) -> context.OpenAIReturnContext | str:\n        \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n        logging.info(f\"Summarizing code for model: {model_id}\")\n        prompt: str = self._create_prompt(\n            code, children_summaries, dependency_summaries, import_details\n        )\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n            system_message=configs.system_message, user_message=prompt\n        )\n\n        summary: str = f\"\"\"Summary:\\n\n        {messages}\\n \n        \"\"\"\n        summary_context = context.OpenAIReturnContext(\n            summary=summary,\n            prompt_tokens=1,\n            completion_tokens=1,\n        )\n        logging.info(f\"Full Summary:\\n\")\n        print(summary)\n\n        return summary_context\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "logging",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "OpenAI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ChatCompletionSystemMessageParam",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.chat.chat_completion_system_message_param",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ChatCompletionUserMessageParam",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.chat.chat_completion_user_message_param",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ChatCompletionMessageParam",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.chat.chat_completion_message_param",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ChatCompletion",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "openai.types.chat.chat_completion",
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "code_example",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "ai_services.temp",
                    "import_module_type": "LOCAL",
                    "local_module_id": "ai_services:temp.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "PromptCreator",
                            "as_name": null,
                            "local_block_id": "ai_services:prompt_creator.py__*__MODULE__*__CLASS-PromptCreator"
                        }
                    ],
                    "imported_from": "ai_services.prompt_creator",
                    "import_module_type": "LOCAL",
                    "local_module_id": "ai_services:prompt_creator.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "Name(\n    value='ai_services',\n    lpar=[],\n    rpar=[],\n)",
                            "as_name": "configs",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Name(\n    value='ai_services',\n    lpar=[],\n    rpar=[],\n)",
                            "as_name": "configs",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\nclass OpenAISummarizer:\\n    \"\"\"\\n    A class for summarizing code snippets using the OpenAI API.\\n\\n    Args:\\n        - client (OpenAI): The OpenAI client used for making API requests.\\n\\n    Attributes:\\n        - client (OpenAI): The OpenAI client used for making API requests.\\n        - prompt_list (list[str]): A list of summary prompts.\\n        - default_prompt (str): The default summary prompt.\\n\\n    Methods:\\n        summarize_code(code: str, configs: SummaryCompletionConfigs = SummaryCompletionConfigs()) -> str:\\n            Summarizes the provided code snippet using the OpenAI API.\\n\\n    Examples:\\n        >>> client = OpenAI()\\n        >>> summarizer = Summarizer(client=client)\\n        >>> code_example = \"print(\\'Hello, world\\')\"\\n        >>> summary = summarizer.summarize_code(code_example)\\n        >>> print(summary)\\n    \"\"\"\\n\\n    def __init__(\\n        self,\\n        client: OpenAI,\\n        # *, summary_prompt_list: list[str] = summary_prompt_list\\n    ) -> None:\\n        self.client: OpenAI = client\\n        # self.prompt_list: list[str] = summary_prompt_list\\n        # self.default_prompt: str = self.prompt_list[0]\\n\\n    def _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\n        \"\"\"Creates a system message for chat completion using OpenAi\\'s ChatCompletionSystemMessageParam class.\"\"\"\\n        return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\n\\n    def _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\n        \"\"\"Creates a user message for chat completion using OpenAi\\'s ChatCompletionUserMessageParam class.\"\"\"\\n        return ChatCompletionUserMessageParam(content=content, role=\"user\")\\n\\n    def _create_messages_list(\\n        self,\\n        system_message: str,\\n        user_message: str,\\n    ) -> list[ChatCompletionMessageParam]:\\n        \"\"\"\\n        Creates a list of messages for chat completion, including both system and user messages.\\n\\n        Args:\\n            system_message (str): The system message content.\\n            user_message (str): The user message content.\\n\\n        Returns:\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\'s\\n                ChatCompletionMessageParam classes.\\n        \"\"\"\\n\\n        return [\\n            self._create_system_message(system_message),\\n            self._create_user_message(user_message),\\n        ]\\n\\n    def _create_prompt(\\n        self,\\n        code: str,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        import_details: str | None,\\n    ) -> str:\\n        prompt_creator: PromptCreator = PromptCreator()\\n        prompt: str | None = prompt_creator.create_prompt(\\n            code,\\n            children_summaries,\\n            dependency_summaries,\\n            import_details,\\n        )\\n\\n        if prompt:\\n            return prompt\\n        else:\\n            raise Exception(\"Prompt creation failed.\")\\n\\n    def _get_summary(\\n        self,\\n        messages: list[ChatCompletionMessageParam],\\n        *,\\n        configs: configs.SummaryCompletionConfigs,\\n    ) -> context.OpenAIReturnContext | str:\\n        \"\"\"\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\n\\n        Args:\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\n\\n        Returns:\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\n        \"\"\"\\n\\n        try:\\n            response: ChatCompletion = self.client.chat.completions.create(\\n                messages=messages,\\n                model=configs.model,\\n                max_tokens=configs.max_tokens,\\n                temperature=configs.temperature,\\n            )\\n            prompt_tokens: int = 0\\n            completion_tokens: int = 0\\n            summary: str | None = response.choices[0].message.content\\n            if response.usage:\\n                prompt_tokens = response.usage.prompt_tokens\\n                completion_tokens = response.usage.completion_tokens\\n\\n            return context.OpenAIReturnContext(\\n                prompt_tokens=prompt_tokens,\\n                completion_tokens=completion_tokens,\\n                summary=summary,\\n            )\\n\\n        except Exception as e:\\n            logging.error(e)\\n            return \"Summarization failed.\"\\n\\n    def summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        model_id: str,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        import_details: str | None,\\n        configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\\n    ) -> context.OpenAIReturnContext | str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n        logging.info(f\"Summarizing code for model: {model_id}\")\\n        prompt: str = self._create_prompt(\\n            code, children_summaries, dependency_summaries, import_details\\n        )\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n            system_message=configs.system_message, user_message=prompt\\n        )\\n\\n        final_summary: str | None = None\\n        if summary_context := self._get_summary(messages, configs=configs):\\n            # print(\"Full Summary:\\\\n\", summary)\\n            if isinstance(summary_context, context.OpenAIReturnContext):\\n                if summary_context.summary:\\n                    final_summary = summary_context.summary.split(\"FINAL SUMMARY:\")[-1]\\n                    logging.info(f\"Full Summary:\\\\n\")\\n                    print(final_summary)\\n                    print(f\"Prompt tokens: {summary_context.prompt_tokens}\")\\n                    print(f\"Completion tokens: {summary_context.completion_tokens}\")\\n\\n        return summary_context if summary_context else \"Summary not found.\"\\n\\n    def test_summarize_code(\\n        self,\\n        code: str,\\n        *,\\n        model_id: str,\\n        children_summaries: str | None,\\n        dependency_summaries: str | None,\\n        import_details: str | None,\\n        configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\\n    ) -> context.OpenAIReturnContext | str:\\n        \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n        logging.info(f\"Summarizing code for model: {model_id}\")\\n        prompt: str = self._create_prompt(\\n            code, children_summaries, dependency_summaries, import_details\\n        )\\n        messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n            system_message=configs.system_message, user_message=prompt\\n        )\\n\\n        summary: str = f\"\"\"Summary:\\\\n\\n        {messages}\\\\n \\n        \"\"\"\\n        summary_context = context.OpenAIReturnContext(\\n            summary=summary,\\n            prompt_tokens=1,\\n            completion_tokens=1,\\n        )\\n        logging.info(f\"Full Summary:\\\\n\")\\n        print(summary)\\n\\n        return summary_context\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef __init__(\\\\n    self,\\\\n    client: OpenAI,\\\\n    # *, summary_prompt_list: list[str] = summary_prompt_list\\\\n) -> None:\\\\n    self.client: OpenAI = client\\\\n    # self.prompt_list: list[str] = summary_prompt_list\\\\n    # self.default_prompt: str = self.prompt_list[0]\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\\\n    \"\"\"Creates a system message for chat completion using OpenAi\\\\\\'s ChatCompletionSystemMessageParam class.\"\"\"\\\\n    return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\\\n    \"\"\"Creates a user message for chat completion using OpenAi\\\\\\'s ChatCompletionUserMessageParam class.\"\"\"\\\\n    return ChatCompletionUserMessageParam(content=content, role=\"user\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _create_messages_list(\\\\n    self,\\\\n    system_message: str,\\\\n    user_message: str,\\\\n) -> list[ChatCompletionMessageParam]:\\\\n    \"\"\"\\\\n        Creates a list of messages for chat completion, including both system and user messages.\\\\n\\\\n        Args:\\\\n            system_message (str): The system message content.\\\\n            user_message (str): The user message content.\\\\n\\\\n        Returns:\\\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\\\\\'s\\\\n                ChatCompletionMessageParam classes.\\\\n        \"\"\"\\\\n\\\\n    return [\\\\n        self._create_system_message(system_message),\\\\n        self._create_user_message(user_message),\\\\n    ]\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _create_prompt(\\\\n    self,\\\\n    code: str,\\\\n    children_summaries: str | None,\\\\n    dependency_summaries: str | None,\\\\n    import_details: str | None,\\\\n) -> str:\\\\n    prompt_creator: PromptCreator = PromptCreator()\\\\n    prompt: str | None = prompt_creator.create_prompt(\\\\n        code,\\\\n        children_summaries,\\\\n        dependency_summaries,\\\\n        import_details,\\\\n    )\\\\n\\\\n    if prompt:\\\\n        return prompt\\\\n    else:\\\\n        raise Exception(\"Prompt creation failed.\")\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _get_summary(\\\\n    self,\\\\n    messages: list[ChatCompletionMessageParam],\\\\n    *,\\\\n    configs: configs.SummaryCompletionConfigs,\\\\n) -> context.OpenAIReturnContext | str:\\\\n    \"\"\"\\\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\\\n\\\\n        Args:\\\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\\\n\\\\n        Returns:\\\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\\\n        \"\"\"\\\\n\\\\n    try:\\\\n        response: ChatCompletion = self.client.chat.completions.create(\\\\n            messages=messages,\\\\n            model=configs.model,\\\\n            max_tokens=configs.max_tokens,\\\\n            temperature=configs.temperature,\\\\n        )\\\\n        prompt_tokens: int = 0\\\\n        completion_tokens: int = 0\\\\n        summary: str | None = response.choices[0].message.content\\\\n        if response.usage:\\\\n            prompt_tokens = response.usage.prompt_tokens\\\\n            completion_tokens = response.usage.completion_tokens\\\\n\\\\n        return context.OpenAIReturnContext(\\\\n            prompt_tokens=prompt_tokens,\\\\n            completion_tokens=completion_tokens,\\\\n            summary=summary,\\\\n        )\\\\n\\\\n    except Exception as e:\\\\n        logging.error(e)\\\\n        return \"Summarization failed.\"\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef summarize_code(\\\\n    self,\\\\n    code: str,\\\\n    *,\\\\n    model_id: str,\\\\n    children_summaries: str | None,\\\\n    dependency_summaries: str | None,\\\\n    import_details: str | None,\\\\n    configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\\\\n) -> context.OpenAIReturnContext | str:\\\\n    \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n\\\\n    logging.info(f\"Summarizing code for model: {model_id}\")\\\\n    prompt: str = self._create_prompt(\\\\n        code, children_summaries, dependency_summaries, import_details\\\\n    )\\\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\n        system_message=configs.system_message, user_message=prompt\\\\n    )\\\\n\\\\n    final_summary: str | None = None\\\\n    if summary_context := self._get_summary(messages, configs=configs):\\\\n        # print(\"Full Summary:\\\\\\\\n\", summary)\\\\n        if isinstance(summary_context, context.OpenAIReturnContext):\\\\n            if summary_context.summary:\\\\n                final_summary = summary_context.summary.split(\"FINAL SUMMARY:\")[-1]\\\\n                logging.info(f\"Full Summary:\\\\\\\\n\")\\\\n                print(final_summary)\\\\n                print(f\"Prompt tokens: {summary_context.prompt_tokens}\")\\\\n                print(f\"Completion tokens: {summary_context.completion_tokens}\")\\\\n\\\\n    return summary_context if summary_context else \"Summary not found.\"\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef test_summarize_code(\\\\n    self,\\\\n    code: str,\\\\n    *,\\\\n    model_id: str,\\\\n    children_summaries: str | None,\\\\n    dependency_summaries: str | None,\\\\n    import_details: str | None,\\\\n    configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\\\\n) -> context.OpenAIReturnContext | str:\\\\n    \"\"\"\\\\n        Summarizes the provided code snippet using the OpenAI API.\\\\n\\\\n        Args:\\\\n            code (str): The code snippet to summarize.\\\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\\\n                Defaults to SummaryCompletionConfigs().\\\\n\\\\n        Returns:\\\\n            str: The summary of the provided code snippet.\\\\n\\\\n        Examples:\\\\n            >>> client = OpenAI()\\\\n            >>> summarizer = Summarizer(client=client)\\\\n            >>> code_example = \"print(\\\\\\'Hello, world\\\\\\')\"\\\\n            >>> summary = summarizer.summarize_code(code_example)\\\\n            >>> print(summary)\\\\n        \"\"\"\\\\n\\\\n    logging.info(f\"Summarizing code for model: {model_id}\")\\\\n    prompt: str = self._create_prompt(\\\\n        code, children_summaries, dependency_summaries, import_details\\\\n    )\\\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\\\n        system_message=configs.system_message, user_message=prompt\\\\n    )\\\\n\\\\n    summary: str = f\"\"\"Summary:\\\\\\\\n\\\\n        {messages}\\\\\\\\n \\\\n        \"\"\"\\\\n    summary_context = context.OpenAIReturnContext(\\\\n        summary=summary,\\\\n        prompt_tokens=1,\\\\n        completion_tokens=1,\\\\n    )\\\\n    logging.info(f\"Full Summary:\\\\\\\\n\")\\\\n    print(summary)\\\\n\\\\n    return summary_context\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport logging\\nfrom openai import OpenAI\\nfrom openai.types.chat.chat_completion_system_message_param import ChatCompletionSystemMessageParam\\nfrom openai.types.chat.chat_completion_user_message_param import ChatCompletionUserMessageParam\\nfrom openai.types.chat.chat_completion_message_param import ChatCompletionMessageParam\\nfrom openai.types.chat.chat_completion import ChatCompletion\\nfrom ai_services.temp import code_example\\nfrom ai_services.prompt_creator import PromptCreator\\nimport Name(\\n    value=\\'ai_services\\',\\n    lpar=[],\\n    rpar=[],\\n) as configs\\nimport Name(\\n    value=\\'ai_services\\',\\n    lpar=[],\\n    rpar=[],\\n) as configs\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-__init__",
                    "parent_id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 42,
                    "end_line_num": 51,
                    "code_content": "\ndef __init__(\n    self,\n    client: OpenAI,\n    # *, summary_prompt_list: list[str] = summary_prompt_list\n) -> None:\n    self.client: OpenAI = client\n    # self.prompt_list: list[str] = summary_prompt_list\n    # self.default_prompt: str = self.prompt_list[0]\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef __init__(\\n    self,\\n    client: OpenAI,\\n    # *, summary_prompt_list: list[str] = summary_prompt_list\\n) -> None:\\n    self.client: OpenAI = client\\n    # self.prompt_list: list[str] = summary_prompt_list\\n    # self.default_prompt: str = self.prompt_list[0]\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_create_system_message",
                    "docstring": "Creates a system message for chat completion using OpenAi's ChatCompletionSystemMessageParam class.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "ChatCompletionSystemMessageParam",
                    "is_method": true,
                    "is_async": false,
                    "id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_create_system_message",
                    "parent_id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 51,
                    "end_line_num": 55,
                    "code_content": "\ndef _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\n    \"\"\"Creates a system message for chat completion using OpenAi's ChatCompletionSystemMessageParam class.\"\"\"\n    return ChatCompletionSystemMessageParam(content=content, role=\"system\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _create_system_message(self, content: str) -> ChatCompletionSystemMessageParam:\\n    \"\"\"Creates a system message for chat completion using OpenAi\\'s ChatCompletionSystemMessageParam class.\"\"\"\\n    return ChatCompletionSystemMessageParam(content=content, role=\"system\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_create_user_message",
                    "docstring": "Creates a user message for chat completion using OpenAi's ChatCompletionUserMessageParam class.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "ChatCompletionUserMessageParam",
                    "is_method": true,
                    "is_async": false,
                    "id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_create_user_message",
                    "parent_id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 55,
                    "end_line_num": 59,
                    "code_content": "\ndef _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\n    \"\"\"Creates a user message for chat completion using OpenAi's ChatCompletionUserMessageParam class.\"\"\"\n    return ChatCompletionUserMessageParam(content=content, role=\"user\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _create_user_message(self, content: str) -> ChatCompletionUserMessageParam:\\n    \"\"\"Creates a user message for chat completion using OpenAi\\'s ChatCompletionUserMessageParam class.\"\"\"\\n    return ChatCompletionUserMessageParam(content=content, role=\"user\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_create_messages_list",
                    "docstring": "Creates a list of messages for chat completion, including both system and user messages.\n\nArgs:\n    system_message (str): The system message content.\n    user_message (str): The user message content.\n\nReturns:\n    list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI's\n        ChatCompletionMessageParam classes.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "list[ChatCompletionMessageParam]",
                    "is_method": true,
                    "is_async": false,
                    "id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_create_messages_list",
                    "parent_id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 59,
                    "end_line_num": 81,
                    "code_content": "\ndef _create_messages_list(\n    self,\n    system_message: str,\n    user_message: str,\n) -> list[ChatCompletionMessageParam]:\n    \"\"\"\n        Creates a list of messages for chat completion, including both system and user messages.\n\n        Args:\n            system_message (str): The system message content.\n            user_message (str): The user message content.\n\n        Returns:\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI's\n                ChatCompletionMessageParam classes.\n        \"\"\"\n\n    return [\n        self._create_system_message(system_message),\n        self._create_user_message(user_message),\n    ]\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _create_messages_list(\\n    self,\\n    system_message: str,\\n    user_message: str,\\n) -> list[ChatCompletionMessageParam]:\\n    \"\"\"\\n        Creates a list of messages for chat completion, including both system and user messages.\\n\\n        Args:\\n            system_message (str): The system message content.\\n            user_message (str): The user message content.\\n\\n        Returns:\\n            list[ChatCompletionMessageParam]: A list containing the system and user messages as OpenAI\\'s\\n                ChatCompletionMessageParam classes.\\n        \"\"\"\\n\\n    return [\\n        self._create_system_message(system_message),\\n        self._create_user_message(user_message),\\n    ]\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_create_prompt",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "str",
                    "is_method": true,
                    "is_async": false,
                    "id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_create_prompt",
                    "parent_id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 81,
                    "end_line_num": 101,
                    "code_content": "\ndef _create_prompt(\n    self,\n    code: str,\n    children_summaries: str | None,\n    dependency_summaries: str | None,\n    import_details: str | None,\n) -> str:\n    prompt_creator: PromptCreator = PromptCreator()\n    prompt: str | None = prompt_creator.create_prompt(\n        code,\n        children_summaries,\n        dependency_summaries,\n        import_details,\n    )\n\n    if prompt:\n        return prompt\n    else:\n        raise Exception(\"Prompt creation failed.\")\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _create_prompt(\\n    self,\\n    code: str,\\n    children_summaries: str | None,\\n    dependency_summaries: str | None,\\n    import_details: str | None,\\n) -> str:\\n    prompt_creator: PromptCreator = PromptCreator()\\n    prompt: str | None = prompt_creator.create_prompt(\\n        code,\\n        children_summaries,\\n        dependency_summaries,\\n        import_details,\\n    )\\n\\n    if prompt:\\n        return prompt\\n    else:\\n        raise Exception(\"Prompt creation failed.\")\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_get_summary",
                    "docstring": "Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\nArgs:\n    messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n    configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\nReturns:\n    str | None: The summary generated by the OpenAI API, or None if no summary is found.",
                    "decorators": null,
                    "parameters": null,
                    "returns": " | str",
                    "is_method": true,
                    "is_async": false,
                    "id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_get_summary",
                    "parent_id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 101,
                    "end_line_num": 142,
                    "code_content": "\ndef _get_summary(\n    self,\n    messages: list[ChatCompletionMessageParam],\n    *,\n    configs: configs.SummaryCompletionConfigs,\n) -> context.OpenAIReturnContext | str:\n    \"\"\"\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\n        Args:\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\n        Returns:\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\n        \"\"\"\n\n    try:\n        response: ChatCompletion = self.client.chat.completions.create(\n            messages=messages,\n            model=configs.model,\n            max_tokens=configs.max_tokens,\n            temperature=configs.temperature,\n        )\n        prompt_tokens: int = 0\n        completion_tokens: int = 0\n        summary: str | None = response.choices[0].message.content\n        if response.usage:\n            prompt_tokens = response.usage.prompt_tokens\n            completion_tokens = response.usage.completion_tokens\n\n        return context.OpenAIReturnContext(\n            prompt_tokens=prompt_tokens,\n            completion_tokens=completion_tokens,\n            summary=summary,\n        )\n\n    except Exception as e:\n        logging.error(e)\n        return \"Summarization failed.\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _get_summary(\\n    self,\\n    messages: list[ChatCompletionMessageParam],\\n    *,\\n    configs: configs.SummaryCompletionConfigs,\\n) -> context.OpenAIReturnContext | str:\\n    \"\"\"\\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\\n\\n        Args:\\n            messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\\n            configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\\n\\n        Returns:\\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\\n        \"\"\"\\n\\n    try:\\n        response: ChatCompletion = self.client.chat.completions.create(\\n            messages=messages,\\n            model=configs.model,\\n            max_tokens=configs.max_tokens,\\n            temperature=configs.temperature,\\n        )\\n        prompt_tokens: int = 0\\n        completion_tokens: int = 0\\n        summary: str | None = response.choices[0].message.content\\n        if response.usage:\\n            prompt_tokens = response.usage.prompt_tokens\\n            completion_tokens = response.usage.completion_tokens\\n\\n        return context.OpenAIReturnContext(\\n            prompt_tokens=prompt_tokens,\\n            completion_tokens=completion_tokens,\\n            summary=summary,\\n        )\\n\\n    except Exception as e:\\n        logging.error(e)\\n        return \"Summarization failed.\"\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "summarize_code",
                    "docstring": "Summarizes the provided code snippet using the OpenAI API.\n\nArgs:\n    code (str): The code snippet to summarize.\n    configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n        Defaults to SummaryCompletionConfigs().\n\nReturns:\n    str: The summary of the provided code snippet.\n\nExamples:\n    >>> client = OpenAI()\n    >>> summarizer = Summarizer(client=client)\n    >>> code_example = \"print('Hello, world')\"\n    >>> summary = summarizer.summarize_code(code_example)\n    >>> print(summary)",
                    "decorators": null,
                    "parameters": null,
                    "returns": " | str",
                    "is_method": true,
                    "is_async": false,
                    "id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-summarize_code",
                    "parent_id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 142,
                    "end_line_num": 192,
                    "code_content": "\ndef summarize_code(\n    self,\n    code: str,\n    *,\n    model_id: str,\n    children_summaries: str | None,\n    dependency_summaries: str | None,\n    import_details: str | None,\n    configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\n) -> context.OpenAIReturnContext | str:\n    \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n    logging.info(f\"Summarizing code for model: {model_id}\")\n    prompt: str = self._create_prompt(\n        code, children_summaries, dependency_summaries, import_details\n    )\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n        system_message=configs.system_message, user_message=prompt\n    )\n\n    final_summary: str | None = None\n    if summary_context := self._get_summary(messages, configs=configs):\n        # print(\"Full Summary:\\n\", summary)\n        if isinstance(summary_context, context.OpenAIReturnContext):\n            if summary_context.summary:\n                final_summary = summary_context.summary.split(\"FINAL SUMMARY:\")[-1]\n                logging.info(f\"Full Summary:\\n\")\n                print(final_summary)\n                print(f\"Prompt tokens: {summary_context.prompt_tokens}\")\n                print(f\"Completion tokens: {summary_context.completion_tokens}\")\n\n    return summary_context if summary_context else \"Summary not found.\"\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef summarize_code(\\n    self,\\n    code: str,\\n    *,\\n    model_id: str,\\n    children_summaries: str | None,\\n    dependency_summaries: str | None,\\n    import_details: str | None,\\n    configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\\n) -> context.OpenAIReturnContext | str:\\n    \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n    logging.info(f\"Summarizing code for model: {model_id}\")\\n    prompt: str = self._create_prompt(\\n        code, children_summaries, dependency_summaries, import_details\\n    )\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n        system_message=configs.system_message, user_message=prompt\\n    )\\n\\n    final_summary: str | None = None\\n    if summary_context := self._get_summary(messages, configs=configs):\\n        # print(\"Full Summary:\\\\n\", summary)\\n        if isinstance(summary_context, context.OpenAIReturnContext):\\n            if summary_context.summary:\\n                final_summary = summary_context.summary.split(\"FINAL SUMMARY:\")[-1]\\n                logging.info(f\"Full Summary:\\\\n\")\\n                print(final_summary)\\n                print(f\"Prompt tokens: {summary_context.prompt_tokens}\")\\n                print(f\"Completion tokens: {summary_context.completion_tokens}\")\\n\\n    return summary_context if summary_context else \"Summary not found.\"\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "test_summarize_code",
                    "docstring": "Summarizes the provided code snippet using the OpenAI API.\n\nArgs:\n    code (str): The code snippet to summarize.\n    configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n        Defaults to SummaryCompletionConfigs().\n\nReturns:\n    str: The summary of the provided code snippet.\n\nExamples:\n    >>> client = OpenAI()\n    >>> summarizer = Summarizer(client=client)\n    >>> code_example = \"print('Hello, world')\"\n    >>> summary = summarizer.summarize_code(code_example)\n    >>> print(summary)",
                    "decorators": null,
                    "parameters": null,
                    "returns": " | str",
                    "is_method": true,
                    "is_async": false,
                    "id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-test_summarize_code",
                    "parent_id": "ai_services:summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
                    "block_type": "FUNCTION",
                    "start_line_num": 192,
                    "end_line_num": 242,
                    "code_content": "\ndef test_summarize_code(\n    self,\n    code: str,\n    *,\n    model_id: str,\n    children_summaries: str | None,\n    dependency_summaries: str | None,\n    import_details: str | None,\n    configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\n) -> context.OpenAIReturnContext | str:\n    \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            code (str): The code snippet to summarize.\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            str: The summary of the provided code snippet.\n\n        Examples:\n            >>> client = OpenAI()\n            >>> summarizer = Summarizer(client=client)\n            >>> code_example = \"print('Hello, world')\"\n            >>> summary = summarizer.summarize_code(code_example)\n            >>> print(summary)\n        \"\"\"\n\n    logging.info(f\"Summarizing code for model: {model_id}\")\n    prompt: str = self._create_prompt(\n        code, children_summaries, dependency_summaries, import_details\n    )\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n        system_message=configs.system_message, user_message=prompt\n    )\n\n    summary: str = f\"\"\"Summary:\\n\n        {messages}\\n \n        \"\"\"\n    summary_context = context.OpenAIReturnContext(\n        summary=summary,\n        prompt_tokens=1,\n        completion_tokens=1,\n    )\n    logging.info(f\"Full Summary:\\n\")\n    print(summary)\n\n    return summary_context\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef test_summarize_code(\\n    self,\\n    code: str,\\n    *,\\n    model_id: str,\\n    children_summaries: str | None,\\n    dependency_summaries: str | None,\\n    import_details: str | None,\\n    configs: configs.SummaryCompletionConfigs = configs.SummaryCompletionConfigs(),\\n) -> context.OpenAIReturnContext | str:\\n    \"\"\"\\n        Summarizes the provided code snippet using the OpenAI API.\\n\\n        Args:\\n            code (str): The code snippet to summarize.\\n            configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\\n                Defaults to SummaryCompletionConfigs().\\n\\n        Returns:\\n            str: The summary of the provided code snippet.\\n\\n        Examples:\\n            >>> client = OpenAI()\\n            >>> summarizer = Summarizer(client=client)\\n            >>> code_example = \"print(\\'Hello, world\\')\"\\n            >>> summary = summarizer.summarize_code(code_example)\\n            >>> print(summary)\\n        \"\"\"\\n\\n    logging.info(f\"Summarizing code for model: {model_id}\")\\n    prompt: str = self._create_prompt(\\n        code, children_summaries, dependency_summaries, import_details\\n    )\\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\\n        system_message=configs.system_message, user_message=prompt\\n    )\\n\\n    summary: str = f\"\"\"Summary:\\\\n\\n        {messages}\\\\n \\n        \"\"\"\\n    summary_context = context.OpenAIReturnContext(\\n        summary=summary,\\n        prompt_tokens=1,\\n        completion_tokens=1,\\n    )\\n    logging.info(f\"Full Summary:\\\\n\")\\n    print(summary)\\n\\n    return summary_context\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        }
    ]
}