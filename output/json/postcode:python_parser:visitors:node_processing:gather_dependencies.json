{
    "file_path": "postcode/python_parser/visitors/node_processing/gather_dependencies.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "re",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Callable",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Sequence",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModuleModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.module_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "StandaloneBlockModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.standalone_block_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                }
            ],
            "imported_from": "postcode.python_parser.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
        }
    ],
    "id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 215,
    "code_content": "import re\nfrom typing import Callable, Sequence\n\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\nfrom postcode.python_parser.model_builders.function_model_builder import (\n    FunctionModelBuilder,\n)\nfrom postcode.python_parser.model_builders.module_model_builder import (\n    ModuleModelBuilder,\n)\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import (\n    StandaloneBlockModelBuilder,\n)\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\n\n\ndef gather_and_set_children_dependencies(module_builder: ModuleModelBuilder) -> None:\n    \"\"\"\n    Gathers and sets dependencies for each child code block in the module.\n\n    This function iterates over each child builder of the module builder, gathers import and non-import dependencies,\n    and sets these dependencies for each block.\n\n    Args:\n        module_builder (ModuleModelBuilder): A builder object representing the entire module.\n\n    Example:\n        module_builder = ModuleModelBuilder(...)  # initialize with necessary parameters\n        gather_and_set_children_dependencies(module_builder)\n        # After execution, each child block builder of the module_builder will have its dependencies set.\n    \"\"\"\n\n    for block_builder in module_builder.children_builders:\n        block_dependencies: list[ImportModel | DependencyModel] = []\n        code_content: str = block_builder.common_attributes.code_content\n\n        import_dependencies: list[ImportModel] = _gather_import_dependencies(\n            module_builder.module_attributes.imports, code_content\n        )\n        block_dependencies.extend(import_dependencies)\n\n        non_import_dependencies: list[\n            DependencyModel\n        ] = _gather_non_import_dependencies(\n            module_builder.children_builders,\n            block_builder,\n            code_content,\n            _create_module_dependency_model,\n        )\n        block_dependencies.extend(non_import_dependencies)\n\n        block_builder.set_dependencies(block_dependencies)\n\n\ndef _gather_import_dependencies(\n    imports: list[ImportModel] | None, code_content: str\n) -> list[ImportModel]:\n    \"\"\"\n    Gathers import dependencies from the provided code content.\n\n    This function checks for the presence of import names (and their aliases) in the given code content\n    and returns a list of import models that are dependencies for the code block.\n\n    Args:\n        imports (list[ImportModel] | None): A list of import models to check against the code content.\n        code_content (str): The string content of the code block being analyzed.\n\n    Returns:\n        list[ImportModel]: A list of import models that the code content depends on.\n    \"\"\"\n\n    block_dependencies: list[ImportModel] = []\n\n    if imports:\n        for import_model in imports:\n            for import_name_model in import_model.import_names:\n                if import_name_model.as_name:\n                    if import_name_model.as_name in code_content:\n                        block_dependencies.append(import_model)\n\n                if import_name_model.name in code_content:\n                    block_dependencies.append(import_model)\n\n    return block_dependencies\n\n\ndef _get_standalone_block_dependency(\n    builder: StandaloneBlockModelBuilder,\n    code_content: str,\n    dependency_creator: Callable[[str], DependencyModel],\n) -> DependencyModel | None:\n    \"\"\"\n    Identifies if the given standalone block is a dependency based on variable usage.\n\n    This function checks if any of the variable assignments in the standalone block are used in the given code content.\n    If so, it returns the ID of the standalone block builder.\n\n    Args:\n        builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\n        code_content (str): The code content to analyze for variable usage.\n\n    Returns:\n        str | None: The ID of the standalone block builder if a dependency is found, otherwise None.\n    \"\"\"\n\n    variables: list[\n        str\n    ] | None = builder.standalone_block_attributes.variable_assignments\n    if variables:\n        for variable in variables:\n            if re.search(rf\"\\b{variable}\\b\\s*=\", code_content) is None and re.search(\n                rf\"\\b{variable}\\b\", code_content\n            ):\n                return dependency_creator(builder.id)\n\n\ndef _gather_standalone_block_dependency_for_standalone_block(\n    builder: StandaloneBlockModelBuilder,\n    code_content: str,\n    dependency_creator: Callable[[str], DependencyModel],\n) -> DependencyModel | None:\n    \"\"\"\n    Determines if a given standalone block is a dependency for another standalone block.\n\n    This function checks if any of the variable assignments in the provided standalone block\n    are present in the given code content of another standalone block.\n\n    Args:\n        builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\n        code_content (str): The code content of another standalone block to analyze.\n\n    Returns:\n        str | None: The ID of the standalone block builder if a dependency is found, otherwise None.\n    \"\"\"\n\n    variables: list[\n        str\n    ] | None = builder.standalone_block_attributes.variable_assignments\n    if variables:\n        for variable in variables:\n            if variable in code_content:\n                return dependency_creator(builder.id)\n\n\ndef _not_same_builder(\n    builder: ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder,\n    block_builder: ClassModelBuilder\n    | FunctionModelBuilder\n    | StandaloneBlockModelBuilder,\n) -> bool:\n    \"\"\"Checks if the given builders are not the same, returning boolean.\"\"\"\n    return builder != block_builder\n\n\ndef _gather_non_import_dependencies(\n    children_builders: Sequence[\n        ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\n    ],\n    block_builder: ClassModelBuilder\n    | FunctionModelBuilder\n    | StandaloneBlockModelBuilder,\n    code_content: str,\n    dependency_creator: Callable[[str], DependencyModel],\n) -> list[DependencyModel]:\n    \"\"\"\n    Gather non-import dependencies from the given `children_builders` and `block_builder`\n    based on the provided `code_content`.\n\n    Args:\n        children_builders (list): List of builders representing child nodes.\n        block_builder: Builder representing the current block.\n        code_content (str): Content of the code.\n\n    Returns:\n        list: List of dependencies.\n    \"\"\"\n\n    block_dependencies: list[DependencyModel] = []\n    for builder in children_builders:\n        if _not_same_builder(builder, block_builder):\n            if isinstance(builder, ClassModelBuilder):\n                if builder.class_attributes.class_name in code_content:\n                    module_dependency = dependency_creator(builder.id)\n                    block_dependencies.append(module_dependency)\n\n            elif isinstance(builder, FunctionModelBuilder):\n                if builder.function_attributes.function_name in code_content:\n                    module_dependency = dependency_creator(builder.id)\n                    block_dependencies.append(module_dependency)\n\n            elif isinstance(builder, StandaloneBlockModelBuilder) and isinstance(\n                block_builder, StandaloneBlockModelBuilder\n            ):\n                module_dependency: DependencyModel | None = (\n                    _gather_standalone_block_dependency_for_standalone_block(\n                        builder, code_content, dependency_creator\n                    )\n                )\n                if module_dependency:\n                    block_dependencies.append(module_dependency)\n\n            # TODO: Improve logic to find variable dependencies\n            elif isinstance(builder, StandaloneBlockModelBuilder):\n                module_dependency = _get_standalone_block_dependency(\n                    builder, code_content, dependency_creator\n                )\n                if module_dependency:\n                    block_dependencies.append(module_dependency)\n\n    return block_dependencies\n\n\ndef _create_module_dependency_model(module_code_block_id: str) -> DependencyModel:\n    return DependencyModel(code_block_id=module_code_block_id)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nimport re\\nfrom typing import Callable, Sequence\\n\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\nfrom postcode.python_parser.model_builders.function_model_builder import (\\n    FunctionModelBuilder,\\n)\\nfrom postcode.python_parser.model_builders.module_model_builder import (\\n    ModuleModelBuilder,\\n)\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import (\\n    StandaloneBlockModelBuilder,\\n)\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\n\\n\\ndef gather_and_set_children_dependencies(module_builder: ModuleModelBuilder) -> None:\\n    \"\"\"\\n    Gathers and sets dependencies for each child code block in the module.\\n\\n    This function iterates over each child builder of the module builder, gathers import and non-import dependencies,\\n    and sets these dependencies for each block.\\n\\n    Args:\\n        module_builder (ModuleModelBuilder): A builder object representing the entire module.\\n\\n    Example:\\n        module_builder = ModuleModelBuilder(...)  # initialize with necessary parameters\\n        gather_and_set_children_dependencies(module_builder)\\n        # After execution, each child block builder of the module_builder will have its dependencies set.\\n    \"\"\"\\n\\n    for block_builder in module_builder.children_builders:\\n        block_dependencies: list[ImportModel | DependencyModel] = []\\n        code_content: str = block_builder.common_attributes.code_content\\n\\n        import_dependencies: list[ImportModel] = _gather_import_dependencies(\\n            module_builder.module_attributes.imports, code_content\\n        )\\n        block_dependencies.extend(import_dependencies)\\n\\n        non_import_dependencies: list[\\n            DependencyModel\\n        ] = _gather_non_import_dependencies(\\n            module_builder.children_builders,\\n            block_builder,\\n            code_content,\\n            _create_module_dependency_model,\\n        )\\n        block_dependencies.extend(non_import_dependencies)\\n\\n        block_builder.set_dependencies(block_dependencies)\\n\\n\\ndef _gather_import_dependencies(\\n    imports: list[ImportModel] | None, code_content: str\\n) -> list[ImportModel]:\\n    \"\"\"\\n    Gathers import dependencies from the provided code content.\\n\\n    This function checks for the presence of import names (and their aliases) in the given code content\\n    and returns a list of import models that are dependencies for the code block.\\n\\n    Args:\\n        imports (list[ImportModel] | None): A list of import models to check against the code content.\\n        code_content (str): The string content of the code block being analyzed.\\n\\n    Returns:\\n        list[ImportModel]: A list of import models that the code content depends on.\\n    \"\"\"\\n\\n    block_dependencies: list[ImportModel] = []\\n\\n    if imports:\\n        for import_model in imports:\\n            for import_name_model in import_model.import_names:\\n                if import_name_model.as_name:\\n                    if import_name_model.as_name in code_content:\\n                        block_dependencies.append(import_model)\\n\\n                if import_name_model.name in code_content:\\n                    block_dependencies.append(import_model)\\n\\n    return block_dependencies\\n\\n\\ndef _get_standalone_block_dependency(\\n    builder: StandaloneBlockModelBuilder,\\n    code_content: str,\\n    dependency_creator: Callable[[str], DependencyModel],\\n) -> DependencyModel | None:\\n    \"\"\"\\n    Identifies if the given standalone block is a dependency based on variable usage.\\n\\n    This function checks if any of the variable assignments in the standalone block are used in the given code content.\\n    If so, it returns the ID of the standalone block builder.\\n\\n    Args:\\n        builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\\n        code_content (str): The code content to analyze for variable usage.\\n\\n    Returns:\\n        str | None: The ID of the standalone block builder if a dependency is found, otherwise None.\\n    \"\"\"\\n\\n    variables: list[\\n        str\\n    ] | None = builder.standalone_block_attributes.variable_assignments\\n    if variables:\\n        for variable in variables:\\n            if re.search(rf\"\\\\b{variable}\\\\b\\\\s*=\", code_content) is None and re.search(\\n                rf\"\\\\b{variable}\\\\b\", code_content\\n            ):\\n                return dependency_creator(builder.id)\\n\\n\\ndef _gather_standalone_block_dependency_for_standalone_block(\\n    builder: StandaloneBlockModelBuilder,\\n    code_content: str,\\n    dependency_creator: Callable[[str], DependencyModel],\\n) -> DependencyModel | None:\\n    \"\"\"\\n    Determines if a given standalone block is a dependency for another standalone block.\\n\\n    This function checks if any of the variable assignments in the provided standalone block\\n    are present in the given code content of another standalone block.\\n\\n    Args:\\n        builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\\n        code_content (str): The code content of another standalone block to analyze.\\n\\n    Returns:\\n        str | None: The ID of the standalone block builder if a dependency is found, otherwise None.\\n    \"\"\"\\n\\n    variables: list[\\n        str\\n    ] | None = builder.standalone_block_attributes.variable_assignments\\n    if variables:\\n        for variable in variables:\\n            if variable in code_content:\\n                return dependency_creator(builder.id)\\n\\n\\ndef _not_same_builder(\\n    builder: ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder,\\n    block_builder: ClassModelBuilder\\n    | FunctionModelBuilder\\n    | StandaloneBlockModelBuilder,\\n) -> bool:\\n    \"\"\"Checks if the given builders are not the same, returning boolean.\"\"\"\\n    return builder != block_builder\\n\\n\\ndef _gather_non_import_dependencies(\\n    children_builders: Sequence[\\n        ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\\n    ],\\n    block_builder: ClassModelBuilder\\n    | FunctionModelBuilder\\n    | StandaloneBlockModelBuilder,\\n    code_content: str,\\n    dependency_creator: Callable[[str], DependencyModel],\\n) -> list[DependencyModel]:\\n    \"\"\"\\n    Gather non-import dependencies from the given `children_builders` and `block_builder`\\n    based on the provided `code_content`.\\n\\n    Args:\\n        children_builders (list): List of builders representing child nodes.\\n        block_builder: Builder representing the current block.\\n        code_content (str): Content of the code.\\n\\n    Returns:\\n        list: List of dependencies.\\n    \"\"\"\\n\\n    block_dependencies: list[DependencyModel] = []\\n    for builder in children_builders:\\n        if _not_same_builder(builder, block_builder):\\n            if isinstance(builder, ClassModelBuilder):\\n                if builder.class_attributes.class_name in code_content:\\n                    module_dependency = dependency_creator(builder.id)\\n                    block_dependencies.append(module_dependency)\\n\\n            elif isinstance(builder, FunctionModelBuilder):\\n                if builder.function_attributes.function_name in code_content:\\n                    module_dependency = dependency_creator(builder.id)\\n                    block_dependencies.append(module_dependency)\\n\\n            elif isinstance(builder, StandaloneBlockModelBuilder) and isinstance(\\n                block_builder, StandaloneBlockModelBuilder\\n            ):\\n                module_dependency: DependencyModel | None = (\\n                    _gather_standalone_block_dependency_for_standalone_block(\\n                        builder, code_content, dependency_creator\\n                    )\\n                )\\n                if module_dependency:\\n                    block_dependencies.append(module_dependency)\\n\\n            # TODO: Improve logic to find variable dependencies\\n            elif isinstance(builder, StandaloneBlockModelBuilder):\\n                module_dependency = _get_standalone_block_dependency(\\n                    builder, code_content, dependency_creator\\n                )\\n                if module_dependency:\\n                    block_dependencies.append(module_dependency)\\n\\n    return block_dependencies\\n\\n\\ndef _create_module_dependency_model(module_code_block_id: str) -> DependencyModel:\\n    return DependencyModel(code_block_id=module_code_block_id)\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef gather_and_set_children_dependencies(module_builder: ModuleModelBuilder) -> None:\\\\n    \"\"\"\\\\n    Gathers and sets dependencies for each child code block in the module.\\\\n\\\\n    This function iterates over each child builder of the module builder, gathers import and non-import dependencies,\\\\n    and sets these dependencies for each block.\\\\n\\\\n    Args:\\\\n        module_builder (ModuleModelBuilder): A builder object representing the entire module.\\\\n\\\\n    Example:\\\\n        module_builder = ModuleModelBuilder(...)  # initialize with necessary parameters\\\\n        gather_and_set_children_dependencies(module_builder)\\\\n        # After execution, each child block builder of the module_builder will have its dependencies set.\\\\n    \"\"\"\\\\n\\\\n    for block_builder in module_builder.children_builders:\\\\n        block_dependencies: list[ImportModel | DependencyModel] = []\\\\n        code_content: str = block_builder.common_attributes.code_content\\\\n\\\\n        import_dependencies: list[ImportModel] = _gather_import_dependencies(\\\\n            module_builder.module_attributes.imports, code_content\\\\n        )\\\\n        block_dependencies.extend(import_dependencies)\\\\n\\\\n        non_import_dependencies: list[\\\\n            DependencyModel\\\\n        ] = _gather_non_import_dependencies(\\\\n            module_builder.children_builders,\\\\n            block_builder,\\\\n            code_content,\\\\n            _create_module_dependency_model,\\\\n        )\\\\n        block_dependencies.extend(non_import_dependencies)\\\\n\\\\n        block_builder.set_dependencies(block_dependencies)\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport re\\\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _gather_import_dependencies(\\\\n    imports: list[ImportModel] | None, code_content: str\\\\n) -> list[ImportModel]:\\\\n    \"\"\"\\\\n    Gathers import dependencies from the provided code content.\\\\n\\\\n    This function checks for the presence of import names (and their aliases) in the given code content\\\\n    and returns a list of import models that are dependencies for the code block.\\\\n\\\\n    Args:\\\\n        imports (list[ImportModel] | None): A list of import models to check against the code content.\\\\n        code_content (str): The string content of the code block being analyzed.\\\\n\\\\n    Returns:\\\\n        list[ImportModel]: A list of import models that the code content depends on.\\\\n    \"\"\"\\\\n\\\\n    block_dependencies: list[ImportModel] = []\\\\n\\\\n    if imports:\\\\n        for import_model in imports:\\\\n            for import_name_model in import_model.import_names:\\\\n                if import_name_model.as_name:\\\\n                    if import_name_model.as_name in code_content:\\\\n                        block_dependencies.append(import_model)\\\\n\\\\n                if import_name_model.name in code_content:\\\\n                    block_dependencies.append(import_model)\\\\n\\\\n    return block_dependencies\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport re\\\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _get_standalone_block_dependency(\\\\n    builder: StandaloneBlockModelBuilder,\\\\n    code_content: str,\\\\n    dependency_creator: Callable[[str], DependencyModel],\\\\n) -> DependencyModel | None:\\\\n    \"\"\"\\\\n    Identifies if the given standalone block is a dependency based on variable usage.\\\\n\\\\n    This function checks if any of the variable assignments in the standalone block are used in the given code content.\\\\n    If so, it returns the ID of the standalone block builder.\\\\n\\\\n    Args:\\\\n        builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\\\\n        code_content (str): The code content to analyze for variable usage.\\\\n\\\\n    Returns:\\\\n        str | None: The ID of the standalone block builder if a dependency is found, otherwise None.\\\\n    \"\"\"\\\\n\\\\n    variables: list[\\\\n        str\\\\n    ] | None = builder.standalone_block_attributes.variable_assignments\\\\n    if variables:\\\\n        for variable in variables:\\\\n            if re.search(rf\"\\\\\\\\b{variable}\\\\\\\\b\\\\\\\\s*=\", code_content) is None and re.search(\\\\n                rf\"\\\\\\\\b{variable}\\\\\\\\b\", code_content\\\\n            ):\\\\n                return dependency_creator(builder.id)\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport re\\\\nfrom typing import Callable, Sequence\\\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _gather_standalone_block_dependency_for_standalone_block(\\\\n    builder: StandaloneBlockModelBuilder,\\\\n    code_content: str,\\\\n    dependency_creator: Callable[[str], DependencyModel],\\\\n) -> DependencyModel | None:\\\\n    \"\"\"\\\\n    Determines if a given standalone block is a dependency for another standalone block.\\\\n\\\\n    This function checks if any of the variable assignments in the provided standalone block\\\\n    are present in the given code content of another standalone block.\\\\n\\\\n    Args:\\\\n        builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\\\\n        code_content (str): The code content of another standalone block to analyze.\\\\n\\\\n    Returns:\\\\n        str | None: The ID of the standalone block builder if a dependency is found, otherwise None.\\\\n    \"\"\"\\\\n\\\\n    variables: list[\\\\n        str\\\\n    ] | None = builder.standalone_block_attributes.variable_assignments\\\\n    if variables:\\\\n        for variable in variables:\\\\n            if variable in code_content:\\\\n                return dependency_creator(builder.id)\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport re\\\\nfrom typing import Callable, Sequence\\\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _not_same_builder(\\\\n    builder: ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder,\\\\n    block_builder: ClassModelBuilder\\\\n    | FunctionModelBuilder\\\\n    | StandaloneBlockModelBuilder,\\\\n) -> bool:\\\\n    \"\"\"Checks if the given builders are not the same, returning boolean.\"\"\"\\\\n    return builder != block_builder\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport re\\\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _gather_non_import_dependencies(\\\\n    children_builders: Sequence[\\\\n        ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\\\\n    ],\\\\n    block_builder: ClassModelBuilder\\\\n    | FunctionModelBuilder\\\\n    | StandaloneBlockModelBuilder,\\\\n    code_content: str,\\\\n    dependency_creator: Callable[[str], DependencyModel],\\\\n) -> list[DependencyModel]:\\\\n    \"\"\"\\\\n    Gather non-import dependencies from the given `children_builders` and `block_builder`\\\\n    based on the provided `code_content`.\\\\n\\\\n    Args:\\\\n        children_builders (list): List of builders representing child nodes.\\\\n        block_builder: Builder representing the current block.\\\\n        code_content (str): Content of the code.\\\\n\\\\n    Returns:\\\\n        list: List of dependencies.\\\\n    \"\"\"\\\\n\\\\n    block_dependencies: list[DependencyModel] = []\\\\n    for builder in children_builders:\\\\n        if _not_same_builder(builder, block_builder):\\\\n            if isinstance(builder, ClassModelBuilder):\\\\n                if builder.class_attributes.class_name in code_content:\\\\n                    module_dependency = dependency_creator(builder.id)\\\\n                    block_dependencies.append(module_dependency)\\\\n\\\\n            elif isinstance(builder, FunctionModelBuilder):\\\\n                if builder.function_attributes.function_name in code_content:\\\\n                    module_dependency = dependency_creator(builder.id)\\\\n                    block_dependencies.append(module_dependency)\\\\n\\\\n            elif isinstance(builder, StandaloneBlockModelBuilder) and isinstance(\\\\n                block_builder, StandaloneBlockModelBuilder\\\\n            ):\\\\n                module_dependency: DependencyModel | None = (\\\\n                    _gather_standalone_block_dependency_for_standalone_block(\\\\n                        builder, code_content, dependency_creator\\\\n                    )\\\\n                )\\\\n                if module_dependency:\\\\n                    block_dependencies.append(module_dependency)\\\\n\\\\n            # TODO: Improve logic to find variable dependencies\\\\n            elif isinstance(builder, StandaloneBlockModelBuilder):\\\\n                module_dependency = _get_standalone_block_dependency(\\\\n                    builder, code_content, dependency_creator\\\\n                )\\\\n                if module_dependency:\\\\n                    block_dependencies.append(module_dependency)\\\\n\\\\n    return block_dependencies\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport re\\\\nfrom typing import Callable, Sequence\\\\nfrom typing import Callable, Sequence\\\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _create_module_dependency_model(module_code_block_id: str) -> DependencyModel:\\\\n    return DependencyModel(code_block_id=module_code_block_id)\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport re\\\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport re\\nfrom typing import Callable, Sequence\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "function_name": "gather_and_set_children_dependencies",
            "docstring": "Gathers and sets dependencies for each child code block in the module.\n\nThis function iterates over each child builder of the module builder, gathers import and non-import dependencies,\nand sets these dependencies for each block.\n\nArgs:\n    module_builder (ModuleModelBuilder): A builder object representing the entire module.\n\nExample:\n    module_builder = ModuleModelBuilder(...)  # initialize with necessary parameters\n    gather_and_set_children_dependencies(module_builder)\n    # After execution, each child block builder of the module_builder will have its dependencies set.",
            "decorators": null,
            "parameters": null,
            "returns": "None",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-gather_and_set_children_dependencies",
            "parent_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 15,
            "end_line_num": 53,
            "code_content": "\n\ndef gather_and_set_children_dependencies(module_builder: ModuleModelBuilder) -> None:\n    \"\"\"\n    Gathers and sets dependencies for each child code block in the module.\n\n    This function iterates over each child builder of the module builder, gathers import and non-import dependencies,\n    and sets these dependencies for each block.\n\n    Args:\n        module_builder (ModuleModelBuilder): A builder object representing the entire module.\n\n    Example:\n        module_builder = ModuleModelBuilder(...)  # initialize with necessary parameters\n        gather_and_set_children_dependencies(module_builder)\n        # After execution, each child block builder of the module_builder will have its dependencies set.\n    \"\"\"\n\n    for block_builder in module_builder.children_builders:\n        block_dependencies: list[ImportModel | DependencyModel] = []\n        code_content: str = block_builder.common_attributes.code_content\n\n        import_dependencies: list[ImportModel] = _gather_import_dependencies(\n            module_builder.module_attributes.imports, code_content\n        )\n        block_dependencies.extend(import_dependencies)\n\n        non_import_dependencies: list[\n            DependencyModel\n        ] = _gather_non_import_dependencies(\n            module_builder.children_builders,\n            block_builder,\n            code_content,\n            _create_module_dependency_model,\n        )\n        block_dependencies.extend(non_import_dependencies)\n\n        block_builder.set_dependencies(block_dependencies)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_gather_import_dependencies"
                },
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_gather_non_import_dependencies"
                },
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_create_module_dependency_model"
                },
                {
                    "import_names": [
                        {
                            "name": "re",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ModuleModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.module_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                        },
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                        },
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef gather_and_set_children_dependencies(module_builder: ModuleModelBuilder) -> None:\\n    \"\"\"\\n    Gathers and sets dependencies for each child code block in the module.\\n\\n    This function iterates over each child builder of the module builder, gathers import and non-import dependencies,\\n    and sets these dependencies for each block.\\n\\n    Args:\\n        module_builder (ModuleModelBuilder): A builder object representing the entire module.\\n\\n    Example:\\n        module_builder = ModuleModelBuilder(...)  # initialize with necessary parameters\\n        gather_and_set_children_dependencies(module_builder)\\n        # After execution, each child block builder of the module_builder will have its dependencies set.\\n    \"\"\"\\n\\n    for block_builder in module_builder.children_builders:\\n        block_dependencies: list[ImportModel | DependencyModel] = []\\n        code_content: str = block_builder.common_attributes.code_content\\n\\n        import_dependencies: list[ImportModel] = _gather_import_dependencies(\\n            module_builder.module_attributes.imports, code_content\\n        )\\n        block_dependencies.extend(import_dependencies)\\n\\n        non_import_dependencies: list[\\n            DependencyModel\\n        ] = _gather_non_import_dependencies(\\n            module_builder.children_builders,\\n            block_builder,\\n            code_content,\\n            _create_module_dependency_model,\\n        )\\n        block_dependencies.extend(non_import_dependencies)\\n\\n        block_builder.set_dependencies(block_dependencies)\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport re\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_gather_import_dependencies",
            "docstring": "Gathers import dependencies from the provided code content.\n\nThis function checks for the presence of import names (and their aliases) in the given code content\nand returns a list of import models that are dependencies for the code block.\n\nArgs:\n    imports (list[ImportModel] | None): A list of import models to check against the code content.\n    code_content (str): The string content of the code block being analyzed.\n\nReturns:\n    list[ImportModel]: A list of import models that the code content depends on.",
            "decorators": null,
            "parameters": null,
            "returns": "list[ImportModel]",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_gather_import_dependencies",
            "parent_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 53,
            "end_line_num": 85,
            "code_content": "\n\ndef _gather_import_dependencies(\n    imports: list[ImportModel] | None, code_content: str\n) -> list[ImportModel]:\n    \"\"\"\n    Gathers import dependencies from the provided code content.\n\n    This function checks for the presence of import names (and their aliases) in the given code content\n    and returns a list of import models that are dependencies for the code block.\n\n    Args:\n        imports (list[ImportModel] | None): A list of import models to check against the code content.\n        code_content (str): The string content of the code block being analyzed.\n\n    Returns:\n        list[ImportModel]: A list of import models that the code content depends on.\n    \"\"\"\n\n    block_dependencies: list[ImportModel] = []\n\n    if imports:\n        for import_model in imports:\n            for import_name_model in import_model.import_names:\n                if import_name_model.as_name:\n                    if import_name_model.as_name in code_content:\n                        block_dependencies.append(import_model)\n\n                if import_name_model.name in code_content:\n                    block_dependencies.append(import_model)\n\n    return block_dependencies\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "re",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                        },
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _gather_import_dependencies(\\n    imports: list[ImportModel] | None, code_content: str\\n) -> list[ImportModel]:\\n    \"\"\"\\n    Gathers import dependencies from the provided code content.\\n\\n    This function checks for the presence of import names (and their aliases) in the given code content\\n    and returns a list of import models that are dependencies for the code block.\\n\\n    Args:\\n        imports (list[ImportModel] | None): A list of import models to check against the code content.\\n        code_content (str): The string content of the code block being analyzed.\\n\\n    Returns:\\n        list[ImportModel]: A list of import models that the code content depends on.\\n    \"\"\"\\n\\n    block_dependencies: list[ImportModel] = []\\n\\n    if imports:\\n        for import_model in imports:\\n            for import_name_model in import_model.import_names:\\n                if import_name_model.as_name:\\n                    if import_name_model.as_name in code_content:\\n                        block_dependencies.append(import_model)\\n\\n                if import_name_model.name in code_content:\\n                    block_dependencies.append(import_model)\\n\\n    return block_dependencies\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport re\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_get_standalone_block_dependency",
            "docstring": "Identifies if the given standalone block is a dependency based on variable usage.\n\nThis function checks if any of the variable assignments in the standalone block are used in the given code content.\nIf so, it returns the ID of the standalone block builder.\n\nArgs:\n    builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\n    code_content (str): The code content to analyze for variable usage.\n\nReturns:\n    str | None: The ID of the standalone block builder if a dependency is found, otherwise None.",
            "decorators": null,
            "parameters": null,
            "returns": "DependencyModel | None",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_get_standalone_block_dependency",
            "parent_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 85,
            "end_line_num": 115,
            "code_content": "\n\ndef _get_standalone_block_dependency(\n    builder: StandaloneBlockModelBuilder,\n    code_content: str,\n    dependency_creator: Callable[[str], DependencyModel],\n) -> DependencyModel | None:\n    \"\"\"\n    Identifies if the given standalone block is a dependency based on variable usage.\n\n    This function checks if any of the variable assignments in the standalone block are used in the given code content.\n    If so, it returns the ID of the standalone block builder.\n\n    Args:\n        builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\n        code_content (str): The code content to analyze for variable usage.\n\n    Returns:\n        str | None: The ID of the standalone block builder if a dependency is found, otherwise None.\n    \"\"\"\n\n    variables: list[\n        str\n    ] | None = builder.standalone_block_attributes.variable_assignments\n    if variables:\n        for variable in variables:\n            if re.search(rf\"\\b{variable}\\b\\s*=\", code_content) is None and re.search(\n                rf\"\\b{variable}\\b\", code_content\n            ):\n                return dependency_creator(builder.id)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "re",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Callable",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Sequence",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "StandaloneBlockModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.standalone_block_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                        },
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _get_standalone_block_dependency(\\n    builder: StandaloneBlockModelBuilder,\\n    code_content: str,\\n    dependency_creator: Callable[[str], DependencyModel],\\n) -> DependencyModel | None:\\n    \"\"\"\\n    Identifies if the given standalone block is a dependency based on variable usage.\\n\\n    This function checks if any of the variable assignments in the standalone block are used in the given code content.\\n    If so, it returns the ID of the standalone block builder.\\n\\n    Args:\\n        builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\\n        code_content (str): The code content to analyze for variable usage.\\n\\n    Returns:\\n        str | None: The ID of the standalone block builder if a dependency is found, otherwise None.\\n    \"\"\"\\n\\n    variables: list[\\n        str\\n    ] | None = builder.standalone_block_attributes.variable_assignments\\n    if variables:\\n        for variable in variables:\\n            if re.search(rf\"\\\\b{variable}\\\\b\\\\s*=\", code_content) is None and re.search(\\n                rf\"\\\\b{variable}\\\\b\", code_content\\n            ):\\n                return dependency_creator(builder.id)\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport re\\nfrom typing import Callable, Sequence\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_gather_standalone_block_dependency_for_standalone_block",
            "docstring": "Determines if a given standalone block is a dependency for another standalone block.\n\nThis function checks if any of the variable assignments in the provided standalone block\nare present in the given code content of another standalone block.\n\nArgs:\n    builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\n    code_content (str): The code content of another standalone block to analyze.\n\nReturns:\n    str | None: The ID of the standalone block builder if a dependency is found, otherwise None.",
            "decorators": null,
            "parameters": null,
            "returns": "DependencyModel | None",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_gather_standalone_block_dependency_for_standalone_block",
            "parent_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 115,
            "end_line_num": 143,
            "code_content": "\n\ndef _gather_standalone_block_dependency_for_standalone_block(\n    builder: StandaloneBlockModelBuilder,\n    code_content: str,\n    dependency_creator: Callable[[str], DependencyModel],\n) -> DependencyModel | None:\n    \"\"\"\n    Determines if a given standalone block is a dependency for another standalone block.\n\n    This function checks if any of the variable assignments in the provided standalone block\n    are present in the given code content of another standalone block.\n\n    Args:\n        builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\n        code_content (str): The code content of another standalone block to analyze.\n\n    Returns:\n        str | None: The ID of the standalone block builder if a dependency is found, otherwise None.\n    \"\"\"\n\n    variables: list[\n        str\n    ] | None = builder.standalone_block_attributes.variable_assignments\n    if variables:\n        for variable in variables:\n            if variable in code_content:\n                return dependency_creator(builder.id)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "re",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Callable",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Sequence",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "StandaloneBlockModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.standalone_block_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                        },
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _gather_standalone_block_dependency_for_standalone_block(\\n    builder: StandaloneBlockModelBuilder,\\n    code_content: str,\\n    dependency_creator: Callable[[str], DependencyModel],\\n) -> DependencyModel | None:\\n    \"\"\"\\n    Determines if a given standalone block is a dependency for another standalone block.\\n\\n    This function checks if any of the variable assignments in the provided standalone block\\n    are present in the given code content of another standalone block.\\n\\n    Args:\\n        builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\\n        code_content (str): The code content of another standalone block to analyze.\\n\\n    Returns:\\n        str | None: The ID of the standalone block builder if a dependency is found, otherwise None.\\n    \"\"\"\\n\\n    variables: list[\\n        str\\n    ] | None = builder.standalone_block_attributes.variable_assignments\\n    if variables:\\n        for variable in variables:\\n            if variable in code_content:\\n                return dependency_creator(builder.id)\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport re\\nfrom typing import Callable, Sequence\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_not_same_builder",
            "docstring": "Checks if the given builders are not the same, returning boolean.",
            "decorators": null,
            "parameters": null,
            "returns": "bool",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_not_same_builder",
            "parent_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 143,
            "end_line_num": 153,
            "code_content": "\n\ndef _not_same_builder(\n    builder: ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder,\n    block_builder: ClassModelBuilder\n    | FunctionModelBuilder\n    | StandaloneBlockModelBuilder,\n) -> bool:\n    \"\"\"Checks if the given builders are not the same, returning boolean.\"\"\"\n    return builder != block_builder\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "re",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ClassModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.class_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "FunctionModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.function_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "StandaloneBlockModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.standalone_block_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _not_same_builder(\\n    builder: ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder,\\n    block_builder: ClassModelBuilder\\n    | FunctionModelBuilder\\n    | StandaloneBlockModelBuilder,\\n) -> bool:\\n    \"\"\"Checks if the given builders are not the same, returning boolean.\"\"\"\\n    return builder != block_builder\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport re\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_gather_non_import_dependencies",
            "docstring": "Gather non-import dependencies from the given `children_builders` and `block_builder`\nbased on the provided `code_content`.\n\nArgs:\n    children_builders (list): List of builders representing child nodes.\n    block_builder: Builder representing the current block.\n    code_content (str): Content of the code.\n\nReturns:\n    list: List of dependencies.",
            "decorators": null,
            "parameters": null,
            "returns": "list[DependencyModel]",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_gather_non_import_dependencies",
            "parent_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 153,
            "end_line_num": 211,
            "code_content": "\n\ndef _gather_non_import_dependencies(\n    children_builders: Sequence[\n        ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\n    ],\n    block_builder: ClassModelBuilder\n    | FunctionModelBuilder\n    | StandaloneBlockModelBuilder,\n    code_content: str,\n    dependency_creator: Callable[[str], DependencyModel],\n) -> list[DependencyModel]:\n    \"\"\"\n    Gather non-import dependencies from the given `children_builders` and `block_builder`\n    based on the provided `code_content`.\n\n    Args:\n        children_builders (list): List of builders representing child nodes.\n        block_builder: Builder representing the current block.\n        code_content (str): Content of the code.\n\n    Returns:\n        list: List of dependencies.\n    \"\"\"\n\n    block_dependencies: list[DependencyModel] = []\n    for builder in children_builders:\n        if _not_same_builder(builder, block_builder):\n            if isinstance(builder, ClassModelBuilder):\n                if builder.class_attributes.class_name in code_content:\n                    module_dependency = dependency_creator(builder.id)\n                    block_dependencies.append(module_dependency)\n\n            elif isinstance(builder, FunctionModelBuilder):\n                if builder.function_attributes.function_name in code_content:\n                    module_dependency = dependency_creator(builder.id)\n                    block_dependencies.append(module_dependency)\n\n            elif isinstance(builder, StandaloneBlockModelBuilder) and isinstance(\n                block_builder, StandaloneBlockModelBuilder\n            ):\n                module_dependency: DependencyModel | None = (\n                    _gather_standalone_block_dependency_for_standalone_block(\n                        builder, code_content, dependency_creator\n                    )\n                )\n                if module_dependency:\n                    block_dependencies.append(module_dependency)\n\n            # TODO: Improve logic to find variable dependencies\n            elif isinstance(builder, StandaloneBlockModelBuilder):\n                module_dependency = _get_standalone_block_dependency(\n                    builder, code_content, dependency_creator\n                )\n                if module_dependency:\n                    block_dependencies.append(module_dependency)\n\n    return block_dependencies\n",
            "important_comments": [
                {
                    "content": "# TODO: Improve logic to find variable dependencies",
                    "comment_types": [
                        "TODO"
                    ]
                }
            ],
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_get_standalone_block_dependency"
                },
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_gather_standalone_block_dependency_for_standalone_block"
                },
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_not_same_builder"
                },
                {
                    "import_names": [
                        {
                            "name": "re",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Callable",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Sequence",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Callable",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Sequence",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ClassModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.class_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "FunctionModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.function_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "StandaloneBlockModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.standalone_block_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                        },
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _gather_non_import_dependencies(\\n    children_builders: Sequence[\\n        ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\\n    ],\\n    block_builder: ClassModelBuilder\\n    | FunctionModelBuilder\\n    | StandaloneBlockModelBuilder,\\n    code_content: str,\\n    dependency_creator: Callable[[str], DependencyModel],\\n) -> list[DependencyModel]:\\n    \"\"\"\\n    Gather non-import dependencies from the given `children_builders` and `block_builder`\\n    based on the provided `code_content`.\\n\\n    Args:\\n        children_builders (list): List of builders representing child nodes.\\n        block_builder: Builder representing the current block.\\n        code_content (str): Content of the code.\\n\\n    Returns:\\n        list: List of dependencies.\\n    \"\"\"\\n\\n    block_dependencies: list[DependencyModel] = []\\n    for builder in children_builders:\\n        if _not_same_builder(builder, block_builder):\\n            if isinstance(builder, ClassModelBuilder):\\n                if builder.class_attributes.class_name in code_content:\\n                    module_dependency = dependency_creator(builder.id)\\n                    block_dependencies.append(module_dependency)\\n\\n            elif isinstance(builder, FunctionModelBuilder):\\n                if builder.function_attributes.function_name in code_content:\\n                    module_dependency = dependency_creator(builder.id)\\n                    block_dependencies.append(module_dependency)\\n\\n            elif isinstance(builder, StandaloneBlockModelBuilder) and isinstance(\\n                block_builder, StandaloneBlockModelBuilder\\n            ):\\n                module_dependency: DependencyModel | None = (\\n                    _gather_standalone_block_dependency_for_standalone_block(\\n                        builder, code_content, dependency_creator\\n                    )\\n                )\\n                if module_dependency:\\n                    block_dependencies.append(module_dependency)\\n\\n            # TODO: Improve logic to find variable dependencies\\n            elif isinstance(builder, StandaloneBlockModelBuilder):\\n                module_dependency = _get_standalone_block_dependency(\\n                    builder, code_content, dependency_creator\\n                )\\n                if module_dependency:\\n                    block_dependencies.append(module_dependency)\\n\\n    return block_dependencies\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport re\\nfrom typing import Callable, Sequence\\nfrom typing import Callable, Sequence\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_create_module_dependency_model",
            "docstring": null,
            "decorators": null,
            "parameters": null,
            "returns": "DependencyModel",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_create_module_dependency_model",
            "parent_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 211,
            "end_line_num": 215,
            "code_content": "\n\ndef _create_module_dependency_model(module_code_block_id: str) -> DependencyModel:\n    return DependencyModel(code_block_id=module_code_block_id)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "re",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                        },
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _create_module_dependency_model(module_code_block_id: str) -> DependencyModel:\\n    return DependencyModel(code_block_id=module_code_block_id)\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport re\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        }
    ]
}