{
    "file_path": "utilities/logger/decorators.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "wraps",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "functools",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "inspect",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "FrameInfo",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "inspect",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "LogRecord",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Logger",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "logging",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Callable",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "extract_code_content",
                    "as_name": null,
                    "local_block_id": "python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_code_content"
                },
                {
                    "name": "extract_stripped_code_content",
                    "as_name": null,
                    "local_block_id": "python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_stripped_code_content"
                }
            ],
            "imported_from": "python_parser.visitors.node_processing.common_functions",
            "import_module_type": "LOCAL",
            "local_module_id": "python_parser:visitors:node_processing:common_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "NodeAndPositionData",
                    "as_name": null,
                    "local_block_id": "utilities:processing_context.py__*__MODULE__*__CLASS-NodeAndPositionData"
                },
                {
                    "name": "LoggingCallerInfo",
                    "as_name": null,
                    "local_block_id": "utilities:processing_context.py__*__MODULE__*__CLASS-LoggingCallerInfo"
                }
            ],
            "imported_from": "utilities.processing_context",
            "import_module_type": "LOCAL",
            "local_module_id": "utilities:processing_context.py__*__MODULE"
        }
    ],
    "id": "utilities:logger:decorators.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 154,
    "code_content": "from functools import wraps\nimport inspect\nfrom inspect import FrameInfo\nimport logging\nfrom logging import LogRecord, Logger\nfrom typing import Callable\nimport libcst\n\n\nfrom python_parser.visitors.node_processing.common_functions import (\n    extract_code_content,\n    extract_stripped_code_content,\n)\nfrom utilities.processing_context import LoggingCallerInfo, NodeAndPositionData\n\n\ndef logging_decorator(\n    level=logging.DEBUG,\n    *,\n    message: str | None = None,\n    syntax_highlighting: bool = False,\n) -> Callable:\n    \"\"\"\n    A decorator for adding enhanced logging to functions, with optional syntax highlighting.\n\n    This decorator logs the call to the decorated function at the specified logging level. If syntax_highlighting is enabled and the first argument of the function is a libcst.CSTNode, the decorator logs the node's content with syntax highlighting.\n\n    Args:\n        level (int): The logging level. Defaults to logging.DEBUG.\n        message (str | None): Custom log message. If None, a default message is generated.\n        syntax_highlighting (bool): If True, enables syntax highlighting for libcst.CSTNode arguments.\n\n    Returns:\n        Callable: The decorated function with enhanced logging capability.\n\n    Example:\n        >>> @logging_decorator(level=logging.INFO, message=\"Function start\", syntax_highlighting=True)\n        >>> def sample_function(arg1):\n        >>>     pass\n        # This decorates 'sample_function' with enhanced logging at INFO level.\n    \"\"\"\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            log_message: str = (\n                message if message else (f\"Calling function: {func.__name__}\")\n            )\n            frame_info: inspect.FrameInfo = inspect.stack()[1]\n            caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\n            code_content: str = _gather_code_content(syntax_highlighting, args)\n            logger: Logger = _get_logger(caller_info.caller_module_name)\n\n            _handle_logging(\n                logger,\n                caller_info,\n                level,\n                log_message,\n                syntax_highlighting,\n                code_content,\n            )\n\n            return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n\n\ndef _gather_log_record_context(\n    caller_info: LoggingCallerInfo, level: int, msg: str\n) -> logging.LogRecord:\n    \"\"\"Creates and returns a LogRecord with specified context information.\"\"\"\n\n    return logging.LogRecord(\n        name=caller_info.caller_module_name,\n        level=level,\n        pathname=caller_info.caller_file_path,\n        lineno=caller_info.caller_line_no,\n        msg=msg,\n        args=None,\n        exc_info=None,\n    )\n\n\ndef _get_caller_info(frame_info: FrameInfo) -> LoggingCallerInfo:\n    \"\"\"Extracts and returns caller information from a frame object.\"\"\"\n\n    caller_module_name: str = frame_info.filename.split(\"/\")[-1].split(\".\")[0]\n    caller_file_path: str = frame_info.filename\n    caller_line_no: int = frame_info.lineno\n    return LoggingCallerInfo(caller_module_name, caller_file_path, caller_line_no)\n\n\ndef _get_logger(caller_module_name: str) -> Logger:\n    \"\"\"Retrieves and returns a Logger instance for the specified module name.\"\"\"\n\n    return logging.getLogger(caller_module_name)\n\n\ndef _gather_code_content(syntax_highlighting: bool, args: tuple) -> str:\n    \"\"\"Gathers and returns code content for logging, if `syntax_highlighting` else returns empty string.\"\"\"\n\n    if not syntax_highlighting or not args:\n        return \"\"\n\n    arg_0 = args[0]\n    content: str = \"\"\n\n    if isinstance(arg_0, libcst.CSTNode):\n        content = extract_code_content(arg_0)\n    elif isinstance(arg_0, list) and all(\n        isinstance(node, libcst.CSTNode) for node in arg_0\n    ):\n        content = \"\\n\".join(extract_stripped_code_content(node) for node in arg_0)\n    elif isinstance(arg_0, NodeAndPositionData):\n        content = \"\\n\".join(extract_stripped_code_content(node) for node in arg_0.nodes)\n\n    return content\n\n\ndef _handle_syntax_highlighting(\n    syntax_highlighting: bool,\n    log_record: logging.LogRecord,\n    logger: Logger,\n    content: str,\n) -> None:\n    \"\"\"Handles syntax highlighting for the log record if enabled.\"\"\"\n\n    if syntax_highlighting:\n        log_record.syntax_highlight = syntax_highlighting\n        log_record.content = content\n        logger.handle(log_record)\n\n\ndef _handle_logging(\n    logger: Logger,\n    caller_info: LoggingCallerInfo,\n    level: int,\n    log_message: str,\n    syntax_highlighting: bool,\n    code_content: str,\n) -> None:\n    \"\"\"Handles the logging process, including the creation and handling of log records.\"\"\"\n\n    if logger.isEnabledFor(level):\n        log_record: LogRecord = _gather_log_record_context(\n            caller_info, level, log_message\n        )\n        logger.handle(log_record)  # Print log message\n        _handle_syntax_highlighting(\n            syntax_highlighting, log_record, logger, code_content\n        )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nfrom functools import wraps\\nimport inspect\\nfrom inspect import FrameInfo\\nimport logging\\nfrom logging import LogRecord, Logger\\nfrom typing import Callable\\nimport libcst\\n\\n\\nfrom python_parser.visitors.node_processing.common_functions import (\\n    extract_code_content,\\n    extract_stripped_code_content,\\n)\\nfrom utilities.processing_context import LoggingCallerInfo, NodeAndPositionData\\n\\n\\ndef logging_decorator(\\n    level=logging.DEBUG,\\n    *,\\n    message: str | None = None,\\n    syntax_highlighting: bool = False,\\n) -> Callable:\\n    \"\"\"\\n    A decorator for adding enhanced logging to functions, with optional syntax highlighting.\\n\\n    This decorator logs the call to the decorated function at the specified logging level. If syntax_highlighting is enabled and the first argument of the function is a libcst.CSTNode, the decorator logs the node\\'s content with syntax highlighting.\\n\\n    Args:\\n        level (int): The logging level. Defaults to logging.DEBUG.\\n        message (str | None): Custom log message. If None, a default message is generated.\\n        syntax_highlighting (bool): If True, enables syntax highlighting for libcst.CSTNode arguments.\\n\\n    Returns:\\n        Callable: The decorated function with enhanced logging capability.\\n\\n    Example:\\n        >>> @logging_decorator(level=logging.INFO, message=\"Function start\", syntax_highlighting=True)\\n        >>> def sample_function(arg1):\\n        >>>     pass\\n        # This decorates \\'sample_function\\' with enhanced logging at INFO level.\\n    \"\"\"\\n\\n    def decorator(func):\\n        @wraps(func)\\n        def wrapper(*args, **kwargs):\\n            log_message: str = (\\n                message if message else (f\"Calling function: {func.__name__}\")\\n            )\\n            frame_info: inspect.FrameInfo = inspect.stack()[1]\\n            caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\n            code_content: str = _gather_code_content(syntax_highlighting, args)\\n            logger: Logger = _get_logger(caller_info.caller_module_name)\\n\\n            _handle_logging(\\n                logger,\\n                caller_info,\\n                level,\\n                log_message,\\n                syntax_highlighting,\\n                code_content,\\n            )\\n\\n            return func(*args, **kwargs)\\n\\n        return wrapper\\n\\n    return decorator\\n\\n\\ndef _gather_log_record_context(\\n    caller_info: LoggingCallerInfo, level: int, msg: str\\n) -> logging.LogRecord:\\n    \"\"\"Creates and returns a LogRecord with specified context information.\"\"\"\\n\\n    return logging.LogRecord(\\n        name=caller_info.caller_module_name,\\n        level=level,\\n        pathname=caller_info.caller_file_path,\\n        lineno=caller_info.caller_line_no,\\n        msg=msg,\\n        args=None,\\n        exc_info=None,\\n    )\\n\\n\\ndef _get_caller_info(frame_info: FrameInfo) -> LoggingCallerInfo:\\n    \"\"\"Extracts and returns caller information from a frame object.\"\"\"\\n\\n    caller_module_name: str = frame_info.filename.split(\"/\")[-1].split(\".\")[0]\\n    caller_file_path: str = frame_info.filename\\n    caller_line_no: int = frame_info.lineno\\n    return LoggingCallerInfo(caller_module_name, caller_file_path, caller_line_no)\\n\\n\\ndef _get_logger(caller_module_name: str) -> Logger:\\n    \"\"\"Retrieves and returns a Logger instance for the specified module name.\"\"\"\\n\\n    return logging.getLogger(caller_module_name)\\n\\n\\ndef _gather_code_content(syntax_highlighting: bool, args: tuple) -> str:\\n    \"\"\"Gathers and returns code content for logging, if `syntax_highlighting` else returns empty string.\"\"\"\\n\\n    if not syntax_highlighting or not args:\\n        return \"\"\\n\\n    arg_0 = args[0]\\n    content: str = \"\"\\n\\n    if isinstance(arg_0, libcst.CSTNode):\\n        content = extract_code_content(arg_0)\\n    elif isinstance(arg_0, list) and all(\\n        isinstance(node, libcst.CSTNode) for node in arg_0\\n    ):\\n        content = \"\\\\n\".join(extract_stripped_code_content(node) for node in arg_0)\\n    elif isinstance(arg_0, NodeAndPositionData):\\n        content = \"\\\\n\".join(extract_stripped_code_content(node) for node in arg_0.nodes)\\n\\n    return content\\n\\n\\ndef _handle_syntax_highlighting(\\n    syntax_highlighting: bool,\\n    log_record: logging.LogRecord,\\n    logger: Logger,\\n    content: str,\\n) -> None:\\n    \"\"\"Handles syntax highlighting for the log record if enabled.\"\"\"\\n\\n    if syntax_highlighting:\\n        log_record.syntax_highlight = syntax_highlighting\\n        log_record.content = content\\n        logger.handle(log_record)\\n\\n\\ndef _handle_logging(\\n    logger: Logger,\\n    caller_info: LoggingCallerInfo,\\n    level: int,\\n    log_message: str,\\n    syntax_highlighting: bool,\\n    code_content: str,\\n) -> None:\\n    \"\"\"Handles the logging process, including the creation and handling of log records.\"\"\"\\n\\n    if logger.isEnabledFor(level):\\n        log_record: LogRecord = _gather_log_record_context(\\n            caller_info, level, log_message\\n        )\\n        logger.handle(log_record)  # Print log message\\n        _handle_syntax_highlighting(\\n            syntax_highlighting, log_record, logger, code_content\\n        )\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef logging_decorator(\\\\n    level=logging.DEBUG,\\\\n    *,\\\\n    message: str | None = None,\\\\n    syntax_highlighting: bool = False,\\\\n) -> Callable:\\\\n    \"\"\"\\\\n    A decorator for adding enhanced logging to functions, with optional syntax highlighting.\\\\n\\\\n    This decorator logs the call to the decorated function at the specified logging level. If syntax_highlighting is enabled and the first argument of the function is a libcst.CSTNode, the decorator logs the node\\\\\\'s content with syntax highlighting.\\\\n\\\\n    Args:\\\\n        level (int): The logging level. Defaults to logging.DEBUG.\\\\n        message (str | None): Custom log message. If None, a default message is generated.\\\\n        syntax_highlighting (bool): If True, enables syntax highlighting for libcst.CSTNode arguments.\\\\n\\\\n    Returns:\\\\n        Callable: The decorated function with enhanced logging capability.\\\\n\\\\n    Example:\\\\n        >>> @logging_decorator(level=logging.INFO, message=\"Function start\", syntax_highlighting=True)\\\\n        >>> def sample_function(arg1):\\\\n        >>>     pass\\\\n        # This decorates \\\\\\'sample_function\\\\\\' with enhanced logging at INFO level.\\\\n    \"\"\"\\\\n\\\\n    def decorator(func):\\\\n        @wraps(func)\\\\n        def wrapper(*args, **kwargs):\\\\n            log_message: str = (\\\\n                message if message else (f\"Calling function: {func.__name__}\")\\\\n            )\\\\n            frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\n            caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\n            code_content: str = _gather_code_content(syntax_highlighting, args)\\\\n            logger: Logger = _get_logger(caller_info.caller_module_name)\\\\n\\\\n            _handle_logging(\\\\n                logger,\\\\n                caller_info,\\\\n                level,\\\\n                log_message,\\\\n                syntax_highlighting,\\\\n                code_content,\\\\n            )\\\\n\\\\n            return func(*args, **kwargs)\\\\n\\\\n        return wrapper\\\\n\\\\n    return decorator\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\\\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\\\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef decorator(func):\\\\\\\\n    @wraps(func)\\\\\\\\n    def wrapper(*args, **kwargs):\\\\\\\\n        log_message: str = (\\\\\\\\n            message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\n        )\\\\\\\\n        frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\n        caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\n        code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\n        logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\n\\\\\\\\n        _handle_logging(\\\\\\\\n            logger,\\\\\\\\n            caller_info,\\\\\\\\n            level,\\\\\\\\n            log_message,\\\\\\\\n            syntax_highlighting,\\\\\\\\n            code_content,\\\\\\\\n        )\\\\\\\\n\\\\\\\\n        return func(*args, **kwargs)\\\\\\\\n\\\\\\\\n    return wrapper\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nCHILDREN_SUMMARIES:\\\\\\\\n\\\\\\\\nSummary:\\\\\\\\n\\\\\\\\n        [{\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main\\\\\\\\\\\\\\\\nfeatures, and key components.\\\\\\\\\\\\\\\\n\", \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'system\\\\\\\\\\\\\\'}, {\\\\\\\\\\\\\\'content\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nChain of Density Steps:\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\\\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\\\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\\\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\\\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\\\\\\\\\nlonger.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\\\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\\\\\\\\\nthe code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nGuidelines:\\\\\\\\\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'s main functionality.\\\\\\\\\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nCODE:\\\\\\\\\\\\\\\\n```Python\\\\\\\\\\\\\\\\n@wraps(func)\\\\\\\\\\\\\\\\ndef wrapper(*args, **kwargs):\\\\\\\\\\\\\\\\n    log_message: str = (\\\\\\\\\\\\\\\\n        message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\n    frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\\\\\\\\\n    caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\\\\\\\\\n    code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\\\\\\\\\n    logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    _handle_logging(\\\\\\\\\\\\\\\\n        logger,\\\\\\\\\\\\\\\\n        caller_info,\\\\\\\\\\\\\\\\n        level,\\\\\\\\\\\\\\\\n        log_message,\\\\\\\\\\\\\\\\n        syntax_highlighting,\\\\\\\\\\\\\\\\n        code_content,\\\\\\\\\\\\\\\\n    )\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    return func(*args, **kwargs)\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n```\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\', \\\\\\\\\\\\\\'role\\\\\\\\\\\\\\': \\\\\\\\\\\\\\'user\\\\\\\\\\\\\\'}]\\\\\\\\n \\\\\\\\n        \\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom utilities.processing_context import LoggingCallerInfo, NodeAndPositionData\\\\nfrom functools import wraps\\\\nimport inspect\\\\nfrom inspect import FrameInfo\\\\nimport logging\\\\nfrom logging import LogRecord, Logger\\\\nfrom typing import Callable\\\\nimport libcst\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _gather_log_record_context(\\\\n    caller_info: LoggingCallerInfo, level: int, msg: str\\\\n) -> logging.LogRecord:\\\\n    \"\"\"Creates and returns a LogRecord with specified context information.\"\"\"\\\\n\\\\n    return logging.LogRecord(\\\\n        name=caller_info.caller_module_name,\\\\n        level=level,\\\\n        pathname=caller_info.caller_file_path,\\\\n        lineno=caller_info.caller_line_no,\\\\n        msg=msg,\\\\n        args=None,\\\\n        exc_info=None,\\\\n    )\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom utilities.processing_context import LoggingCallerInfo, NodeAndPositionData\\\\nimport logging\\\\nfrom logging import LogRecord, Logger\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _get_caller_info(frame_info: FrameInfo) -> LoggingCallerInfo:\\\\n    \"\"\"Extracts and returns caller information from a frame object.\"\"\"\\\\n\\\\n    caller_module_name: str = frame_info.filename.split(\"/\")[-1].split(\".\")[0]\\\\n    caller_file_path: str = frame_info.filename\\\\n    caller_line_no: int = frame_info.lineno\\\\n    return LoggingCallerInfo(caller_module_name, caller_file_path, caller_line_no)\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom utilities.processing_context import LoggingCallerInfo, NodeAndPositionData\\\\nfrom inspect import FrameInfo\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _get_logger(caller_module_name: str) -> Logger:\\\\n    \"\"\"Retrieves and returns a Logger instance for the specified module name.\"\"\"\\\\n\\\\n    return logging.getLogger(caller_module_name)\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport logging\\\\nfrom logging import LogRecord, Logger\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _gather_code_content(syntax_highlighting: bool, args: tuple) -> str:\\\\n    \"\"\"Gathers and returns code content for logging, if `syntax_highlighting` else returns empty string.\"\"\"\\\\n\\\\n    if not syntax_highlighting or not args:\\\\n        return \"\"\\\\n\\\\n    arg_0 = args[0]\\\\n    content: str = \"\"\\\\n\\\\n    if isinstance(arg_0, libcst.CSTNode):\\\\n        content = extract_code_content(arg_0)\\\\n    elif isinstance(arg_0, list) and all(\\\\n        isinstance(node, libcst.CSTNode) for node in arg_0\\\\n    ):\\\\n        content = \"\\\\\\\\n\".join(extract_stripped_code_content(node) for node in arg_0)\\\\n    elif isinstance(arg_0, NodeAndPositionData):\\\\n        content = \"\\\\\\\\n\".join(extract_stripped_code_content(node) for node in arg_0.nodes)\\\\n\\\\n    return content\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom utilities.processing_context import LoggingCallerInfo, NodeAndPositionData\\\\nimport logging\\\\nimport libcst\\\\nfrom python_parser.visitors.node_processing.common_functions import extract_code_content, extract_stripped_code_content\\\\nfrom python_parser.visitors.node_processing.common_functions import extract_code_content, extract_stripped_code_content\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _handle_syntax_highlighting(\\\\n    syntax_highlighting: bool,\\\\n    log_record: logging.LogRecord,\\\\n    logger: Logger,\\\\n    content: str,\\\\n) -> None:\\\\n    \"\"\"Handles syntax highlighting for the log record if enabled.\"\"\"\\\\n\\\\n    if syntax_highlighting:\\\\n        log_record.syntax_highlight = syntax_highlighting\\\\n        log_record.content = content\\\\n        logger.handle(log_record)\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport logging\\\\nfrom logging import LogRecord, Logger\\\\nfrom logging import LogRecord, Logger\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _handle_logging(\\\\n    logger: Logger,\\\\n    caller_info: LoggingCallerInfo,\\\\n    level: int,\\\\n    log_message: str,\\\\n    syntax_highlighting: bool,\\\\n    code_content: str,\\\\n) -> None:\\\\n    \"\"\"Handles the logging process, including the creation and handling of log records.\"\"\"\\\\n\\\\n    if logger.isEnabledFor(level):\\\\n        log_record: LogRecord = _gather_log_record_context(\\\\n            caller_info, level, log_message\\\\n        )\\\\n        logger.handle(log_record)  # Print log message\\\\n        _handle_syntax_highlighting(\\\\n            syntax_highlighting, log_record, logger, code_content\\\\n        )\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom utilities.processing_context import LoggingCallerInfo, NodeAndPositionData\\\\nimport logging\\\\nfrom logging import LogRecord, Logger\\\\nfrom logging import LogRecord, Logger\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom functools import wraps\\nimport inspect\\nfrom inspect import FrameInfo\\nimport logging\\nfrom logging import LogRecord, Logger\\nfrom typing import Callable\\nimport libcst\\nfrom python_parser.visitors.node_processing.common_functions import extract_code_content, extract_stripped_code_content\\nfrom utilities.processing_context import NodeAndPositionData, LoggingCallerInfo\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "function_name": "logging_decorator",
            "docstring": "A decorator for adding enhanced logging to functions, with optional syntax highlighting.\n\nThis decorator logs the call to the decorated function at the specified logging level. If syntax_highlighting is enabled and the first argument of the function is a libcst.CSTNode, the decorator logs the node's content with syntax highlighting.\n\nArgs:\n    level (int): The logging level. Defaults to logging.DEBUG.\n    message (str | None): Custom log message. If None, a default message is generated.\n    syntax_highlighting (bool): If True, enables syntax highlighting for libcst.CSTNode arguments.\n\nReturns:\n    Callable: The decorated function with enhanced logging capability.\n\nExample:\n    >>> @logging_decorator(level=logging.INFO, message=\"Function start\", syntax_highlighting=True)\n    >>> def sample_function(arg1):\n    >>>     pass\n    # This decorates 'sample_function' with enhanced logging at INFO level.",
            "decorators": null,
            "parameters": null,
            "returns": "Callable",
            "is_method": false,
            "is_async": false,
            "id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator",
            "parent_id": "utilities:logger:decorators.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 15,
            "end_line_num": 68,
            "code_content": "\n\ndef logging_decorator(\n    level=logging.DEBUG,\n    *,\n    message: str | None = None,\n    syntax_highlighting: bool = False,\n) -> Callable:\n    \"\"\"\n    A decorator for adding enhanced logging to functions, with optional syntax highlighting.\n\n    This decorator logs the call to the decorated function at the specified logging level. If syntax_highlighting is enabled and the first argument of the function is a libcst.CSTNode, the decorator logs the node's content with syntax highlighting.\n\n    Args:\n        level (int): The logging level. Defaults to logging.DEBUG.\n        message (str | None): Custom log message. If None, a default message is generated.\n        syntax_highlighting (bool): If True, enables syntax highlighting for libcst.CSTNode arguments.\n\n    Returns:\n        Callable: The decorated function with enhanced logging capability.\n\n    Example:\n        >>> @logging_decorator(level=logging.INFO, message=\"Function start\", syntax_highlighting=True)\n        >>> def sample_function(arg1):\n        >>>     pass\n        # This decorates 'sample_function' with enhanced logging at INFO level.\n    \"\"\"\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            log_message: str = (\n                message if message else (f\"Calling function: {func.__name__}\")\n            )\n            frame_info: inspect.FrameInfo = inspect.stack()[1]\n            caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\n            code_content: str = _gather_code_content(syntax_highlighting, args)\n            logger: Logger = _get_logger(caller_info.caller_module_name)\n\n            _handle_logging(\n                logger,\n                caller_info,\n                level,\n                log_message,\n                syntax_highlighting,\n                code_content,\n            )\n\n            return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-_get_caller_info"
                },
                {
                    "code_block_id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-_get_logger"
                },
                {
                    "code_block_id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-_gather_code_content"
                },
                {
                    "code_block_id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-_handle_logging"
                },
                {
                    "import_names": [
                        {
                            "name": "LoggingCallerInfo",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "NodeAndPositionData",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "utilities.processing_context",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "wraps",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "functools",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "inspect",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "FrameInfo",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "inspect",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "logging",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "LogRecord",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Logger",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "logging",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "Callable",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef logging_decorator(\\n    level=logging.DEBUG,\\n    *,\\n    message: str | None = None,\\n    syntax_highlighting: bool = False,\\n) -> Callable:\\n    \"\"\"\\n    A decorator for adding enhanced logging to functions, with optional syntax highlighting.\\n\\n    This decorator logs the call to the decorated function at the specified logging level. If syntax_highlighting is enabled and the first argument of the function is a libcst.CSTNode, the decorator logs the node\\'s content with syntax highlighting.\\n\\n    Args:\\n        level (int): The logging level. Defaults to logging.DEBUG.\\n        message (str | None): Custom log message. If None, a default message is generated.\\n        syntax_highlighting (bool): If True, enables syntax highlighting for libcst.CSTNode arguments.\\n\\n    Returns:\\n        Callable: The decorated function with enhanced logging capability.\\n\\n    Example:\\n        >>> @logging_decorator(level=logging.INFO, message=\"Function start\", syntax_highlighting=True)\\n        >>> def sample_function(arg1):\\n        >>>     pass\\n        # This decorates \\'sample_function\\' with enhanced logging at INFO level.\\n    \"\"\"\\n\\n    def decorator(func):\\n        @wraps(func)\\n        def wrapper(*args, **kwargs):\\n            log_message: str = (\\n                message if message else (f\"Calling function: {func.__name__}\")\\n            )\\n            frame_info: inspect.FrameInfo = inspect.stack()[1]\\n            caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\n            code_content: str = _gather_code_content(syntax_highlighting, args)\\n            logger: Logger = _get_logger(caller_info.caller_module_name)\\n\\n            _handle_logging(\\n                logger,\\n                caller_info,\\n                level,\\n                log_message,\\n                syntax_highlighting,\\n                code_content,\\n            )\\n\\n            return func(*args, **kwargs)\\n\\n        return wrapper\\n\\n    return decorator\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef decorator(func):\\\\n    @wraps(func)\\\\n    def wrapper(*args, **kwargs):\\\\n        log_message: str = (\\\\n            message if message else (f\"Calling function: {func.__name__}\")\\\\n        )\\\\n        frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\n        caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\n        code_content: str = _gather_code_content(syntax_highlighting, args)\\\\n        logger: Logger = _get_logger(caller_info.caller_module_name)\\\\n\\\\n        _handle_logging(\\\\n            logger,\\\\n            caller_info,\\\\n            level,\\\\n            log_message,\\\\n            syntax_highlighting,\\\\n            code_content,\\\\n        )\\\\n\\\\n        return func(*args, **kwargs)\\\\n\\\\n    return wrapper\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n@wraps(func)\\\\\\\\ndef wrapper(*args, **kwargs):\\\\\\\\n    log_message: str = (\\\\\\\\n        message if message else (f\"Calling function: {func.__name__}\")\\\\\\\\n    )\\\\\\\\n    frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\\\\\n    caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\\\\\n    code_content: str = _gather_code_content(syntax_highlighting, args)\\\\\\\\n    logger: Logger = _get_logger(caller_info.caller_module_name)\\\\\\\\n\\\\\\\\n    _handle_logging(\\\\\\\\n        logger,\\\\\\\\n        caller_info,\\\\\\\\n        level,\\\\\\\\n        log_message,\\\\\\\\n        syntax_highlighting,\\\\\\\\n        code_content,\\\\\\\\n    )\\\\\\\\n\\\\\\\\n    return func(*args, **kwargs)\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom utilities.processing_context import LoggingCallerInfo, NodeAndPositionData\\nfrom functools import wraps\\nimport inspect\\nfrom inspect import FrameInfo\\nimport logging\\nfrom logging import LogRecord, Logger\\nfrom typing import Callable\\nimport libcst\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "decorator",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "Function has no return annotation",
                    "is_method": false,
                    "is_async": false,
                    "id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator__*__FUNCTION-decorator",
                    "parent_id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator",
                    "block_type": "FUNCTION",
                    "start_line_num": 42,
                    "end_line_num": 66,
                    "code_content": "\ndef decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        log_message: str = (\n            message if message else (f\"Calling function: {func.__name__}\")\n        )\n        frame_info: inspect.FrameInfo = inspect.stack()[1]\n        caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\n        code_content: str = _gather_code_content(syntax_highlighting, args)\n        logger: Logger = _get_logger(caller_info.caller_module_name)\n\n        _handle_logging(\n            logger,\n            caller_info,\n            level,\n            log_message,\n            syntax_highlighting,\n            code_content,\n        )\n\n        return func(*args, **kwargs)\n\n    return wrapper\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef decorator(func):\\n    @wraps(func)\\n    def wrapper(*args, **kwargs):\\n        log_message: str = (\\n            message if message else (f\"Calling function: {func.__name__}\")\\n        )\\n        frame_info: inspect.FrameInfo = inspect.stack()[1]\\n        caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\n        code_content: str = _gather_code_content(syntax_highlighting, args)\\n        logger: Logger = _get_logger(caller_info.caller_module_name)\\n\\n        _handle_logging(\\n            logger,\\n            caller_info,\\n            level,\\n            log_message,\\n            syntax_highlighting,\\n            code_content,\\n        )\\n\\n        return func(*args, **kwargs)\\n\\n    return wrapper\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n@wraps(func)\\\\ndef wrapper(*args, **kwargs):\\\\n    log_message: str = (\\\\n        message if message else (f\"Calling function: {func.__name__}\")\\\\n    )\\\\n    frame_info: inspect.FrameInfo = inspect.stack()[1]\\\\n    caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\\\n    code_content: str = _gather_code_content(syntax_highlighting, args)\\\\n    logger: Logger = _get_logger(caller_info.caller_module_name)\\\\n\\\\n    _handle_logging(\\\\n        logger,\\\\n        caller_info,\\\\n        level,\\\\n        log_message,\\\\n        syntax_highlighting,\\\\n        code_content,\\\\n    )\\\\n\\\\n    return func(*args, **kwargs)\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": [
                        {
                            "function_name": "wrapper",
                            "docstring": null,
                            "decorators": [
                                {
                                    "content": "@wraps(func)",
                                    "decorator_name": "wraps",
                                    "decorator_args": [
                                        "func"
                                    ]
                                }
                            ],
                            "parameters": null,
                            "returns": "Function has no return annotation",
                            "is_method": false,
                            "is_async": false,
                            "id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator__*__FUNCTION-decorator__*__FUNCTION-wrapper",
                            "parent_id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator__*__FUNCTION-decorator",
                            "block_type": "FUNCTION",
                            "start_line_num": 44,
                            "end_line_num": 64,
                            "code_content": "@wraps(func)\ndef wrapper(*args, **kwargs):\n    log_message: str = (\n        message if message else (f\"Calling function: {func.__name__}\")\n    )\n    frame_info: inspect.FrameInfo = inspect.stack()[1]\n    caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\n    code_content: str = _gather_code_content(syntax_highlighting, args)\n    logger: Logger = _get_logger(caller_info.caller_module_name)\n\n    _handle_logging(\n        logger,\n        caller_info,\n        level,\n        log_message,\n        syntax_highlighting,\n        code_content,\n    )\n\n    return func(*args, **kwargs)\n",
                            "important_comments": null,
                            "dependencies": null,
                            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n@wraps(func)\\ndef wrapper(*args, **kwargs):\\n    log_message: str = (\\n        message if message else (f\"Calling function: {func.__name__}\")\\n    )\\n    frame_info: inspect.FrameInfo = inspect.stack()[1]\\n    caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\\n    code_content: str = _gather_code_content(syntax_highlighting, args)\\n    logger: Logger = _get_logger(caller_info.caller_module_name)\\n\\n    _handle_logging(\\n        logger,\\n        caller_info,\\n        level,\\n        log_message,\\n        syntax_highlighting,\\n        code_content,\\n    )\\n\\n    return func(*args, **kwargs)\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                            "children": null
                        }
                    ]
                }
            ]
        },
        {
            "function_name": "_gather_log_record_context",
            "docstring": "Creates and returns a LogRecord with specified context information.",
            "decorators": null,
            "parameters": null,
            "returns": "No return annotation",
            "is_method": false,
            "is_async": false,
            "id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-_gather_log_record_context",
            "parent_id": "utilities:logger:decorators.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 68,
            "end_line_num": 84,
            "code_content": "\n\ndef _gather_log_record_context(\n    caller_info: LoggingCallerInfo, level: int, msg: str\n) -> logging.LogRecord:\n    \"\"\"Creates and returns a LogRecord with specified context information.\"\"\"\n\n    return logging.LogRecord(\n        name=caller_info.caller_module_name,\n        level=level,\n        pathname=caller_info.caller_file_path,\n        lineno=caller_info.caller_line_no,\n        msg=msg,\n        args=None,\n        exc_info=None,\n    )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "LoggingCallerInfo",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "NodeAndPositionData",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "utilities.processing_context",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "logging",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "LogRecord",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Logger",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "logging",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _gather_log_record_context(\\n    caller_info: LoggingCallerInfo, level: int, msg: str\\n) -> logging.LogRecord:\\n    \"\"\"Creates and returns a LogRecord with specified context information.\"\"\"\\n\\n    return logging.LogRecord(\\n        name=caller_info.caller_module_name,\\n        level=level,\\n        pathname=caller_info.caller_file_path,\\n        lineno=caller_info.caller_line_no,\\n        msg=msg,\\n        args=None,\\n        exc_info=None,\\n    )\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom utilities.processing_context import LoggingCallerInfo, NodeAndPositionData\\nimport logging\\nfrom logging import LogRecord, Logger\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_get_caller_info",
            "docstring": "Extracts and returns caller information from a frame object.",
            "decorators": null,
            "parameters": null,
            "returns": "LoggingCallerInfo",
            "is_method": false,
            "is_async": false,
            "id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-_get_caller_info",
            "parent_id": "utilities:logger:decorators.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 84,
            "end_line_num": 93,
            "code_content": "\n\ndef _get_caller_info(frame_info: FrameInfo) -> LoggingCallerInfo:\n    \"\"\"Extracts and returns caller information from a frame object.\"\"\"\n\n    caller_module_name: str = frame_info.filename.split(\"/\")[-1].split(\".\")[0]\n    caller_file_path: str = frame_info.filename\n    caller_line_no: int = frame_info.lineno\n    return LoggingCallerInfo(caller_module_name, caller_file_path, caller_line_no)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "LoggingCallerInfo",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "NodeAndPositionData",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "utilities.processing_context",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "FrameInfo",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "inspect",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _get_caller_info(frame_info: FrameInfo) -> LoggingCallerInfo:\\n    \"\"\"Extracts and returns caller information from a frame object.\"\"\"\\n\\n    caller_module_name: str = frame_info.filename.split(\"/\")[-1].split(\".\")[0]\\n    caller_file_path: str = frame_info.filename\\n    caller_line_no: int = frame_info.lineno\\n    return LoggingCallerInfo(caller_module_name, caller_file_path, caller_line_no)\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom utilities.processing_context import LoggingCallerInfo, NodeAndPositionData\\nfrom inspect import FrameInfo\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_get_logger",
            "docstring": "Retrieves and returns a Logger instance for the specified module name.",
            "decorators": null,
            "parameters": null,
            "returns": "Logger",
            "is_method": false,
            "is_async": false,
            "id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-_get_logger",
            "parent_id": "utilities:logger:decorators.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 93,
            "end_line_num": 99,
            "code_content": "\n\ndef _get_logger(caller_module_name: str) -> Logger:\n    \"\"\"Retrieves and returns a Logger instance for the specified module name.\"\"\"\n\n    return logging.getLogger(caller_module_name)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "logging",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "LogRecord",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Logger",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "logging",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _get_logger(caller_module_name: str) -> Logger:\\n    \"\"\"Retrieves and returns a Logger instance for the specified module name.\"\"\"\\n\\n    return logging.getLogger(caller_module_name)\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport logging\\nfrom logging import LogRecord, Logger\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_gather_code_content",
            "docstring": "Gathers and returns code content for logging, if `syntax_highlighting` else returns empty string.",
            "decorators": null,
            "parameters": null,
            "returns": "str",
            "is_method": false,
            "is_async": false,
            "id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-_gather_code_content",
            "parent_id": "utilities:logger:decorators.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 99,
            "end_line_num": 120,
            "code_content": "\n\ndef _gather_code_content(syntax_highlighting: bool, args: tuple) -> str:\n    \"\"\"Gathers and returns code content for logging, if `syntax_highlighting` else returns empty string.\"\"\"\n\n    if not syntax_highlighting or not args:\n        return \"\"\n\n    arg_0 = args[0]\n    content: str = \"\"\n\n    if isinstance(arg_0, libcst.CSTNode):\n        content = extract_code_content(arg_0)\n    elif isinstance(arg_0, list) and all(\n        isinstance(node, libcst.CSTNode) for node in arg_0\n    ):\n        content = \"\\n\".join(extract_stripped_code_content(node) for node in arg_0)\n    elif isinstance(arg_0, NodeAndPositionData):\n        content = \"\\n\".join(extract_stripped_code_content(node) for node in arg_0.nodes)\n\n    return content\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "LoggingCallerInfo",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "NodeAndPositionData",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "utilities.processing_context",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "logging",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "extract_code_content",
                            "as_name": null,
                            "local_block_id": "python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_code_content"
                        },
                        {
                            "name": "extract_stripped_code_content",
                            "as_name": null,
                            "local_block_id": "python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_stripped_code_content"
                        }
                    ],
                    "imported_from": "python_parser.visitors.node_processing.common_functions",
                    "import_module_type": "LOCAL",
                    "local_module_id": "python_parser:visitors:node_processing:common_functions.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "extract_code_content",
                            "as_name": null,
                            "local_block_id": "python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_code_content"
                        },
                        {
                            "name": "extract_stripped_code_content",
                            "as_name": null,
                            "local_block_id": "python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_stripped_code_content"
                        }
                    ],
                    "imported_from": "python_parser.visitors.node_processing.common_functions",
                    "import_module_type": "LOCAL",
                    "local_module_id": "python_parser:visitors:node_processing:common_functions.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _gather_code_content(syntax_highlighting: bool, args: tuple) -> str:\\n    \"\"\"Gathers and returns code content for logging, if `syntax_highlighting` else returns empty string.\"\"\"\\n\\n    if not syntax_highlighting or not args:\\n        return \"\"\\n\\n    arg_0 = args[0]\\n    content: str = \"\"\\n\\n    if isinstance(arg_0, libcst.CSTNode):\\n        content = extract_code_content(arg_0)\\n    elif isinstance(arg_0, list) and all(\\n        isinstance(node, libcst.CSTNode) for node in arg_0\\n    ):\\n        content = \"\\\\n\".join(extract_stripped_code_content(node) for node in arg_0)\\n    elif isinstance(arg_0, NodeAndPositionData):\\n        content = \"\\\\n\".join(extract_stripped_code_content(node) for node in arg_0.nodes)\\n\\n    return content\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom utilities.processing_context import LoggingCallerInfo, NodeAndPositionData\\nimport logging\\nimport libcst\\nfrom python_parser.visitors.node_processing.common_functions import extract_code_content, extract_stripped_code_content\\nfrom python_parser.visitors.node_processing.common_functions import extract_code_content, extract_stripped_code_content\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_handle_syntax_highlighting",
            "docstring": "Handles syntax highlighting for the log record if enabled.",
            "decorators": null,
            "parameters": null,
            "returns": "None",
            "is_method": false,
            "is_async": false,
            "id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-_handle_syntax_highlighting",
            "parent_id": "utilities:logger:decorators.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 120,
            "end_line_num": 134,
            "code_content": "\n\ndef _handle_syntax_highlighting(\n    syntax_highlighting: bool,\n    log_record: logging.LogRecord,\n    logger: Logger,\n    content: str,\n) -> None:\n    \"\"\"Handles syntax highlighting for the log record if enabled.\"\"\"\n\n    if syntax_highlighting:\n        log_record.syntax_highlight = syntax_highlighting\n        log_record.content = content\n        logger.handle(log_record)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "logging",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "LogRecord",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Logger",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "logging",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "LogRecord",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Logger",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "logging",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _handle_syntax_highlighting(\\n    syntax_highlighting: bool,\\n    log_record: logging.LogRecord,\\n    logger: Logger,\\n    content: str,\\n) -> None:\\n    \"\"\"Handles syntax highlighting for the log record if enabled.\"\"\"\\n\\n    if syntax_highlighting:\\n        log_record.syntax_highlight = syntax_highlighting\\n        log_record.content = content\\n        logger.handle(log_record)\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport logging\\nfrom logging import LogRecord, Logger\\nfrom logging import LogRecord, Logger\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_handle_logging",
            "docstring": "Handles the logging process, including the creation and handling of log records.",
            "decorators": null,
            "parameters": null,
            "returns": "None",
            "is_method": false,
            "is_async": false,
            "id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-_handle_logging",
            "parent_id": "utilities:logger:decorators.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 134,
            "end_line_num": 154,
            "code_content": "\n\ndef _handle_logging(\n    logger: Logger,\n    caller_info: LoggingCallerInfo,\n    level: int,\n    log_message: str,\n    syntax_highlighting: bool,\n    code_content: str,\n) -> None:\n    \"\"\"Handles the logging process, including the creation and handling of log records.\"\"\"\n\n    if logger.isEnabledFor(level):\n        log_record: LogRecord = _gather_log_record_context(\n            caller_info, level, log_message\n        )\n        logger.handle(log_record)  # Print log message\n        _handle_syntax_highlighting(\n            syntax_highlighting, log_record, logger, code_content\n        )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-_gather_log_record_context"
                },
                {
                    "code_block_id": "utilities:logger:decorators.py__*__MODULE__*__FUNCTION-_handle_syntax_highlighting"
                },
                {
                    "import_names": [
                        {
                            "name": "LoggingCallerInfo",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "NodeAndPositionData",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "utilities.processing_context",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "logging",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "LogRecord",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Logger",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "logging",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "LogRecord",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Logger",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "logging",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _handle_logging(\\n    logger: Logger,\\n    caller_info: LoggingCallerInfo,\\n    level: int,\\n    log_message: str,\\n    syntax_highlighting: bool,\\n    code_content: str,\\n) -> None:\\n    \"\"\"Handles the logging process, including the creation and handling of log records.\"\"\"\\n\\n    if logger.isEnabledFor(level):\\n        log_record: LogRecord = _gather_log_record_context(\\n            caller_info, level, log_message\\n        )\\n        logger.handle(log_record)  # Print log message\\n        _handle_syntax_highlighting(\\n            syntax_highlighting, log_record, logger, code_content\\n        )\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom utilities.processing_context import LoggingCallerInfo, NodeAndPositionData\\nimport logging\\nfrom logging import LogRecord, Logger\\nfrom logging import LogRecord, Logger\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        }
    ]
}