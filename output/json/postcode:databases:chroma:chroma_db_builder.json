{
    "file_path": "postcode/databases/chroma/chroma_db_builder.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "DEFAULT_DATABASE",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DEFAULT_TENANT",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Settings",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ClientAPI",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.databases.chroma.chroma_types",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "EphemeralClient",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "PersistentClient",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "HttpClient",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "chromadb",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:types:chromadb:types.py__*__MODULE"
        }
    ],
    "id": "postcode:databases:chroma:chroma_db_builder.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 56,
    "code_content": "from chromadb import EphemeralClient, PersistentClient, HttpClient\nfrom postcode.databases.chroma.chroma_types import (\n    DEFAULT_DATABASE,\n    DEFAULT_TENANT,\n    Settings,\n    ClientAPI,\n)\n\n\nclass ChromaDBBuilder:\n    @staticmethod\n    def create_ephemeral_client(\n        settings: Settings | None = None,\n        tenant: str = DEFAULT_TENANT,\n        database: str = DEFAULT_DATABASE,\n    ) -> ClientAPI:\n        return EphemeralClient(\n            settings=settings if settings else Settings(),\n            tenant=tenant,\n            database=database,\n        )\n\n    @staticmethod\n    def create_persistent_client(\n        path: str = \"../chroma\",\n        settings: Settings | None = None,\n        tenant: str = DEFAULT_TENANT,\n        database: str = DEFAULT_DATABASE,\n    ) -> ClientAPI:\n        return PersistentClient(\n            path=path,\n            settings=settings if settings else Settings(),\n            tenant=tenant,\n            database=database,\n        )\n\n    @staticmethod\n    def create_http_client(\n        host: str = \"localhost\",\n        port: str = \"8000\",\n        ssl: bool = False,\n        headers: dict[str, str] = {},\n        settings: Settings | None = None,\n        tenant: str = DEFAULT_TENANT,\n        database: str = DEFAULT_DATABASE,\n    ) -> ClientAPI:\n        return HttpClient(\n            host=host,\n            port=port,\n            ssl=ssl,\n            headers=headers,\n            settings=settings if settings else Settings(),\n            tenant=tenant,\n            database=database,\n        )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nfrom chromadb import EphemeralClient, PersistentClient, HttpClient\\nfrom postcode.databases.chroma.chroma_types import (\\n    DEFAULT_DATABASE,\\n    DEFAULT_TENANT,\\n    Settings,\\n    ClientAPI,\\n)\\n\\n\\nclass ChromaDBBuilder:\\n    @staticmethod\\n    def create_ephemeral_client(\\n        settings: Settings | None = None,\\n        tenant: str = DEFAULT_TENANT,\\n        database: str = DEFAULT_DATABASE,\\n    ) -> ClientAPI:\\n        return EphemeralClient(\\n            settings=settings if settings else Settings(),\\n            tenant=tenant,\\n            database=database,\\n        )\\n\\n    @staticmethod\\n    def create_persistent_client(\\n        path: str = \"../chroma\",\\n        settings: Settings | None = None,\\n        tenant: str = DEFAULT_TENANT,\\n        database: str = DEFAULT_DATABASE,\\n    ) -> ClientAPI:\\n        return PersistentClient(\\n            path=path,\\n            settings=settings if settings else Settings(),\\n            tenant=tenant,\\n            database=database,\\n        )\\n\\n    @staticmethod\\n    def create_http_client(\\n        host: str = \"localhost\",\\n        port: str = \"8000\",\\n        ssl: bool = False,\\n        headers: dict[str, str] = {},\\n        settings: Settings | None = None,\\n        tenant: str = DEFAULT_TENANT,\\n        database: str = DEFAULT_DATABASE,\\n    ) -> ClientAPI:\\n        return HttpClient(\\n            host=host,\\n            port=port,\\n            ssl=ssl,\\n            headers=headers,\\n            settings=settings if settings else Settings(),\\n            tenant=tenant,\\n            database=database,\\n        )\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass ChromaDBBuilder:\\\\n    @staticmethod\\\\n    def create_ephemeral_client(\\\\n        settings: Settings | None = None,\\\\n        tenant: str = DEFAULT_TENANT,\\\\n        database: str = DEFAULT_DATABASE,\\\\n    ) -> ClientAPI:\\\\n        return EphemeralClient(\\\\n            settings=settings if settings else Settings(),\\\\n            tenant=tenant,\\\\n            database=database,\\\\n        )\\\\n\\\\n    @staticmethod\\\\n    def create_persistent_client(\\\\n        path: str = \"../chroma\",\\\\n        settings: Settings | None = None,\\\\n        tenant: str = DEFAULT_TENANT,\\\\n        database: str = DEFAULT_DATABASE,\\\\n    ) -> ClientAPI:\\\\n        return PersistentClient(\\\\n            path=path,\\\\n            settings=settings if settings else Settings(),\\\\n            tenant=tenant,\\\\n            database=database,\\\\n        )\\\\n\\\\n    @staticmethod\\\\n    def create_http_client(\\\\n        host: str = \"localhost\",\\\\n        port: str = \"8000\",\\\\n        ssl: bool = False,\\\\n        headers: dict[str, str] = {},\\\\n        settings: Settings | None = None,\\\\n        tenant: str = DEFAULT_TENANT,\\\\n        database: str = DEFAULT_DATABASE,\\\\n    ) -> ClientAPI:\\\\n        return HttpClient(\\\\n            host=host,\\\\n            port=port,\\\\n            ssl=ssl,\\\\n            headers=headers,\\\\n            settings=settings if settings else Settings(),\\\\n            tenant=tenant,\\\\n            database=database,\\\\n        )\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n@staticmethod\\\\\\\\ndef create_ephemeral_client(\\\\\\\\n    settings: Settings | None = None,\\\\\\\\n    tenant: str = DEFAULT_TENANT,\\\\\\\\n    database: str = DEFAULT_DATABASE,\\\\\\\\n) -> ClientAPI:\\\\\\\\n    return EphemeralClient(\\\\\\\\n        settings=settings if settings else Settings(),\\\\\\\\n        tenant=tenant,\\\\\\\\n        database=database,\\\\\\\\n    )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n@staticmethod\\\\\\\\ndef create_persistent_client(\\\\\\\\n    path: str = \"../chroma\",\\\\\\\\n    settings: Settings | None = None,\\\\\\\\n    tenant: str = DEFAULT_TENANT,\\\\\\\\n    database: str = DEFAULT_DATABASE,\\\\\\\\n) -> ClientAPI:\\\\\\\\n    return PersistentClient(\\\\\\\\n        path=path,\\\\\\\\n        settings=settings if settings else Settings(),\\\\\\\\n        tenant=tenant,\\\\\\\\n        database=database,\\\\\\\\n    )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n@staticmethod\\\\\\\\ndef create_http_client(\\\\\\\\n    host: str = \"localhost\",\\\\\\\\n    port: str = \"8000\",\\\\\\\\n    ssl: bool = False,\\\\\\\\n    headers: dict[str, str] = {},\\\\\\\\n    settings: Settings | None = None,\\\\\\\\n    tenant: str = DEFAULT_TENANT,\\\\\\\\n    database: str = DEFAULT_DATABASE,\\\\\\\\n) -> ClientAPI:\\\\\\\\n    return HttpClient(\\\\\\\\n        host=host,\\\\\\\\n        port=port,\\\\\\\\n        ssl=ssl,\\\\\\\\n        headers=headers,\\\\\\\\n        settings=settings if settings else Settings(),\\\\\\\\n        tenant=tenant,\\\\\\\\n        database=database,\\\\\\\\n    )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom chromadb import EphemeralClient, PersistentClient, HttpClient\\\\nfrom chromadb import EphemeralClient, PersistentClient, HttpClient\\\\nfrom chromadb import EphemeralClient, PersistentClient, HttpClient\\\\nfrom postcode.databases.chroma.chroma_types import DEFAULT_DATABASE, DEFAULT_TENANT, Settings, ClientAPI\\\\nfrom postcode.databases.chroma.chroma_types import DEFAULT_DATABASE, DEFAULT_TENANT, Settings, ClientAPI\\\\nfrom postcode.databases.chroma.chroma_types import DEFAULT_DATABASE, DEFAULT_TENANT, Settings, ClientAPI\\\\nfrom postcode.databases.chroma.chroma_types import DEFAULT_DATABASE, DEFAULT_TENANT, Settings, ClientAPI\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.databases.chroma.chroma_types import DEFAULT_DATABASE, DEFAULT_TENANT, Settings, ClientAPI\\nfrom chromadb import EphemeralClient, PersistentClient, HttpClient\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "class_name": "ChromaDBBuilder",
            "decorators": null,
            "bases": null,
            "docstring": null,
            "attributes": null,
            "keywords": null,
            "id": "postcode:databases:chroma:chroma_db_builder.py__*__MODULE__*__CLASS-ChromaDBBuilder",
            "parent_id": "postcode:databases:chroma:chroma_db_builder.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 8,
            "end_line_num": 56,
            "code_content": "\n\nclass ChromaDBBuilder:\n    @staticmethod\n    def create_ephemeral_client(\n        settings: Settings | None = None,\n        tenant: str = DEFAULT_TENANT,\n        database: str = DEFAULT_DATABASE,\n    ) -> ClientAPI:\n        return EphemeralClient(\n            settings=settings if settings else Settings(),\n            tenant=tenant,\n            database=database,\n        )\n\n    @staticmethod\n    def create_persistent_client(\n        path: str = \"../chroma\",\n        settings: Settings | None = None,\n        tenant: str = DEFAULT_TENANT,\n        database: str = DEFAULT_DATABASE,\n    ) -> ClientAPI:\n        return PersistentClient(\n            path=path,\n            settings=settings if settings else Settings(),\n            tenant=tenant,\n            database=database,\n        )\n\n    @staticmethod\n    def create_http_client(\n        host: str = \"localhost\",\n        port: str = \"8000\",\n        ssl: bool = False,\n        headers: dict[str, str] = {},\n        settings: Settings | None = None,\n        tenant: str = DEFAULT_TENANT,\n        database: str = DEFAULT_DATABASE,\n    ) -> ClientAPI:\n        return HttpClient(\n            host=host,\n            port=port,\n            ssl=ssl,\n            headers=headers,\n            settings=settings if settings else Settings(),\n            tenant=tenant,\n            database=database,\n        )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "EphemeralClient",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "PersistentClient",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "HttpClient",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "chromadb",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:types:chromadb:types.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "EphemeralClient",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "PersistentClient",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "HttpClient",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "chromadb",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:types:chromadb:types.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "EphemeralClient",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "PersistentClient",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "HttpClient",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "chromadb",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:types:chromadb:types.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "DEFAULT_DATABASE",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DEFAULT_TENANT",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Settings",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ClientAPI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.databases.chroma.chroma_types",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "DEFAULT_DATABASE",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DEFAULT_TENANT",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Settings",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ClientAPI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.databases.chroma.chroma_types",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "DEFAULT_DATABASE",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DEFAULT_TENANT",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Settings",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ClientAPI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.databases.chroma.chroma_types",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "DEFAULT_DATABASE",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DEFAULT_TENANT",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Settings",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ClientAPI",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.databases.chroma.chroma_types",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\nclass ChromaDBBuilder:\\n    @staticmethod\\n    def create_ephemeral_client(\\n        settings: Settings | None = None,\\n        tenant: str = DEFAULT_TENANT,\\n        database: str = DEFAULT_DATABASE,\\n    ) -> ClientAPI:\\n        return EphemeralClient(\\n            settings=settings if settings else Settings(),\\n            tenant=tenant,\\n            database=database,\\n        )\\n\\n    @staticmethod\\n    def create_persistent_client(\\n        path: str = \"../chroma\",\\n        settings: Settings | None = None,\\n        tenant: str = DEFAULT_TENANT,\\n        database: str = DEFAULT_DATABASE,\\n    ) -> ClientAPI:\\n        return PersistentClient(\\n            path=path,\\n            settings=settings if settings else Settings(),\\n            tenant=tenant,\\n            database=database,\\n        )\\n\\n    @staticmethod\\n    def create_http_client(\\n        host: str = \"localhost\",\\n        port: str = \"8000\",\\n        ssl: bool = False,\\n        headers: dict[str, str] = {},\\n        settings: Settings | None = None,\\n        tenant: str = DEFAULT_TENANT,\\n        database: str = DEFAULT_DATABASE,\\n    ) -> ClientAPI:\\n        return HttpClient(\\n            host=host,\\n            port=port,\\n            ssl=ssl,\\n            headers=headers,\\n            settings=settings if settings else Settings(),\\n            tenant=tenant,\\n            database=database,\\n        )\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n@staticmethod\\\\ndef create_ephemeral_client(\\\\n    settings: Settings | None = None,\\\\n    tenant: str = DEFAULT_TENANT,\\\\n    database: str = DEFAULT_DATABASE,\\\\n) -> ClientAPI:\\\\n    return EphemeralClient(\\\\n        settings=settings if settings else Settings(),\\\\n        tenant=tenant,\\\\n        database=database,\\\\n    )\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n@staticmethod\\\\ndef create_persistent_client(\\\\n    path: str = \"../chroma\",\\\\n    settings: Settings | None = None,\\\\n    tenant: str = DEFAULT_TENANT,\\\\n    database: str = DEFAULT_DATABASE,\\\\n) -> ClientAPI:\\\\n    return PersistentClient(\\\\n        path=path,\\\\n        settings=settings if settings else Settings(),\\\\n        tenant=tenant,\\\\n        database=database,\\\\n    )\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n@staticmethod\\\\ndef create_http_client(\\\\n    host: str = \"localhost\",\\\\n    port: str = \"8000\",\\\\n    ssl: bool = False,\\\\n    headers: dict[str, str] = {},\\\\n    settings: Settings | None = None,\\\\n    tenant: str = DEFAULT_TENANT,\\\\n    database: str = DEFAULT_DATABASE,\\\\n) -> ClientAPI:\\\\n    return HttpClient(\\\\n        host=host,\\\\n        port=port,\\\\n        ssl=ssl,\\\\n        headers=headers,\\\\n        settings=settings if settings else Settings(),\\\\n        tenant=tenant,\\\\n        database=database,\\\\n    )\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom chromadb import EphemeralClient, PersistentClient, HttpClient\\nfrom chromadb import EphemeralClient, PersistentClient, HttpClient\\nfrom chromadb import EphemeralClient, PersistentClient, HttpClient\\nfrom postcode.databases.chroma.chroma_types import DEFAULT_DATABASE, DEFAULT_TENANT, Settings, ClientAPI\\nfrom postcode.databases.chroma.chroma_types import DEFAULT_DATABASE, DEFAULT_TENANT, Settings, ClientAPI\\nfrom postcode.databases.chroma.chroma_types import DEFAULT_DATABASE, DEFAULT_TENANT, Settings, ClientAPI\\nfrom postcode.databases.chroma.chroma_types import DEFAULT_DATABASE, DEFAULT_TENANT, Settings, ClientAPI\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "create_ephemeral_client",
                    "docstring": null,
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "ClientAPI",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:databases:chroma:chroma_db_builder.py__*__MODULE__*__CLASS-ChromaDBBuilder__*__FUNCTION-create_ephemeral_client",
                    "parent_id": "postcode:databases:chroma:chroma_db_builder.py__*__MODULE__*__CLASS-ChromaDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 11,
                    "end_line_num": 22,
                    "code_content": "@staticmethod\ndef create_ephemeral_client(\n    settings: Settings | None = None,\n    tenant: str = DEFAULT_TENANT,\n    database: str = DEFAULT_DATABASE,\n) -> ClientAPI:\n    return EphemeralClient(\n        settings=settings if settings else Settings(),\n        tenant=tenant,\n        database=database,\n    )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n@staticmethod\\ndef create_ephemeral_client(\\n    settings: Settings | None = None,\\n    tenant: str = DEFAULT_TENANT,\\n    database: str = DEFAULT_DATABASE,\\n) -> ClientAPI:\\n    return EphemeralClient(\\n        settings=settings if settings else Settings(),\\n        tenant=tenant,\\n        database=database,\\n    )\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "create_persistent_client",
                    "docstring": null,
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "ClientAPI",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:databases:chroma:chroma_db_builder.py__*__MODULE__*__CLASS-ChromaDBBuilder__*__FUNCTION-create_persistent_client",
                    "parent_id": "postcode:databases:chroma:chroma_db_builder.py__*__MODULE__*__CLASS-ChromaDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 22,
                    "end_line_num": 36,
                    "code_content": "\n@staticmethod\ndef create_persistent_client(\n    path: str = \"../chroma\",\n    settings: Settings | None = None,\n    tenant: str = DEFAULT_TENANT,\n    database: str = DEFAULT_DATABASE,\n) -> ClientAPI:\n    return PersistentClient(\n        path=path,\n        settings=settings if settings else Settings(),\n        tenant=tenant,\n        database=database,\n    )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n@staticmethod\\ndef create_persistent_client(\\n    path: str = \"../chroma\",\\n    settings: Settings | None = None,\\n    tenant: str = DEFAULT_TENANT,\\n    database: str = DEFAULT_DATABASE,\\n) -> ClientAPI:\\n    return PersistentClient(\\n        path=path,\\n        settings=settings if settings else Settings(),\\n        tenant=tenant,\\n        database=database,\\n    )\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "create_http_client",
                    "docstring": null,
                    "decorators": [
                        {
                            "content": "@staticmethod",
                            "decorator_name": "staticmethod",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "ClientAPI",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:databases:chroma:chroma_db_builder.py__*__MODULE__*__CLASS-ChromaDBBuilder__*__FUNCTION-create_http_client",
                    "parent_id": "postcode:databases:chroma:chroma_db_builder.py__*__MODULE__*__CLASS-ChromaDBBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 36,
                    "end_line_num": 56,
                    "code_content": "\n@staticmethod\ndef create_http_client(\n    host: str = \"localhost\",\n    port: str = \"8000\",\n    ssl: bool = False,\n    headers: dict[str, str] = {},\n    settings: Settings | None = None,\n    tenant: str = DEFAULT_TENANT,\n    database: str = DEFAULT_DATABASE,\n) -> ClientAPI:\n    return HttpClient(\n        host=host,\n        port=port,\n        ssl=ssl,\n        headers=headers,\n        settings=settings if settings else Settings(),\n        tenant=tenant,\n        database=database,\n    )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n@staticmethod\\ndef create_http_client(\\n    host: str = \"localhost\",\\n    port: str = \"8000\",\\n    ssl: bool = False,\\n    headers: dict[str, str] = {},\\n    settings: Settings | None = None,\\n    tenant: str = DEFAULT_TENANT,\\n    database: str = DEFAULT_DATABASE,\\n) -> ClientAPI:\\n    return HttpClient(\\n        host=host,\\n        port=port,\\n        ssl=ssl,\\n        headers=headers,\\n        settings=settings if settings else Settings(),\\n        tenant=tenant,\\n        database=database,\\n    )\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        }
    ]
}