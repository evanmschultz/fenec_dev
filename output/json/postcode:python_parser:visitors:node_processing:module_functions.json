{
    "file_path": "postcode/python_parser/visitors/node_processing/module_functions.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "sys",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Sequence",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ImportModuleType",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:enums.py__*__MODULE__*__CLASS-ImportModuleType"
                }
            ],
            "imported_from": "postcode.python_parser.models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:models:enums.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ImportNameModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportNameModel"
                },
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                }
            ],
            "imported_from": "postcode.python_parser.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "postcode.python_parser.visitors.node_processing.common_functions",
                    "as_name": "common_functions",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
        }
    ],
    "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 215,
    "code_content": "import sys\nfrom typing import Sequence\n\nimport libcst\n\nfrom postcode.python_parser.models.enums import ImportModuleType\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\n\n\ndef extract_content_from_empty_lines(\n    sequence: Sequence[libcst.EmptyLine],\n) -> list[str]:\n    \"\"\"\n    Extracts comments from a sequence of EmptyLine nodes.\n\n    Args:\n        sequence: A sequence of libcst.EmptyLine nodes to process.\n\n    Returns:\n        A list of string comments extracted from the EmptyLine nodes.\n\n    Example:\n        >>> extract_content_from_empty_lines([libcst.EmptyLine(comment=libcst.Comment(\"# Comment\"))])\n        ['# Comment']\n    \"\"\"\n\n    return [line.comment.value for line in sequence if line.comment]\n\n\ndef process_import(node: libcst.Import) -> ImportModel:\n    \"\"\"\n    Processes an Import node to create an ImportModel.\n\n    Args:\n        node: The Import node to process.\n\n    Returns:\n        An ImportModel representing the processed import.\n\n    Example:\n        >>> process_import(libcst.Import(names=[libcst.ImportAlias(name=libcst.Name(\"module\"))]))\n        # Returns an ImportModel for 'module'\n    \"\"\"\n\n    import_name_model: ImportNameModel = _build_import_name_model(node)\n    import_model: ImportModel = _build_import_model(\n        import_name_models=[import_name_model]\n    )\n    return import_model\n\n\ndef process_import_from(node: libcst.ImportFrom) -> ImportModel:\n    \"\"\"\n    Processes an ImportFrom node to create an ImportModel.\n\n    Args:\n        node: The ImportFrom node to process.\n\n    Returns:\n        An ImportModel representing the processed import from statement.\n\n    Example:\n        >>> process_import_from(libcst.ImportFrom(module=libcst.Name(\"module\"), names=[libcst.ImportAlias(name=libcst.Name(\"submodule\"))]))\n        # Returns an ImportModel for 'from module import submodule'\n    \"\"\"\n\n    module_name: str | None = (\n        _get_full_module_path(node.module) if node.module else None\n    )\n    import_names: list[ImportNameModel] = _build_import_from_name_models(node)\n    import_module_type: ImportModuleType = _get_import_from_module_type(module_name)\n\n    import_model = ImportModel(\n        import_names=import_names,\n        imported_from=module_name,\n        import_module_type=import_module_type,\n    )\n    return import_model\n\n\ndef _get_import_name(node: libcst.Import) -> str:\n    \"\"\"Gets the import name from an Import node.\"\"\"\n\n    return common_functions.extract_code_content(node.names[0].name)\n\n\ndef _get_as_name(node: libcst.Import) -> str | None:\n    \"\"\"Gets the as name from an Import node.\"\"\"\n\n    first_name: libcst.ImportAlias = node.names[0]\n\n    if first_name.asname and isinstance(first_name.asname, libcst.AsName):\n        as_name_node = first_name.asname.name\n        if isinstance(as_name_node, libcst.Name):\n            return as_name_node.value\n\n\ndef _build_import_name_model(node: libcst.Import) -> ImportNameModel:\n    \"\"\"Builds an ImportNameModel from an Import node.\"\"\"\n\n    import_name: str | None = _get_import_name(node)\n    as_name: str | None = _get_as_name(node)\n    return ImportNameModel(name=import_name, as_name=as_name)\n\n\ndef _is_standard_library_import(import_name: str) -> bool:\n    \"\"\"Checks if an import is a standard library import.\"\"\"\n\n    return import_name in sys.stdlib_module_names\n\n\ndef _third_party_imports() -> list[str]:\n    \"\"\"Gets a list of all third party imports.\"\"\"\n\n    third_party_imports: list[str] = []\n\n    for module_name, module in sys.modules.items():\n        if module_name in sys.stdlib_module_names or not hasattr(module, \"__file__\"):\n            continue\n\n        module_file: str | None = module.__file__\n        if module_file and (\n            \"site-packages\" in module_file or \"dist-packages\" in module_file\n        ):\n            third_party_imports.append(module_name)\n\n    return third_party_imports\n\n\ndef _is_third_party_import(import_name: str) -> bool:\n    \"\"\"Checks if an import is a third party import.\"\"\"\n\n    return import_name in _third_party_imports()\n\n\ndef _determine_import_module_type(module_name: str) -> ImportModuleType:\n    \"\"\"Determines the type of import a module is.\"\"\"\n\n    if _is_standard_library_import(module_name):\n        return ImportModuleType.STANDARD_LIBRARY\n    elif _is_third_party_import(module_name):\n        return ImportModuleType.THIRD_PARTY\n    else:\n        return ImportModuleType.LOCAL\n\n\ndef _get_import_module_type(\n    import_name_models: list[ImportNameModel],\n) -> ImportModuleType:\n    \"\"\"Gets the import module type of a list of ImportNameModels.\"\"\"\n\n    for import_name_model in import_name_models:\n        module_type = _determine_import_module_type(import_name_model.name)\n        if module_type != ImportModuleType.LOCAL:\n            return module_type\n    return ImportModuleType.LOCAL\n\n\ndef _get_import_from_module_type(module_name: str | None) -> ImportModuleType:\n    \"\"\"Gets the import module type of an ImportFrom node.\"\"\"\n\n    if module_name:\n        return _determine_import_module_type(module_name)\n    return ImportModuleType.LOCAL\n\n\ndef _build_import_model(\n    import_name_models: list[ImportNameModel],\n) -> ImportModel:\n    \"\"\"Builds an ImportModel from a list of ImportNameModels.\"\"\"\n\n    import_module_type: ImportModuleType = _get_import_module_type(import_name_models)\n    return ImportModel(\n        import_names=import_name_models,\n        imported_from=None,\n        import_module_type=import_module_type,\n    )\n\n\ndef _get_full_module_path(node) -> str:\n    \"\"\"Recursively gets the full module path from a node and returns it as a string.\"\"\"\n\n    if isinstance(node, libcst.Name):\n        return node.value\n    elif isinstance(node, libcst.Attribute):\n        return common_functions.extract_code_content(node)\n    else:\n        print(f\"\\n\\nImport Node type: {type(node)}\\n\")\n        # return str(node)\n        return common_functions.extract_code_content(node)\n\n\ndef _extract_as_name(import_alias: libcst.ImportAlias) -> str | None:\n    \"\"\"Extracts the as name from an ImportAlias node.\"\"\"\n\n    if import_alias.asname and isinstance(import_alias.asname, libcst.AsName):\n        if isinstance(import_alias.asname.name, libcst.Name):\n            return import_alias.asname.name.value\n\n\ndef _build_import_from_name_models(node: libcst.ImportFrom) -> list[ImportNameModel]:\n    \"\"\"Builds a list of ImportNameModels from an ImportFrom node.\"\"\"\n\n    import_names: list[ImportNameModel] = []\n    if isinstance(node.names, libcst.ImportStar):\n        import_names.append(ImportNameModel(name=\"*\", as_name=None))\n    else:\n        for import_alias in node.names:\n            if isinstance(import_alias, libcst.ImportAlias):\n                name = str(import_alias.name.value)\n                as_name = _extract_as_name(import_alias)\n                import_names.append(ImportNameModel(name=name, as_name=as_name))\n    return import_names\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nimport sys\\nfrom typing import Sequence\\n\\nimport libcst\\n\\nfrom postcode.python_parser.models.enums import ImportModuleType\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\n\\n\\ndef extract_content_from_empty_lines(\\n    sequence: Sequence[libcst.EmptyLine],\\n) -> list[str]:\\n    \"\"\"\\n    Extracts comments from a sequence of EmptyLine nodes.\\n\\n    Args:\\n        sequence: A sequence of libcst.EmptyLine nodes to process.\\n\\n    Returns:\\n        A list of string comments extracted from the EmptyLine nodes.\\n\\n    Example:\\n        >>> extract_content_from_empty_lines([libcst.EmptyLine(comment=libcst.Comment(\"# Comment\"))])\\n        [\\'# Comment\\']\\n    \"\"\"\\n\\n    return [line.comment.value for line in sequence if line.comment]\\n\\n\\ndef process_import(node: libcst.Import) -> ImportModel:\\n    \"\"\"\\n    Processes an Import node to create an ImportModel.\\n\\n    Args:\\n        node: The Import node to process.\\n\\n    Returns:\\n        An ImportModel representing the processed import.\\n\\n    Example:\\n        >>> process_import(libcst.Import(names=[libcst.ImportAlias(name=libcst.Name(\"module\"))]))\\n        # Returns an ImportModel for \\'module\\'\\n    \"\"\"\\n\\n    import_name_model: ImportNameModel = _build_import_name_model(node)\\n    import_model: ImportModel = _build_import_model(\\n        import_name_models=[import_name_model]\\n    )\\n    return import_model\\n\\n\\ndef process_import_from(node: libcst.ImportFrom) -> ImportModel:\\n    \"\"\"\\n    Processes an ImportFrom node to create an ImportModel.\\n\\n    Args:\\n        node: The ImportFrom node to process.\\n\\n    Returns:\\n        An ImportModel representing the processed import from statement.\\n\\n    Example:\\n        >>> process_import_from(libcst.ImportFrom(module=libcst.Name(\"module\"), names=[libcst.ImportAlias(name=libcst.Name(\"submodule\"))]))\\n        # Returns an ImportModel for \\'from module import submodule\\'\\n    \"\"\"\\n\\n    module_name: str | None = (\\n        _get_full_module_path(node.module) if node.module else None\\n    )\\n    import_names: list[ImportNameModel] = _build_import_from_name_models(node)\\n    import_module_type: ImportModuleType = _get_import_from_module_type(module_name)\\n\\n    import_model = ImportModel(\\n        import_names=import_names,\\n        imported_from=module_name,\\n        import_module_type=import_module_type,\\n    )\\n    return import_model\\n\\n\\ndef _get_import_name(node: libcst.Import) -> str:\\n    \"\"\"Gets the import name from an Import node.\"\"\"\\n\\n    return common_functions.extract_code_content(node.names[0].name)\\n\\n\\ndef _get_as_name(node: libcst.Import) -> str | None:\\n    \"\"\"Gets the as name from an Import node.\"\"\"\\n\\n    first_name: libcst.ImportAlias = node.names[0]\\n\\n    if first_name.asname and isinstance(first_name.asname, libcst.AsName):\\n        as_name_node = first_name.asname.name\\n        if isinstance(as_name_node, libcst.Name):\\n            return as_name_node.value\\n\\n\\ndef _build_import_name_model(node: libcst.Import) -> ImportNameModel:\\n    \"\"\"Builds an ImportNameModel from an Import node.\"\"\"\\n\\n    import_name: str | None = _get_import_name(node)\\n    as_name: str | None = _get_as_name(node)\\n    return ImportNameModel(name=import_name, as_name=as_name)\\n\\n\\ndef _is_standard_library_import(import_name: str) -> bool:\\n    \"\"\"Checks if an import is a standard library import.\"\"\"\\n\\n    return import_name in sys.stdlib_module_names\\n\\n\\ndef _third_party_imports() -> list[str]:\\n    \"\"\"Gets a list of all third party imports.\"\"\"\\n\\n    third_party_imports: list[str] = []\\n\\n    for module_name, module in sys.modules.items():\\n        if module_name in sys.stdlib_module_names or not hasattr(module, \"__file__\"):\\n            continue\\n\\n        module_file: str | None = module.__file__\\n        if module_file and (\\n            \"site-packages\" in module_file or \"dist-packages\" in module_file\\n        ):\\n            third_party_imports.append(module_name)\\n\\n    return third_party_imports\\n\\n\\ndef _is_third_party_import(import_name: str) -> bool:\\n    \"\"\"Checks if an import is a third party import.\"\"\"\\n\\n    return import_name in _third_party_imports()\\n\\n\\ndef _determine_import_module_type(module_name: str) -> ImportModuleType:\\n    \"\"\"Determines the type of import a module is.\"\"\"\\n\\n    if _is_standard_library_import(module_name):\\n        return ImportModuleType.STANDARD_LIBRARY\\n    elif _is_third_party_import(module_name):\\n        return ImportModuleType.THIRD_PARTY\\n    else:\\n        return ImportModuleType.LOCAL\\n\\n\\ndef _get_import_module_type(\\n    import_name_models: list[ImportNameModel],\\n) -> ImportModuleType:\\n    \"\"\"Gets the import module type of a list of ImportNameModels.\"\"\"\\n\\n    for import_name_model in import_name_models:\\n        module_type = _determine_import_module_type(import_name_model.name)\\n        if module_type != ImportModuleType.LOCAL:\\n            return module_type\\n    return ImportModuleType.LOCAL\\n\\n\\ndef _get_import_from_module_type(module_name: str | None) -> ImportModuleType:\\n    \"\"\"Gets the import module type of an ImportFrom node.\"\"\"\\n\\n    if module_name:\\n        return _determine_import_module_type(module_name)\\n    return ImportModuleType.LOCAL\\n\\n\\ndef _build_import_model(\\n    import_name_models: list[ImportNameModel],\\n) -> ImportModel:\\n    \"\"\"Builds an ImportModel from a list of ImportNameModels.\"\"\"\\n\\n    import_module_type: ImportModuleType = _get_import_module_type(import_name_models)\\n    return ImportModel(\\n        import_names=import_name_models,\\n        imported_from=None,\\n        import_module_type=import_module_type,\\n    )\\n\\n\\ndef _get_full_module_path(node) -> str:\\n    \"\"\"Recursively gets the full module path from a node and returns it as a string.\"\"\"\\n\\n    if isinstance(node, libcst.Name):\\n        return node.value\\n    elif isinstance(node, libcst.Attribute):\\n        return common_functions.extract_code_content(node)\\n    else:\\n        print(f\"\\\\n\\\\nImport Node type: {type(node)}\\\\n\")\\n        # return str(node)\\n        return common_functions.extract_code_content(node)\\n\\n\\ndef _extract_as_name(import_alias: libcst.ImportAlias) -> str | None:\\n    \"\"\"Extracts the as name from an ImportAlias node.\"\"\"\\n\\n    if import_alias.asname and isinstance(import_alias.asname, libcst.AsName):\\n        if isinstance(import_alias.asname.name, libcst.Name):\\n            return import_alias.asname.name.value\\n\\n\\ndef _build_import_from_name_models(node: libcst.ImportFrom) -> list[ImportNameModel]:\\n    \"\"\"Builds a list of ImportNameModels from an ImportFrom node.\"\"\"\\n\\n    import_names: list[ImportNameModel] = []\\n    if isinstance(node.names, libcst.ImportStar):\\n        import_names.append(ImportNameModel(name=\"*\", as_name=None))\\n    else:\\n        for import_alias in node.names:\\n            if isinstance(import_alias, libcst.ImportAlias):\\n                name = str(import_alias.name.value)\\n                as_name = _extract_as_name(import_alias)\\n                import_names.append(ImportNameModel(name=name, as_name=as_name))\\n    return import_names\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef extract_content_from_empty_lines(\\\\n    sequence: Sequence[libcst.EmptyLine],\\\\n) -> list[str]:\\\\n    \"\"\"\\\\n    Extracts comments from a sequence of EmptyLine nodes.\\\\n\\\\n    Args:\\\\n        sequence: A sequence of libcst.EmptyLine nodes to process.\\\\n\\\\n    Returns:\\\\n        A list of string comments extracted from the EmptyLine nodes.\\\\n\\\\n    Example:\\\\n        >>> extract_content_from_empty_lines([libcst.EmptyLine(comment=libcst.Comment(\"# Comment\"))])\\\\n        [\\\\\\'# Comment\\\\\\']\\\\n    \"\"\"\\\\n\\\\n    return [line.comment.value for line in sequence if line.comment]\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom typing import Sequence\\\\nimport libcst\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef process_import(node: libcst.Import) -> ImportModel:\\\\n    \"\"\"\\\\n    Processes an Import node to create an ImportModel.\\\\n\\\\n    Args:\\\\n        node: The Import node to process.\\\\n\\\\n    Returns:\\\\n        An ImportModel representing the processed import.\\\\n\\\\n    Example:\\\\n        >>> process_import(libcst.Import(names=[libcst.ImportAlias(name=libcst.Name(\"module\"))]))\\\\n        # Returns an ImportModel for \\\\\\'module\\\\\\'\\\\n    \"\"\"\\\\n\\\\n    import_name_model: ImportNameModel = _build_import_name_model(node)\\\\n    import_model: ImportModel = _build_import_model(\\\\n        import_name_models=[import_name_model]\\\\n    )\\\\n    return import_model\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\\\nimport libcst\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef process_import_from(node: libcst.ImportFrom) -> ImportModel:\\\\n    \"\"\"\\\\n    Processes an ImportFrom node to create an ImportModel.\\\\n\\\\n    Args:\\\\n        node: The ImportFrom node to process.\\\\n\\\\n    Returns:\\\\n        An ImportModel representing the processed import from statement.\\\\n\\\\n    Example:\\\\n        >>> process_import_from(libcst.ImportFrom(module=libcst.Name(\"module\"), names=[libcst.ImportAlias(name=libcst.Name(\"submodule\"))]))\\\\n        # Returns an ImportModel for \\\\\\'from module import submodule\\\\\\'\\\\n    \"\"\"\\\\n\\\\n    module_name: str | None = (\\\\n        _get_full_module_path(node.module) if node.module else None\\\\n    )\\\\n    import_names: list[ImportNameModel] = _build_import_from_name_models(node)\\\\n    import_module_type: ImportModuleType = _get_import_from_module_type(module_name)\\\\n\\\\n    import_model = ImportModel(\\\\n        import_names=import_names,\\\\n        imported_from=module_name,\\\\n        import_module_type=import_module_type,\\\\n    )\\\\n    return import_model\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\\\nimport libcst\\\\nfrom postcode.python_parser.models.enums import ImportModuleType\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _get_import_name(node: libcst.Import) -> str:\\\\n    \"\"\"Gets the import name from an Import node.\"\"\"\\\\n\\\\n    return common_functions.extract_code_content(node.names[0].name)\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport libcst\\\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _get_as_name(node: libcst.Import) -> str | None:\\\\n    \"\"\"Gets the as name from an Import node.\"\"\"\\\\n\\\\n    first_name: libcst.ImportAlias = node.names[0]\\\\n\\\\n    if first_name.asname and isinstance(first_name.asname, libcst.AsName):\\\\n        as_name_node = first_name.asname.name\\\\n        if isinstance(as_name_node, libcst.Name):\\\\n            return as_name_node.value\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport libcst\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _build_import_name_model(node: libcst.Import) -> ImportNameModel:\\\\n    \"\"\"Builds an ImportNameModel from an Import node.\"\"\"\\\\n\\\\n    import_name: str | None = _get_import_name(node)\\\\n    as_name: str | None = _get_as_name(node)\\\\n    return ImportNameModel(name=import_name, as_name=as_name)\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\\\nimport libcst\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _is_standard_library_import(import_name: str) -> bool:\\\\n    \"\"\"Checks if an import is a standard library import.\"\"\"\\\\n\\\\n    return import_name in sys.stdlib_module_names\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport sys\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _third_party_imports() -> list[str]:\\\\n    \"\"\"Gets a list of all third party imports.\"\"\"\\\\n\\\\n    third_party_imports: list[str] = []\\\\n\\\\n    for module_name, module in sys.modules.items():\\\\n        if module_name in sys.stdlib_module_names or not hasattr(module, \"__file__\"):\\\\n            continue\\\\n\\\\n        module_file: str | None = module.__file__\\\\n        if module_file and (\\\\n            \"site-packages\" in module_file or \"dist-packages\" in module_file\\\\n        ):\\\\n            third_party_imports.append(module_name)\\\\n\\\\n    return third_party_imports\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport sys\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _is_third_party_import(import_name: str) -> bool:\\\\n    \"\"\"Checks if an import is a third party import.\"\"\"\\\\n\\\\n    return import_name in _third_party_imports()\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _determine_import_module_type(module_name: str) -> ImportModuleType:\\\\n    \"\"\"Determines the type of import a module is.\"\"\"\\\\n\\\\n    if _is_standard_library_import(module_name):\\\\n        return ImportModuleType.STANDARD_LIBRARY\\\\n    elif _is_third_party_import(module_name):\\\\n        return ImportModuleType.THIRD_PARTY\\\\n    else:\\\\n        return ImportModuleType.LOCAL\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.enums import ImportModuleType\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _get_import_module_type(\\\\n    import_name_models: list[ImportNameModel],\\\\n) -> ImportModuleType:\\\\n    \"\"\"Gets the import module type of a list of ImportNameModels.\"\"\"\\\\n\\\\n    for import_name_model in import_name_models:\\\\n        module_type = _determine_import_module_type(import_name_model.name)\\\\n        if module_type != ImportModuleType.LOCAL:\\\\n            return module_type\\\\n    return ImportModuleType.LOCAL\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\\\nfrom postcode.python_parser.models.enums import ImportModuleType\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _get_import_from_module_type(module_name: str | None) -> ImportModuleType:\\\\n    \"\"\"Gets the import module type of an ImportFrom node.\"\"\"\\\\n\\\\n    if module_name:\\\\n        return _determine_import_module_type(module_name)\\\\n    return ImportModuleType.LOCAL\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.enums import ImportModuleType\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _build_import_model(\\\\n    import_name_models: list[ImportNameModel],\\\\n) -> ImportModel:\\\\n    \"\"\"Builds an ImportModel from a list of ImportNameModels.\"\"\"\\\\n\\\\n    import_module_type: ImportModuleType = _get_import_module_type(import_name_models)\\\\n    return ImportModel(\\\\n        import_names=import_name_models,\\\\n        imported_from=None,\\\\n        import_module_type=import_module_type,\\\\n    )\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\\\nfrom postcode.python_parser.models.enums import ImportModuleType\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _get_full_module_path(node) -> str:\\\\n    \"\"\"Recursively gets the full module path from a node and returns it as a string.\"\"\"\\\\n\\\\n    if isinstance(node, libcst.Name):\\\\n        return node.value\\\\n    elif isinstance(node, libcst.Attribute):\\\\n        return common_functions.extract_code_content(node)\\\\n    else:\\\\n        print(f\"\\\\\\\\n\\\\\\\\nImport Node type: {type(node)}\\\\\\\\n\")\\\\n        # return str(node)\\\\n        return common_functions.extract_code_content(node)\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport libcst\\\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _extract_as_name(import_alias: libcst.ImportAlias) -> str | None:\\\\n    \"\"\"Extracts the as name from an ImportAlias node.\"\"\"\\\\n\\\\n    if import_alias.asname and isinstance(import_alias.asname, libcst.AsName):\\\\n        if isinstance(import_alias.asname.name, libcst.Name):\\\\n            return import_alias.asname.name.value\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nimport libcst\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\ndef _build_import_from_name_models(node: libcst.ImportFrom) -> list[ImportNameModel]:\\\\n    \"\"\"Builds a list of ImportNameModels from an ImportFrom node.\"\"\"\\\\n\\\\n    import_names: list[ImportNameModel] = []\\\\n    if isinstance(node.names, libcst.ImportStar):\\\\n        import_names.append(ImportNameModel(name=\"*\", as_name=None))\\\\n    else:\\\\n        for import_alias in node.names:\\\\n            if isinstance(import_alias, libcst.ImportAlias):\\\\n                name = str(import_alias.name.value)\\\\n                as_name = _extract_as_name(import_alias)\\\\n                import_names.append(ImportNameModel(name=name, as_name=as_name))\\\\n    return import_names\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\\\nimport libcst\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport sys\\nfrom typing import Sequence\\nimport libcst\\nfrom postcode.python_parser.models.enums import ImportModuleType\\nfrom postcode.python_parser.models.models import ImportNameModel, ImportModel\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "function_name": "extract_content_from_empty_lines",
            "docstring": "Extracts comments from a sequence of EmptyLine nodes.\n\nArgs:\n    sequence: A sequence of libcst.EmptyLine nodes to process.\n\nReturns:\n    A list of string comments extracted from the EmptyLine nodes.\n\nExample:\n    >>> extract_content_from_empty_lines([libcst.EmptyLine(comment=libcst.Comment(\"# Comment\"))])\n    ['# Comment']",
            "decorators": null,
            "parameters": null,
            "returns": "list[str]",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-extract_content_from_empty_lines",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 9,
            "end_line_num": 29,
            "code_content": "\n\ndef extract_content_from_empty_lines(\n    sequence: Sequence[libcst.EmptyLine],\n) -> list[str]:\n    \"\"\"\n    Extracts comments from a sequence of EmptyLine nodes.\n\n    Args:\n        sequence: A sequence of libcst.EmptyLine nodes to process.\n\n    Returns:\n        A list of string comments extracted from the EmptyLine nodes.\n\n    Example:\n        >>> extract_content_from_empty_lines([libcst.EmptyLine(comment=libcst.Comment(\"# Comment\"))])\n        ['# Comment']\n    \"\"\"\n\n    return [line.comment.value for line in sequence if line.comment]\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "Sequence",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef extract_content_from_empty_lines(\\n    sequence: Sequence[libcst.EmptyLine],\\n) -> list[str]:\\n    \"\"\"\\n    Extracts comments from a sequence of EmptyLine nodes.\\n\\n    Args:\\n        sequence: A sequence of libcst.EmptyLine nodes to process.\\n\\n    Returns:\\n        A list of string comments extracted from the EmptyLine nodes.\\n\\n    Example:\\n        >>> extract_content_from_empty_lines([libcst.EmptyLine(comment=libcst.Comment(\"# Comment\"))])\\n        [\\'# Comment\\']\\n    \"\"\"\\n\\n    return [line.comment.value for line in sequence if line.comment]\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom typing import Sequence\\nimport libcst\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "process_import",
            "docstring": "Processes an Import node to create an ImportModel.\n\nArgs:\n    node: The Import node to process.\n\nReturns:\n    An ImportModel representing the processed import.\n\nExample:\n    >>> process_import(libcst.Import(names=[libcst.ImportAlias(name=libcst.Name(\"module\"))]))\n    # Returns an ImportModel for 'module'",
            "decorators": null,
            "parameters": null,
            "returns": "ImportModel",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-process_import",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 29,
            "end_line_num": 51,
            "code_content": "\n\ndef process_import(node: libcst.Import) -> ImportModel:\n    \"\"\"\n    Processes an Import node to create an ImportModel.\n\n    Args:\n        node: The Import node to process.\n\n    Returns:\n        An ImportModel representing the processed import.\n\n    Example:\n        >>> process_import(libcst.Import(names=[libcst.ImportAlias(name=libcst.Name(\"module\"))]))\n        # Returns an ImportModel for 'module'\n    \"\"\"\n\n    import_name_model: ImportNameModel = _build_import_name_model(node)\n    import_model: ImportModel = _build_import_model(\n        import_name_models=[import_name_model]\n    )\n    return import_model\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_build_import_name_model"
                },
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_build_import_model"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportNameModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportNameModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef process_import(node: libcst.Import) -> ImportModel:\\n    \"\"\"\\n    Processes an Import node to create an ImportModel.\\n\\n    Args:\\n        node: The Import node to process.\\n\\n    Returns:\\n        An ImportModel representing the processed import.\\n\\n    Example:\\n        >>> process_import(libcst.Import(names=[libcst.ImportAlias(name=libcst.Name(\"module\"))]))\\n        # Returns an ImportModel for \\'module\\'\\n    \"\"\"\\n\\n    import_name_model: ImportNameModel = _build_import_name_model(node)\\n    import_model: ImportModel = _build_import_model(\\n        import_name_models=[import_name_model]\\n    )\\n    return import_model\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\nimport libcst\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "process_import_from",
            "docstring": "Processes an ImportFrom node to create an ImportModel.\n\nArgs:\n    node: The ImportFrom node to process.\n\nReturns:\n    An ImportModel representing the processed import from statement.\n\nExample:\n    >>> process_import_from(libcst.ImportFrom(module=libcst.Name(\"module\"), names=[libcst.ImportAlias(name=libcst.Name(\"submodule\"))]))\n    # Returns an ImportModel for 'from module import submodule'",
            "decorators": null,
            "parameters": null,
            "returns": "ImportModel",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-process_import_from",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 51,
            "end_line_num": 80,
            "code_content": "\n\ndef process_import_from(node: libcst.ImportFrom) -> ImportModel:\n    \"\"\"\n    Processes an ImportFrom node to create an ImportModel.\n\n    Args:\n        node: The ImportFrom node to process.\n\n    Returns:\n        An ImportModel representing the processed import from statement.\n\n    Example:\n        >>> process_import_from(libcst.ImportFrom(module=libcst.Name(\"module\"), names=[libcst.ImportAlias(name=libcst.Name(\"submodule\"))]))\n        # Returns an ImportModel for 'from module import submodule'\n    \"\"\"\n\n    module_name: str | None = (\n        _get_full_module_path(node.module) if node.module else None\n    )\n    import_names: list[ImportNameModel] = _build_import_from_name_models(node)\n    import_module_type: ImportModuleType = _get_import_from_module_type(module_name)\n\n    import_model = ImportModel(\n        import_names=import_names,\n        imported_from=module_name,\n        import_module_type=import_module_type,\n    )\n    return import_model\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-process_import"
                },
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_get_import_from_module_type"
                },
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_get_full_module_path"
                },
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_build_import_from_name_models"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportNameModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportNameModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModuleType",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:enums.py__*__MODULE__*__CLASS-ImportModuleType"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.enums",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:enums.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef process_import_from(node: libcst.ImportFrom) -> ImportModel:\\n    \"\"\"\\n    Processes an ImportFrom node to create an ImportModel.\\n\\n    Args:\\n        node: The ImportFrom node to process.\\n\\n    Returns:\\n        An ImportModel representing the processed import from statement.\\n\\n    Example:\\n        >>> process_import_from(libcst.ImportFrom(module=libcst.Name(\"module\"), names=[libcst.ImportAlias(name=libcst.Name(\"submodule\"))]))\\n        # Returns an ImportModel for \\'from module import submodule\\'\\n    \"\"\"\\n\\n    module_name: str | None = (\\n        _get_full_module_path(node.module) if node.module else None\\n    )\\n    import_names: list[ImportNameModel] = _build_import_from_name_models(node)\\n    import_module_type: ImportModuleType = _get_import_from_module_type(module_name)\\n\\n    import_model = ImportModel(\\n        import_names=import_names,\\n        imported_from=module_name,\\n        import_module_type=import_module_type,\\n    )\\n    return import_model\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\nimport libcst\\nfrom postcode.python_parser.models.enums import ImportModuleType\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_get_import_name",
            "docstring": "Gets the import name from an Import node.",
            "decorators": null,
            "parameters": null,
            "returns": "str",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_get_import_name",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 80,
            "end_line_num": 86,
            "code_content": "\n\ndef _get_import_name(node: libcst.Import) -> str:\n    \"\"\"Gets the import name from an Import node.\"\"\"\n\n    return common_functions.extract_code_content(node.names[0].name)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "postcode.python_parser.visitors.node_processing.common_functions",
                            "as_name": "common_functions",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _get_import_name(node: libcst.Import) -> str:\\n    \"\"\"Gets the import name from an Import node.\"\"\"\\n\\n    return common_functions.extract_code_content(node.names[0].name)\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport libcst\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_get_as_name",
            "docstring": "Gets the as name from an Import node.",
            "decorators": null,
            "parameters": null,
            "returns": "str | None",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_get_as_name",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 86,
            "end_line_num": 97,
            "code_content": "\n\ndef _get_as_name(node: libcst.Import) -> str | None:\n    \"\"\"Gets the as name from an Import node.\"\"\"\n\n    first_name: libcst.ImportAlias = node.names[0]\n\n    if first_name.asname and isinstance(first_name.asname, libcst.AsName):\n        as_name_node = first_name.asname.name\n        if isinstance(as_name_node, libcst.Name):\n            return as_name_node.value\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _get_as_name(node: libcst.Import) -> str | None:\\n    \"\"\"Gets the as name from an Import node.\"\"\"\\n\\n    first_name: libcst.ImportAlias = node.names[0]\\n\\n    if first_name.asname and isinstance(first_name.asname, libcst.AsName):\\n        as_name_node = first_name.asname.name\\n        if isinstance(as_name_node, libcst.Name):\\n            return as_name_node.value\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport libcst\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_build_import_name_model",
            "docstring": "Builds an ImportNameModel from an Import node.",
            "decorators": null,
            "parameters": null,
            "returns": "ImportNameModel",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_build_import_name_model",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 97,
            "end_line_num": 105,
            "code_content": "\n\ndef _build_import_name_model(node: libcst.Import) -> ImportNameModel:\n    \"\"\"Builds an ImportNameModel from an Import node.\"\"\"\n\n    import_name: str | None = _get_import_name(node)\n    as_name: str | None = _get_as_name(node)\n    return ImportNameModel(name=import_name, as_name=as_name)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_get_import_name"
                },
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_get_as_name"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportNameModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _build_import_name_model(node: libcst.Import) -> ImportNameModel:\\n    \"\"\"Builds an ImportNameModel from an Import node.\"\"\"\\n\\n    import_name: str | None = _get_import_name(node)\\n    as_name: str | None = _get_as_name(node)\\n    return ImportNameModel(name=import_name, as_name=as_name)\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\nimport libcst\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_is_standard_library_import",
            "docstring": "Checks if an import is a standard library import.",
            "decorators": null,
            "parameters": null,
            "returns": "bool",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_is_standard_library_import",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 105,
            "end_line_num": 111,
            "code_content": "\n\ndef _is_standard_library_import(import_name: str) -> bool:\n    \"\"\"Checks if an import is a standard library import.\"\"\"\n\n    return import_name in sys.stdlib_module_names\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "sys",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _is_standard_library_import(import_name: str) -> bool:\\n    \"\"\"Checks if an import is a standard library import.\"\"\"\\n\\n    return import_name in sys.stdlib_module_names\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport sys\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_third_party_imports",
            "docstring": "Gets a list of all third party imports.",
            "decorators": null,
            "parameters": null,
            "returns": "list[str]",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_third_party_imports",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 111,
            "end_line_num": 129,
            "code_content": "\n\ndef _third_party_imports() -> list[str]:\n    \"\"\"Gets a list of all third party imports.\"\"\"\n\n    third_party_imports: list[str] = []\n\n    for module_name, module in sys.modules.items():\n        if module_name in sys.stdlib_module_names or not hasattr(module, \"__file__\"):\n            continue\n\n        module_file: str | None = module.__file__\n        if module_file and (\n            \"site-packages\" in module_file or \"dist-packages\" in module_file\n        ):\n            third_party_imports.append(module_name)\n\n    return third_party_imports\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "sys",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _third_party_imports() -> list[str]:\\n    \"\"\"Gets a list of all third party imports.\"\"\"\\n\\n    third_party_imports: list[str] = []\\n\\n    for module_name, module in sys.modules.items():\\n        if module_name in sys.stdlib_module_names or not hasattr(module, \"__file__\"):\\n            continue\\n\\n        module_file: str | None = module.__file__\\n        if module_file and (\\n            \"site-packages\" in module_file or \"dist-packages\" in module_file\\n        ):\\n            third_party_imports.append(module_name)\\n\\n    return third_party_imports\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport sys\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_is_third_party_import",
            "docstring": "Checks if an import is a third party import.",
            "decorators": null,
            "parameters": null,
            "returns": "bool",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_is_third_party_import",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 129,
            "end_line_num": 135,
            "code_content": "\n\ndef _is_third_party_import(import_name: str) -> bool:\n    \"\"\"Checks if an import is a third party import.\"\"\"\n\n    return import_name in _third_party_imports()\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_third_party_imports"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _is_third_party_import(import_name: str) -> bool:\\n    \"\"\"Checks if an import is a third party import.\"\"\"\\n\\n    return import_name in _third_party_imports()\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_determine_import_module_type",
            "docstring": "Determines the type of import a module is.",
            "decorators": null,
            "parameters": null,
            "returns": "ImportModuleType",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_determine_import_module_type",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 135,
            "end_line_num": 146,
            "code_content": "\n\ndef _determine_import_module_type(module_name: str) -> ImportModuleType:\n    \"\"\"Determines the type of import a module is.\"\"\"\n\n    if _is_standard_library_import(module_name):\n        return ImportModuleType.STANDARD_LIBRARY\n    elif _is_third_party_import(module_name):\n        return ImportModuleType.THIRD_PARTY\n    else:\n        return ImportModuleType.LOCAL\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_is_standard_library_import"
                },
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_is_third_party_import"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModuleType",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:enums.py__*__MODULE__*__CLASS-ImportModuleType"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.enums",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:enums.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _determine_import_module_type(module_name: str) -> ImportModuleType:\\n    \"\"\"Determines the type of import a module is.\"\"\"\\n\\n    if _is_standard_library_import(module_name):\\n        return ImportModuleType.STANDARD_LIBRARY\\n    elif _is_third_party_import(module_name):\\n        return ImportModuleType.THIRD_PARTY\\n    else:\\n        return ImportModuleType.LOCAL\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.enums import ImportModuleType\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_get_import_module_type",
            "docstring": "Gets the import module type of a list of ImportNameModels.",
            "decorators": null,
            "parameters": null,
            "returns": "ImportModuleType",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_get_import_module_type",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 146,
            "end_line_num": 158,
            "code_content": "\n\ndef _get_import_module_type(\n    import_name_models: list[ImportNameModel],\n) -> ImportModuleType:\n    \"\"\"Gets the import module type of a list of ImportNameModels.\"\"\"\n\n    for import_name_model in import_name_models:\n        module_type = _determine_import_module_type(import_name_model.name)\n        if module_type != ImportModuleType.LOCAL:\n            return module_type\n    return ImportModuleType.LOCAL\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_determine_import_module_type"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportNameModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModuleType",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:enums.py__*__MODULE__*__CLASS-ImportModuleType"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.enums",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:enums.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _get_import_module_type(\\n    import_name_models: list[ImportNameModel],\\n) -> ImportModuleType:\\n    \"\"\"Gets the import module type of a list of ImportNameModels.\"\"\"\\n\\n    for import_name_model in import_name_models:\\n        module_type = _determine_import_module_type(import_name_model.name)\\n        if module_type != ImportModuleType.LOCAL:\\n            return module_type\\n    return ImportModuleType.LOCAL\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\nfrom postcode.python_parser.models.enums import ImportModuleType\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_get_import_from_module_type",
            "docstring": "Gets the import module type of an ImportFrom node.",
            "decorators": null,
            "parameters": null,
            "returns": "ImportModuleType",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_get_import_from_module_type",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 158,
            "end_line_num": 166,
            "code_content": "\n\ndef _get_import_from_module_type(module_name: str | None) -> ImportModuleType:\n    \"\"\"Gets the import module type of an ImportFrom node.\"\"\"\n\n    if module_name:\n        return _determine_import_module_type(module_name)\n    return ImportModuleType.LOCAL\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_determine_import_module_type"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModuleType",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:enums.py__*__MODULE__*__CLASS-ImportModuleType"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.enums",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:enums.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _get_import_from_module_type(module_name: str | None) -> ImportModuleType:\\n    \"\"\"Gets the import module type of an ImportFrom node.\"\"\"\\n\\n    if module_name:\\n        return _determine_import_module_type(module_name)\\n    return ImportModuleType.LOCAL\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.enums import ImportModuleType\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_build_import_model",
            "docstring": "Builds an ImportModel from a list of ImportNameModels.",
            "decorators": null,
            "parameters": null,
            "returns": "ImportModel",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_build_import_model",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 166,
            "end_line_num": 179,
            "code_content": "\n\ndef _build_import_model(\n    import_name_models: list[ImportNameModel],\n) -> ImportModel:\n    \"\"\"Builds an ImportModel from a list of ImportNameModels.\"\"\"\n\n    import_module_type: ImportModuleType = _get_import_module_type(import_name_models)\n    return ImportModel(\n        import_names=import_name_models,\n        imported_from=None,\n        import_module_type=import_module_type,\n    )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_get_import_module_type"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportNameModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportNameModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModuleType",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:enums.py__*__MODULE__*__CLASS-ImportModuleType"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.enums",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:enums.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _build_import_model(\\n    import_name_models: list[ImportNameModel],\\n) -> ImportModel:\\n    \"\"\"Builds an ImportModel from a list of ImportNameModels.\"\"\"\\n\\n    import_module_type: ImportModuleType = _get_import_module_type(import_name_models)\\n    return ImportModel(\\n        import_names=import_name_models,\\n        imported_from=None,\\n        import_module_type=import_module_type,\\n    )\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\nfrom postcode.python_parser.models.enums import ImportModuleType\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_get_full_module_path",
            "docstring": "Recursively gets the full module path from a node and returns it as a string.",
            "decorators": null,
            "parameters": null,
            "returns": "str",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_get_full_module_path",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 179,
            "end_line_num": 192,
            "code_content": "\n\ndef _get_full_module_path(node) -> str:\n    \"\"\"Recursively gets the full module path from a node and returns it as a string.\"\"\"\n\n    if isinstance(node, libcst.Name):\n        return node.value\n    elif isinstance(node, libcst.Attribute):\n        return common_functions.extract_code_content(node)\n    else:\n        print(f\"\\n\\nImport Node type: {type(node)}\\n\")\n        # return str(node)\n        return common_functions.extract_code_content(node)\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "postcode.python_parser.visitors.node_processing.common_functions",
                            "as_name": "common_functions",
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _get_full_module_path(node) -> str:\\n    \"\"\"Recursively gets the full module path from a node and returns it as a string.\"\"\"\\n\\n    if isinstance(node, libcst.Name):\\n        return node.value\\n    elif isinstance(node, libcst.Attribute):\\n        return common_functions.extract_code_content(node)\\n    else:\\n        print(f\"\\\\n\\\\nImport Node type: {type(node)}\\\\n\")\\n        # return str(node)\\n        return common_functions.extract_code_content(node)\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport libcst\\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_extract_as_name",
            "docstring": "Extracts the as name from an ImportAlias node.",
            "decorators": null,
            "parameters": null,
            "returns": "str | None",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_extract_as_name",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 192,
            "end_line_num": 200,
            "code_content": "\n\ndef _extract_as_name(import_alias: libcst.ImportAlias) -> str | None:\n    \"\"\"Extracts the as name from an ImportAlias node.\"\"\"\n\n    if import_alias.asname and isinstance(import_alias.asname, libcst.AsName):\n        if isinstance(import_alias.asname.name, libcst.Name):\n            return import_alias.asname.name.value\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _extract_as_name(import_alias: libcst.ImportAlias) -> str | None:\\n    \"\"\"Extracts the as name from an ImportAlias node.\"\"\"\\n\\n    if import_alias.asname and isinstance(import_alias.asname, libcst.AsName):\\n        if isinstance(import_alias.asname.name, libcst.Name):\\n            return import_alias.asname.name.value\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nimport libcst\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "function_name": "_build_import_from_name_models",
            "docstring": "Builds a list of ImportNameModels from an ImportFrom node.",
            "decorators": null,
            "parameters": null,
            "returns": "list[ImportNameModel]",
            "is_method": false,
            "is_async": false,
            "id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_build_import_from_name_models",
            "parent_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
            "block_type": "FUNCTION",
            "start_line_num": 200,
            "end_line_num": 215,
            "code_content": "\n\ndef _build_import_from_name_models(node: libcst.ImportFrom) -> list[ImportNameModel]:\n    \"\"\"Builds a list of ImportNameModels from an ImportFrom node.\"\"\"\n\n    import_names: list[ImportNameModel] = []\n    if isinstance(node.names, libcst.ImportStar):\n        import_names.append(ImportNameModel(name=\"*\", as_name=None))\n    else:\n        for import_alias in node.names:\n            if isinstance(import_alias, libcst.ImportAlias):\n                name = str(import_alias.name.value)\n                as_name = _extract_as_name(import_alias)\n                import_names.append(ImportNameModel(name=name, as_name=as_name))\n    return import_names\n",
            "important_comments": null,
            "dependencies": [
                {
                    "code_block_id": "postcode:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_extract_as_name"
                },
                {
                    "import_names": [
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportNameModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "libcst",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": null,
                    "import_module_type": "THIRD_PARTY",
                    "local_module_id": null
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\ndef _build_import_from_name_models(node: libcst.ImportFrom) -> list[ImportNameModel]:\\n    \"\"\"Builds a list of ImportNameModels from an ImportFrom node.\"\"\"\\n\\n    import_names: list[ImportNameModel] = []\\n    if isinstance(node.names, libcst.ImportStar):\\n        import_names.append(ImportNameModel(name=\"*\", as_name=None))\\n    else:\\n        for import_alias in node.names:\\n            if isinstance(import_alias, libcst.ImportAlias):\\n                name = str(import_alias.name.value)\\n                as_name = _extract_as_name(import_alias)\\n                import_names.append(ImportNameModel(name=name, as_name=as_name))\\n    return import_names\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.models import ImportModel, ImportNameModel\\nimport libcst\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        }
    ]
}