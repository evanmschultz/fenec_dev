{
    "file_path": "postcode/python_parser/model_builders/base_model_builder.py",
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "annotations",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "__future__",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "TYPE_CHECKING",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Any",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Union",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ABC",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "abstractmethod",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "abc",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-ImportModel"
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                },
                {
                    "name": "CommentModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-CommentModel"
                },
                {
                    "name": "BaseCodeBlockModel",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel"
                }
            ],
            "imported_from": "postcode.python_parser.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                }
            ],
            "imported_from": "postcode.python_parser.models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:models:enums.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModuleModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.module_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "StandaloneBlockModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.standalone_block_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
        }
    ],
    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE",
    "parent_id": null,
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 235,
    "code_content": "from __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Any, Union\nfrom abc import ABC, abstractmethod\n\nfrom postcode.python_parser.models.models import (\n    BaseCodeBlockModel,\n    CommentModel,\n    ImportModel,\n    DependencyModel,\n)\n\nfrom postcode.python_parser.models.enums import BlockType\n\nif TYPE_CHECKING:\n    from postcode.python_parser.model_builders.class_model_builder import (\n        ClassModelBuilder,\n    )\n    from postcode.python_parser.model_builders.function_model_builder import (\n        FunctionModelBuilder,\n    )\n    from postcode.python_parser.model_builders.module_model_builder import (\n        ModuleModelBuilder,\n    )\n    from postcode.python_parser.model_builders.standalone_block_model_builder import (\n        StandaloneBlockModelBuilder,\n    )\n\n\nclass BaseModelBuilder(ABC):\n    \"\"\"\n    Abstract base class for building models of different code blocks.\n\n    This class follows the builder pattern, providing a structured approach to constructing models for various types of code blocks (like modules, classes, functions). It defines common attributes and methods used across all specific model builders.\n\n    Attributes:\n        id (str): The unique identifier for the code block.\n        children_builders (list[Union[ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]]):\n            A list of builders for the children code blocks.\n        common_attributes (BaseCodeBlockModel): An instance containing common attributes shared across different code block models.\n\n    Example:\n        # This example demonstrates how a derived builder might be initialized and used.\n        >>> class SomeModelBuilder(BaseModelBuilder):\n                def build(self):\n                    # Building logic specific to 'SomeModelBuilder'\n                    pass\n        >>> builder = SomeModelBuilder(id='123', block_type=BlockType.CLASS, parent_id='root')\n        >>> builder.set_start_line_num(1).set_end_line_num(10)\n        # Sets the start and end line numbers for the code block.\n    \"\"\"\n\n    def __init__(\n        self, *, id: str, block_type: BlockType, parent_id: str | None\n    ) -> None:\n        self.id: str = id\n        self.children_builders: list[\n            ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\n        ] = []\n\n        self.common_attributes = BaseCodeBlockModel(\n            id=id,\n            parent_id=parent_id,\n            block_type=block_type,\n            start_line_num=0,\n            end_line_num=0,\n            code_content=\"\",\n            important_comments=None,\n            children=None,\n            dependencies=None,\n            summary=None,\n        )\n\n    def set_start_line_num(\n        self, line_num: int\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the start line number of the code block model instance.\"\"\"\n        self.common_attributes.start_line_num = line_num\n        return self\n\n    def set_end_line_num(\n        self, line_num: int\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the end line number of the code block model instance.\"\"\"\n        self.common_attributes.end_line_num = line_num\n        return self\n\n    def set_code_content(\n        self, code_content: str\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds the string containing the content of the code block to the model instance.\"\"\"\n        self.common_attributes.code_content = code_content\n        return self\n\n    def add_important_comment(\n        self, comment: CommentModel\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds an important comment to the model instance.\"\"\"\n        if not self.common_attributes.important_comments:\n            self.common_attributes.important_comments = []\n        self.common_attributes.important_comments.append(comment)\n        return self\n\n    def add_summary(\n        self, summary: str\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds a summary to the model instance.\"\"\"\n        self.common_attributes.summary = summary\n        # print(f\"Added summary to {self.common_attributes.id}\")\n        return self\n\n    def add_child(\n        self,\n        child: Union[\n            \"ClassModelBuilder\", \"FunctionModelBuilder\", StandaloneBlockModelBuilder\n        ],\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds a child code block to the model instance.\"\"\"\n        self.children_builders.append(child)\n        return self\n\n    def set_dependencies(\n        self, dependencies: list[ImportModel | DependencyModel] | None\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the dependencies of the model instance.\"\"\"\n        self.common_attributes.dependencies = dependencies\n        return self\n\n    def update_import_dependency(\n        self,\n        new_import_model: ImportModel,\n        old_import_model: ImportModel,\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"\n        Updates an import in the model instance.\n\n        Args:\n            new_import_model (ImportModel): The updated import model.\n            old_import_model\n\n        Returns:\n            BaseModelBuilder: The base model builder instance.\n        \"\"\"\n\n        if self.common_attributes.dependencies:\n            import_model_to_remove: ImportModel | None = None\n            for existing_import_model in self.common_attributes.dependencies:\n                if isinstance(existing_import_model, DependencyModel):\n                    continue\n\n                if (\n                    existing_import_model.import_names == old_import_model.import_names\n                    and existing_import_model.imported_from\n                    == old_import_model.imported_from\n                    and existing_import_model.import_module_type\n                    == old_import_model.import_module_type\n                ):\n                    import_model_to_remove = existing_import_model\n                    break\n\n            if not import_model_to_remove:\n                raise Exception(f\"Could not find import to remove: {old_import_model}\")\n\n            self.common_attributes.dependencies.remove(import_model_to_remove)\n            self.common_attributes.dependencies.append(new_import_model)\n        else:\n            raise Exception(\n                f\"No imports in the builders imports list: {self.common_attributes.dependencies}\"\n            )\n        return self\n\n    def build_and_set_children(self) -> None:\n        if self.children_builders:\n            self.common_attributes.children = [\n                child.build() for child in self.children_builders\n            ]\n\n    def _get_common_attributes(self) -> dict[str, Any]:\n        \"\"\"\n        Returns a dictionary containing the attributes common to all code block models.\n        \"\"\"\n        return self.common_attributes.model_dump()\n\n    @abstractmethod\n    def build(\n        self,\n    ) -> None:\n        \"\"\"\n        Builds and returns the code block model instance.\n\n        Returns:\n            CodeBlockModel: The built code block model instance.\n        \"\"\"\n        ...\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nfrom __future__ import annotations\\n\\nfrom typing import TYPE_CHECKING, Any, Union\\nfrom abc import ABC, abstractmethod\\n\\nfrom postcode.python_parser.models.models import (\\n    BaseCodeBlockModel,\\n    CommentModel,\\n    ImportModel,\\n    DependencyModel,\\n)\\n\\nfrom postcode.python_parser.models.enums import BlockType\\n\\nif TYPE_CHECKING:\\n    from postcode.python_parser.model_builders.class_model_builder import (\\n        ClassModelBuilder,\\n    )\\n    from postcode.python_parser.model_builders.function_model_builder import (\\n        FunctionModelBuilder,\\n    )\\n    from postcode.python_parser.model_builders.module_model_builder import (\\n        ModuleModelBuilder,\\n    )\\n    from postcode.python_parser.model_builders.standalone_block_model_builder import (\\n        StandaloneBlockModelBuilder,\\n    )\\n\\n\\nclass BaseModelBuilder(ABC):\\n    \"\"\"\\n    Abstract base class for building models of different code blocks.\\n\\n    This class follows the builder pattern, providing a structured approach to constructing models for various types of code blocks (like modules, classes, functions). It defines common attributes and methods used across all specific model builders.\\n\\n    Attributes:\\n        id (str): The unique identifier for the code block.\\n        children_builders (list[Union[ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]]):\\n            A list of builders for the children code blocks.\\n        common_attributes (BaseCodeBlockModel): An instance containing common attributes shared across different code block models.\\n\\n    Example:\\n        # This example demonstrates how a derived builder might be initialized and used.\\n        >>> class SomeModelBuilder(BaseModelBuilder):\\n                def build(self):\\n                    # Building logic specific to \\'SomeModelBuilder\\'\\n                    pass\\n        >>> builder = SomeModelBuilder(id=\\'123\\', block_type=BlockType.CLASS, parent_id=\\'root\\')\\n        >>> builder.set_start_line_num(1).set_end_line_num(10)\\n        # Sets the start and end line numbers for the code block.\\n    \"\"\"\\n\\n    def __init__(\\n        self, *, id: str, block_type: BlockType, parent_id: str | None\\n    ) -> None:\\n        self.id: str = id\\n        self.children_builders: list[\\n            ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\\n        ] = []\\n\\n        self.common_attributes = BaseCodeBlockModel(\\n            id=id,\\n            parent_id=parent_id,\\n            block_type=block_type,\\n            start_line_num=0,\\n            end_line_num=0,\\n            code_content=\"\",\\n            important_comments=None,\\n            children=None,\\n            dependencies=None,\\n            summary=None,\\n        )\\n\\n    def set_start_line_num(\\n        self, line_num: int\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Sets the start line number of the code block model instance.\"\"\"\\n        self.common_attributes.start_line_num = line_num\\n        return self\\n\\n    def set_end_line_num(\\n        self, line_num: int\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Sets the end line number of the code block model instance.\"\"\"\\n        self.common_attributes.end_line_num = line_num\\n        return self\\n\\n    def set_code_content(\\n        self, code_content: str\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Adds the string containing the content of the code block to the model instance.\"\"\"\\n        self.common_attributes.code_content = code_content\\n        return self\\n\\n    def add_important_comment(\\n        self, comment: CommentModel\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Adds an important comment to the model instance.\"\"\"\\n        if not self.common_attributes.important_comments:\\n            self.common_attributes.important_comments = []\\n        self.common_attributes.important_comments.append(comment)\\n        return self\\n\\n    def add_summary(\\n        self, summary: str\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Adds a summary to the model instance.\"\"\"\\n        self.common_attributes.summary = summary\\n        # print(f\"Added summary to {self.common_attributes.id}\")\\n        return self\\n\\n    def add_child(\\n        self,\\n        child: Union[\\n            \"ClassModelBuilder\", \"FunctionModelBuilder\", StandaloneBlockModelBuilder\\n        ],\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Adds a child code block to the model instance.\"\"\"\\n        self.children_builders.append(child)\\n        return self\\n\\n    def set_dependencies(\\n        self, dependencies: list[ImportModel | DependencyModel] | None\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Sets the dependencies of the model instance.\"\"\"\\n        self.common_attributes.dependencies = dependencies\\n        return self\\n\\n    def update_import_dependency(\\n        self,\\n        new_import_model: ImportModel,\\n        old_import_model: ImportModel,\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"\\n        Updates an import in the model instance.\\n\\n        Args:\\n            new_import_model (ImportModel): The updated import model.\\n            old_import_model\\n\\n        Returns:\\n            BaseModelBuilder: The base model builder instance.\\n        \"\"\"\\n\\n        if self.common_attributes.dependencies:\\n            import_model_to_remove: ImportModel | None = None\\n            for existing_import_model in self.common_attributes.dependencies:\\n                if isinstance(existing_import_model, DependencyModel):\\n                    continue\\n\\n                if (\\n                    existing_import_model.import_names == old_import_model.import_names\\n                    and existing_import_model.imported_from\\n                    == old_import_model.imported_from\\n                    and existing_import_model.import_module_type\\n                    == old_import_model.import_module_type\\n                ):\\n                    import_model_to_remove = existing_import_model\\n                    break\\n\\n            if not import_model_to_remove:\\n                raise Exception(f\"Could not find import to remove: {old_import_model}\")\\n\\n            self.common_attributes.dependencies.remove(import_model_to_remove)\\n            self.common_attributes.dependencies.append(new_import_model)\\n        else:\\n            raise Exception(\\n                f\"No imports in the builders imports list: {self.common_attributes.dependencies}\"\\n            )\\n        return self\\n\\n    def build_and_set_children(self) -> None:\\n        if self.children_builders:\\n            self.common_attributes.children = [\\n                child.build() for child in self.children_builders\\n            ]\\n\\n    def _get_common_attributes(self) -> dict[str, Any]:\\n        \"\"\"\\n        Returns a dictionary containing the attributes common to all code block models.\\n        \"\"\"\\n        return self.common_attributes.model_dump()\\n\\n    @abstractmethod\\n    def build(\\n        self,\\n    ) -> None:\\n        \"\"\"\\n        Builds and returns the code block model instance.\\n\\n        Returns:\\n            CodeBlockModel: The built code block model instance.\\n        \"\"\"\\n        ...\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\nif TYPE_CHECKING:\\\\n    from postcode.python_parser.model_builders.class_model_builder import (\\\\n        ClassModelBuilder,\\\\n    )\\\\n    from postcode.python_parser.model_builders.function_model_builder import (\\\\n        FunctionModelBuilder,\\\\n    )\\\\n    from postcode.python_parser.model_builders.module_model_builder import (\\\\n        ModuleModelBuilder,\\\\n    )\\\\n    from postcode.python_parser.model_builders.standalone_block_model_builder import (\\\\n        StandaloneBlockModelBuilder,\\\\n    )\\\\n\\\\n```\\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom typing import TYPE_CHECKING, Any, Union\\\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\\\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\\\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n\\\\nclass BaseModelBuilder(ABC):\\\\n    \"\"\"\\\\n    Abstract base class for building models of different code blocks.\\\\n\\\\n    This class follows the builder pattern, providing a structured approach to constructing models for various types of code blocks (like modules, classes, functions). It defines common attributes and methods used across all specific model builders.\\\\n\\\\n    Attributes:\\\\n        id (str): The unique identifier for the code block.\\\\n        children_builders (list[Union[ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]]):\\\\n            A list of builders for the children code blocks.\\\\n        common_attributes (BaseCodeBlockModel): An instance containing common attributes shared across different code block models.\\\\n\\\\n    Example:\\\\n        # This example demonstrates how a derived builder might be initialized and used.\\\\n        >>> class SomeModelBuilder(BaseModelBuilder):\\\\n                def build(self):\\\\n                    # Building logic specific to \\\\\\'SomeModelBuilder\\\\\\'\\\\n                    pass\\\\n        >>> builder = SomeModelBuilder(id=\\\\\\'123\\\\\\', block_type=BlockType.CLASS, parent_id=\\\\\\'root\\\\\\')\\\\n        >>> builder.set_start_line_num(1).set_end_line_num(10)\\\\n        # Sets the start and end line numbers for the code block.\\\\n    \"\"\"\\\\n\\\\n    def __init__(\\\\n        self, *, id: str, block_type: BlockType, parent_id: str | None\\\\n    ) -> None:\\\\n        self.id: str = id\\\\n        self.children_builders: list[\\\\n            ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\\\\n        ] = []\\\\n\\\\n        self.common_attributes = BaseCodeBlockModel(\\\\n            id=id,\\\\n            parent_id=parent_id,\\\\n            block_type=block_type,\\\\n            start_line_num=0,\\\\n            end_line_num=0,\\\\n            code_content=\"\",\\\\n            important_comments=None,\\\\n            children=None,\\\\n            dependencies=None,\\\\n            summary=None,\\\\n        )\\\\n\\\\n    def set_start_line_num(\\\\n        self, line_num: int\\\\n    ) -> Union[\\\\n        \"BaseModelBuilder\",\\\\n        \"ModuleModelBuilder\",\\\\n        \"ClassModelBuilder\",\\\\n        \"FunctionModelBuilder\",\\\\n    ]:\\\\n        \"\"\"Sets the start line number of the code block model instance.\"\"\"\\\\n        self.common_attributes.start_line_num = line_num\\\\n        return self\\\\n\\\\n    def set_end_line_num(\\\\n        self, line_num: int\\\\n    ) -> Union[\\\\n        \"BaseModelBuilder\",\\\\n        \"ModuleModelBuilder\",\\\\n        \"ClassModelBuilder\",\\\\n        \"FunctionModelBuilder\",\\\\n    ]:\\\\n        \"\"\"Sets the end line number of the code block model instance.\"\"\"\\\\n        self.common_attributes.end_line_num = line_num\\\\n        return self\\\\n\\\\n    def set_code_content(\\\\n        self, code_content: str\\\\n    ) -> Union[\\\\n        \"BaseModelBuilder\",\\\\n        \"ModuleModelBuilder\",\\\\n        \"ClassModelBuilder\",\\\\n        \"FunctionModelBuilder\",\\\\n    ]:\\\\n        \"\"\"Adds the string containing the content of the code block to the model instance.\"\"\"\\\\n        self.common_attributes.code_content = code_content\\\\n        return self\\\\n\\\\n    def add_important_comment(\\\\n        self, comment: CommentModel\\\\n    ) -> Union[\\\\n        \"BaseModelBuilder\",\\\\n        \"ModuleModelBuilder\",\\\\n        \"ClassModelBuilder\",\\\\n        \"FunctionModelBuilder\",\\\\n    ]:\\\\n        \"\"\"Adds an important comment to the model instance.\"\"\"\\\\n        if not self.common_attributes.important_comments:\\\\n            self.common_attributes.important_comments = []\\\\n        self.common_attributes.important_comments.append(comment)\\\\n        return self\\\\n\\\\n    def add_summary(\\\\n        self, summary: str\\\\n    ) -> Union[\\\\n        \"BaseModelBuilder\",\\\\n        \"ModuleModelBuilder\",\\\\n        \"ClassModelBuilder\",\\\\n        \"FunctionModelBuilder\",\\\\n    ]:\\\\n        \"\"\"Adds a summary to the model instance.\"\"\"\\\\n        self.common_attributes.summary = summary\\\\n        # print(f\"Added summary to {self.common_attributes.id}\")\\\\n        return self\\\\n\\\\n    def add_child(\\\\n        self,\\\\n        child: Union[\\\\n            \"ClassModelBuilder\", \"FunctionModelBuilder\", StandaloneBlockModelBuilder\\\\n        ],\\\\n    ) -> Union[\\\\n        \"BaseModelBuilder\",\\\\n        \"ModuleModelBuilder\",\\\\n        \"ClassModelBuilder\",\\\\n        \"FunctionModelBuilder\",\\\\n    ]:\\\\n        \"\"\"Adds a child code block to the model instance.\"\"\"\\\\n        self.children_builders.append(child)\\\\n        return self\\\\n\\\\n    def set_dependencies(\\\\n        self, dependencies: list[ImportModel | DependencyModel] | None\\\\n    ) -> Union[\\\\n        \"BaseModelBuilder\",\\\\n        \"ModuleModelBuilder\",\\\\n        \"ClassModelBuilder\",\\\\n        \"FunctionModelBuilder\",\\\\n    ]:\\\\n        \"\"\"Sets the dependencies of the model instance.\"\"\"\\\\n        self.common_attributes.dependencies = dependencies\\\\n        return self\\\\n\\\\n    def update_import_dependency(\\\\n        self,\\\\n        new_import_model: ImportModel,\\\\n        old_import_model: ImportModel,\\\\n    ) -> Union[\\\\n        \"BaseModelBuilder\",\\\\n        \"ModuleModelBuilder\",\\\\n        \"ClassModelBuilder\",\\\\n        \"FunctionModelBuilder\",\\\\n    ]:\\\\n        \"\"\"\\\\n        Updates an import in the model instance.\\\\n\\\\n        Args:\\\\n            new_import_model (ImportModel): The updated import model.\\\\n            old_import_model\\\\n\\\\n        Returns:\\\\n            BaseModelBuilder: The base model builder instance.\\\\n        \"\"\"\\\\n\\\\n        if self.common_attributes.dependencies:\\\\n            import_model_to_remove: ImportModel | None = None\\\\n            for existing_import_model in self.common_attributes.dependencies:\\\\n                if isinstance(existing_import_model, DependencyModel):\\\\n                    continue\\\\n\\\\n                if (\\\\n                    existing_import_model.import_names == old_import_model.import_names\\\\n                    and existing_import_model.imported_from\\\\n                    == old_import_model.imported_from\\\\n                    and existing_import_model.import_module_type\\\\n                    == old_import_model.import_module_type\\\\n                ):\\\\n                    import_model_to_remove = existing_import_model\\\\n                    break\\\\n\\\\n            if not import_model_to_remove:\\\\n                raise Exception(f\"Could not find import to remove: {old_import_model}\")\\\\n\\\\n            self.common_attributes.dependencies.remove(import_model_to_remove)\\\\n            self.common_attributes.dependencies.append(new_import_model)\\\\n        else:\\\\n            raise Exception(\\\\n                f\"No imports in the builders imports list: {self.common_attributes.dependencies}\"\\\\n            )\\\\n        return self\\\\n\\\\n    def build_and_set_children(self) -> None:\\\\n        if self.children_builders:\\\\n            self.common_attributes.children = [\\\\n                child.build() for child in self.children_builders\\\\n            ]\\\\n\\\\n    def _get_common_attributes(self) -> dict[str, Any]:\\\\n        \"\"\"\\\\n        Returns a dictionary containing the attributes common to all code block models.\\\\n        \"\"\"\\\\n        return self.common_attributes.model_dump()\\\\n\\\\n    @abstractmethod\\\\n    def build(\\\\n        self,\\\\n    ) -> None:\\\\n        \"\"\"\\\\n        Builds and returns the code block model instance.\\\\n\\\\n        Returns:\\\\n            CodeBlockModel: The built code block model instance.\\\\n        \"\"\"\\\\n        ...\\\\n\\\\n```\\\\n\\\\nCHILDREN_SUMMARIES:\\\\n\\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef __init__(\\\\\\\\n    self, *, id: str, block_type: BlockType, parent_id: str | None\\\\\\\\n) -> None:\\\\\\\\n    self.id: str = id\\\\\\\\n    self.children_builders: list[\\\\\\\\n        ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\\\\\\\\n    ] = []\\\\\\\\n\\\\\\\\n    self.common_attributes = BaseCodeBlockModel(\\\\\\\\n        id=id,\\\\\\\\n        parent_id=parent_id,\\\\\\\\n        block_type=block_type,\\\\\\\\n        start_line_num=0,\\\\\\\\n        end_line_num=0,\\\\\\\\n        code_content=\"\",\\\\\\\\n        important_comments=None,\\\\\\\\n        children=None,\\\\\\\\n        dependencies=None,\\\\\\\\n        summary=None,\\\\\\\\n    )\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef set_start_line_num(\\\\\\\\n    self, line_num: int\\\\\\\\n) -> Union[\\\\\\\\n    \"BaseModelBuilder\",\\\\\\\\n    \"ModuleModelBuilder\",\\\\\\\\n    \"ClassModelBuilder\",\\\\\\\\n    \"FunctionModelBuilder\",\\\\\\\\n]:\\\\\\\\n    \"\"\"Sets the start line number of the code block model instance.\"\"\"\\\\\\\\n    self.common_attributes.start_line_num = line_num\\\\\\\\n    return self\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef set_end_line_num(\\\\\\\\n    self, line_num: int\\\\\\\\n) -> Union[\\\\\\\\n    \"BaseModelBuilder\",\\\\\\\\n    \"ModuleModelBuilder\",\\\\\\\\n    \"ClassModelBuilder\",\\\\\\\\n    \"FunctionModelBuilder\",\\\\\\\\n]:\\\\\\\\n    \"\"\"Sets the end line number of the code block model instance.\"\"\"\\\\\\\\n    self.common_attributes.end_line_num = line_num\\\\\\\\n    return self\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef set_code_content(\\\\\\\\n    self, code_content: str\\\\\\\\n) -> Union[\\\\\\\\n    \"BaseModelBuilder\",\\\\\\\\n    \"ModuleModelBuilder\",\\\\\\\\n    \"ClassModelBuilder\",\\\\\\\\n    \"FunctionModelBuilder\",\\\\\\\\n]:\\\\\\\\n    \"\"\"Adds the string containing the content of the code block to the model instance.\"\"\"\\\\\\\\n    self.common_attributes.code_content = code_content\\\\\\\\n    return self\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef add_important_comment(\\\\\\\\n    self, comment: CommentModel\\\\\\\\n) -> Union[\\\\\\\\n    \"BaseModelBuilder\",\\\\\\\\n    \"ModuleModelBuilder\",\\\\\\\\n    \"ClassModelBuilder\",\\\\\\\\n    \"FunctionModelBuilder\",\\\\\\\\n]:\\\\\\\\n    \"\"\"Adds an important comment to the model instance.\"\"\"\\\\\\\\n    if not self.common_attributes.important_comments:\\\\\\\\n        self.common_attributes.important_comments = []\\\\\\\\n    self.common_attributes.important_comments.append(comment)\\\\\\\\n    return self\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef add_summary(\\\\\\\\n    self, summary: str\\\\\\\\n) -> Union[\\\\\\\\n    \"BaseModelBuilder\",\\\\\\\\n    \"ModuleModelBuilder\",\\\\\\\\n    \"ClassModelBuilder\",\\\\\\\\n    \"FunctionModelBuilder\",\\\\\\\\n]:\\\\\\\\n    \"\"\"Adds a summary to the model instance.\"\"\"\\\\\\\\n    self.common_attributes.summary = summary\\\\\\\\n    # print(f\"Added summary to {self.common_attributes.id}\")\\\\\\\\n    return self\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef add_child(\\\\\\\\n    self,\\\\\\\\n    child: Union[\\\\\\\\n        \"ClassModelBuilder\", \"FunctionModelBuilder\", StandaloneBlockModelBuilder\\\\\\\\n    ],\\\\\\\\n) -> Union[\\\\\\\\n    \"BaseModelBuilder\",\\\\\\\\n    \"ModuleModelBuilder\",\\\\\\\\n    \"ClassModelBuilder\",\\\\\\\\n    \"FunctionModelBuilder\",\\\\\\\\n]:\\\\\\\\n    \"\"\"Adds a child code block to the model instance.\"\"\"\\\\\\\\n    self.children_builders.append(child)\\\\\\\\n    return self\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef set_dependencies(\\\\\\\\n    self, dependencies: list[ImportModel | DependencyModel] | None\\\\\\\\n) -> Union[\\\\\\\\n    \"BaseModelBuilder\",\\\\\\\\n    \"ModuleModelBuilder\",\\\\\\\\n    \"ClassModelBuilder\",\\\\\\\\n    \"FunctionModelBuilder\",\\\\\\\\n]:\\\\\\\\n    \"\"\"Sets the dependencies of the model instance.\"\"\"\\\\\\\\n    self.common_attributes.dependencies = dependencies\\\\\\\\n    return self\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef update_import_dependency(\\\\\\\\n    self,\\\\\\\\n    new_import_model: ImportModel,\\\\\\\\n    old_import_model: ImportModel,\\\\\\\\n) -> Union[\\\\\\\\n    \"BaseModelBuilder\",\\\\\\\\n    \"ModuleModelBuilder\",\\\\\\\\n    \"ClassModelBuilder\",\\\\\\\\n    \"FunctionModelBuilder\",\\\\\\\\n]:\\\\\\\\n    \"\"\"\\\\\\\\n        Updates an import in the model instance.\\\\\\\\n\\\\\\\\n        Args:\\\\\\\\n            new_import_model (ImportModel): The updated import model.\\\\\\\\n            old_import_model\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            BaseModelBuilder: The base model builder instance.\\\\\\\\n        \"\"\"\\\\\\\\n\\\\\\\\n    if self.common_attributes.dependencies:\\\\\\\\n        import_model_to_remove: ImportModel | None = None\\\\\\\\n        for existing_import_model in self.common_attributes.dependencies:\\\\\\\\n            if isinstance(existing_import_model, DependencyModel):\\\\\\\\n                continue\\\\\\\\n\\\\\\\\n            if (\\\\\\\\n                existing_import_model.import_names == old_import_model.import_names\\\\\\\\n                and existing_import_model.imported_from\\\\\\\\n                == old_import_model.imported_from\\\\\\\\n                and existing_import_model.import_module_type\\\\\\\\n                == old_import_model.import_module_type\\\\\\\\n            ):\\\\\\\\n                import_model_to_remove = existing_import_model\\\\\\\\n                break\\\\\\\\n\\\\\\\\n        if not import_model_to_remove:\\\\\\\\n            raise Exception(f\"Could not find import to remove: {old_import_model}\")\\\\\\\\n\\\\\\\\n        self.common_attributes.dependencies.remove(import_model_to_remove)\\\\\\\\n        self.common_attributes.dependencies.append(new_import_model)\\\\\\\\n    else:\\\\\\\\n        raise Exception(\\\\\\\\n            f\"No imports in the builders imports list: {self.common_attributes.dependencies}\"\\\\\\\\n        )\\\\\\\\n    return self\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef build_and_set_children(self) -> None:\\\\\\\\n    if self.children_builders:\\\\\\\\n        self.common_attributes.children = [\\\\\\\\n            child.build() for child in self.children_builders\\\\\\\\n        ]\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\ndef _get_common_attributes(self) -> dict[str, Any]:\\\\\\\\n    \"\"\"\\\\\\\\n        Returns a dictionary containing the attributes common to all code block models.\\\\\\\\n        \"\"\"\\\\\\\\n    return self.common_attributes.model_dump()\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\nSummary:\\\\n\\\\n        [{\\\\\\'content\\\\\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main\\\\\\\\nfeatures, and key components.\\\\\\\\n\", \\\\\\'role\\\\\\': \\\\\\'system\\\\\\'}, {\\\\\\'content\\\\\\': \\\\\\'Prompt: \"Summarize the code provided.\"\\\\\\\\n\\\\\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\\\\\n\\\\\\\\nChain of Density Steps:\\\\\\\\n\\\\\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\\\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\\\\\n\\\\\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\\\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\\\\\n\\\\\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\\\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\\\\\n\\\\\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\\\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\\\\\nlonger.\\\\\\\\n\\\\\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\\\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\\\\\\\\\'s purpose. It should provide a clear and concise overview of \\\\\\\\nthe code\\\\\\\\\\\\\\'s content and purpose.\\\\\\\\n\\\\\\\\nGuidelines:\\\\\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\\\\\\\\\'s functionality and purpose.\\\\\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\\\\\\\\\'s purpose, main features, and key components.\\\\\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\\\\\\\\\'s main functionality.\\\\\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\\\\\n\\\\\\\\nCODE:\\\\\\\\n```Python\\\\\\\\n\\\\\\\\n@abstractmethod\\\\\\\\ndef build(\\\\\\\\n    self,\\\\\\\\n) -> None:\\\\\\\\n    \"\"\"\\\\\\\\n        Builds and returns the code block model instance.\\\\\\\\n\\\\\\\\n        Returns:\\\\\\\\n            CodeBlockModel: The built code block model instance.\\\\\\\\n        \"\"\"\\\\\\\\n    ...\\\\\\\\n\\\\\\\\n```\\\\\\\\n\\\\\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\\\\\n\\\\\\', \\\\\\'role\\\\\\': \\\\\\'user\\\\\\'}]\\\\n \\\\n        \\\\n\\\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\\\n\\\\nfrom postcode.python_parser.models.models import BaseCodeBlockModel, CommentModel, ImportModel, DependencyModel\\\\nfrom postcode.python_parser.models.models import BaseCodeBlockModel, CommentModel, ImportModel, DependencyModel\\\\nfrom postcode.python_parser.models.models import BaseCodeBlockModel, CommentModel, ImportModel, DependencyModel\\\\nfrom postcode.python_parser.models.models import BaseCodeBlockModel, CommentModel, ImportModel, DependencyModel\\\\nfrom typing import TYPE_CHECKING, Any, Union\\\\nfrom typing import TYPE_CHECKING, Any, Union\\\\nfrom abc import ABC, abstractmethod\\\\nfrom abc import ABC, abstractmethod\\\\nfrom postcode.python_parser.models.enums import BlockType\\\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom __future__ import annotations\\nfrom typing import TYPE_CHECKING, Any, Union\\nfrom abc import ABC, abstractmethod\\nfrom postcode.python_parser.models.models import ImportModel, DependencyModel, CommentModel, BaseCodeBlockModel\\nfrom postcode.python_parser.models.enums import BlockType\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
    "children": [
        {
            "variable_assignments": [],
            "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__STANDALONE_BLOCK-1",
            "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE",
            "block_type": "STANDALONE_BLOCK",
            "start_line_num": 14,
            "end_line_num": 28,
            "code_content": "if TYPE_CHECKING:\n    from postcode.python_parser.model_builders.class_model_builder import (\n        ClassModelBuilder,\n    )\n    from postcode.python_parser.model_builders.function_model_builder import (\n        FunctionModelBuilder,\n    )\n    from postcode.python_parser.model_builders.module_model_builder import (\n        ModuleModelBuilder,\n    )\n    from postcode.python_parser.model_builders.standalone_block_model_builder import (\n        StandaloneBlockModelBuilder,\n    )\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "TYPE_CHECKING",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Any",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Union",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ClassModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.class_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "FunctionModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.function_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ModuleModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.module_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "StandaloneBlockModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.standalone_block_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\nif TYPE_CHECKING:\\n    from postcode.python_parser.model_builders.class_model_builder import (\\n        ClassModelBuilder,\\n    )\\n    from postcode.python_parser.model_builders.function_model_builder import (\\n        FunctionModelBuilder,\\n    )\\n    from postcode.python_parser.model_builders.module_model_builder import (\\n        ModuleModelBuilder,\\n    )\\n    from postcode.python_parser.model_builders.standalone_block_model_builder import (\\n        StandaloneBlockModelBuilder,\\n    )\\n\\n```\\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom typing import TYPE_CHECKING, Any, Union\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": null
        },
        {
            "class_name": "BaseModelBuilder",
            "decorators": null,
            "bases": [
                "ABC"
            ],
            "docstring": "Abstract base class for building models of different code blocks.\n\nThis class follows the builder pattern, providing a structured approach to constructing models for various types of code blocks (like modules, classes, functions). It defines common attributes and methods used across all specific model builders.\n\nAttributes:\n    id (str): The unique identifier for the code block.\n    children_builders (list[Union[ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]]):\n        A list of builders for the children code blocks.\n    common_attributes (BaseCodeBlockModel): An instance containing common attributes shared across different code block models.\n\nExample:\n    # This example demonstrates how a derived builder might be initialized and used.\n    >>> class SomeModelBuilder(BaseModelBuilder):\n            def build(self):\n                # Building logic specific to 'SomeModelBuilder'\n                pass\n    >>> builder = SomeModelBuilder(id='123', block_type=BlockType.CLASS, parent_id='root')\n    >>> builder.set_start_line_num(1).set_end_line_num(10)\n    # Sets the start and end line numbers for the code block.",
            "keywords": null,
            "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder",
            "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE",
            "block_type": "CLASS",
            "start_line_num": 28,
            "end_line_num": 235,
            "code_content": "\n\nclass BaseModelBuilder(ABC):\n    \"\"\"\n    Abstract base class for building models of different code blocks.\n\n    This class follows the builder pattern, providing a structured approach to constructing models for various types of code blocks (like modules, classes, functions). It defines common attributes and methods used across all specific model builders.\n\n    Attributes:\n        id (str): The unique identifier for the code block.\n        children_builders (list[Union[ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]]):\n            A list of builders for the children code blocks.\n        common_attributes (BaseCodeBlockModel): An instance containing common attributes shared across different code block models.\n\n    Example:\n        # This example demonstrates how a derived builder might be initialized and used.\n        >>> class SomeModelBuilder(BaseModelBuilder):\n                def build(self):\n                    # Building logic specific to 'SomeModelBuilder'\n                    pass\n        >>> builder = SomeModelBuilder(id='123', block_type=BlockType.CLASS, parent_id='root')\n        >>> builder.set_start_line_num(1).set_end_line_num(10)\n        # Sets the start and end line numbers for the code block.\n    \"\"\"\n\n    def __init__(\n        self, *, id: str, block_type: BlockType, parent_id: str | None\n    ) -> None:\n        self.id: str = id\n        self.children_builders: list[\n            ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\n        ] = []\n\n        self.common_attributes = BaseCodeBlockModel(\n            id=id,\n            parent_id=parent_id,\n            block_type=block_type,\n            start_line_num=0,\n            end_line_num=0,\n            code_content=\"\",\n            important_comments=None,\n            children=None,\n            dependencies=None,\n            summary=None,\n        )\n\n    def set_start_line_num(\n        self, line_num: int\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the start line number of the code block model instance.\"\"\"\n        self.common_attributes.start_line_num = line_num\n        return self\n\n    def set_end_line_num(\n        self, line_num: int\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the end line number of the code block model instance.\"\"\"\n        self.common_attributes.end_line_num = line_num\n        return self\n\n    def set_code_content(\n        self, code_content: str\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds the string containing the content of the code block to the model instance.\"\"\"\n        self.common_attributes.code_content = code_content\n        return self\n\n    def add_important_comment(\n        self, comment: CommentModel\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds an important comment to the model instance.\"\"\"\n        if not self.common_attributes.important_comments:\n            self.common_attributes.important_comments = []\n        self.common_attributes.important_comments.append(comment)\n        return self\n\n    def add_summary(\n        self, summary: str\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds a summary to the model instance.\"\"\"\n        self.common_attributes.summary = summary\n        # print(f\"Added summary to {self.common_attributes.id}\")\n        return self\n\n    def add_child(\n        self,\n        child: Union[\n            \"ClassModelBuilder\", \"FunctionModelBuilder\", StandaloneBlockModelBuilder\n        ],\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds a child code block to the model instance.\"\"\"\n        self.children_builders.append(child)\n        return self\n\n    def set_dependencies(\n        self, dependencies: list[ImportModel | DependencyModel] | None\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the dependencies of the model instance.\"\"\"\n        self.common_attributes.dependencies = dependencies\n        return self\n\n    def update_import_dependency(\n        self,\n        new_import_model: ImportModel,\n        old_import_model: ImportModel,\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"\n        Updates an import in the model instance.\n\n        Args:\n            new_import_model (ImportModel): The updated import model.\n            old_import_model\n\n        Returns:\n            BaseModelBuilder: The base model builder instance.\n        \"\"\"\n\n        if self.common_attributes.dependencies:\n            import_model_to_remove: ImportModel | None = None\n            for existing_import_model in self.common_attributes.dependencies:\n                if isinstance(existing_import_model, DependencyModel):\n                    continue\n\n                if (\n                    existing_import_model.import_names == old_import_model.import_names\n                    and existing_import_model.imported_from\n                    == old_import_model.imported_from\n                    and existing_import_model.import_module_type\n                    == old_import_model.import_module_type\n                ):\n                    import_model_to_remove = existing_import_model\n                    break\n\n            if not import_model_to_remove:\n                raise Exception(f\"Could not find import to remove: {old_import_model}\")\n\n            self.common_attributes.dependencies.remove(import_model_to_remove)\n            self.common_attributes.dependencies.append(new_import_model)\n        else:\n            raise Exception(\n                f\"No imports in the builders imports list: {self.common_attributes.dependencies}\"\n            )\n        return self\n\n    def build_and_set_children(self) -> None:\n        if self.children_builders:\n            self.common_attributes.children = [\n                child.build() for child in self.children_builders\n            ]\n\n    def _get_common_attributes(self) -> dict[str, Any]:\n        \"\"\"\n        Returns a dictionary containing the attributes common to all code block models.\n        \"\"\"\n        return self.common_attributes.model_dump()\n\n    @abstractmethod\n    def build(\n        self,\n    ) -> None:\n        \"\"\"\n        Builds and returns the code block model instance.\n\n        Returns:\n            CodeBlockModel: The built code block model instance.\n        \"\"\"\n        ...\n",
            "important_comments": null,
            "dependencies": [
                {
                    "import_names": [
                        {
                            "name": "BaseCodeBlockModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "CommentModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "BaseCodeBlockModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "CommentModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "BaseCodeBlockModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "CommentModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "BaseCodeBlockModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "CommentModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "ImportModel",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "DependencyModel",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.models",
                    "import_module_type": "LOCAL",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "TYPE_CHECKING",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Any",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Union",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "TYPE_CHECKING",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Any",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "Union",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "typing",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ABC",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "abstractmethod",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "abc",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "ABC",
                            "as_name": null,
                            "local_block_id": null
                        },
                        {
                            "name": "abstractmethod",
                            "as_name": null,
                            "local_block_id": null
                        }
                    ],
                    "imported_from": "abc",
                    "import_module_type": "STANDARD_LIBRARY",
                    "local_module_id": null
                },
                {
                    "import_names": [
                        {
                            "name": "BlockType",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:models:enums.py__*__MODULE__*__CLASS-BlockType"
                        }
                    ],
                    "imported_from": "postcode.python_parser.models.enums",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:models:enums.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ClassModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.class_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "FunctionModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.function_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "ModuleModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.module_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE"
                },
                {
                    "import_names": [
                        {
                            "name": "StandaloneBlockModelBuilder",
                            "as_name": null,
                            "local_block_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                        }
                    ],
                    "imported_from": "postcode.python_parser.model_builders.standalone_block_model_builder",
                    "import_module_type": "LOCAL",
                    "local_module_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
                }
            ],
            "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nNOTE: Below the code are summaries, `CHILDREN_SUMMARIES`. The `CHILDREN_SUMMARIES of summaries of all \\nof the code blocks defined in the `CODE`. Use these summaries to help you write your summary of the \\n`CODE`, directly referencing the immediate children and the imports the `CODE` depends on. \\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, local and third-party library imports and variables, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n\\nclass BaseModelBuilder(ABC):\\n    \"\"\"\\n    Abstract base class for building models of different code blocks.\\n\\n    This class follows the builder pattern, providing a structured approach to constructing models for various types of code blocks (like modules, classes, functions). It defines common attributes and methods used across all specific model builders.\\n\\n    Attributes:\\n        id (str): The unique identifier for the code block.\\n        children_builders (list[Union[ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]]):\\n            A list of builders for the children code blocks.\\n        common_attributes (BaseCodeBlockModel): An instance containing common attributes shared across different code block models.\\n\\n    Example:\\n        # This example demonstrates how a derived builder might be initialized and used.\\n        >>> class SomeModelBuilder(BaseModelBuilder):\\n                def build(self):\\n                    # Building logic specific to \\'SomeModelBuilder\\'\\n                    pass\\n        >>> builder = SomeModelBuilder(id=\\'123\\', block_type=BlockType.CLASS, parent_id=\\'root\\')\\n        >>> builder.set_start_line_num(1).set_end_line_num(10)\\n        # Sets the start and end line numbers for the code block.\\n    \"\"\"\\n\\n    def __init__(\\n        self, *, id: str, block_type: BlockType, parent_id: str | None\\n    ) -> None:\\n        self.id: str = id\\n        self.children_builders: list[\\n            ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\\n        ] = []\\n\\n        self.common_attributes = BaseCodeBlockModel(\\n            id=id,\\n            parent_id=parent_id,\\n            block_type=block_type,\\n            start_line_num=0,\\n            end_line_num=0,\\n            code_content=\"\",\\n            important_comments=None,\\n            children=None,\\n            dependencies=None,\\n            summary=None,\\n        )\\n\\n    def set_start_line_num(\\n        self, line_num: int\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Sets the start line number of the code block model instance.\"\"\"\\n        self.common_attributes.start_line_num = line_num\\n        return self\\n\\n    def set_end_line_num(\\n        self, line_num: int\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Sets the end line number of the code block model instance.\"\"\"\\n        self.common_attributes.end_line_num = line_num\\n        return self\\n\\n    def set_code_content(\\n        self, code_content: str\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Adds the string containing the content of the code block to the model instance.\"\"\"\\n        self.common_attributes.code_content = code_content\\n        return self\\n\\n    def add_important_comment(\\n        self, comment: CommentModel\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Adds an important comment to the model instance.\"\"\"\\n        if not self.common_attributes.important_comments:\\n            self.common_attributes.important_comments = []\\n        self.common_attributes.important_comments.append(comment)\\n        return self\\n\\n    def add_summary(\\n        self, summary: str\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Adds a summary to the model instance.\"\"\"\\n        self.common_attributes.summary = summary\\n        # print(f\"Added summary to {self.common_attributes.id}\")\\n        return self\\n\\n    def add_child(\\n        self,\\n        child: Union[\\n            \"ClassModelBuilder\", \"FunctionModelBuilder\", StandaloneBlockModelBuilder\\n        ],\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Adds a child code block to the model instance.\"\"\"\\n        self.children_builders.append(child)\\n        return self\\n\\n    def set_dependencies(\\n        self, dependencies: list[ImportModel | DependencyModel] | None\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"Sets the dependencies of the model instance.\"\"\"\\n        self.common_attributes.dependencies = dependencies\\n        return self\\n\\n    def update_import_dependency(\\n        self,\\n        new_import_model: ImportModel,\\n        old_import_model: ImportModel,\\n    ) -> Union[\\n        \"BaseModelBuilder\",\\n        \"ModuleModelBuilder\",\\n        \"ClassModelBuilder\",\\n        \"FunctionModelBuilder\",\\n    ]:\\n        \"\"\"\\n        Updates an import in the model instance.\\n\\n        Args:\\n            new_import_model (ImportModel): The updated import model.\\n            old_import_model\\n\\n        Returns:\\n            BaseModelBuilder: The base model builder instance.\\n        \"\"\"\\n\\n        if self.common_attributes.dependencies:\\n            import_model_to_remove: ImportModel | None = None\\n            for existing_import_model in self.common_attributes.dependencies:\\n                if isinstance(existing_import_model, DependencyModel):\\n                    continue\\n\\n                if (\\n                    existing_import_model.import_names == old_import_model.import_names\\n                    and existing_import_model.imported_from\\n                    == old_import_model.imported_from\\n                    and existing_import_model.import_module_type\\n                    == old_import_model.import_module_type\\n                ):\\n                    import_model_to_remove = existing_import_model\\n                    break\\n\\n            if not import_model_to_remove:\\n                raise Exception(f\"Could not find import to remove: {old_import_model}\")\\n\\n            self.common_attributes.dependencies.remove(import_model_to_remove)\\n            self.common_attributes.dependencies.append(new_import_model)\\n        else:\\n            raise Exception(\\n                f\"No imports in the builders imports list: {self.common_attributes.dependencies}\"\\n            )\\n        return self\\n\\n    def build_and_set_children(self) -> None:\\n        if self.children_builders:\\n            self.common_attributes.children = [\\n                child.build() for child in self.children_builders\\n            ]\\n\\n    def _get_common_attributes(self) -> dict[str, Any]:\\n        \"\"\"\\n        Returns a dictionary containing the attributes common to all code block models.\\n        \"\"\"\\n        return self.common_attributes.model_dump()\\n\\n    @abstractmethod\\n    def build(\\n        self,\\n    ) -> None:\\n        \"\"\"\\n        Builds and returns the code block model instance.\\n\\n        Returns:\\n            CodeBlockModel: The built code block model instance.\\n        \"\"\"\\n        ...\\n\\n```\\n\\nCHILDREN_SUMMARIES:\\n\\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef __init__(\\\\n    self, *, id: str, block_type: BlockType, parent_id: str | None\\\\n) -> None:\\\\n    self.id: str = id\\\\n    self.children_builders: list[\\\\n        ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\\\\n    ] = []\\\\n\\\\n    self.common_attributes = BaseCodeBlockModel(\\\\n        id=id,\\\\n        parent_id=parent_id,\\\\n        block_type=block_type,\\\\n        start_line_num=0,\\\\n        end_line_num=0,\\\\n        code_content=\"\",\\\\n        important_comments=None,\\\\n        children=None,\\\\n        dependencies=None,\\\\n        summary=None,\\\\n    )\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef set_start_line_num(\\\\n    self, line_num: int\\\\n) -> Union[\\\\n    \"BaseModelBuilder\",\\\\n    \"ModuleModelBuilder\",\\\\n    \"ClassModelBuilder\",\\\\n    \"FunctionModelBuilder\",\\\\n]:\\\\n    \"\"\"Sets the start line number of the code block model instance.\"\"\"\\\\n    self.common_attributes.start_line_num = line_num\\\\n    return self\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef set_end_line_num(\\\\n    self, line_num: int\\\\n) -> Union[\\\\n    \"BaseModelBuilder\",\\\\n    \"ModuleModelBuilder\",\\\\n    \"ClassModelBuilder\",\\\\n    \"FunctionModelBuilder\",\\\\n]:\\\\n    \"\"\"Sets the end line number of the code block model instance.\"\"\"\\\\n    self.common_attributes.end_line_num = line_num\\\\n    return self\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef set_code_content(\\\\n    self, code_content: str\\\\n) -> Union[\\\\n    \"BaseModelBuilder\",\\\\n    \"ModuleModelBuilder\",\\\\n    \"ClassModelBuilder\",\\\\n    \"FunctionModelBuilder\",\\\\n]:\\\\n    \"\"\"Adds the string containing the content of the code block to the model instance.\"\"\"\\\\n    self.common_attributes.code_content = code_content\\\\n    return self\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef add_important_comment(\\\\n    self, comment: CommentModel\\\\n) -> Union[\\\\n    \"BaseModelBuilder\",\\\\n    \"ModuleModelBuilder\",\\\\n    \"ClassModelBuilder\",\\\\n    \"FunctionModelBuilder\",\\\\n]:\\\\n    \"\"\"Adds an important comment to the model instance.\"\"\"\\\\n    if not self.common_attributes.important_comments:\\\\n        self.common_attributes.important_comments = []\\\\n    self.common_attributes.important_comments.append(comment)\\\\n    return self\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef add_summary(\\\\n    self, summary: str\\\\n) -> Union[\\\\n    \"BaseModelBuilder\",\\\\n    \"ModuleModelBuilder\",\\\\n    \"ClassModelBuilder\",\\\\n    \"FunctionModelBuilder\",\\\\n]:\\\\n    \"\"\"Adds a summary to the model instance.\"\"\"\\\\n    self.common_attributes.summary = summary\\\\n    # print(f\"Added summary to {self.common_attributes.id}\")\\\\n    return self\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef add_child(\\\\n    self,\\\\n    child: Union[\\\\n        \"ClassModelBuilder\", \"FunctionModelBuilder\", StandaloneBlockModelBuilder\\\\n    ],\\\\n) -> Union[\\\\n    \"BaseModelBuilder\",\\\\n    \"ModuleModelBuilder\",\\\\n    \"ClassModelBuilder\",\\\\n    \"FunctionModelBuilder\",\\\\n]:\\\\n    \"\"\"Adds a child code block to the model instance.\"\"\"\\\\n    self.children_builders.append(child)\\\\n    return self\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef set_dependencies(\\\\n    self, dependencies: list[ImportModel | DependencyModel] | None\\\\n) -> Union[\\\\n    \"BaseModelBuilder\",\\\\n    \"ModuleModelBuilder\",\\\\n    \"ClassModelBuilder\",\\\\n    \"FunctionModelBuilder\",\\\\n]:\\\\n    \"\"\"Sets the dependencies of the model instance.\"\"\"\\\\n    self.common_attributes.dependencies = dependencies\\\\n    return self\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef update_import_dependency(\\\\n    self,\\\\n    new_import_model: ImportModel,\\\\n    old_import_model: ImportModel,\\\\n) -> Union[\\\\n    \"BaseModelBuilder\",\\\\n    \"ModuleModelBuilder\",\\\\n    \"ClassModelBuilder\",\\\\n    \"FunctionModelBuilder\",\\\\n]:\\\\n    \"\"\"\\\\n        Updates an import in the model instance.\\\\n\\\\n        Args:\\\\n            new_import_model (ImportModel): The updated import model.\\\\n            old_import_model\\\\n\\\\n        Returns:\\\\n            BaseModelBuilder: The base model builder instance.\\\\n        \"\"\"\\\\n\\\\n    if self.common_attributes.dependencies:\\\\n        import_model_to_remove: ImportModel | None = None\\\\n        for existing_import_model in self.common_attributes.dependencies:\\\\n            if isinstance(existing_import_model, DependencyModel):\\\\n                continue\\\\n\\\\n            if (\\\\n                existing_import_model.import_names == old_import_model.import_names\\\\n                and existing_import_model.imported_from\\\\n                == old_import_model.imported_from\\\\n                and existing_import_model.import_module_type\\\\n                == old_import_model.import_module_type\\\\n            ):\\\\n                import_model_to_remove = existing_import_model\\\\n                break\\\\n\\\\n        if not import_model_to_remove:\\\\n            raise Exception(f\"Could not find import to remove: {old_import_model}\")\\\\n\\\\n        self.common_attributes.dependencies.remove(import_model_to_remove)\\\\n        self.common_attributes.dependencies.append(new_import_model)\\\\n    else:\\\\n        raise Exception(\\\\n            f\"No imports in the builders imports list: {self.common_attributes.dependencies}\"\\\\n        )\\\\n    return self\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef build_and_set_children(self) -> None:\\\\n    if self.children_builders:\\\\n        self.common_attributes.children = [\\\\n            child.build() for child in self.children_builders\\\\n        ]\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\ndef _get_common_attributes(self) -> dict[str, Any]:\\\\n    \"\"\"\\\\n        Returns a dictionary containing the attributes common to all code block models.\\\\n        \"\"\"\\\\n    return self.common_attributes.model_dump()\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\nSummary:\\n\\n        [{\\'content\\': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main\\\\nfeatures, and key components.\\\\n\", \\'role\\': \\'system\\'}, {\\'content\\': \\'Prompt: \"Summarize the code provided.\"\\\\n\\\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\\\n\\\\nChain of Density Steps:\\\\n\\\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\\\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\\\n\\\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\\\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\\\n\\\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\\\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\\\n\\\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\\\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\\\nlonger.\\\\n\\\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\\\nalgorithms, and structures used in the code, and include detailed information on the code\\\\\\'s purpose. It should provide a clear and concise overview of \\\\nthe code\\\\\\'s content and purpose.\\\\n\\\\nGuidelines:\\\\n- Ensure that each iteration of the summary accurately reflects the code\\\\\\'s functionality and purpose.\\\\n- The summary should be technical yet understandable, providing a clear picture of the code\\\\\\'s purpose, main features, and key components.\\\\n- Avoid technical jargon unless it is directly relevant to the code\\\\\\'s main functionality.\\\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\\\n\\\\nCODE:\\\\n```Python\\\\n\\\\n@abstractmethod\\\\ndef build(\\\\n    self,\\\\n) -> None:\\\\n    \"\"\"\\\\n        Builds and returns the code block model instance.\\\\n\\\\n        Returns:\\\\n            CodeBlockModel: The built code block model instance.\\\\n        \"\"\"\\\\n    ...\\\\n\\\\n```\\\\n\\\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\\\n\\', \\'role\\': \\'user\\'}]\\n \\n        \\n\\nSTANDARD_LIBRARY_AND_THIRD_PARTY_LIBRARY_IMPORTS:\\n\\nfrom postcode.python_parser.models.models import BaseCodeBlockModel, CommentModel, ImportModel, DependencyModel\\nfrom postcode.python_parser.models.models import BaseCodeBlockModel, CommentModel, ImportModel, DependencyModel\\nfrom postcode.python_parser.models.models import BaseCodeBlockModel, CommentModel, ImportModel, DependencyModel\\nfrom postcode.python_parser.models.models import BaseCodeBlockModel, CommentModel, ImportModel, DependencyModel\\nfrom typing import TYPE_CHECKING, Any, Union\\nfrom typing import TYPE_CHECKING, Any, Union\\nfrom abc import ABC, abstractmethod\\nfrom abc import ABC, abstractmethod\\nfrom postcode.python_parser.models.enums import BlockType\\nfrom postcode.python_parser.model_builders.class_model_builder import ClassModelBuilder\\nfrom postcode.python_parser.model_builders.function_model_builder import FunctionModelBuilder\\nfrom postcode.python_parser.model_builders.module_model_builder import ModuleModelBuilder\\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import StandaloneBlockModelBuilder\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
            "children": [
                {
                    "function_name": "__init__",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder__*__FUNCTION-__init__",
                    "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 52,
                    "end_line_num": 73,
                    "code_content": "\ndef __init__(\n    self, *, id: str, block_type: BlockType, parent_id: str | None\n) -> None:\n    self.id: str = id\n    self.children_builders: list[\n        ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\n    ] = []\n\n    self.common_attributes = BaseCodeBlockModel(\n        id=id,\n        parent_id=parent_id,\n        block_type=block_type,\n        start_line_num=0,\n        end_line_num=0,\n        code_content=\"\",\n        important_comments=None,\n        children=None,\n        dependencies=None,\n        summary=None,\n    )\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef __init__(\\n    self, *, id: str, block_type: BlockType, parent_id: str | None\\n) -> None:\\n    self.id: str = id\\n    self.children_builders: list[\\n        ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\\n    ] = []\\n\\n    self.common_attributes = BaseCodeBlockModel(\\n        id=id,\\n        parent_id=parent_id,\\n        block_type=block_type,\\n        start_line_num=0,\\n        end_line_num=0,\\n        code_content=\"\",\\n        important_comments=None,\\n        children=None,\\n        dependencies=None,\\n        summary=None,\\n    )\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "set_start_line_num",
                    "docstring": "Sets the start line number of the code block model instance.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "Union[, , , ]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder__*__FUNCTION-set_start_line_num",
                    "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 73,
                    "end_line_num": 85,
                    "code_content": "\ndef set_start_line_num(\n    self, line_num: int\n) -> Union[\n    \"BaseModelBuilder\",\n    \"ModuleModelBuilder\",\n    \"ClassModelBuilder\",\n    \"FunctionModelBuilder\",\n]:\n    \"\"\"Sets the start line number of the code block model instance.\"\"\"\n    self.common_attributes.start_line_num = line_num\n    return self\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef set_start_line_num(\\n    self, line_num: int\\n) -> Union[\\n    \"BaseModelBuilder\",\\n    \"ModuleModelBuilder\",\\n    \"ClassModelBuilder\",\\n    \"FunctionModelBuilder\",\\n]:\\n    \"\"\"Sets the start line number of the code block model instance.\"\"\"\\n    self.common_attributes.start_line_num = line_num\\n    return self\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "set_end_line_num",
                    "docstring": "Sets the end line number of the code block model instance.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "Union[, , , ]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder__*__FUNCTION-set_end_line_num",
                    "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 85,
                    "end_line_num": 97,
                    "code_content": "\ndef set_end_line_num(\n    self, line_num: int\n) -> Union[\n    \"BaseModelBuilder\",\n    \"ModuleModelBuilder\",\n    \"ClassModelBuilder\",\n    \"FunctionModelBuilder\",\n]:\n    \"\"\"Sets the end line number of the code block model instance.\"\"\"\n    self.common_attributes.end_line_num = line_num\n    return self\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef set_end_line_num(\\n    self, line_num: int\\n) -> Union[\\n    \"BaseModelBuilder\",\\n    \"ModuleModelBuilder\",\\n    \"ClassModelBuilder\",\\n    \"FunctionModelBuilder\",\\n]:\\n    \"\"\"Sets the end line number of the code block model instance.\"\"\"\\n    self.common_attributes.end_line_num = line_num\\n    return self\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "set_code_content",
                    "docstring": "Adds the string containing the content of the code block to the model instance.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "Union[, , , ]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder__*__FUNCTION-set_code_content",
                    "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 97,
                    "end_line_num": 109,
                    "code_content": "\ndef set_code_content(\n    self, code_content: str\n) -> Union[\n    \"BaseModelBuilder\",\n    \"ModuleModelBuilder\",\n    \"ClassModelBuilder\",\n    \"FunctionModelBuilder\",\n]:\n    \"\"\"Adds the string containing the content of the code block to the model instance.\"\"\"\n    self.common_attributes.code_content = code_content\n    return self\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef set_code_content(\\n    self, code_content: str\\n) -> Union[\\n    \"BaseModelBuilder\",\\n    \"ModuleModelBuilder\",\\n    \"ClassModelBuilder\",\\n    \"FunctionModelBuilder\",\\n]:\\n    \"\"\"Adds the string containing the content of the code block to the model instance.\"\"\"\\n    self.common_attributes.code_content = code_content\\n    return self\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "add_important_comment",
                    "docstring": "Adds an important comment to the model instance.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "Union[, , , ]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder__*__FUNCTION-add_important_comment",
                    "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 109,
                    "end_line_num": 123,
                    "code_content": "\ndef add_important_comment(\n    self, comment: CommentModel\n) -> Union[\n    \"BaseModelBuilder\",\n    \"ModuleModelBuilder\",\n    \"ClassModelBuilder\",\n    \"FunctionModelBuilder\",\n]:\n    \"\"\"Adds an important comment to the model instance.\"\"\"\n    if not self.common_attributes.important_comments:\n        self.common_attributes.important_comments = []\n    self.common_attributes.important_comments.append(comment)\n    return self\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef add_important_comment(\\n    self, comment: CommentModel\\n) -> Union[\\n    \"BaseModelBuilder\",\\n    \"ModuleModelBuilder\",\\n    \"ClassModelBuilder\",\\n    \"FunctionModelBuilder\",\\n]:\\n    \"\"\"Adds an important comment to the model instance.\"\"\"\\n    if not self.common_attributes.important_comments:\\n        self.common_attributes.important_comments = []\\n    self.common_attributes.important_comments.append(comment)\\n    return self\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "add_summary",
                    "docstring": "Adds a summary to the model instance.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "Union[, , , ]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder__*__FUNCTION-add_summary",
                    "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 123,
                    "end_line_num": 136,
                    "code_content": "\ndef add_summary(\n    self, summary: str\n) -> Union[\n    \"BaseModelBuilder\",\n    \"ModuleModelBuilder\",\n    \"ClassModelBuilder\",\n    \"FunctionModelBuilder\",\n]:\n    \"\"\"Adds a summary to the model instance.\"\"\"\n    self.common_attributes.summary = summary\n    # print(f\"Added summary to {self.common_attributes.id}\")\n    return self\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef add_summary(\\n    self, summary: str\\n) -> Union[\\n    \"BaseModelBuilder\",\\n    \"ModuleModelBuilder\",\\n    \"ClassModelBuilder\",\\n    \"FunctionModelBuilder\",\\n]:\\n    \"\"\"Adds a summary to the model instance.\"\"\"\\n    self.common_attributes.summary = summary\\n    # print(f\"Added summary to {self.common_attributes.id}\")\\n    return self\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "add_child",
                    "docstring": "Adds a child code block to the model instance.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "Union[, , , ]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder__*__FUNCTION-add_child",
                    "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 136,
                    "end_line_num": 151,
                    "code_content": "\ndef add_child(\n    self,\n    child: Union[\n        \"ClassModelBuilder\", \"FunctionModelBuilder\", StandaloneBlockModelBuilder\n    ],\n) -> Union[\n    \"BaseModelBuilder\",\n    \"ModuleModelBuilder\",\n    \"ClassModelBuilder\",\n    \"FunctionModelBuilder\",\n]:\n    \"\"\"Adds a child code block to the model instance.\"\"\"\n    self.children_builders.append(child)\n    return self\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef add_child(\\n    self,\\n    child: Union[\\n        \"ClassModelBuilder\", \"FunctionModelBuilder\", StandaloneBlockModelBuilder\\n    ],\\n) -> Union[\\n    \"BaseModelBuilder\",\\n    \"ModuleModelBuilder\",\\n    \"ClassModelBuilder\",\\n    \"FunctionModelBuilder\",\\n]:\\n    \"\"\"Adds a child code block to the model instance.\"\"\"\\n    self.children_builders.append(child)\\n    return self\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "set_dependencies",
                    "docstring": "Sets the dependencies of the model instance.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "Union[, , , ]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder__*__FUNCTION-set_dependencies",
                    "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 151,
                    "end_line_num": 163,
                    "code_content": "\ndef set_dependencies(\n    self, dependencies: list[ImportModel | DependencyModel] | None\n) -> Union[\n    \"BaseModelBuilder\",\n    \"ModuleModelBuilder\",\n    \"ClassModelBuilder\",\n    \"FunctionModelBuilder\",\n]:\n    \"\"\"Sets the dependencies of the model instance.\"\"\"\n    self.common_attributes.dependencies = dependencies\n    return self\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef set_dependencies(\\n    self, dependencies: list[ImportModel | DependencyModel] | None\\n) -> Union[\\n    \"BaseModelBuilder\",\\n    \"ModuleModelBuilder\",\\n    \"ClassModelBuilder\",\\n    \"FunctionModelBuilder\",\\n]:\\n    \"\"\"Sets the dependencies of the model instance.\"\"\"\\n    self.common_attributes.dependencies = dependencies\\n    return self\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "update_import_dependency",
                    "docstring": "Updates an import in the model instance.\n\nArgs:\n    new_import_model (ImportModel): The updated import model.\n    old_import_model\n\nReturns:\n    BaseModelBuilder: The base model builder instance.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "Union[, , , ]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder__*__FUNCTION-update_import_dependency",
                    "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 163,
                    "end_line_num": 211,
                    "code_content": "\ndef update_import_dependency(\n    self,\n    new_import_model: ImportModel,\n    old_import_model: ImportModel,\n) -> Union[\n    \"BaseModelBuilder\",\n    \"ModuleModelBuilder\",\n    \"ClassModelBuilder\",\n    \"FunctionModelBuilder\",\n]:\n    \"\"\"\n        Updates an import in the model instance.\n\n        Args:\n            new_import_model (ImportModel): The updated import model.\n            old_import_model\n\n        Returns:\n            BaseModelBuilder: The base model builder instance.\n        \"\"\"\n\n    if self.common_attributes.dependencies:\n        import_model_to_remove: ImportModel | None = None\n        for existing_import_model in self.common_attributes.dependencies:\n            if isinstance(existing_import_model, DependencyModel):\n                continue\n\n            if (\n                existing_import_model.import_names == old_import_model.import_names\n                and existing_import_model.imported_from\n                == old_import_model.imported_from\n                and existing_import_model.import_module_type\n                == old_import_model.import_module_type\n            ):\n                import_model_to_remove = existing_import_model\n                break\n\n        if not import_model_to_remove:\n            raise Exception(f\"Could not find import to remove: {old_import_model}\")\n\n        self.common_attributes.dependencies.remove(import_model_to_remove)\n        self.common_attributes.dependencies.append(new_import_model)\n    else:\n        raise Exception(\n            f\"No imports in the builders imports list: {self.common_attributes.dependencies}\"\n        )\n    return self\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef update_import_dependency(\\n    self,\\n    new_import_model: ImportModel,\\n    old_import_model: ImportModel,\\n) -> Union[\\n    \"BaseModelBuilder\",\\n    \"ModuleModelBuilder\",\\n    \"ClassModelBuilder\",\\n    \"FunctionModelBuilder\",\\n]:\\n    \"\"\"\\n        Updates an import in the model instance.\\n\\n        Args:\\n            new_import_model (ImportModel): The updated import model.\\n            old_import_model\\n\\n        Returns:\\n            BaseModelBuilder: The base model builder instance.\\n        \"\"\"\\n\\n    if self.common_attributes.dependencies:\\n        import_model_to_remove: ImportModel | None = None\\n        for existing_import_model in self.common_attributes.dependencies:\\n            if isinstance(existing_import_model, DependencyModel):\\n                continue\\n\\n            if (\\n                existing_import_model.import_names == old_import_model.import_names\\n                and existing_import_model.imported_from\\n                == old_import_model.imported_from\\n                and existing_import_model.import_module_type\\n                == old_import_model.import_module_type\\n            ):\\n                import_model_to_remove = existing_import_model\\n                break\\n\\n        if not import_model_to_remove:\\n            raise Exception(f\"Could not find import to remove: {old_import_model}\")\\n\\n        self.common_attributes.dependencies.remove(import_model_to_remove)\\n        self.common_attributes.dependencies.append(new_import_model)\\n    else:\\n        raise Exception(\\n            f\"No imports in the builders imports list: {self.common_attributes.dependencies}\"\\n        )\\n    return self\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "build_and_set_children",
                    "docstring": null,
                    "decorators": null,
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder__*__FUNCTION-build_and_set_children",
                    "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 211,
                    "end_line_num": 217,
                    "code_content": "\ndef build_and_set_children(self) -> None:\n    if self.children_builders:\n        self.common_attributes.children = [\n            child.build() for child in self.children_builders\n        ]\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef build_and_set_children(self) -> None:\\n    if self.children_builders:\\n        self.common_attributes.children = [\\n            child.build() for child in self.children_builders\\n        ]\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "_get_common_attributes",
                    "docstring": "Returns a dictionary containing the attributes common to all code block models.",
                    "decorators": null,
                    "parameters": null,
                    "returns": "dict[str, Any]",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder__*__FUNCTION-_get_common_attributes",
                    "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 217,
                    "end_line_num": 223,
                    "code_content": "\ndef _get_common_attributes(self) -> dict[str, Any]:\n    \"\"\"\n        Returns a dictionary containing the attributes common to all code block models.\n        \"\"\"\n    return self.common_attributes.model_dump()\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\ndef _get_common_attributes(self) -> dict[str, Any]:\\n    \"\"\"\\n        Returns a dictionary containing the attributes common to all code block models.\\n        \"\"\"\\n    return self.common_attributes.model_dump()\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                },
                {
                    "function_name": "build",
                    "docstring": "Builds and returns the code block model instance.\n\nReturns:\n    CodeBlockModel: The built code block model instance.",
                    "decorators": [
                        {
                            "content": "@abstractmethod",
                            "decorator_name": "abstractmethod",
                            "decorator_args": null
                        }
                    ],
                    "parameters": null,
                    "returns": "None",
                    "is_method": true,
                    "is_async": false,
                    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder__*__FUNCTION-build",
                    "parent_id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder",
                    "block_type": "FUNCTION",
                    "start_line_num": 223,
                    "end_line_num": 235,
                    "code_content": "\n@abstractmethod\ndef build(\n    self,\n) -> None:\n    \"\"\"\n        Builds and returns the code block model instance.\n\n        Returns:\n            CodeBlockModel: The built code block model instance.\n        \"\"\"\n    ...\n",
                    "important_comments": null,
                    "dependencies": null,
                    "summary": "Summary:\n\n        [{'content': \"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\\nfeatures, and key components.\\n\", 'role': 'system'}, {'content': 'Prompt: \"Summarize the code provided.\"\\n\\nIf the code is for a function, or class, specifically reference the function or class name, and any names defined inside of it, in your summary.\\n\\nChain of Density Steps:\\n\\n1. INITIAL SUMMARY: Start by generating a high-level summary of the code. This summary should briefly describe the main functionality \\nand purpose of the code. For example, \"This code implements a basic sorting algorithm to return a list of integers sorted in ascending order.\"\\n\\n2. IDENTIFY MISSING KEY COMPONENTS: After creating the initial summary, identify 1-3 key components that are missing from the summary. These \\ncomponents could be specific functions, algorithms, data structures, classes, etc.\\n\\n3. INCORPORATE MISSING COMPONENTS: Rewrite the summary to include the identified components, making it more detailed and informative and explains the\\nfunctionality and purpose of the code even better. Ensure that the length of the summary does not increase. For example, \"This code implements a \\nquicksort algorithm using a pivot selection function and partitioning logic to return a list of integers in ascending order.\"\\n\\n4. REPEAT THE PROCESS: Continue this process, identifying missing components and integrating them into the summary in each iteration. After \\neach iteration, the summary should become more detailed, covering more aspects of the code and getting better detail on its purpose without becoming \\nlonger.\\n\\n5. FINAL SUMMARY: After 5 iterations, the final summary should be dense with technical details and accurately reflect the key functionalities, \\nalgorithms, and structures used in the code, and include detailed information on the code\\'s purpose. It should provide a clear and concise overview of \\nthe code\\'s content and purpose.\\n\\nGuidelines:\\n- Ensure that each iteration of the summary accurately reflects the code\\'s functionality and purpose.\\n- The summary should be technical yet understandable, providing a clear picture of the code\\'s purpose, main features, and key components.\\n- Avoid technical jargon unless it is directly relevant to the code\\'s main functionality.\\n- The final summary should be comprehensive yet concise, capturing the essence of the code, and written below the phrase \"FINAL SUMMARY:\".\\n\\nCODE:\\n```Python\\n\\n@abstractmethod\\ndef build(\\n    self,\\n) -> None:\\n    \"\"\"\\n        Builds and returns the code block model instance.\\n\\n        Returns:\\n            CodeBlockModel: The built code block model instance.\\n        \"\"\"\\n    ...\\n\\n```\\n\\nMake sure to write your final summary below the phrase \"FINAL SUMMARY:\". Take a deep breath and do some great work!\\n', 'role': 'user'}]\n \n        ",
                    "children": null
                }
            ]
        }
    ]
}