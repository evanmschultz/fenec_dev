{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "chromadb",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChromaClientHandler",
                    "as_name": null,
                    "local_block_id": "fenec:databases:chroma:chromadb_client_manager.py__*__MODULE__*__CLASS-ChromaClientHandler"
                }
            ],
            "imported_from": "fenec.databases.chroma.chromadb_client_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:databases:chroma:chromadb_client_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ChromaCollectionManager",
                    "as_name": null,
                    "local_block_id": "fenec:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaCollectionManager"
                }
            ],
            "imported_from": "fenec.databases.chroma.chromadb_collection_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:databases:chroma:chromadb_collection_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "fenec.types.chroma",
                    "as_name": "chroma_types",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:types:chroma.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModelType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.types.fenec",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:types:fenec.py__*__MODULE"
        }
    ],
    "id": "fenec:databases:chroma:chroma_setup.py__*__MODULE",
    "file_path": "fenec/databases/chroma/chroma_setup.py",
    "parent_id": "fenec:databases:chroma__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 74,
    "code_content": "import logging\n\nimport chromadb\nfrom fenec.databases.chroma.chromadb_client_manager import ChromaClientHandler\n\nfrom fenec.databases.chroma.chromadb_collection_manager import (\n    ChromaCollectionManager,\n)\n\nimport fenec.types.chroma as chroma_types\n\nfrom fenec.types.fenec import ModelType\n\n\ndef setup_chroma(collection_name: str = \"fenec\") -> ChromaCollectionManager:\n    \"\"\"\n    Sets up and returns a Chroma Collection Manager.\n\n    Args:\n        - collection_name (str, optional): Name of the Chroma collection. Defaults to \"fenec\".\n\n    Returns:\n        - ChromaCollectionManager: An instance of ChromaCollectionManager for the specified collection.\n    \"\"\"\n\n    chroma_settings = chroma_types.Settings(allow_reset=True)\n    chroma_client: chroma_types.ClientAPI = chromadb.PersistentClient(\n        settings=chroma_settings\n    )\n    chroma_client_manager = ChromaClientHandler(chroma_client)\n\n    chroma_collection: chroma_types.Collection = (\n        chroma_client_manager.get_or_create_collection(collection_name)\n    )\n    return ChromaCollectionManager(chroma_collection)\n\n\ndef setup_chroma_with_update(\n    models: list[ModelType], collection_name: str = \"fenec\"\n) -> ChromaCollectionManager:\n    \"\"\"\n    Sets up Chroma with model updates and return a Chroma Collection Manager.\n\n    Notes:\n        - This will wipe the existing Chroma collection and replace it with the provided models.\n\n    Args:\n        - models (list[ModelType]): List of models to upsert into the Chroma collection.\n        - collection_name (str, optional): Name of the Chroma collection. Defaults to \"fenec\".\n\n    Returns:\n        - ChromaCollectionManager: An instance of ChromaCollectionManager for the specified collection\n          with the provided models upserted.\n    \"\"\"\n\n    chroma_settings = chroma_types.Settings(allow_reset=True)\n    chroma_client: chroma_types.ClientAPI = chromadb.PersistentClient(\n        settings=chroma_settings\n    )\n    chroma_client_manager = ChromaClientHandler(chroma_client)\n\n    logging.debug(f\"Resetting Chroma client\")\n    if chroma_client_manager.reset_client():\n        logging.debug(\"Client reset\")\n\n    chroma_collection: chroma_types.Collection = (\n        chroma_client_manager.get_or_create_collection(collection_name)\n    )\n    chroma_collection_manager = ChromaCollectionManager(chroma_collection)\n    chroma_collection_manager.upsert_models(tuple(models))\n    logging.debug(f\"Upserted models to Chroma collection {chroma_collection.name}\")\n\n    return chroma_collection_manager\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "This code serves as a backend utility for managing collections within a Chroma database, specifically tailored for the Fenec system. Its primary purpose is to facilitate the setup and management of Chroma collections, either by initializing a new collection or by updating an existing one with new models. This functionality is crucial for maintaining structured data storage and retrieval, which is a core requirement for the Fenec system's data management capabilities. Key components include the `setup_chroma` function, which initializes a Chroma collection manager for a specified collection, and the `setup_chroma_with_update` function, which resets an existing collection and upserts new models into it. The `setup_chroma` function creates a persistent Chroma client using the `chromadb.PersistentClient` class, configured with settings that allow for collection resets. This client is managed by a `ChromaClientHandler`, which is responsible for creating or retrieving collections through the `get_or_create_collection` method. The `ChromaCollectionManager` class is then used to manage these collections, providing an interface for further operations.\n\nThe implementation leverages a persistent client pattern to ensure that the Chroma database interactions are consistent and reliable. The `setup_chroma_with_update` function includes a mechanism to reset the client, ensuring that the collection is wiped and replaced with the new models, which is critical for scenarios where data integrity and freshness are paramount. Logging is employed to provide debugging information, particularly during the client reset process, which aids in monitoring and troubleshooting the system's operations. The technical stack includes the `chromadb` library, which is used for database interactions, providing the necessary API for persistent client management and collection operations. The `fenec` package is utilized for types and client management utilities, ensuring type safety and consistency across the system. The use of logging is integral for debugging and operational transparency.\n\nIn the context of the larger Fenec project, this code serves as a foundational component for managing data collections. It interfaces with other components that require access to structured data storage and retrieval within the Chroma database, supporting the overall data management strategy of the Fenec system. By providing a robust and flexible mechanism for collection management, this code ensures that the Fenec system can efficiently handle dynamic data requirements and maintain high data integrity standards. The `setup_chroma_with_update` function is particularly significant in dynamic environments where data consistency and freshness are paramount, as it manages and updates Chroma collections by resetting existing data and inserting new models. This integration allows for seamless data operations within a broader data management ecosystem, supporting various applications that require reliable and scalable data management solutions.",
    "children_ids": [
        "fenec:databases:chroma:chroma_setup.py__*__MODULE__*__FUNCTION-setup_chroma",
        "fenec:databases:chroma:chroma_setup.py__*__MODULE__*__FUNCTION-setup_chroma_with_update"
    ]
}