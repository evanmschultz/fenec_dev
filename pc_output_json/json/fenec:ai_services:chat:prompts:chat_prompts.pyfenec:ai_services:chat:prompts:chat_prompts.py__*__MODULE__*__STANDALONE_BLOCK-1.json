{
    "variable_assignments": [
        "DEFAULT_SYSTEM_PROMPT = \"\"\"\nYou are a chatbot that specializes in answering questions about a particular python codebase. You will be given a user question\nand contextual summaries or code from the code base. You must answer the user question using the contextual summaries or code.\n\nIf the question cannot be answered using the contextual summaries or code, you must respond with \"My knowledge base does not include\nthe necessary information to answer your question. Think step by step from first principles inferred from the context to answer your question.\n\"\"\"",
        "DEFAULT_PROMPT_TEMPLATE = \"\"\"\nCONTEXT: {context}\n\nUser Question: {user_question}\n\"\"\""
    ],
    "id": "fenec:ai_services:chat:prompts:chat_prompts.py__*__MODULE__*__STANDALONE_BLOCK-1",
    "file_path": "fenec/ai_services/chat/prompts/chat_prompts.py",
    "parent_id": "fenec:ai_services:chat:prompts:chat_prompts.py__*__MODULE",
    "block_type": "STANDALONE_BLOCK",
    "start_line_num": 1,
    "end_line_num": 14,
    "code_content": "DEFAULT_SYSTEM_PROMPT = \"\"\"\nYou are a chatbot that specializes in answering questions about a particular python codebase. You will be given a user question\nand contextual summaries or code from the code base. You must answer the user question using the contextual summaries or code.\n\nIf the question cannot be answered using the contextual summaries or code, you must respond with \"My knowledge base does not include\nthe necessary information to answer your question. Think step by step from first principles inferred from the context to answer your question.\n\"\"\"\nDEFAULT_PROMPT_TEMPLATE = \"\"\"\nCONTEXT: {context}\n\nUser Question: {user_question}\n\"\"\"\n",
    "important_comments": null,
    "dependencies": [],
    "summary": "This code defines a critical configuration element for a chatbot system, specifically designed to assist users with inquiries related to a Python codebase. Its primary purpose is to guide the chatbot in delivering precise and contextually relevant responses by leveraging provided code snippets or summaries. The main component of this implementation is the `DEFAULT_SYSTEM_PROMPT`, a multi-line string variable that encapsulates the operational logic and behavioral instructions for the chatbot. This prompt instructs the chatbot to utilize available contextual information to answer user questions and provides a fallback response when the necessary information is not present, encouraging a logical, step-by-step reasoning approach.\n\nThe implementation is straightforward, involving the assignment of the multi-line string to the `DEFAULT_SYSTEM_PROMPT` variable. This simplicity ensures seamless integration into a larger system without additional dependencies, relying solely on Python's built-in string handling capabilities. The technical stack is minimal, focusing on Python's core features to define and manage the prompt.\n\nIn the context of a broader conversational AI system, this prompt serves as a foundational configuration for a chatbot module, ensuring that the chatbot remains focused on the codebase context. It plays a pivotal role in maintaining the chatbot's relevance and accuracy in responses, especially when direct answers are not available. This setup is likely part of a more extensive system that interfaces with code documentation and user queries, potentially involving other components such as natural language processing modules, user interface elements, and backend services that manage user interactions and data retrieval. The design of the prompt reflects a modular approach, allowing for easy updates or replacements as the system evolves or as new requirements emerge. This modularity supports the chatbot's adaptability and scalability within the larger system, ensuring it can meet the dynamic needs of users and developers interacting with the codebase.",
    "children_ids": null
}