{
    "function_name": "_gather_non_import_dependencies",
    "docstring": "Gather non-import dependencies from the given `children_builders` and `block_builder`\nbased on the provided `code_content`.\n\nArgs:\n    - children_builders (Sequence): List of builders representing child nodes.\n    - block_builder: Builder representing the current block.\n    - code_content (str): Content of the code.\n    - dependency_creator (Callable[[str], DependencyModel]): A callable function to create a DependencyModel.\n\nReturns:\n    - list[DependencyModel]: List of dependencies.",
    "decorators": null,
    "parameters": null,
    "returns": "list[DependencyModel]",
    "is_method": false,
    "is_async": false,
    "id": "fenec:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_gather_non_import_dependencies",
    "file_path": "fenec/python_parser/visitors/node_processing/gather_dependencies.py",
    "parent_id": "fenec:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 166,
    "end_line_num": 225,
    "code_content": "\n\ndef _gather_non_import_dependencies(\n    children_builders: Sequence[\n        ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\n    ],\n    block_builder: (\n        ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\n    ),\n    code_content: str,\n    dependency_creator: Callable[[str], DependencyModel],\n) -> list[DependencyModel]:\n    \"\"\"\n    Gather non-import dependencies from the given `children_builders` and `block_builder`\n    based on the provided `code_content`.\n\n    Args:\n        - children_builders (Sequence): List of builders representing child nodes.\n        - block_builder: Builder representing the current block.\n        - code_content (str): Content of the code.\n        - dependency_creator (Callable[[str], DependencyModel]): A callable function to create a DependencyModel.\n\n    Returns:\n        - list[DependencyModel]: List of dependencies.\n    \"\"\"\n\n    block_dependencies: list[DependencyModel] = []\n    for builder in children_builders:\n        if _not_same_builder(builder, block_builder):\n            if isinstance(builder, ClassModelBuilder):\n                if builder.class_attributes.class_name in code_content:\n                    module_dependency = dependency_creator(builder.id)\n                    block_dependencies.append(module_dependency)\n\n            elif isinstance(builder, FunctionModelBuilder):\n                if builder.function_attributes.function_name in code_content:\n                    module_dependency = dependency_creator(builder.id)\n                    block_dependencies.append(module_dependency)\n\n            elif isinstance(builder, StandaloneBlockModelBuilder) and isinstance(\n                block_builder, StandaloneBlockModelBuilder\n            ):\n                module_dependency: DependencyModel | None = (\n                    _gather_standalone_block_dependency_for_standalone_block(\n                        builder, code_content, dependency_creator\n                    )\n                )\n                if module_dependency:\n                    block_dependencies.append(module_dependency)\n\n            # TODO: Improve logic to find variable dependencies\n            elif isinstance(builder, StandaloneBlockModelBuilder):\n                module_dependency = _get_standalone_block_dependency(\n                    builder, code_content, dependency_creator\n                )\n                if module_dependency:\n                    block_dependencies.append(module_dependency)\n\n    return block_dependencies\n",
    "important_comments": [
        {
            "content": "# TODO: Improve logic to find variable dependencies",
            "comment_types": [
                "TODO"
            ]
        }
    ],
    "dependencies": [
        {
            "code_block_id": "fenec:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_get_standalone_block_dependency"
        },
        {
            "code_block_id": "fenec:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_gather_standalone_block_dependency_for_standalone_block"
        },
        {
            "code_block_id": "fenec:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_not_same_builder"
        },
        {
            "import_names": [
                {
                    "name": "re",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Callable",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Sequence",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Callable",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Sequence",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "StandaloneBlockModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.standalone_block_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-ImportModel"
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:models:models.py__*__MODULE"
        }
    ],
    "summary": "This code is designed to identify and collect non-import dependencies from a set of code builders, which represent various code structures such as classes, functions, and standalone blocks. Its primary purpose is to analyze the relationships between these builders within a given block of code content, thereby facilitating dependency management in a codebase. This is crucial for maintaining the integrity of code relationships and ensuring that changes in one part of the codebase do not inadvertently affect other parts, supporting robust software development practices.\n\nKey components include the `_gather_non_import_dependencies` function, which orchestrates the dependency gathering process by iterating over a sequence of child builders and checking if each builder is different from the current block builder using the `_not_same_builder` function. It employs type checking to determine the builder type and checks for the presence of relevant attributes, such as class names or function names, in the code content. If a match is found, it creates a `DependencyModel` using a provided callable and appends it to the list of dependencies. The function also includes logic for handling standalone block dependencies, with a placeholder for improving variable dependency detection. This is achieved through helper functions like `_gather_standalone_block_dependency_for_standalone_block` and `_get_standalone_block_dependency`, which are responsible for specific dependency gathering tasks related to standalone blocks.\n\nThe implementation leverages Python's type hinting and callable constructs, as well as the use of union types for flexible type handling. The code is structured to support extensibility and maintainability, allowing for easy integration of additional dependency types or builders. The design pattern employed here is a form of the visitor pattern, where different types of builders are visited and processed based on their specific attributes and relationships within the code content.\n\nIn the context of a larger system, this function would be part of a code analysis or refactoring tool, helping to identify and manage dependencies within a codebase. It interacts with other components that define and manage code models, facilitating a structured approach to code dependency management. This function is integral to a system that aims to automate the analysis of code dependencies, potentially interfacing with tools for code visualization, refactoring, or impact analysis. By providing a clear mapping of dependencies, it aids developers in understanding the codebase structure and making informed decisions during development and maintenance phases.",
    "children_ids": []
}