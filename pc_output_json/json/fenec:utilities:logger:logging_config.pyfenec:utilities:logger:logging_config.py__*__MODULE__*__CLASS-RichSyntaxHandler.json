{
    "class_name": "RichSyntaxHandler",
    "decorators": null,
    "bases": [
        "RichHandler"
    ],
    "docstring": "A custom logging handler that extends RichHandler to add syntax highlighting.\n\nThis handler checks if the log record contains a 'syntax_highlight' attribute and, if so, uses 'rich.syntax.Syntax' to render the message with Python syntax highlighting.\n\nInherits:\n    RichHandler: The base handler provided by the rich library for rich text formatting.",
    "keywords": null,
    "id": "fenec:utilities:logger:logging_config.py__*__MODULE__*__CLASS-RichSyntaxHandler",
    "file_path": "fenec/utilities/logger/logging_config.py",
    "parent_id": "fenec:utilities:logger:logging_config.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 27,
    "end_line_num": 73,
    "code_content": "\n\nclass RichSyntaxHandler(RichHandler):\n    \"\"\"\n    A custom logging handler that extends RichHandler to add syntax highlighting.\n\n    This handler checks if the log record contains a 'syntax_highlight' attribute and, if so, uses 'rich.syntax.Syntax' to render the message with Python syntax highlighting.\n\n    Inherits:\n        RichHandler: The base handler provided by the rich library for rich text formatting.\n    \"\"\"\n\n    def emit(self, record) -> None:\n        \"\"\"\n        Emits a logging record.\n\n        If the record has the 'syntax_highlight' attribute set to True, it renders the 'content' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\n\n        Args:\n            record: The logging record to emit.\n\n        Example:\n            # Assuming `logger` is a logger instance\n            >>> logger.info(\"Regular log message\")\n            # Outputs a regular log message.\n\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print('Hello, world!')\"})\n            # Outputs the message with syntax highlighting.\n        \"\"\"\n\n        try:\n            if hasattr(record, \"syntax_highlight\") and getattr(\n                record, \"syntax_highlight\"\n            ):\n                content: str = getattr(record, \"content\", \"\")\n                if isinstance(content, str):\n                    syntax = Syntax(\n                        content, \"python\", theme=\"material\", line_numbers=True\n                    )\n                    self.console.print(syntax)\n                return\n\n        except Exception as e:\n            self.handleError(record)\n\n        super().emit(record)\n",
    "important_comments": null,
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "RichHandler",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "rich.logging",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Syntax",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "rich.syntax",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "summary": "The `RichSyntaxHandler` class is a specialized logging handler designed to enhance the readability of log messages by incorporating syntax highlighting for Python code snippets. This class extends the `RichHandler` from the `rich` library, which is renowned for its capabilities in rich text formatting and rendering. The primary functionality of `RichSyntaxHandler` is to check each log record for a `syntax_highlight` attribute. If this attribute is set to `True`, the handler retrieves the `content` attribute from the log record, which is expected to contain Python code, and applies syntax highlighting using the `Syntax` class from the `rich.syntax` module. This class is configured to use the \"material\" theme and includes line numbers for better code readability. If the `syntax_highlight` attribute is absent or set to `False`, the handler defaults to the standard behavior of the `RichHandler`, ensuring that non-code log messages are processed normally.\n\nKey components of this implementation include the `RichSyntaxHandler` class itself, which inherits from `RichHandler`, and the `emit` method, which is responsible for processing and displaying log records. The `emit` method employs a try-except block to manage potential errors during the syntax highlighting process, invoking the `handleError` method to handle exceptions gracefully. This robust error management ensures that the logging system remains stable even if unexpected issues arise during log processing.\n\nThe technical stack primarily involves the `rich` library, which is leveraged for its advanced text formatting capabilities. The `Syntax` class within this library is specifically used to render Python code with syntax highlighting, enhancing the visual clarity of log messages that contain code snippets. This handler can be seamlessly integrated into a larger logging system, allowing developers to selectively apply syntax highlighting to log messages, thereby improving the debugging and monitoring experience.\n\nIn the context of a larger project, `RichSyntaxHandler` can be part of a comprehensive logging framework that aims to provide developers with clear and informative log outputs. By enhancing the presentation of logs that include code snippets, this handler aids in the quick identification and resolution of issues, making it a valuable tool in environments where code readability and clarity are paramount. It can interact with other logging components to form a cohesive system that supports various logging needs, from simple text messages to complex code outputs, thus fitting into a broader strategy of effective application monitoring and debugging.",
    "children_ids": [
        "fenec:utilities:logger:logging_config.py__*__MODULE__*__CLASS-RichSyntaxHandler__*__FUNCTION-emit"
    ]
}