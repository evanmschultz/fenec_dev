{
    "function_name": "update_changed",
    "docstring": "Updates only the changed files and their connected code blocks since the last update.\n\nArgs:\n    last_commit_hash (str): The commit hash of the last update.\n    num_passes (int): Number of summarization passes to perform. Must be either 1 or 3. Default is 1.\n\nReturns:\n    ChromaCollectionManager: The updated ChromaDB collection manager.",
    "decorators": null,
    "parameters": null,
    "returns": "ChromaCollectionManager",
    "is_method": true,
    "is_async": false,
    "id": "fenec:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater__*__FUNCTION-update_changed",
    "file_path": "fenec/updaters/graph_db_updater.py",
    "parent_id": "fenec:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater",
    "block_type": "FUNCTION",
    "start_line_num": 92,
    "end_line_num": 148,
    "code_content": "\ndef update_changed(self, num_passes: int = 1) -> ChromaCollectionManager:\n    \"\"\"\n        Updates only the changed files and their connected code blocks since the last update.\n\n        Args:\n            last_commit_hash (str): The commit hash of the last update.\n            num_passes (int): Number of summarization passes to perform. Must be either 1 or 3. Default is 1.\n\n        Returns:\n            ChromaCollectionManager: The updated ChromaDB collection manager.\n        \"\"\"\n    if num_passes not in [1, 3]:\n        raise ValueError(\"Number of passes must be either 1 or 3\")\n\n    last_commit_hash: str = self._get_last_commit_hash()\n    changed_files: list[str] = git_updater.get_changed_files_since_last_update(\n        last_commit_hash\n    )\n\n    # Parse all files (we need the full structure to detect connections)\n    process_files_return = self._visit_and_parse_files(self.directory)\n    all_models = process_files_return.models_tuple\n\n    # Detect affected models\n    change_detector = ChangeDetector(\n        all_models,\n        self.graph_manager,\n    )\n    affected_model_ids: set[str] = change_detector.get_affected_models(\n        changed_files, both_directions=True if num_passes == 3 else False\n    )\n\n    # Filter models to only affected ones\n    affected_models = [\n        model for model in all_models if model.id in affected_model_ids\n    ]\n    affected_models = tuple(affected_models)\n\n    # Update graph DB with all models (to ensure structure is up-to-date)\n    self._upsert_models_to_graph_db(all_models)\n\n    # Summarize and update only affected models\n    finalized_models = self._map_and_summarize_models(affected_models, num_passes)\n\n    if not finalized_models:\n        raise Exception(\"No finalized models returned from summarization.\")\n\n    # Update databases with finalized models\n    self._upsert_models_to_graph_db(tuple(finalized_models))\n    chroma_manager = chroma_setup.setup_chroma_with_update(finalized_models)\n\n    current_commit_hash = git_updater.get_current_commit_hash()\n    self._save_last_commit_hash(current_commit_hash)\n\n    return chroma_manager\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "The `update_changed` method is a critical component of a code management system designed to efficiently update a ChromaDB collection by focusing on files and their interconnected code blocks that have changed since the last update. This method is integral to maintaining an optimized and current model structure within a ChromaDB collection manager, which is part of a larger system for managing codebases. Its primary function is to detect changes in the codebase, identify affected models, and update only those models in the database, thereby minimizing unnecessary processing and ensuring efficient resource utilization.\n\nKey components of this method include: `git_updater.get_changed_files_since_last_update`, which retrieves a list of files that have changed since the last commit; `ChangeDetector`, which uses a graph-based approach to identify models affected by these changes; `_visit_and_parse_files`, which parses the entire directory to understand the file structure and model connections; `_upsert_models_to_graph_db`, which updates the graph database with the latest model structures; and `chroma_setup.setup_chroma_with_update`, which configures the ChromaDB with the updated models.\n\nThe implementation involves several steps: it begins by retrieving the last commit hash and identifying changed files using a Git interface. The method then parses the entire file structure to detect connections between models. The `ChangeDetector` is employed to determine which models are affected by the changes, considering both directions of change if three summarization passes are specified. The method filters out unaffected models and updates the graph database with all models to ensure the structure is current. It performs summarization passes on the affected models, updating the graph database and ChromaDB with the finalized models. The process concludes by saving the current commit hash for future reference, ensuring that subsequent updates are based on the latest state of the codebase.\n\nThe technical stack includes a version control system interface, likely Git, for tracking changes, and a graph database for managing model structures. ChromaDB is used for storing and managing the updated models. This method fits into a larger system by interacting with version control to detect changes and a graph database to maintain an up-to-date model structure, ensuring efficient updates to the ChromaDB collection manager. It is part of a broader code management and update system that ensures the codebase remains current and optimized, facilitating efficient development and deployment processes. This method's design supports modularity and scalability, allowing it to adapt to various project sizes and complexities within the larger system.",
    "children_ids": []
}