{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "OllamaSummarizer",
                    "as_name": null,
                    "local_block_id": "fenec:ai_services:summarizer:ollama_summarizer.py__*__MODULE__*__CLASS-OllamaSummarizer"
                }
            ],
            "imported_from": "fenec.ai_services.summarizer.ollama_summarizer",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:ai_services:summarizer:ollama_summarizer.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "OpenAISummarizer",
                    "as_name": null,
                    "local_block_id": "fenec:ai_services:summarizer:openai_summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer"
                }
            ],
            "imported_from": "fenec.ai_services.summarizer.openai_summarizer",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:ai_services:summarizer:openai_summarizer.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "Summarizer",
                    "as_name": null,
                    "local_block_id": "fenec:ai_services:summarizer:summarizer_protocol.py__*__MODULE__*__CLASS-Summarizer"
                }
            ],
            "imported_from": "fenec.ai_services.summarizer.summarizer_protocol",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:ai_services:summarizer:summarizer_protocol.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "OpenAISummarizationConfigs",
                    "as_name": null,
                    "local_block_id": "fenec:utilities:configs:configs.py__*__MODULE__*__CLASS-OpenAISummarizationConfigs"
                },
                {
                    "name": "OllamaSummarizationConfigs",
                    "as_name": null,
                    "local_block_id": "fenec:utilities:configs:configs.py__*__MODULE__*__CLASS-OllamaSummarizationConfigs"
                }
            ],
            "imported_from": "fenec.utilities.configs.configs",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:utilities:configs:configs.py__*__MODULE"
        }
    ],
    "id": "fenec:ai_services:summarizer:summarizer_factory.py__*__MODULE",
    "file_path": "fenec/ai_services/summarizer/summarizer_factory.py",
    "parent_id": "fenec:ai_services:summarizer__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 28,
    "code_content": "from fenec.ai_services.summarizer.ollama_summarizer import OllamaSummarizer\nfrom fenec.ai_services.summarizer.openai_summarizer import OpenAISummarizer\nfrom fenec.ai_services.summarizer.summarizer_protocol import Summarizer\nfrom fenec.utilities.configs.configs import (\n    OpenAISummarizationConfigs,\n    OllamaSummarizationConfigs,\n)\n\n\ndef create_summarizer(\n    configs: OpenAISummarizationConfigs | OllamaSummarizationConfigs,\n) -> Summarizer:\n    \"\"\"\n    Create a summarizer based on the provided configs.\n\n    Args:\n        - `configs` (OpenAISummarizationConfigs | OllamaSummarizationConfigs): The summarization configs.\n\n    Returns:\n        Summarizer: The summarizer instance.\n    \"\"\"\n    if isinstance(configs, OpenAISummarizationConfigs):\n        return OpenAISummarizer(configs)\n    elif isinstance(configs, OllamaSummarizationConfigs):\n        return OllamaSummarizer(configs)\n    else:\n        raise ValueError(\"Invalid summarization configs provided.\")\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "This code serves as a dynamic factory function, `create_summarizer`, designed to instantiate summarizer objects based on the provided configuration, specifically targeting text summarization tasks. Its primary purpose is to offer a flexible and modular interface for generating summarizer instances tailored to specific configurations, thereby enhancing the adaptability and scalability of text processing systems. This functionality is significant as it allows seamless integration of various summarization engines within a larger text processing framework, adapting to different user or system requirements.\n\nKey components of the code include the `create_summarizer` function, which acts as the factory method for generating summarizer instances; the `OpenAISummarizer` and `OllamaSummarizer` classes, which implement the summarization logic specific to their respective services; and the configuration classes `OpenAISummarizationConfigs` and `OllamaSummarizationConfigs`, which encapsulate the necessary settings for each summarization service. The `Summarizer` protocol is also a crucial component, providing a standardized interface that both summarizer classes adhere to, ensuring consistency and interoperability within the system.\n\nThe implementation employs a straightforward conditional logic using Python's `isinstance` function to determine the type of summarizer to instantiate. If the configuration object is an instance of `OpenAISummarizationConfigs`, the function returns an `OpenAISummarizer`; if it is an instance of `OllamaSummarizationConfigs`, it returns an `OllamaSummarizer`. This design pattern ensures that the system can easily extend to accommodate additional summarization services by simply adding new configuration and summarizer classes. Robust error handling is implemented by raising a `ValueError` for invalid configurations, ensuring that only valid configurations are processed.\n\nThe technical stack includes custom modules from the `fenec` package, specifically `fenec.ai_services.summarizer` for the summarizer classes and `fenec.utilities.configs.configs` for configuration management. These modules are integral to the system, providing the necessary classes and interfaces for summarization and configuration handling. The use of Python's type hinting and union types (`|`) enhances code readability and maintainability, allowing for clear specification of expected input types.\n\nIn the context of a larger project or system, this code functions as a critical component within a summarization service framework. It acts as a bridge between configuration management and summarization logic, providing a standardized summarizer object that can be utilized for text processing tasks across various applications. This modular design supports scalability and flexibility, allowing the system to adapt to different summarization needs and integrate seamlessly with other components, such as data ingestion pipelines, user interfaces, or downstream processing modules. By abstracting the summarization service selection, the code facilitates the development of a cohesive and adaptable text processing ecosystem.",
    "children_ids": [
        "fenec:ai_services:summarizer:summarizer_factory.py__*__MODULE__*__FUNCTION-create_summarizer"
    ]
}