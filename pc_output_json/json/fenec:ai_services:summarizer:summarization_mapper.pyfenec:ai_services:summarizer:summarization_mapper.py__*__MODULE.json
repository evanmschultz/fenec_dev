{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ArangoDBManager",
                    "as_name": null,
                    "local_block_id": "fenec:databases:arangodb:arangodb_manager.py__*__MODULE__*__CLASS-ArangoDBManager"
                }
            ],
            "imported_from": "fenec.databases.arangodb.arangodb_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:databases:arangodb:arangodb_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModelType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.types.fenec",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:types:fenec.py__*__MODULE"
        }
    ],
    "id": "fenec:ai_services:summarizer:summarization_mapper.py__*__MODULE",
    "file_path": "fenec/ai_services/summarizer/summarization_mapper.py",
    "parent_id": "fenec:ai_services:summarizer__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 191,
    "code_content": "import logging\nfrom fenec.databases.arangodb.arangodb_manager import ArangoDBManager\nfrom fenec.types.fenec import ModelType\n\n\nclass SummarizationMapper:\n    \"\"\"\n    A class for generating summarization maps based on specified module IDs and associated models.\n\n    This class facilitates the creation of both bottom-up and top-down summarization maps by traversing\n    inbound and outbound relationships in a graph structure. It utilizes an ArangoDBManager instance\n    for querying relationships between models.\n\n    Args:\n        module_ids_to_update (list[str]): The list of module IDs to consider during summarization map creation.\n        all_models (tuple[ModelType, ...]): Tuple of all models available for summarization.\n        arangodb_manager (ArangoDBManager): The ArangoDBManager instance for handling database interactions.\n\n    Methods:\n        create_bottom_up_summarization_map(pass_num: int): Creates a bottom-up summarization map for the specified module IDs.\n        create_top_down_summarization_map(pass_num: int): Creates a top-down summarization map for the specified module IDs.\n    \"\"\"\n\n    def __init__(\n        self,\n        module_ids_to_update: list[str],\n        all_models: tuple[ModelType, ...],\n        arangodb_manager: ArangoDBManager,\n    ) -> None:\n        self.module_ids_to_update: list[str] = module_ids_to_update\n        self.all_models: tuple[ModelType, ...] = all_models\n        self.arangodb_manager: ArangoDBManager = arangodb_manager\n\n        self.models_to_update: list[ModelType] = self._get_models_to_update()\n        self.model_visited_in_db: set[str] = set()\n        self.summarization_map: list[ModelType] = []\n        self.temp_map: list[ModelType] = []\n\n    def _get_models_to_update(self) -> list[ModelType]:\n        \"\"\"\n        Returns all models that need to be updated based on the module IDs.\n\n        This method queries the ArangoDBManager to find the models that are either directly associated with\n        the module IDs or related through dependencies.\n\n        Returns:\n            list[ModelType]: List of models to be updated.\n        \"\"\"\n        models_to_update: list[ModelType] = []\n        for model in self.all_models:\n            for module_id in self.module_ids_to_update:\n                if module_id in model.id:\n                    models_to_update.append(model)\n                    break\n        return models_to_update\n\n    def _set_inbound_models_in_summarization_map(self, model_id: str) -> None:\n        \"\"\"\n        Sets inbound models in the summarization map recursively.\n\n        Args:\n            model_id (str): The ID of the model.\n        \"\"\"\n        if model_id in self.model_visited_in_db:\n            return\n        self.model_visited_in_db.add(model_id)\n        inbound_models = self.arangodb_manager.get_inbound_models(model_id)\n        if inbound_models:\n            for model in inbound_models:\n                self._set_inbound_models_in_summarization_map(model.id)\n                self.temp_map.append(model)\n\n    def _set_outbound_models_in_summarization_map(self, model_id: str) -> None:\n        \"\"\"\n        Sets outbound models in the summarization map recursively.\n\n        Args:\n            model_id (str): The ID of the model.\n        \"\"\"\n        if model_id in self.model_visited_in_db:\n            return\n        self.model_visited_in_db.add(model_id)\n        outbound_models = self.arangodb_manager.get_outbound_models(model_id)\n        if outbound_models:\n            for model in outbound_models:\n                self._set_outbound_models_in_summarization_map(model.id)\n                self.temp_map.append(model)\n\n    def create_bottom_up_summarization_map(self, pass_num: int) -> list[ModelType]:\n        \"\"\"\n        Creates a bottom-up summarization map for the specified module IDs.\n\n        This method creates a summarization map starting from the lowest-level models\n        and working up to higher-level models by first traversing inbound relationships.\n\n        Args:\n            pass_num (int): The current pass number, used to differentiate between passes.\n\n        Returns:\n            list[ModelType]: The bottom-up summarization map.\n        \"\"\"\n        logging.info(f\"Creating bottom-up summarization map for pass {pass_num}\")\n        self._refresh_models_to_update()\n\n        for model in self.models_to_update:\n            logging.debug(f\"Setting inbound models in summarization map: {model.id}\")\n            self._set_inbound_models_in_summarization_map(model.id)\n            self.temp_map.append(model)\n            self.model_visited_in_db.remove(model.id)\n            self.summarization_map.extend(self.temp_map)\n            self.temp_map = []\n\n        for model in self.models_to_update:\n            logging.debug(f\"Setting outbound models in summarization map: {model.id}\")\n            self._set_outbound_models_in_summarization_map(model.id)\n            self.summarization_map.extend(self.temp_map)\n            self.temp_map = []\n\n        logging.info(\"Bottom-up summarization map created\")\n        return self._remove_duplicates(self.summarization_map)[::-1]\n\n    def create_top_down_summarization_map(self, pass_num: int) -> list[ModelType]:\n        \"\"\"\n        Creates a top-down summarization map for the specified module IDs.\n\n        This method creates a summarization map starting from the highest-level models\n        and working down to lower-level models by first traversing outbound relationships.\n\n        Args:\n            pass_num (int): The current pass number, used to differentiate between passes.\n\n        Returns:\n            list[ModelType]: The top-down summarization map.\n        \"\"\"\n        logging.info(f\"Creating top-down summarization map for pass {pass_num}\")\n        self._refresh_models_to_update()\n\n        for model in self.models_to_update:\n            logging.debug(f\"Setting outbound models in summarization map: {model.id}\")\n            self._set_outbound_models_in_summarization_map(model.id)\n            self.temp_map.append(model)\n            self.model_visited_in_db.remove(model.id)\n            self.summarization_map.extend(self.temp_map)\n            self.temp_map = []\n\n        for model in self.models_to_update:\n            logging.debug(f\"Setting inbound models in summarization map: {model.id}\")\n            self._set_inbound_models_in_summarization_map(model.id)\n            self.summarization_map.extend(self.temp_map)\n            self.temp_map = []\n\n        logging.info(\"Top-down summarization map created\")\n        return self._remove_duplicates(self.summarization_map)\n\n    def _remove_duplicates(self, summarization_map: list[ModelType]) -> list[ModelType]:\n        \"\"\"\n        Removes duplicate models from the summarization map while preserving order.\n\n        Args:\n            summarization_map (list[ModelType]): The original summarization map.\n\n        Returns:\n            list[ModelType]: The summarization map with duplicates removed.\n        \"\"\"\n        summary_ids: set[str] = set()\n        unique_summary_map: list[ModelType] = []\n        for model in summarization_map:\n            if model.id not in summary_ids:\n                unique_summary_map.append(model)\n                summary_ids.add(model.id)\n        return unique_summary_map\n\n    def _refresh_models_to_update(self) -> None:\n        \"\"\"\n        Refreshes the models_to_update list based on the current module_ids_to_update and all_models.\n\n        This method re-queries the database via ArangoDBManager to get the correct list of models to process\n        for either top-down or bottom-up summarization.\n        \"\"\"\n        refreshed_models = []\n        for module_id in self.module_ids_to_update:\n            outbound_models = self.arangodb_manager.get_outbound_models(\n                module_id\n            )  # For top-down\n            if outbound_models:\n                refreshed_models.extend(outbound_models)\n\n        self.models_to_update = (\n            refreshed_models if refreshed_models else self.models_to_update\n        )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "The `SummarizationMapper` class is a critical component within a graph-based AI platform, designed to generate summarization maps for specified module IDs by leveraging associated models. Its primary purpose is to facilitate both bottom-up and top-down summarization by traversing inbound and outbound relationships within a graph structure, utilizing an `ArangoDBManager` instance to execute database queries and ascertain model relationships. This functionality is significant for dynamically generating model summaries based on relational data, supporting data-driven decision-making processes within the system.\n\nKey components of the `SummarizationMapper` class include: the constructor `__init__`, which initializes the class with module IDs, models, and a database manager; `_get_models_to_update`, which identifies models requiring updates based on module IDs by checking their presence in the model's ID; `_set_inbound_models_in_summarization_map` and `_set_outbound_models_in_summarization_map`, which recursively populate the summarization map with inbound and outbound models, respectively; `create_bottom_up_summarization_map` and `create_top_down_summarization_map`, which generate summarization maps by traversing relationships in different directions, starting from either the lowest or highest-level models; `_remove_duplicates`, which ensures the summarization map is free of duplicates while maintaining order; and `_refresh_models_to_update`, which updates the list of models to process by re-querying the database for the latest dependencies.\n\nThe implementation employs recursive traversal algorithms to explore model dependencies, utilizing sets to track visited models and lists to construct summarization maps. The use of a set for `model_visited_in_db` ensures that each model is processed only once, preventing infinite loops in the graph traversal. The summarization maps are constructed by appending models to a temporary map (`temp_map`) during traversal, which is then extended to the main `summarization_map` after each model's dependencies are processed. The `create_bottom_up_summarization_map` method reverses the order of the summarization map to reflect the bottom-up approach, while the `create_top_down_summarization_map` maintains the order for a top-down perspective.\n\nThe technical stack prominently features ArangoDB, a multi-model database that supports graph data structures, which is crucial for querying and managing model relationships. This choice of database allows for efficient traversal and manipulation of complex dependency graphs, which is central to the functionality of the `SummarizationMapper`. Additionally, the `logging` module is used for logging operations, providing insights into the map creation process, and the `ModelType` represents the model data structure, encapsulating the necessary attributes for each model within the graph.\n\nIn the context of a larger system, this code is part of a summarization service within a broader AI platform. It interacts with a graph database to dynamically generate model summaries based on relational data, thus supporting data-driven decision-making processes. The summarization maps generated by this class can be used for various purposes, such as dependency analysis, impact assessment, and visualization of model relationships. This functionality is essential for maintaining the integrity and coherence of the model ecosystem within the platform, ensuring that updates and changes are accurately reflected across interconnected models.",
    "children_ids": [
        "fenec:ai_services:summarizer:summarization_mapper.py__*__MODULE__*__CLASS-SummarizationMapper"
    ]
}