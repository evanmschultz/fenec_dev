{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": null,
    "id": "fenec:ai_services:summarizer:prompts:summarization_prompts.py__*__MODULE",
    "file_path": "fenec/ai_services/summarizer/prompts/summarization_prompts.py",
    "parent_id": "fenec:ai_services:summarizer:prompts__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 166,
    "code_content": "EXAMPLE_1 = \"\"\"\nThis implements a data processing pipeline for analyzing genomic sequencing data. Its purpose is to process raw sequencing reads, align them to a reference genome, and perform analyses like variant calling and gene expression quantification. Key components include: SequenceReader for parsing sequencing files; AlignmentEngine using the Burrows-Wheeler Aligner; VariantCaller for identifying genomic variants; and ExpressionQuantifier for calculating gene expression levels.\nThe implementation uses parallel processing with a producer-consumer pattern and thread pool. It employs a suffix array for fast alignment and a hidden Markov model for variant calling. The pipeline features robust error handling with a custom PipelineException class.\nThe technical stack includes BioPython, NumPy, SciPy, Pandas, and Dask. It integrates with SAMtools and BEDTools for specific genomic operations.\nIn the context of a bioinformatics platform, this pipeline processes raw data into actionable insights. It interfaces with data acquisition systems, LIMS, and visualization tools. Its modular design supports various sequencing technologies and experimental designs.\n\"\"\"\n\nEXAMPLE_2 = \"\"\"\nThis code creates a flexible reinforcement learning (RL) framework for training and evaluating agents in various environments. It provides a unified interface for RL algorithms, environments, and neural networks. Key components include: Agent base class; Environment class; ReplayBuffer for experience replay; PolicyNetwork and ValueNetwork for function approximation; and Trainer for orchestrating training.\nThe implementation uses a modular design, supporting both on-policy (e.g., PPO) and off-policy (e.g., SAC) methods. It implements importance sampling and Generalized Advantage Estimation. A custom TensorBoard logger visualizes training progress.\nThe technical stack comprises PyTorch, NumPy, Gym, Ray, and MLflow. It integrates with simulators like Mujoco and Bullet for robotics simulations.\nIn AI research and development, this framework serves as a tool for exploring RL algorithms. It interfaces with HPC clusters, databases, and provides APIs for integration with higher-level AI systems. Its modular architecture supports collaborative research and a wide range of applications from game-playing to autonomous vehicles.\n\"\"\"\n\nCODE_SUMMARY_PROMPT_PASS_1 = \"\"\"\nYou are an expert code analyst tasked with summarizing Python code. Your goal is to create a comprehensive and informative summary that captures the essence of the code's functionality, structure, and purpose. This summary will be used in a vector search system, so it needs to be semantically rich and consistently structured.\n\nProvide your summary with the following information but written in paragraph form:\n\n1. Purpose: [Comprehensive description of the code's main goal, functionality, and significance]\n2. Key Components: [Main functions, classes, or modules with refined descriptions, separated by semicolons]\n3. Implementation: [Detailed explanation of how the code works, including notable algorithms, data structures, and design patterns]\n4. Technical Stack: [Comprehensive list of libraries, frameworks, or technologies used, with brief explanations of their roles, separated by commas]\n5. Context: [How this code fits into the larger project or system, including its interactions with other components]\n\nEnsure the summary is very detailed and technical.\n\nEvaluation Criteria:\n- Accuracy: The summary correctly represents the code's functionality.\n- Conciseness: Information is presented clearly and efficiently within the given length constraints.\n- Semantic Richness: Use of relevant technical terms and concepts that would be valuable in a vector search.\n- Consistency: Adherence to the specified structure for easy parsing and embedding.\n\nExamples:\nHere are two high-quality examples of code summaries following the specified format:\n\nExample 1:\n{EXAMPLE_1}\n\nExample 2:\n{EXAMPLE_2}\n\nProcess:\n1. Analyze the overall structure and purpose of the code.\n2. Identify key functions, classes, and their relationships.\n3. Understand the main algorithms or processes implemented.\n4. Recognize the technical stack and any unique features of the implementation.\n5. Consider how this code relates to its dependencies or the larger system.\n6. Synthesize this information into a cohesive summary following the output format and drawing inspiration from the provided examples.\n\nNow, please summarize the following code:\n\n```python\n{code}\n```\n\nAdditional Context:\nChildren Summaries: {children_summaries}\nDependency's Summaries: {dependency_summaries}\nImports: {import_details}\n\nRemember to follow the specified output format and evaluation criteria in your summary, optimizing for vector search retrieval. Use the provided examples as a guide for the level of detail and style expected in your summary.\n\"\"\"\n\nCODE_SUMMARY_PROMPT_PASS_2 = \"\"\"\nYou are an expert code analyst performing the second pass of a multi-pass code summarization task. Your goal is to build upon the first-pass summary and provide more detailed information about the implementation and technical stack and how this code fits into the larger project or system. This summary will be used in a vector search system and as input for the final pass.\n\nProvide your summary with the following information but written in paragraph form:\n\n1. Purpose: [Comprehensive description of the code's main goal, functionality, and significance]\n2. Key Components: [Main functions, classes, or modules with refined descriptions, separated by semicolons]\n3. Implementation: [Detailed explanation of how the code works, including notable algorithms, data structures, and design patterns]\n4. Technical Stack: [Comprehensive list of libraries, frameworks, or technologies used, with brief explanations of their roles, separated by commas]\n5. Context: [How this code fits into the larger project or system, including its interactions with other components]\n\nEnsure the summary is very detailed and technical.\n\nEvaluation Criteria:\n- Accuracy: The summary correctly represents the code's functionality and implementation details.\n- Conciseness: Information is presented clearly and efficiently within the given length constraints.\n- Semantic Richness: Use of relevant technical terms and concepts that would be valuable in a vector search.\n- Consistency: Adherence to the specified structure for easy parsing and embedding.\n\nEXAMPLE 1:\n{EXAMPLE_1}\n\nEXAMPLE 2:\n{EXAMPLE_2}\n\nPrevious Summary:\n{previous_summary}\n\nNow, please provide a second-pass summary of the following code, building upon the first-pass summary:\n\n```python\n{code}\n```\n\nAdditional Context:\nSummary of parents or codeblocks that depend on this one: {parent_summary}\nImports: {import_details}\nDependencies: {dependency_summaries}\n\nFocus on providing more detailed information about the implementation and technical stack and how the code fits in with the larger codebase; refining, expanding, and updating the first-pass summary given the additional context and higher level view of how this code fits into the grander scheme.\n\"\"\"\n\nCODE_SUMMARY_PROMPT_PASS_3 = \"\"\"\nYou are an expert code analyst performing the final pass of a multi-pass code summarization task. Your goal is to refine and contextualize the previous summary, providing a comprehensive overview of the code that includes its role in the larger system. This final summary will be used in a vector search system.\n\nProvide your summary with the following information but written in paragraph form:\n\n1. Purpose: [Comprehensive description of the code's main goal, functionality, and significance]\n2. Key Components: [Main functions, classes, or modules with refined descriptions, separated by semicolons]\n3. Implementation: [Detailed explanation of how the code works, including notable algorithms, data structures, and design patterns]\n4. Technical Stack: [Comprehensive list of libraries, frameworks, or technologies used, with brief explanations of their roles, separated by commas]\n5. Context: [How this code fits into the larger project or system, including its interactions with other components]\n\nEnsure the summary is very detailed and technical.\n\nEvaluation Criteria:\n- Accuracy: The summary correctly represents the code's functionality, implementation details, and context.\n- Conciseness: Information is presented clearly and efficiently within the given length constraints.\n- Semantic Richness: Use of relevant technical terms and concepts that would be valuable in a vector search.\n- Consistency: Adherence to the specified structure for easy parsing and embedding.\n- Contextual Relevance: Clear explanation of the code's role in the larger system.\n\nEXAMPLE 1:\n{EXAMPLE_1}\n\nEXAMPLE 2:\n{EXAMPLE_2}\n\nPrevious Summary:\n{previous_summary}\n\n\nNow, please provide a final, comprehensive summary of the following code, building upon the previous summary and the context provided:\n\n```python\n{code}\n```\n\nAdditional Context:\nChildren Summaries: {children_summaries}\nDependencies: {dependency_summaries}\nImports: {import_details}\n\nFocus on refining, expanding, and updating the previous summary, adding context about the code's role in the larger system, and ensuring a comprehensive final summary.\n\"\"\"\n\n\nSUMMARIZER_DEFAULT_INSTRUCTIONS = \"\"\"You are a code summarizer. Your task is to analyze the code provided and create a concise summary of the\ngiven code based on the prompt provided. Your summary should be technical yet understandable, providing a clear picture of the code's purpose, main\nfeatures, and key components.\n\"\"\"\n\nSUMMARIZER_DEFAULT_DESCRIPTION = \"\"\"Summarizes Python code.\"\"\"\n\nsummary_prompt_list: list[str] = [\n    EXAMPLE_1,\n    EXAMPLE_2,\n    CODE_SUMMARY_PROMPT_PASS_1,\n    CODE_SUMMARY_PROMPT_PASS_2,\n    CODE_SUMMARY_PROMPT_PASS_3,\n]\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "The provided Python code is a sophisticated system designed to generate detailed and structured summaries of Python code snippets, primarily for use in a vector search system. Its main goal is to produce semantically rich summaries that encapsulate the functionality, structure, and purpose of the code, enhancing code retrieval and understanding. Key components include example summaries (EXAMPLE_1 and EXAMPLE_2) that act as templates, and a series of summarization prompts (CODE_SUMMARY_PROMPT_PASS_1, CODE_SUMMARY_PROMPT_PASS_2, CODE_SUMMARY_PROMPT_PASS_3) that guide the summarization process through multiple stages, from initial analysis to final contextualization. The implementation employs a multi-pass approach, where each pass iteratively refines and expands upon the previous summary, ensuring a comprehensive and detailed final output. This approach leverages structured string prompts and examples to systematically guide the summarization process, ensuring consistency and depth in the summaries produced.\n\nThe technical stack is primarily Python-based, utilizing structured string prompts and examples to guide the summarization process. The system is designed to be modular and extensible, allowing for easy integration into larger systems. In the context of a larger project, this code functions as a backend service for generating code summaries, which can be integrated into a vector search system to enhance code retrieval and understanding. It interacts with other components by providing detailed summaries that can be indexed and searched efficiently, supporting developers in navigating and understanding large codebases. This integration is crucial for systems that require efficient code retrieval and comprehension, such as large-scale software development environments or code analysis platforms.",
    "children_ids": [
        "fenec:ai_services:summarizer:prompts:summarization_prompts.py__*__MODULE__*__STANDALONE_BLOCK-1"
    ]
}