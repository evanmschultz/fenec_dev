{
    "function_name": "_handle_summarization_passes",
    "docstring": null,
    "decorators": null,
    "parameters": null,
    "returns": "list[ModelType] | None",
    "is_method": true,
    "is_async": false,
    "id": "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-_handle_summarization_passes",
    "file_path": "fenec/ai_services/summarizer/graph_db_summarization_manager.py",
    "parent_id": "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager",
    "block_type": "FUNCTION",
    "start_line_num": 109,
    "end_line_num": 153,
    "code_content": "\ndef _handle_summarization_passes(\n    self, num_of_passes: int\n) -> list[ModelType] | None:\n    if num_of_passes == 1:\n        logging.info(\"Starting single-pass summarization\")\n        models: (\n            list[\n                ModuleModel\n                | ClassModel\n                | FunctionModel\n                | StandaloneCodeBlockModel\n                | DirectoryModel\n            ]\n            | None\n        ) = self._process_summarization_map(\n            self.summarization_mapper.create_bottom_up_summarization_map(1), 1\n        )\n\n    else:\n        logging.info(\"Starting multi-pass summarization\")\n\n        for pass_num in range(1, num_of_passes + 1):\n            if pass_num % 2 != 0:\n                logging.info(f\"[blue]Pass number:[/blue] {pass_num} (bottom-up)\")\n                models = self._process_summarization_map(\n                    self.summarization_mapper.create_bottom_up_summarization_map(\n                        pass_num\n                    ),\n                    pass_num,\n                )\n            else:\n                logging.info(f\"[blue]Pass number:[/blue] {pass_num} (top-down)\")\n                models = self._process_summarization_map(\n                    self.summarization_mapper.create_top_down_summarization_map(\n                        pass_num\n                    ),\n                    pass_num,\n                    models,\n                    top_down=True,\n                )\n            self.summarization_mapper.model_visited_in_db = set()\n\n    return models\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "This code is a critical component of a sophisticated code summarization system, designed to enhance the granularity and depth of code summaries through a flexible multi-pass approach. Its primary purpose is to orchestrate the summarization process by determining the number of passes required and executing the appropriate summarization strategy, thereby refining the representation of code structures. The main function, `_handle_summarization_passes`, is responsible for managing this process. Key components include: `_process_summarization_map`, which processes the summarization maps generated by the summarization mapper; `create_bottom_up_summarization_map` and `create_top_down_summarization_map` methods from the `summarization_mapper`, which generate the necessary maps for summarization; and various model types such as `ModuleModel`, `ClassModel`, `FunctionModel`, `StandaloneCodeBlockModel`, and `DirectoryModel`, which represent different code structures to be summarized.\n\nThe implementation involves iterating over the specified number of passes, applying both bottom-up and top-down summarization strategies to refine the models. In a single-pass scenario, the code processes a bottom-up summarization map, while in a multi-pass scenario, it iteratively processes both bottom-up and top-down maps for each pass. After each complete cycle, the `model_visited_in_db` set is reset to ensure accurate tracking of processed models, allowing for progressively refined summaries. This iterative approach leverages the strengths of both summarization strategies, ensuring comprehensive and detailed code summaries.\n\nThe technical stack, while not explicitly detailed in the code, likely involves Python's logging module for tracking the summarization process, and possibly other libraries for handling data structures and model representations. This code is designed to be part of a larger framework for code analysis and summarization, interacting with a summarization mapper to generate and refine code model summaries. It fits into the larger project by providing a modular and extensible approach to code summarization, capable of integrating with other components that require detailed code analysis and representation. This system could be used for documentation, code review, or other purposes where understanding and summarizing code structures is essential, thereby playing a crucial role in enhancing code comprehension and maintainability within the larger software development lifecycle.",
    "children_ids": []
}