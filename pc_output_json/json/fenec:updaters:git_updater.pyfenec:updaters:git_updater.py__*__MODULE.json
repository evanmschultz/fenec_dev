{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "subprocess",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        }
    ],
    "id": "fenec:updaters:git_updater.py__*__MODULE",
    "file_path": "fenec/updaters/git_updater.py",
    "parent_id": "fenec:updaters__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 38,
    "code_content": "import subprocess\n\n\ndef get_changed_files_since_last_update(last_commit_hash: str) -> list[str]:\n    \"\"\"\n    Returns a list of Python files that have been changed since the last update.\n\n    Args:\n        `last_commit_hash` (str): The commit hash of the last update.\n\n    Returns:\n        `list[str]`: A list of changed Python file paths.\n    \"\"\"\n    git_command = f\"git diff --name-only {last_commit_hash} HEAD\"\n\n    result = subprocess.run(git_command, shell=True, capture_output=True, text=True)\n    if result.returncode != 0:\n        raise Exception(f\"Git command failed: {result.stderr}\")\n\n    changed_files = result.stdout.strip().split(\"\\n\")\n    return [file for file in changed_files if file.endswith(\".py\")]\n\n\ndef get_current_commit_hash() -> str:\n    \"\"\"\n    Retrieves the current commit hash.\n\n    Returns:\n        `str`: The current commit hash.\n    \"\"\"\n    git_command = \"git rev-parse HEAD\"\n\n    result = subprocess.run(git_command, shell=True, capture_output=True, text=True)\n    if result.returncode != 0:\n        raise Exception(f\"Git command failed: {result.stderr}\")\n\n    return result.stdout.strip()\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "This code is designed to facilitate version control and update tracking by interacting with a Git repository to identify changes in Python files and retrieve the current commit hash. Its primary purpose is to support workflows that require monitoring code changes, such as continuous integration pipelines or development tools, by providing utilities to track modifications in Python scripts and determine the repository's current state. Key components include two main functions: `get_changed_files_since_last_update`, which takes a commit hash as an argument and returns a list of Python files modified since that commit, and `get_current_commit_hash`, which retrieves the current commit hash of the repository. \n\nThe implementation leverages Python's `subprocess` module to execute Git commands in the shell, capturing their output for further processing. The `get_changed_files_since_last_update` function constructs a Git command using `git diff` to list files changed since the specified commit hash, then filters the results to include only files with a `.py` extension, ensuring that only Python files are tracked. The `get_current_commit_hash` function uses the `git rev-parse HEAD` command to obtain the current commit hash, which is essential for identifying the latest state of the repository. Both functions utilize `subprocess.run` with parameters such as `shell=True`, `capture_output=True`, and `text=True` to execute the commands and handle their outputs efficiently.\n\nThe technical stack is minimal, relying solely on Python's standard library, particularly the `subprocess` module, to interface with the Git command-line tool. This choice ensures that the code remains lightweight and easily maintainable, without external dependencies. In the context of a larger system, this code could be integrated into a continuous integration pipeline, where it would monitor code changes and trigger subsequent actions such as testing or deployment. Its modular design allows it to be easily incorporated into various workflows that require version control operations, providing a flexible and efficient solution for tracking updates in Python projects. This functionality is crucial for maintaining code quality and ensuring that changes are systematically managed and documented within the development lifecycle. By focusing on Python files, it ensures that the CI pipeline remains efficient and targeted, reducing unnecessary processing of unchanged files. This utility can be a critical component in maintaining code quality and facilitating smooth development workflows in projects that rely heavily on Python.",
    "children_ids": [
        "fenec:updaters:git_updater.py__*__MODULE__*__FUNCTION-get_changed_files_since_last_update",
        "fenec:updaters:git_updater.py__*__MODULE__*__FUNCTION-get_current_commit_hash"
    ]
}