{
    "class_name": "ImportUpdater",
    "decorators": null,
    "bases": null,
    "docstring": "The ImportUpdater class is designed to manage and update import statements across\na collection of module model builders. It processes each builder in the provided\nlist, handling and updating import models as required. This class plays a crucial\nrole in ensuring that import statements are correctly managed and updated in response\nto changes in the module models.\n\nAttributes:\n    - model_builder_tuple (tuple[ModuleModelBuilder, ...]): A tuple of ModuleModelBuilder\n    instances to be processed for import updates.\n\nExample:\n    ```Python\n    model_builders = [ModuleModelBuilder(), ModuleModelBuilder()]\n    import_updater = ImportUpdater(model_builders)\n    for builder in model_builders:\n        import_updater.process_builder(builder)\n    ```",
    "keywords": null,
    "id": "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater",
    "file_path": "fenec/python_parser/visitor_manager/import_and_dependency_updater.py",
    "parent_id": "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 58,
    "end_line_num": 303,
    "code_content": "\n\nclass ImportUpdater:\n    \"\"\"\n    The ImportUpdater class is designed to manage and update import statements across\n    a collection of module model builders. It processes each builder in the provided\n    list, handling and updating import models as required. This class plays a crucial\n    role in ensuring that import statements are correctly managed and updated in response\n    to changes in the module models.\n\n    Attributes:\n        - model_builder_tuple (tuple[ModuleModelBuilder, ...]): A tuple of ModuleModelBuilder\n        instances to be processed for import updates.\n\n    Example:\n        ```Python\n        model_builders = [ModuleModelBuilder(), ModuleModelBuilder()]\n        import_updater = ImportUpdater(model_builders)\n        for builder in model_builders:\n            import_updater.process_builder(builder)\n        ```\n    \"\"\"\n\n    def __init__(self, model_builder_tuple: tuple[ModuleModelBuilder, ...]) -> None:\n        self.model_builder_tuple: tuple[ModuleModelBuilder, ...] = model_builder_tuple\n\n    def process_builder(self, builder: ModuleModelBuilder) -> None:\n        \"\"\"\n        Processes a single module model builder to update its import statements.\n\n        Args:\n            - builder (ModuleModelBuilder): The module model builder to process.\n        \"\"\"\n\n        if module_imports := builder.module_attributes.imports:\n            module_imports_tuple = tuple(module_imports)\n            self._handle_import_models(builder, module_imports_tuple)\n            # print(module_imports_tuple)\n\n    def _handle_import_models(\n        self, builder: ModuleModelBuilder, module_imports_tuple: tuple[ImportModel, ...]\n    ) -> None:\n        \"\"\"\n        Handles the import models for a given builder and updates them as necessary.\n\n        Args:\n            - builder (ModuleModelBuilder): The builder whose import models are to be handled.\n            - module_imports (tuple[ImportModel]): A tuple of import models to process.\n        \"\"\"\n\n        # module_imports_tuple = tuple(module_imports)\n        # # HACK: Converts to tuple in order to prevent missing elements as the list was getting modified during iteration\n\n        for import_model in module_imports_tuple:\n            self._update_import_for_builder(builder, import_model)\n\n            DependencyUpdater.update_dependencies(builder)\n\n    def _update_import_for_builder(\n        self, builder: ModuleModelBuilder, import_model: ImportModel\n    ) -> None:\n        \"\"\"\n        Updates a single import model for the given builder. Determines if the import is local,\n        and if so, updates the import path and names accordingly.\n\n        Args:\n            - builder (ModuleModelBuilder): The builder that owns the import model.\n            - import_model (ImportModel): The import model to be updated.\n\n        Example:\n            ```Python\n            updater = ImportUpdater(model_builder_tuple)\n            updater._update_import_for_builder(builder_instance, import_model_instance)\n            ```\n        \"\"\"\n\n        if self._is_local_import(import_model):\n            import_path: str = self._get_import_path(import_model)\n            import_names: list[str] | None = None\n\n            if import_model.imported_from:\n                import_names = self._get_import_names(import_model)\n            # else:\n            #     import_path: str = self._get_import_path(import_model)\n\n            for external_builder in self.model_builder_tuple:\n                if self._should_skip_builder(\n                    builder, external_builder, import_path, import_model\n                ):\n                    continue\n\n                self._update_import_model(\n                    import_model, import_names, builder, external_builder\n                )\n\n    def _is_local_import(self, import_model: ImportModel) -> bool:\n        \"\"\"Returns boolean indicating whether the import is local to the project.\"\"\"\n        return import_model.import_module_type == ImportModuleType.LOCAL\n\n    def _get_import_names(self, import_model: ImportModel) -> list[str]:\n        \"\"\"Returns a list of import names for the given import model.\"\"\"\n        return [name.name for name in import_model.import_names]\n\n    def _get_import_path(self, import_model: ImportModel) -> str:\n        \"\"\"Returns the import path for the given import model.\"\"\"\n\n        if import_model.imported_from:\n            return import_model.imported_from.replace(\".\", \":\")\n        else:\n            return import_model.import_names[0].name.replace(\".\", \":\")\n\n    def _should_skip_builder(\n        self,\n        builder: ModuleModelBuilder,\n        external_builder: ModuleModelBuilder,\n        import_path: str,\n        import_model: ImportModel,\n    ) -> bool:\n        \"\"\"Returns boolean indicating if the given builder should be skipped.\"\"\"\n\n        return (\n            external_builder.id == builder.id\n            or not import_path in external_builder.id\n            or import_model.local_module_id is not None\n        )\n\n    def _update_import_model(\n        self,\n        import_model: ImportModel,\n        import_names: list[str] | None,\n        builder: ModuleModelBuilder,\n        external_builder: ModuleModelBuilder,\n    ) -> None:\n        \"\"\"\n        Updates the import model with new import names and assigns the local module ID to the external builder.\n\n        Args:\n            - import_model (ImportModel): The import model to be updated.\n            - import_names (list[str] | None): The list of new import names.\n            - builder (ModuleModelBuilder): The module model builder.\n            - external_builder (ModuleModelBuilder): The external module model builder.\n\n        Returns:\n            - None\n\n        Example:\n            ```Python\n            import_updater._update_import_model(import_model_instance, import_names_list, builder_instance, external_builder_instance)\n            ```\n        \"\"\"\n        new_import_model: ImportModel = import_model.model_copy()\n        new_import_model.local_module_id = external_builder.id\n\n        if not import_model.imported_from:\n            builder.update_import(new_import_model, import_model)\n            return\n\n        if import_names:\n            new_import_name_models: list[ImportNameModel] = (\n                self._get_new_import_name_models(\n                    external_builder, import_names, import_model\n                )\n            )\n            # print(f\"{len(new_import_name_models)} : {len(import_model.import_names)}\")\n            if len(new_import_name_models) < len(import_model.import_names):\n                # TODO: Add logic to track down the import's definition location\n\n                new_import_name_models = self._add_missing_imports(\n                    new_import_name_models, import_model.import_names\n                )\n\n            new_import_model.import_names = new_import_name_models\n            builder.update_import(new_import_model, import_model)\n\n    def _get_new_import_name_models(\n        self,\n        external_builder: ModuleModelBuilder,\n        import_names: list[str],\n        import_model: ImportModel,\n    ) -> list[ImportNameModel]:\n        \"\"\"\n        Returns a list of new ImportNameModel objects based on the given import names.\n\n        Args:\n            - external_builder (ModuleModelBuilder): The external module builder.\n            - import_names (list[str]): The list of import names.\n            - import_model (ImportModel): The import model.\n\n        Returns:\n            - list[ImportNameModel]: The list of new ImportNameModel objects.\n\n        Example:\n            ```Python\n            new_import_name_models = import_updater._get_new_import_name_models(external_builder_instance, import_names_list, import_model_instance)\n            ```\n        \"\"\"\n\n        new_import_name_models: list = []\n        for child_builder in external_builder.child_builders:\n            for import_name in import_names:\n                child_builder_id_split: list[str] = child_builder.id.split(\"-\")\n\n                if import_name == child_builder_id_split[-1]:\n                    for import_name_model in import_model.import_names:\n                        if import_name_model.name == import_name:\n                            new_import_name_model: ImportNameModel = (\n                                import_name_model.model_copy()\n                            )\n                            # if import_name_model.name == \"OpenAISummarizer\":\n                            #     print(f\"Found OpenAISummarizer: id\")\n\n                            new_import_name_model.local_block_id = child_builder.id\n                            new_import_name_models.append(new_import_name_model)\n                            break\n\n        return new_import_name_models\n\n    def _add_missing_imports(\n        self,\n        new_import_name_models: list[ImportNameModel],\n        existing_import_names: list[ImportNameModel],\n    ) -> list[ImportNameModel]:\n        \"\"\"\n        Adds missing import names to the list of new ImportNameModel objects.\n\n        Args:\n            - new_import_name_models (list[ImportNameModel]): The list of new ImportNameModel objects.\n            - existing_import_names (list[ImportNameModel]): The list of existing ImportNameModel objects.\n\n        Returns:\n            - list[ImportNameModel]: The updated list of new ImportNameModel objects.\n\n        Example:\n            ```Python\n            updated_import_names = import_updater._add_missing_imports(new_import_name_models_list, existing_import_names_list)\n            ```\n        \"\"\"\n\n        for import_name_model in existing_import_names:\n            if import_name_model.name not in [\n                name.name for name in new_import_name_models\n            ]:\n                new_import_name_models.append(import_name_model)\n\n        return new_import_name_models\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-DependencyUpdater"
        },
        {
            "import_names": [
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportNameModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModuleType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportNameModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModuleType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportNameModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModuleType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ModuleModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.module_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:module_model_builder.py__*__MODULE"
        }
    ],
    "summary": "The `ImportUpdater` class is a pivotal component within a module management framework, designed to manage and update import statements across multiple `ModuleModelBuilder` instances. Its primary purpose is to ensure that import statements are accurately maintained and updated in response to changes within module models, which is crucial for preserving the integrity and consistency of module dependencies in dynamic or evolving projects. Key components of the class include: the `__init__` method, which initializes the class with a tuple of `ModuleModelBuilder` instances; `process_builder`, which processes each builder to update its import statements; `_handle_import_models`, which iterates over import models and updates them as necessary; `_update_import_for_builder`, which updates a single import model, checking if it is local and adjusting paths and names; `_is_local_import`, which determines if an import is local to the project; `_get_import_names` and `_get_import_path`, which retrieve import names and paths respectively; `_should_skip_builder`, which decides if a builder should be skipped based on certain conditions; `_update_import_model`, which updates import models with new names and assigns local module IDs; `_get_new_import_name_models`, which generates new `ImportNameModel` objects; and `_add_missing_imports`, which ensures all necessary import names are included.\n\nThe implementation involves iterating over import models, checking their locality, and updating them accordingly. It uses tuples to prevent modification during iteration, ensuring stability in the update process. The class employs a series of helper methods to manage import paths and names, leveraging object-oriented principles to encapsulate functionality and maintain clean separation of concerns. Notably, the `DependencyUpdater.update_dependencies(builder)` call within `_handle_import_models` suggests integration with a broader dependency management system, indicating that this class is part of a larger framework for module management.\n\nThe technical stack primarily consists of custom classes such as `ModuleModelBuilder`, `ImportModel`, and `ImportNameModel`, with no external libraries explicitly mentioned. This suggests a bespoke solution tailored to the specific needs of the project, focusing on internal consistency and modularity.\n\nIn the context of a larger system, the `ImportUpdater` class fits into a module management framework, interacting with other components to ensure that dependencies and imports are accurately maintained and updated. This facilitates seamless module integration and dependency management, which is essential for large-scale software projects where modules are frequently updated or refactored. The class's design allows it to be easily integrated into existing workflows, providing a robust solution for managing import statements across a dynamic codebase.",
    "children_ids": [
        "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-__init__",
        "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-process_builder",
        "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-_handle_import_models",
        "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-_update_import_for_builder",
        "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-_is_local_import",
        "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-_get_import_names",
        "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-_get_import_path",
        "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-_should_skip_builder",
        "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-_update_import_model",
        "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-_get_new_import_name_models",
        "fenec:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-_add_missing_imports"
    ]
}