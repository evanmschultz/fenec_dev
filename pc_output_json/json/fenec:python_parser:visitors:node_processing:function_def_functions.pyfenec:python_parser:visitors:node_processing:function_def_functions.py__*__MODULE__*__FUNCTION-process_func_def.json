{
    "function_name": "process_func_def",
    "docstring": "Processes a libcst.FunctionDef node to build a function model.\n\nExtracts various components of a function definition such as its docstring, code content, decorators, and return annotations,\nand updates the provided FunctionModelBuilder with these details.\n\nArgs:\n    - func_id (str): The unique identifier for the function.\n    - node (libcst.FunctionDef): The function definition node from the CST.\n    - position_data (PositionData): Positional data for the function in the source code.\n    - func_builder (FunctionModelBuilder): The builder used to construct the function model.\n\nExample:\n    ```Python\n    func_builder = FunctionModelBuilder(id=\"func1\", ...)\n    process_func_def(\"func1\", function_node, position_data, func_builder)\n    # Processes the function definition and updates the function builder.\n    ```",
    "decorators": null,
    "parameters": null,
    "returns": "None",
    "is_method": false,
    "is_async": false,
    "id": "fenec:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-process_func_def",
    "file_path": "fenec/python_parser/visitors/node_processing/function_def_functions.py",
    "parent_id": "fenec:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 18,
    "end_line_num": 69,
    "code_content": "\n\ndef process_func_def(\n    func_id: str,\n    node: libcst.FunctionDef,\n    position_data: PositionData,\n    func_builder: FunctionModelBuilder,\n) -> None:\n    \"\"\"\n    Processes a libcst.FunctionDef node to build a function model.\n\n    Extracts various components of a function definition such as its docstring, code content, decorators, and return annotations,\n    and updates the provided FunctionModelBuilder with these details.\n\n    Args:\n        - func_id (str): The unique identifier for the function.\n        - node (libcst.FunctionDef): The function definition node from the CST.\n        - position_data (PositionData): Positional data for the function in the source code.\n        - func_builder (FunctionModelBuilder): The builder used to construct the function model.\n\n    Example:\n        ```Python\n        func_builder = FunctionModelBuilder(id=\"func1\", ...)\n        process_func_def(\"func1\", function_node, position_data, func_builder)\n        # Processes the function definition and updates the function builder.\n        ```\n    \"\"\"\n\n    docstring: str | None = node.get_docstring()\n    code_content: str = common_functions.extract_code_content(node)\n    decorators: list[DecoratorModel] | None = common_functions.extract_decorators(\n        node.decorators\n    )\n\n    returns: str = (\n        _extract_return_annotation(node.returns)\n        if node.returns\n        else \"Function has no return annotation\"\n    )\n    (\n        func_builder.set_docstring(docstring)\n        .set_code_content(code_content)\n        .set_start_line_num(position_data.start)\n        .set_end_line_num(position_data.end)\n    )\n    (\n        func_builder.set_decorators(decorators)\n        .set_is_method(_func_is_method(func_id))\n        .set_is_async(_func_is_async(node))\n        .set_return_annotation(returns)\n    )\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "fenec:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_func_is_method"
        },
        {
            "code_block_id": "fenec:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_func_is_async"
        },
        {
            "code_block_id": "fenec:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_extract_return_annotation"
        },
        {
            "import_names": [
                {
                    "name": "DecoratorModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ParameterListModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ParameterModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "fenec.python_parser.visitors.node_processing.common_functions",
                    "as_name": "common_functions",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "PositionData",
                    "as_name": null,
                    "local_block_id": "fenec:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData"
                }
            ],
            "imported_from": "fenec.utilities.processing_context",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:utilities:processing_context.py__*__MODULE"
        }
    ],
    "summary": "The code defines a function `process_func_def`, which plays a crucial role in a system designed for analyzing and modeling Python function definitions using the `libcst` library. This library provides a concrete syntax tree (CST) for Python code, enabling precise and non-destructive code manipulation. The primary purpose of `process_func_def` is to extract and organize various components of a function definition, such as the docstring, code content, decorators, and return annotations, and update a `FunctionModelBuilder` instance with this information. This process is essential for constructing a detailed representation of the function, which can be leveraged for tasks like code analysis, documentation generation, or refactoring.\n\nKey components of the code include: the `process_func_def` function itself, which orchestrates the extraction and updating process; the `FunctionModelBuilder`, a class responsible for constructing and storing the function model, likely employing a builder design pattern to facilitate the incremental construction of complex objects; `PositionData`, which captures the function's position in the source code; and utility functions such as `common_functions.extract_code_content` and `common_functions.extract_decorators`, which are used to extract specific details from the function node. The implementation involves several steps: extracting the docstring using `node.get_docstring()`, obtaining code content and decorators through helper functions, and determining the return annotation with a conditional check. The function then updates the `FunctionModelBuilder` with these extracted details, including setting the start and end line numbers from `PositionData`, and flags for method and async status using `_func_is_method` and `_func_is_async`.\n\nThe technical stack includes the `libcst` library, which is pivotal for parsing and manipulating Python code as concrete syntax trees, allowing for precise and non-destructive code analysis. Additionally, custom utility functions are employed for specific extraction tasks, enhancing the modularity and reusability of the code. The `FunctionModelBuilder` likely utilizes a builder design pattern, facilitating the incremental construction of complex objects.\n\nIn the context of a larger system, this function is likely part of a code analysis or documentation generation tool. It interacts with other components to build comprehensive models of code structures, facilitating tasks such as code review, refactoring, or documentation. By providing a detailed and structured representation of function definitions, this code enables other parts of the system to perform more advanced analyses, such as detecting code smells, generating API documentation, or suggesting code improvements. This modular approach allows for easy integration with other tools and systems, making it a valuable component in a software development or maintenance workflow.",
    "children_ids": []
}