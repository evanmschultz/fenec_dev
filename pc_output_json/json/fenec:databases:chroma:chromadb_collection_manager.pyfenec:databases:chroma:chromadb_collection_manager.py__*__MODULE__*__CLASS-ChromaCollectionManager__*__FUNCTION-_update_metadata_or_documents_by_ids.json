{
    "function_name": "_update_metadata_or_documents_by_ids",
    "docstring": "Updates the metadata or documents of specific entries in the collection by their ids.\n\nArgs:\n    - ids (list[str]): List of ids of the entries to be updated.\n    - metadatas (list[Mapping[str, Any]] | None): List of metadata updates corresponding to the ids.\n    - documents (list[str] | None): List of document updates corresponding to the ids.\n\nRaises:\n    - ValueError: If neither metadatas nor documents are provided.\n    - ValueError: If the length of ids and documents don't match.\n    - ValueError: If the length of ids and metadatas don't match.\n    - ValueError: If the length of ids, metadatas, and documents don't match.\n\nNotes:\n    - As of now, ChromaDB doesn't raise an exception if you provide an id that doesn't exist.\n\nExamples:\n    ```Python\n    # Update metadata and documents for specific ids\n    ids_to_update = ['id1', 'id2']\n    metadata_updates = [{\"key1\": \"value1\"}, {\"key2\": \"value2\"}]\n    document_updates = [\"new document 1\", \"new document 2\"]\n    collection_manager.update_metadata_or_documents_by_ids(ids_to_update, metadata_updates, document_updates)\n    ```",
    "decorators": null,
    "parameters": null,
    "returns": "None",
    "is_method": true,
    "is_async": false,
    "id": "fenec:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaCollectionManager__*__FUNCTION-_update_metadata_or_documents_by_ids",
    "file_path": "fenec/databases/chroma/chromadb_collection_manager.py",
    "parent_id": "fenec:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaCollectionManager",
    "block_type": "FUNCTION",
    "start_line_num": 286,
    "end_line_num": 358,
    "code_content": "\ndef _update_metadata_or_documents_by_ids(\n    self,\n    ids: list[str],\n    metadatas: list[Mapping[str, str | int | float | bool]] | None = None,\n    documents: list[str] | None = None,\n) -> None:\n    \"\"\"\n        Updates the metadata or documents of specific entries in the collection by their ids.\n\n        Args:\n            - ids (list[str]): List of ids of the entries to be updated.\n            - metadatas (list[Mapping[str, Any]] | None): List of metadata updates corresponding to the ids.\n            - documents (list[str] | None): List of document updates corresponding to the ids.\n\n        Raises:\n            - ValueError: If neither metadatas nor documents are provided.\n            - ValueError: If the length of ids and documents don't match.\n            - ValueError: If the length of ids and metadatas don't match.\n            - ValueError: If the length of ids, metadatas, and documents don't match.\n\n        Notes:\n            - As of now, ChromaDB doesn't raise an exception if you provide an id that doesn't exist.\n\n        Examples:\n            ```Python\n            # Update metadata and documents for specific ids\n            ids_to_update = ['id1', 'id2']\n            metadata_updates = [{\"key1\": \"value1\"}, {\"key2\": \"value2\"}]\n            document_updates = [\"new document 1\", \"new document 2\"]\n            collection_manager.update_metadata_or_documents_by_ids(ids_to_update, metadata_updates, document_updates)\n            ```\n        \"\"\"\n\n    if not metadatas and not documents:\n        raise ValueError(\"You must provide either metadatas or documents.\")\n    if not metadatas and documents:\n        if len(ids) != len(documents):\n            raise ValueError(\"The length of ids and documents must match.\")\n    if metadatas and not documents:\n        if len(ids) != len(metadatas):\n            raise ValueError(\"The length of ids and metadatas must match.\")\n    if metadatas and documents:\n        if len(ids) != len(metadatas) != len(documents):\n            raise ValueError(\n                \"The length of ids, metadatas, and documents must match.\"\n            )\n    for index, id in enumerate(ids):\n        if not self.collection.get(id):\n            logging.error(\n                f\"Id {id} does not exist in collection {self.collection.name}.\"\n            )\n            ids.pop(index)\n            if metadatas:\n                popped_metadata = metadatas.pop(index)\n                if popped_metadata:\n                    logging.warning(\n                        f\"Removing metadata at index {index} from update.\"\n                    )\n            if documents:\n                popped_document = documents.pop(index)\n                if popped_document:\n                    logging.warning(\n                        f\"Removing document at index {index} from update.\"\n                    )\n\n    if not ids:\n        logging.warning(\"All updates failed.\")\n        return None\n    else:\n        logging.info(f\"Updating collection {self.collection.name} with ids {ids}.\")\n        self.collection.update(ids=ids, metadatas=metadatas, documents=documents)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "The `_update_metadata_or_documents_by_ids` method is designed to update metadata or documents for specific entries within a collection, identified by their unique IDs. This function is crucial for maintaining data integrity and ensuring that updates are applied accurately to the correct entries. Key components of this method include its parameters: `ids`, a list of strings representing the unique identifiers of the entries to be updated; `metadatas`, an optional list of mappings that contain metadata updates; and `documents`, an optional list of strings for document updates. The implementation involves a series of validation checks to ensure that the input lists are not empty and that their lengths match, raising `ValueError` exceptions if these conditions are not met. The function iterates over the provided IDs, checking for their existence in the collection. If an ID does not exist, it is removed from the update lists, ensuring that only valid entries are processed. If all IDs are invalid, a warning is logged, and the function exits without making updates. Otherwise, it proceeds to update the collection with the valid IDs, metadatas, and documents.\n\nThe technical stack is not explicitly detailed in the code, but the function appears to be part of a larger system that interacts with a database or data management system, possibly ChromaDB, as indicated by the note. This suggests that the function is likely integrated into a data management framework that handles collections of documents and their associated metadata. The method's design pattern emphasizes robust error handling and data validation, ensuring that updates are only applied to valid entries, which is critical for maintaining the consistency and reliability of the data management process.\n\nIn the context of a larger project, this function likely serves as a utility for managing data integrity and consistency within a database. It ensures that updates are only applied to valid entries, maintaining the robustness of the data management process. This method could be part of a broader data management system that includes functionalities for data retrieval, storage, and manipulation, interacting with other components such as data validation modules, logging systems, and possibly user interfaces for managing collections. The method's integration with ChromaDB or a similar database system suggests that it plays a role in a scalable and efficient data management solution, supporting applications that require dynamic and reliable data updates.",
    "children_ids": []
}