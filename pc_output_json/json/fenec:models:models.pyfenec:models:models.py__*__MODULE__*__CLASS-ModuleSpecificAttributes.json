{
    "class_name": "ModuleSpecificAttributes",
    "decorators": null,
    "bases": [
        "BaseModel"
    ],
    "docstring": "Module specific attributes.",
    "keywords": null,
    "id": "fenec:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes",
    "file_path": "fenec/models/models.py",
    "parent_id": "fenec:models:models.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 550,
    "end_line_num": 632,
    "code_content": "\n\nclass ModuleSpecificAttributes(BaseModel):\n    \"\"\"Module specific attributes.\"\"\"\n\n    docstring: str | None = None\n    header: list[str] | None = None\n    footer: list[str] | None = None\n    imports: list[ImportModel] | None = None\n\n    def _convert_docstring_to_metadata(self) -> str:\n        \"\"\"Converts the docstring to a metadata string.\"\"\"\n        return f\"{self.docstring}\"\n\n    def _convert_header_to_metadata(self) -> str:\n        \"\"\"Converts the header and footer to a metadata string.\"\"\"\n        return self.model_dump_json()\n\n    def _convert_footer_to_metadata(self) -> str:\n        \"\"\"Converts the header and footer to a metadata string.\"\"\"\n        return self.model_dump_json()\n\n    def _convert_imports_to_metadata(self) -> str:\n        \"\"\"Converts the imports to a metadata string.\"\"\"\n        imports_str: str = self.model_dump_json() if self.imports else \"\"\n        return f\"{imports_str}\"\n\n    def _convert_module_attributes_to_metadata_dict(self) -> dict[str, str | int]:\n        \"\"\"Converts the module attributes to a metadata dictionary for ChromaDB.\"\"\"\n\n        return {\n            \"docstring\": self._convert_docstring_to_metadata(),\n            \"header\": self._convert_header_to_metadata(),\n            \"footer\": self._convert_footer_to_metadata(),\n            \"imports\": self._convert_imports_to_metadata(),\n        }\n\n    @classmethod\n    def _build_from_meta(\n        cls, metadata: dict[str, str | int | list[str]]\n    ) -> \"ModuleSpecificAttributes\":\n        \"\"\"Builds a ModuleSpecificAttributes from a metadata dictionary.\"\"\"\n\n        try:\n            if not isinstance(metadata, dict):\n                raise ValueError(\"Metadata must be a dictionary.\")\n\n            docstring = metadata.get(\"docstring\")\n            if not isinstance(docstring, str):\n                raise ValueError(\"Docstring must be a string.\")\n\n            header = metadata.get(\"header\")\n            if not isinstance(header, list):\n                raise ValueError(\"Header must be a list.\")\n\n            footer = metadata.get(\"footer\")\n            if not isinstance(footer, list):\n                raise ValueError(\"Footer must be a list.\")\n\n            imports_data = metadata.get(\"imports\")\n            if not isinstance(imports_data, list):\n                raise ValueError(\"Imports must be a list.\")\n\n            imports = []\n            for import_data in imports_data:\n                if not isinstance(import_data, dict):\n                    raise ValueError(\"Each import must be a dictionary.\")\n                import_model = ImportModel._build_from_metadata(import_data)\n                imports.append(import_model)\n\n            return cls(\n                docstring=docstring,\n                header=header,\n                footer=footer,\n                imports=imports,\n            )\n        except ValueError as ve:\n            logging.error(f\"Error building from metadata: {ve}\")\n            raise ve\n        except Exception as e:\n            logging.error(f\"An unexpected error occurred: {e}\")\n            raise e\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-ImportModel"
        },
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "BaseModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Field",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "field_validator",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "pydantic",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "summary": "The `ModuleSpecificAttributes` class is designed to manage and convert module-specific attributes into a structured metadata format suitable for storage in ChromaDB, a database system. This class extends `BaseModel` from the Pydantic library, which provides data validation and management capabilities. The primary purpose of this class is to encapsulate attributes such as docstrings, headers, footers, and import statements, and provide methods to convert these attributes into a structured metadata format. This conversion is crucial for systems that require metadata extraction and storage, facilitating efficient data retrieval and integration with other components.\n\nKey components of the class include several private methods: `_convert_docstring_to_metadata`, `_convert_header_to_metadata`, `_convert_footer_to_metadata`, and `_convert_imports_to_metadata`, each responsible for transforming specific attributes into metadata strings. The `_convert_module_attributes_to_metadata_dict` method aggregates these transformations into a dictionary format, preparing the data for ChromaDB. The class method `_build_from_meta` constructs an instance of `ModuleSpecificAttributes` from a metadata dictionary, ensuring type validation and conversion of import data using the `ImportModel` class.\n\nThe implementation employs a structured approach to metadata conversion, encapsulating the logic within the class to promote modularity and reusability. The design pattern involves using Pydantic's data validation features to ensure that each attribute is correctly transformed and validated. The `_build_from_meta` method includes robust error handling to validate input types and convert import data into `ImportModel` instances, ensuring data integrity and consistency.\n\nThe technical stack includes Pydantic for data validation and management, which is crucial for ensuring that the attributes conform to expected types and formats. The `model_dump_json` method is used for serializing attributes into JSON format, facilitating easy storage and retrieval. The `ImportModel` class, although not fully detailed in the provided code, is presumed to handle the conversion and validation of import data, playing a critical role in the metadata conversion process.\n\nIn the context of a larger system, this class is likely part of a module handling system where metadata needs to be extracted and stored in a database like ChromaDB. It interacts with other components by providing a standardized way to convert and validate module attributes, facilitating integration with metadata storage and retrieval systems. The class's design supports extensibility and integration with other metadata processing components within the system, making it a vital part of the metadata management workflow. This integration ensures that module-specific attributes are consistently and accurately represented in the database, supporting various downstream applications and analyses.",
    "children_ids": [
        "fenec:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes__*__FUNCTION-_convert_docstring_to_metadata",
        "fenec:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes__*__FUNCTION-_convert_header_to_metadata",
        "fenec:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes__*__FUNCTION-_convert_footer_to_metadata",
        "fenec:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes__*__FUNCTION-_convert_imports_to_metadata",
        "fenec:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes__*__FUNCTION-_convert_module_attributes_to_metadata_dict",
        "fenec:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes__*__FUNCTION-_build_from_meta"
    ]
}