{
    "function_name": "create_prompt",
    "docstring": "Dynamically creates a prompt for the summarizer based on the provided arguments, supporting multi-pass summarization.\n\nArgs:\n    - `code` (str): The code snippet to summarize.\n    - `children_summaries` (str, optional): The summaries of the children of the code snippet.\n    - `dependency_summaries` (str, optional): The summaries of the dependencies of the code snippet.\n    - `import_details` (str, optional): The import details of the code snippet.\n    - `parent_summary` (str, optional): The summary of the parent code block (for multi-pass summarization).\n    - `pass_number` (int, optional): The current pass number in multi-pass summarization. Default is 1.\n    - `previous_summary` (str, optional): The summary from the previous pass in multi-pass summarization.\n\nReturns:\n    - `str`: The prompt for the summarizer.\n\nRaises:\n    - `ValueError`: If no strategy is found for the given combination of arguments.\n\nExamples:\n    ```Python\n    # Create a prompt for single-pass summarization\n    prompt: str | None = SummarizationPromptCreator.create_prompt(\n        code,\n        children_summaries,\n        dependency_summaries,\n        import_details,\n    )\n\n    # Create a prompt for multi-pass summarization (e.g., second pass)\n    prompt: str | None = SummarizationPromptCreator.create_prompt(\n        code,\n        children_summaries,\n        dependency_summaries,\n        import_details,\n        parent_summary,\n        pass_number=2,\n        previous_summary=\"Previous summary of the code.\"\n    )\n    ```",
    "decorators": [
        {
            "content": "@staticmethod",
            "decorator_name": "staticmethod",
            "decorator_args": null
        }
    ],
    "parameters": null,
    "returns": "str | None",
    "is_method": true,
    "is_async": false,
    "id": "fenec:ai_services:summarizer:prompts:prompt_creator.py__*__MODULE__*__CLASS-SummarizationPromptCreator__*__FUNCTION-create_prompt",
    "file_path": "fenec/ai_services/summarizer/prompts/prompt_creator.py",
    "parent_id": "fenec:ai_services:summarizer:prompts:prompt_creator.py__*__MODULE__*__CLASS-SummarizationPromptCreator",
    "block_type": "FUNCTION",
    "start_line_num": 375,
    "end_line_num": 457,
    "code_content": "\n@staticmethod\ndef create_prompt(\n    code: str,\n    children_summaries: str | None = None,\n    dependency_summaries: str | None = None,\n    import_details: str | None = None,\n    parent_summary: str | None = None,\n    pass_number: int = 1,\n    previous_summary: str | None = None,\n) -> str | None:\n    \"\"\"\n        Dynamically creates a prompt for the summarizer based on the provided arguments, supporting multi-pass summarization.\n\n        Args:\n            - `code` (str): The code snippet to summarize.\n            - `children_summaries` (str, optional): The summaries of the children of the code snippet.\n            - `dependency_summaries` (str, optional): The summaries of the dependencies of the code snippet.\n            - `import_details` (str, optional): The import details of the code snippet.\n            - `parent_summary` (str, optional): The summary of the parent code block (for multi-pass summarization).\n            - `pass_number` (int, optional): The current pass number in multi-pass summarization. Default is 1.\n            - `previous_summary` (str, optional): The summary from the previous pass in multi-pass summarization.\n\n        Returns:\n            - `str`: The prompt for the summarizer.\n\n        Raises:\n            - `ValueError`: If no strategy is found for the given combination of arguments.\n\n        Examples:\n            ```Python\n            # Create a prompt for single-pass summarization\n            prompt: str | None = SummarizationPromptCreator.create_prompt(\n                code,\n                children_summaries,\n                dependency_summaries,\n                import_details,\n            )\n\n            # Create a prompt for multi-pass summarization (e.g., second pass)\n            prompt: str | None = SummarizationPromptCreator.create_prompt(\n                code,\n                children_summaries,\n                dependency_summaries,\n                import_details,\n                parent_summary,\n                pass_number=2,\n                previous_summary=\"Previous summary of the code.\"\n            )\n            ```\n        \"\"\"\n\n    strategy_key: str = \"_\".join(\n        [\n            \"children\" if children_summaries else \"nochildren\",\n            \"dependencies\" if dependency_summaries else \"nodependencies\",\n            \"import_details\" if import_details else \"noimport_details\",\n            \"parent\" if parent_summary else \"noparent\",\n            f\"pass{pass_number}\",\n        ]\n    )\n    strategy: Callable[..., str] | None = (\n        SummarizationPromptCreator._interpolation_strategies.get(strategy_key)\n    )\n    if not strategy:\n        raise ValueError(f\"Could not find strategy for {strategy_key}\")\n    else:\n        # logging.info(f\"Using strategy: {strategy_key}\")\n        # print(\n        #     f\"With children_summaries: {children_summaries}\\n dependency_summaries: {dependency_summaries}\\n \"\n        #     f\"import_details: {import_details}\\n parent_summary: {parent_summary}\\n pass_number: {pass_number}\\n \"\n        #     f\"previous_summary: {previous_summary}\"\n        # )\n        return strategy(\n            code,\n            children_summaries,\n            dependency_summaries,\n            import_details,\n            parent_summary,\n            pass_number,\n            previous_summary,\n        )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "The code defines a static method `create_prompt` within a class, likely named `SummarizationPromptCreator`, which is designed to dynamically generate prompts for a summarization system, particularly supporting multi-pass summarization. The primary purpose of this method is to construct a context-aware prompt string based on various input parameters, including the code snippet to be summarized, optional summaries of child and dependency code blocks, import details, a parent summary for hierarchical summarization, the current pass number in a multi-pass process, and a previous summary from an earlier pass. This functionality is significant as it allows the system to adapt to different summarization scenarios, enhancing its ability to produce comprehensive and coherent summaries.\n\nKey components of this method include the construction of a `strategy_key`, which determines the appropriate summarization strategy by concatenating strings that reflect the presence or absence of child summaries, dependency summaries, and import details. This key is used to retrieve a corresponding strategy function from a dictionary `_interpolation_strategies`, which is then invoked with the provided arguments to generate the prompt. The implementation leverages a dictionary-based strategy pattern to select and execute the appropriate summarization strategy, ensuring flexibility and extensibility in handling different summarization scenarios. The method raises a `ValueError` if no suitable strategy is found for the given combination of arguments, ensuring robust error handling.\n\nThe technical stack is primarily based on Python, utilizing its standard libraries for string manipulation and function handling. The use of type hints such as `str | None` and `Callable[..., str] | None` indicates the adoption of Python 3.10 or later, which supports union types with the `|` operator, enhancing code readability and type safety.\n\nIn the context of a larger summarization system, this method serves as a core utility for generating context-aware prompts, facilitating the integration of hierarchical and iterative summarization processes. It interacts with other components by utilizing summaries of related code blocks and adapting to different summarization passes. This integration is crucial for systems that require multi-level or iterative summarization, such as those used in complex documentation generation, code analysis, or AI-driven content creation platforms. The method's design allows it to seamlessly fit into a modular architecture, where it can be easily extended or modified to accommodate new summarization strategies or additional input parameters, thereby supporting the evolving needs of the larger system.",
    "children_ids": []
}