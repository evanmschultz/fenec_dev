{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": null,
    "id": "fenec:ai_services:librarians:prompts:chroma_librarian_prompts.py__*__MODULE",
    "file_path": "fenec/ai_services/librarians/prompts/chroma_librarian_prompts.py",
    "parent_id": "fenec:ai_services:librarians:prompts__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 46,
    "code_content": "DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT: str = f\"\"\"\nYou are an expert at writing queries to retrieve data from a ChromaDB vector database. You take user questions and\nwrite a given number of queries that will best retrieve the relevant data from the vector store. The vector contains\ndata for a Python project, so write your queries accordingly. Always return your queries as a list\nin a json object where the key to the list is \"query_list\".\n\"\"\"\n\nDEFAULT_CHROMA_LIBRARIAN_PROMPT: str = \"\"\"\nGiven the following user question, write {queries_count} queries that will best retrieve the relevant data from the\nvector store.\n\nWhen creating queries for a vector database, especially concerning specific functionalities or components within a Python project, it's helpful to:\n    1. Specify the Component: Clearly mention the class, module, or function you're interested in.\n    2. Focus on the Action or Feature: Highlight what you want to know about - whether it's retrieving results, serialization, validation methods, etc.\n    3. Vary the Structure: Include variations of your query to cover different ways the information might be phrased or indexed.\n    4. Do not mention the language, eg. Python, in your query, as it is unnecessary and will confuse the results.\n\nExamples:\n    - User question:\n        - How do I get the results from the chromadb vector database using a list of queries in this project?\n    - Your queries:\n        \"query_list\": [\n            \"chromadb vector database results from list of queries\",\n            \"query chromadb vector database\",\n            \"search vector database\"\n        ]\n\n    - User Question:\n        - \"What methods are available for data validation in the UserInputValidator module?\"\n    - Your Queries:\n        \"query_list\": [\n            \"Methods in UserInputValidator module for data validation in Python\",\n            \"UserInputValidator Python module data validation techniques\",\n            \"List methods UserInputValidator for validating data in Python\"\n        ]\n\nUser Question: {user_question}\n\nMake sure to return your queries as a list in a json object where the key to the list is \"query_list\".\n\"\"\"\n\nprompts_list: list[str] = [\n    DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT,\n    DEFAULT_CHROMA_LIBRARIAN_PROMPT,\n]\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "This code is designed to facilitate the generation of structured queries for retrieving data from a ChromaDB vector database, specifically tailored for Python projects. Its primary purpose is to convert user questions into a list of queries that can effectively extract relevant data from the vector store, ensuring that the queries are well-formed and contextually relevant. Key components include the `DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT`, which serves as a template for query generation by instructing the user on how to formulate queries, and the `prompts_list`, which stores the system prompt and potentially other prompts for query creation. The implementation involves guiding users to specify components, focus on actions or features, and vary query structures to enhance retrieval accuracy. It emphasizes avoiding language-specific mentions, such as \"Python,\" to prevent confusion in results. The code provides examples of user questions and corresponding queries to illustrate the process of query generation. The technical stack is minimal, relying on Python's string and list functionalities to construct and store prompts. In the context of a larger system, this code acts as a middleware between user input and the ChromaDB vector database, ensuring that queries are well-formed and contextually relevant for data retrieval tasks. It interacts with other components by providing a standardized method for query formulation, which can be integrated into broader data processing or retrieval workflows. This integration allows for seamless interaction with the ChromaDB vector database, enhancing the system's ability to retrieve precise and relevant data based on user inquiries.",
    "children_ids": [
        "fenec:ai_services:librarians:prompts:chroma_librarian_prompts.py__*__MODULE__*__STANDALONE_BLOCK-1"
    ]
}