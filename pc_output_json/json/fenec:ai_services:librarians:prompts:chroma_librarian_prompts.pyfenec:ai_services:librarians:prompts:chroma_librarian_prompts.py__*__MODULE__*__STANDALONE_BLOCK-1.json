{
    "variable_assignments": [
        "DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT: str = f\"\"\"\nYou are an expert at writing queries to retrieve data from a ChromaDB vector database. You take user questions and\nwrite a given number of queries that will best retrieve the relevant data from the vector store. The vector contains\ndata for a Python project, so write your queries accordingly. Always return your queries as a list\nin a json object where the key to the list is \"query_list\".\n\"\"\"",
        "DEFAULT_CHROMA_LIBRARIAN_PROMPT: str = \"\"\"\nGiven the following user question, write {queries_count} queries that will best retrieve the relevant data from the\nvector store.\n\nWhen creating queries for a vector database, especially concerning specific functionalities or components within a Python project, it's helpful to:\n    1. Specify the Component: Clearly mention the class, module, or function you're interested in.\n    2. Focus on the Action or Feature: Highlight what you want to know about - whether it's retrieving results, serialization, validation methods, etc.\n    3. Vary the Structure: Include variations of your query to cover different ways the information might be phrased or indexed.\n    4. Do not mention the language, eg. Python, in your query, as it is unnecessary and will confuse the results.\n\nExamples:\n    - User question:\n        - How do I get the results from the chromadb vector database using a list of queries in this project?\n    - Your queries:\n        \"query_list\": [\n            \"chromadb vector database results from list of queries\",\n            \"query chromadb vector database\",\n            \"search vector database\"\n        ]\n\n    - User Question:\n        - \"What methods are available for data validation in the UserInputValidator module?\"\n    - Your Queries:\n        \"query_list\": [\n            \"Methods in UserInputValidator module for data validation in Python\",\n            \"UserInputValidator Python module data validation techniques\",\n            \"List methods UserInputValidator for validating data in Python\"\n        ]\n\nUser Question: {user_question}\n\nMake sure to return your queries as a list in a json object where the key to the list is \"query_list\".\n\"\"\"",
        "prompts_list: list[str] = [\n    DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT,\n    DEFAULT_CHROMA_LIBRARIAN_PROMPT,\n]"
    ],
    "id": "fenec:ai_services:librarians:prompts:chroma_librarian_prompts.py__*__MODULE__*__STANDALONE_BLOCK-1",
    "file_path": "fenec/ai_services/librarians/prompts/chroma_librarian_prompts.py",
    "parent_id": "fenec:ai_services:librarians:prompts:chroma_librarian_prompts.py__*__MODULE",
    "block_type": "STANDALONE_BLOCK",
    "start_line_num": 1,
    "end_line_num": 46,
    "code_content": "DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT: str = f\"\"\"\nYou are an expert at writing queries to retrieve data from a ChromaDB vector database. You take user questions and\nwrite a given number of queries that will best retrieve the relevant data from the vector store. The vector contains\ndata for a Python project, so write your queries accordingly. Always return your queries as a list\nin a json object where the key to the list is \"query_list\".\n\"\"\"\nDEFAULT_CHROMA_LIBRARIAN_PROMPT: str = \"\"\"\nGiven the following user question, write {queries_count} queries that will best retrieve the relevant data from the\nvector store.\n\nWhen creating queries for a vector database, especially concerning specific functionalities or components within a Python project, it's helpful to:\n    1. Specify the Component: Clearly mention the class, module, or function you're interested in.\n    2. Focus on the Action or Feature: Highlight what you want to know about - whether it's retrieving results, serialization, validation methods, etc.\n    3. Vary the Structure: Include variations of your query to cover different ways the information might be phrased or indexed.\n    4. Do not mention the language, eg. Python, in your query, as it is unnecessary and will confuse the results.\n\nExamples:\n    - User question:\n        - How do I get the results from the chromadb vector database using a list of queries in this project?\n    - Your queries:\n        \"query_list\": [\n            \"chromadb vector database results from list of queries\",\n            \"query chromadb vector database\",\n            \"search vector database\"\n        ]\n\n    - User Question:\n        - \"What methods are available for data validation in the UserInputValidator module?\"\n    - Your Queries:\n        \"query_list\": [\n            \"Methods in UserInputValidator module for data validation in Python\",\n            \"UserInputValidator Python module data validation techniques\",\n            \"List methods UserInputValidator for validating data in Python\"\n        ]\n\nUser Question: {user_question}\n\nMake sure to return your queries as a list in a json object where the key to the list is \"query_list\".\n\"\"\"\nprompts_list: list[str] = [\n    DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT,\n    DEFAULT_CHROMA_LIBRARIAN_PROMPT,\n]\n",
    "important_comments": null,
    "dependencies": [],
    "summary": "This code is designed to enhance the efficiency and accuracy of data retrieval from a ChromaDB vector database within Python projects by guiding developers in crafting effective queries. Its primary purpose is to provide a structured approach to query formulation, ensuring that queries are optimized for extracting relevant information from the vector store. The significance of this code lies in its ability to streamline the query generation process, reducing the cognitive load on developers and improving the precision of data retrieval.\n\nKey components of the code include the `DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT`, which serves as a detailed template for generating queries. This prompt instructs users on how to specify components, focus on specific actions or features, and vary query structures to enhance retrieval accuracy. Additionally, the `prompts_list` aggregates multiple prompt templates, including `DEFAULT_CHROMA_LIBRARIAN_PROMPT`, offering a diverse set of strategies for query generation.\n\nThe implementation involves a sophisticated prompt system that guides users through best practices for query formulation. It emphasizes specifying the component of interest, focusing on particular actions or features, and varying the query structure to account for different phrasings or indexing methods. The system also advises against mentioning the programming language, such as \"Python,\" to avoid confusion in the results. The code utilizes string manipulation and JSON formatting to structure the output queries, ensuring they are returned as a list within a JSON object with the key \"query_list.\"\n\nThe technical stack primarily involves Python, leveraging its capabilities for string processing and JSON handling to facilitate the creation and formatting of queries. This code fits into the larger project as a utility for developers working with ChromaDB, enhancing their ability to interact with the database by providing a systematic approach to query formulation. It integrates with the vector database system, improving the data retrieval process by offering a structured method for generating precise and varied queries. This utility is particularly significant in projects where efficient data retrieval from vector databases is crucial, as it streamlines the process and reduces the cognitive load on developers by providing a clear framework for query generation. In the context of a larger system, this code acts as a bridge between user inquiries and the vector database, ensuring that the data retrieval process is both efficient and effective.",
    "children_ids": null
}