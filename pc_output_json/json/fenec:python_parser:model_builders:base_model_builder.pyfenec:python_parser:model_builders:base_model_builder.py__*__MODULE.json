{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "annotations",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "__future__",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "TYPE_CHECKING",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Any",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Union",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ABC",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "abstractmethod",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "abc",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-ImportModel"
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                },
                {
                    "name": "CommentModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-CommentModel"
                },
                {
                    "name": "BaseCodeBlockModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel"
                },
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-ClassModel"
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-FunctionModel"
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockModel"
                },
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModuleModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.module_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:module_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "StandaloneBlockModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.standalone_block_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
        }
    ],
    "id": "fenec:python_parser:model_builders:base_model_builder.py__*__MODULE",
    "file_path": "fenec/python_parser/model_builders/base_model_builder.py",
    "parent_id": "fenec:python_parser:model_builders__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 270,
    "code_content": "from __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Any, Union\nfrom abc import ABC, abstractmethod\n\nfrom fenec.models.models import (\n    BaseCodeBlockModel,\n    ClassModel,\n    CommentModel,\n    FunctionModel,\n    ImportModel,\n    DependencyModel,\n    BlockType,\n    StandaloneCodeBlockModel,\n)\n\n\nif TYPE_CHECKING:\n    from fenec.python_parser.model_builders.class_model_builder import (\n        ClassModelBuilder,\n    )\n    from fenec.python_parser.model_builders.function_model_builder import (\n        FunctionModelBuilder,\n    )\n    from fenec.python_parser.model_builders.module_model_builder import (\n        ModuleModelBuilder,\n    )\n    from fenec.python_parser.model_builders.standalone_block_model_builder import (\n        StandaloneBlockModelBuilder,\n    )\n\n\nclass BaseModelBuilder(ABC):\n    \"\"\"\n    Abstract base class for building models of different code blocks.\n\n    This class follows the builder pattern, providing a structured approach to constructing models for various types of code blocks (like modules, classes, functions). It defines common attributes and methods used across all specific model builders.\n\n    Attributes:\n        - id (str): The unique identifier for the code block.\n        - child_builders (list[Union[ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]]):\n            A list of builders for the children code blocks.\n        - child_models (list[\n            ClassModel | FunctionModel | StandaloneCodeBlockModel\n        ] | None): A list of child models built by this builder.\n        - common_attributes (BaseCodeBlockModel): An instance containing common attributes shared across different code block models.\n\n    Example:\n        ```Python\n        # This example demonstrates how a derived builder might be initialized and used.\n        class SomeModelBuilder(BaseModelBuilder):\n            def build(self):\n                # Building logic specific to 'SomeModelBuilder'\n                pass\n        builder = SomeModelBuilder(id='123', block_type=BlockType.CLASS, parent_id='root')\n        builder.set_start_line_num(1).set_end_line_num(10)\n        # Sets the start and end line numbers for the code block.\n        ```\n\n    Methods:\n        - `set_start_line_num(line_num: int) -> Union[...]`: Sets the start line number of the code block model instance.\n        - `set_end_line_num(line_num: int) -> Union[...]`: Sets the end line number of the code block model instance.\n        - `set_code_content(code_content: str) -> Union[...]`: Adds the string containing the content of the code block to the model instance.\n        - `add_important_comment(comment: CommentModel) -> Union[...]`: Adds an important comment to the model instance.\n        - `add_summary(summary: str) -> Union[...]`: Adds a summary to the model instance.\n        - `add_child_builder(child: Union[...]) -> Union[...]`: Adds a child code block to the model instance.\n        - `set_dependencies(dependencies: list[ImportModel | DependencyModel] | None) -> Union[...]`: Sets the dependencies of the model instance.\n        - `update_import_dependency(new_import_model: ImportModel, old_import_model: ImportModel) -> Union[...]`: Updates an import in the model instance.\n        - `build_children() -> None`: Builds the child models of the code block.\n        - `set_children_ids() -> Union[...]`: Sets the children ids of the model instance.\n        - `_get_common_attributes() -> dict[str, Any]`: Returns a dictionary containing the attributes common to all code block models.\n        - `@abstractmethod build() -> None`: Builds and returns the code block model instance.\n    \"\"\"\n\n    def __init__(\n        self, *, id: str, block_type: BlockType, parent_id: str | None, file_path: str\n    ) -> None:\n        self.id: str = id\n        self.child_builders: list[\n            ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\n        ] = []\n        self.child_models: (\n            list[ClassModel | FunctionModel | StandaloneCodeBlockModel] | None\n        ) = None\n\n        self.common_attributes = BaseCodeBlockModel(\n            id=id,\n            file_path=file_path,\n            parent_id=parent_id,\n            block_type=block_type,\n            start_line_num=0,\n            end_line_num=0,\n            code_content=\"\",\n            important_comments=None,\n            children_ids=None,\n            dependencies=None,\n            summary=None,\n        )\n\n    def set_start_line_num(self, line_num: int) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the start line number of the code block model instance.\"\"\"\n        self.common_attributes.start_line_num = line_num\n        return self\n\n    def set_end_line_num(self, line_num: int) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the end line number of the code block model instance.\"\"\"\n        self.common_attributes.end_line_num = line_num\n        return self\n\n    def set_code_content(self, code_content: str) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds the string containing the content of the code block to the model instance.\"\"\"\n        self.common_attributes.code_content = code_content\n        return self\n\n    def add_important_comment(self, comment: CommentModel) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds an important comment to the model instance.\"\"\"\n        if not self.common_attributes.important_comments:\n            self.common_attributes.important_comments = []\n        self.common_attributes.important_comments.append(comment)\n        return self\n\n    def add_summary(self, summary: str) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds a summary to the model instance.\"\"\"\n        self.common_attributes.summary = summary\n        # print(f\"Added summary to {self.common_attributes.id}\")\n        return self\n\n    def add_child_builder(\n        self,\n        child: Union[\n            \"ClassModelBuilder\", \"FunctionModelBuilder\", StandaloneBlockModelBuilder\n        ],\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds a child code block to the model instance.\"\"\"\n        self.child_builders.append(child)\n        return self\n\n    def set_dependencies(\n        self, dependencies: list[ImportModel | DependencyModel] | None\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the dependencies of the model instance.\"\"\"\n        self.common_attributes.dependencies = dependencies\n        return self\n\n    def update_import_dependency(\n        self,\n        new_import_model: ImportModel,\n        old_import_model: ImportModel,\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"\n        Updates an import in the model instance.\n\n        Args:\n            - new_import_model (ImportModel): The updated import model.\n            - old_import_model\n\n        Returns:\n            - BaseModelBuilder: The base model builder instance.\n        \"\"\"\n\n        if self.common_attributes.dependencies:\n            import_model_to_remove: ImportModel | None = None\n            for existing_import_model in self.common_attributes.dependencies:\n                if isinstance(existing_import_model, DependencyModel):\n                    continue\n\n                if (\n                    existing_import_model.import_names == old_import_model.import_names\n                    and existing_import_model.imported_from\n                    == old_import_model.imported_from\n                    and existing_import_model.import_module_type\n                    == old_import_model.import_module_type\n                ):\n                    import_model_to_remove = existing_import_model\n                    break\n\n            if not import_model_to_remove:\n                raise Exception(f\"Could not find import to remove: {old_import_model}\")\n\n            self.common_attributes.dependencies.remove(import_model_to_remove)\n            self.common_attributes.dependencies.append(new_import_model)\n        else:\n            raise Exception(\n                f\"No imports in the builders imports list: {self.common_attributes.dependencies}\"\n            )\n        return self\n\n    def build_children(\n        self,\n    ) -> None:\n        \"\"\"Builds the child models of the code block.\"\"\"\n        if self.child_builders:\n            self.child_models = []\n            for child_builder in self.child_builders:\n                self.child_models.append(child_builder.build())\n                if child_builder.child_models:\n                    self.child_models.extend(child_builder.child_models)\n\n    def set_children_ids(\n        self,\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the children ids of the model instance.\"\"\"\n        self.common_attributes.children_ids = [\n            child.id for child in self.child_builders\n        ]\n        return self\n\n    def _get_common_attributes(self) -> dict[str, Any]:\n        \"\"\"\n        Returns a dictionary containing the attributes common to all code block models.\n        \"\"\"\n        return self.common_attributes.model_dump()\n\n    @abstractmethod\n    def build(\n        self,\n    ) -> None:\n        \"\"\"\n        Builds and returns the code block model instance.\n\n        Returns:\n            CodeBlockModel: The built code block model instance.\n        \"\"\"\n        ...\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "The provided Python code defines an abstract base class, `BaseModelBuilder`, which is a crucial component of a model-building framework within the `fenec` library. This framework is designed to parse and analyze Python code, generating structured representations of various code blocks such as modules, classes, and functions. The primary purpose of this code is to implement a builder pattern that facilitates the structured creation and management of code block models, ensuring consistency and reusability across different types of code structures. The `BaseModelBuilder` class serves as a foundational component, encapsulating attributes and methods for setting line numbers, code content, comments, dependencies, and managing child builders and models. It defines an abstract method `build()` that must be implemented by subclasses to construct specific code block models.\n\nKey components of this code include the `BaseModelBuilder` class, which provides a comprehensive set of methods for model construction: `set_start_line_num`, `set_end_line_num`, `set_code_content`, `add_important_comment`, `add_summary`, `add_child_builder`, `set_dependencies`, `update_import_dependency`, `build_children`, and `set_children_ids`. These methods enable the incremental construction of complex objects through method chaining, supporting hierarchical model construction by maintaining lists of child builders and models. The class also includes a method `_get_common_attributes` to retrieve common attributes shared across different code block models.\n\nThe implementation leverages the builder pattern, allowing for the modular and extensible construction of code block models. It uses a list to manage child builders and models, facilitating the hierarchical representation of code structures. The design pattern promotes modularity and extensibility, allowing for easy integration of new code block types. The `BaseModelBuilder` class provides robust functionality for managing dependencies and updating import statements, ensuring a comprehensive representation of code block hierarchies. The use of method chaining allows for a fluent interface, making the construction process intuitive and efficient.\n\nThe technical stack includes Python's `abc` module for defining abstract base classes, and type hinting features from `typing` for specifying expected types and enhancing code readability. The code also relies on custom models from the `fenec.models.models` module, such as `BaseCodeBlockModel`, `ClassModel`, `FunctionModel`, `ImportModel`, `DependencyModel`, `BlockType`, and `StandaloneCodeBlockModel`, which represent different code block types and their attributes. These models are crucial for the structured representation of code blocks and their relationships.\n\nIn the context of a larger system, this code is part of a model-building framework within the `fenec` library, which likely aims to parse and analyze Python code, generating structured representations of code blocks. It interacts with other components like `ClassModelBuilder`, `FunctionModelBuilder`, `ModuleModelBuilder`, and `StandaloneBlockModelBuilder`, which are responsible for building specific types of code block models. This modular approach supports the extension and customization of the framework to accommodate various code analysis and transformation tasks. The `BaseModelBuilder` class acts as a central piece in this framework, providing the necessary infrastructure for building and managing complex code block models, thereby facilitating the analysis and transformation of Python code within the `fenec` library. This integration ensures that the necessary model builders are available for type checking without impacting the runtime environment, thus maintaining efficiency and scalability in the overall system.",
    "children_ids": [
        "fenec:python_parser:model_builders:base_model_builder.py__*__MODULE__*__STANDALONE_BLOCK-1",
        "fenec:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder"
    ]
}