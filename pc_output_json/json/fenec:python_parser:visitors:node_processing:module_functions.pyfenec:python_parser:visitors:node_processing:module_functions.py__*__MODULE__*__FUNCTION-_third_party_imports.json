{
    "function_name": "_third_party_imports",
    "docstring": "Gets a list of all third party imports.",
    "decorators": null,
    "parameters": null,
    "returns": "list[str]",
    "is_method": false,
    "is_async": false,
    "id": "fenec:python_parser:visitors:node_processing:module_functions.py__*__MODULE__*__FUNCTION-_third_party_imports",
    "file_path": "fenec/python_parser/visitors/node_processing/module_functions.py",
    "parent_id": "fenec:python_parser:visitors:node_processing:module_functions.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 114,
    "end_line_num": 132,
    "code_content": "\n\ndef _third_party_imports() -> list[str]:\n    \"\"\"Gets a list of all third party imports.\"\"\"\n\n    third_party_imports: list[str] = []\n\n    for module_name, module in sys.modules.items():\n        if module_name in sys.stdlib_module_names or not hasattr(module, \"__file__\"):\n            continue\n\n        module_file: str | None = module.__file__\n        if module_file and (\n            \"site-packages\" in module_file or \"dist-packages\" in module_file\n        ):\n            third_party_imports.append(module_name)\n\n    return third_party_imports\n",
    "important_comments": null,
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "sys",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        }
    ],
    "summary": "This code snippet is a utility function designed to identify and list all third-party Python modules currently imported in the runtime environment, serving as a crucial tool for dependency auditing and management. Its primary purpose is to differentiate between standard library modules and those installed via package managers, which are typically located in directories like \"site-packages\" or \"dist-packages.\" The key component of this code is the `_third_party_imports` function, which iterates over the `sys.modules` dictionary to inspect each module's attributes and determine its origin. The function leverages Python's `sys` module to access the current environment's module registry and uses conditional checks to filter out standard library modules by comparing against `sys.stdlib_module_names` and verifying the presence of a `__file__` attribute. This attribute is crucial as it indicates the file path of the module, allowing the function to identify third-party modules by checking if their file paths contain \"site-packages\" or \"dist-packages.\" The function appends the names of these third-party modules to a list, which it returns as the output.\n\nThe technical stack primarily involves Python's built-in `sys` module, which provides access to interpreter variables and functions, enabling the function to interact with the module registry and standard library identifiers. This code fits into a larger system as part of a diagnostic tool or a dependency management system, helping developers or automated scripts to audit and manage third-party dependencies within a Python project. It could be integrated into a continuous integration pipeline to ensure that all necessary third-party modules are accounted for and properly documented, or used in a development environment to provide insights into the external dependencies being utilized by a project. This utility is particularly significant in environments where dependency management is critical, such as in large-scale applications or systems with strict compliance requirements. By providing a clear list of third-party dependencies, it aids in maintaining software quality, security, and compliance, ensuring that all external modules are tracked and managed effectively.",
    "children_ids": []
}