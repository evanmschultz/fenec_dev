{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Any",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "logging_decorator",
                    "as_name": null,
                    "local_block_id": "fenec:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator"
                }
            ],
            "imported_from": "fenec.utilities.logger.decorators",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:utilities:logger:decorators.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BaseModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.base_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:base_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "StandaloneCodeBlockSpecificAttributes",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockSpecificAttributes"
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockModel"
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": "fenec:models:enums.py__*__MODULE__*__CLASS-BlockType"
                }
            ],
            "imported_from": "fenec.models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:models:enums.py__*__MODULE"
        }
    ],
    "id": "fenec:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE",
    "file_path": "fenec/python_parser/model_builders/standalone_block_model_builder.py",
    "parent_id": "fenec:python_parser:model_builders__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 63,
    "code_content": "from typing import Any\n\nfrom fenec.utilities.logger.decorators import logging_decorator\nfrom fenec.python_parser.model_builders.base_model_builder import BaseModelBuilder\nfrom fenec.models.models import (\n    StandaloneCodeBlockModel,\n    StandaloneCodeBlockSpecificAttributes,\n)\nfrom fenec.models.enums import BlockType\n\n\nclass StandaloneBlockModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a standalone code block.\n\n    This class extends BaseModelBuilder and specializes in building models of standalone code blocks, which are blocks of code not part of any class or function definitions. It captures details such as variable assignments within the block.\n\n    Attributes:\n        - standalone_block_attributes (StandaloneCodeBlockSpecificAttributes): An instance containing attributes specific to a standalone code block, such as variable assignments.\n\n    Args:\n        - id (str): The unique identifier for the standalone code block model.\n        - parent_id (str): The identifier of the parent model (e.g., module or class containing this standalone block).\n\n    Example:\n        ```Python\n        standalone_block_builder = StandaloneBlockModelBuilder(id='block1', parent_id='module1')\n        standalone_block_builder.set_variable_assignments(['x = 1', 'y = 2'])\n        # Configures the builder with variable assignments for the standalone code block.\n        ```\n    \"\"\"\n\n    def __init__(self, id: str, parent_id: str, file_path: str) -> None:\n        super().__init__(\n            id=id,\n            block_type=BlockType.STANDALONE_CODE_BLOCK,\n            parent_id=parent_id,\n            file_path=file_path,\n        )\n\n        self.standalone_block_attributes = StandaloneCodeBlockSpecificAttributes(\n            variable_assignments=None,\n        )\n\n    def set_variable_assignments(\n        self, variable_declarations: list[str]\n    ) -> \"StandaloneBlockModelBuilder\":\n        \"\"\"Sets the list of variable declarations to the standalone code block model.\"\"\"\n        self.standalone_block_attributes.variable_assignments = variable_declarations\n        return self\n\n    def _get_standalone_block_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Gets the standalone block specific attributes.\"\"\"\n        return self.standalone_block_attributes.model_dump()\n\n    @logging_decorator(message=\"Building standalone code block model\")\n    def build(self) -> StandaloneCodeBlockModel:\n        \"\"\"Creates a StandaloneCodeBlockModel instance after building and setting the children models.\"\"\"\n        return StandaloneCodeBlockModel(\n            **self._get_common_attributes(),\n            **self._get_standalone_block_specific_attributes(),\n        )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "The `StandaloneBlockModelBuilder` class is a specialized component within a model-building framework, designed to construct detailed models of standalone code blocksâ€”segments of code not encapsulated within any class or function definitions. Its primary purpose is to facilitate the analysis and representation of these isolated code segments by capturing specific details such as variable assignments, thereby ensuring they are accurately represented within the broader codebase model. Key components of this implementation include the constructor `__init__`, which initializes the builder with a unique identifier, parent model identifier, and file path, and sets up attributes specific to standalone code blocks using an instance of `StandaloneCodeBlockSpecificAttributes`. The `set_variable_assignments` method assigns a list of variable declarations to the model, allowing for the configuration of variable assignments specific to the standalone block. The `_get_standalone_block_specific_attributes` method retrieves attributes specific to the standalone block by calling the `model_dump` method on the `StandaloneCodeBlockSpecificAttributes` instance. The `build` method constructs and returns a `StandaloneCodeBlockModel` instance, incorporating both common and specific attributes, and is enhanced with a logging decorator to provide insights and traceability during the model construction process.\n\nThe implementation leverages object-oriented principles, where the `StandaloneBlockModelBuilder` class inherits from `BaseModelBuilder`, allowing it to utilize and extend the base functionality for specific use cases. The builder pattern is employed to incrementally configure the model with attributes like variable assignments through the `set_variable_assignments` method. The use of a logging decorator from the `fenec` library suggests a focus on maintainability and debugging, offering detailed logs during the execution of critical methods. The `StandaloneCodeBlockModel` is instantiated by merging common attributes, obtained from the base class, with standalone-specific attributes, ensuring a comprehensive representation of the code block.\n\nThe technical stack includes the `fenec` library, which offers utilities such as logging decorators and model definitions, facilitating structured logging and model management. Python's typing module is used for type annotations, ensuring type safety and clarity in method signatures. The `fenec` library's model and enum modules are integral to defining the structure and type of code blocks, with the `BlockType` enum specifying the type of block being modeled.\n\nIn the context of a larger system, this code is part of a sophisticated model-building framework that parses and represents Python code structures. It interacts with other components to provide a comprehensive analysis of code blocks within a project, contributing to a broader code analysis or refactoring tool. This framework likely interfaces with parsers and other model builders to create a detailed representation of an entire codebase, supporting tasks such as static analysis, code quality assessment, or automated documentation generation. The modular design of the `StandaloneBlockModelBuilder` allows it to be easily integrated and extended within this ecosystem, supporting the dynamic and varied nature of Python code analysis.",
    "children_ids": [
        "fenec:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
    ]
}