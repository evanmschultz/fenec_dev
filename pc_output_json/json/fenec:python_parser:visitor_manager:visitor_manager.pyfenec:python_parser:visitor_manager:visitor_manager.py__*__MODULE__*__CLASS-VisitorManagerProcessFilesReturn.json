{
    "class_name": "VisitorManagerProcessFilesReturn",
    "decorators": [
        {
            "content": "@dataclass",
            "decorator_name": "dataclass",
            "decorator_args": null
        }
    ],
    "bases": null,
    "docstring": "Represents the return value of the VisitorManager.process_files() method.\n\nAttributes:\n    - models_tuple (tuple[ModuleModel, ...]): A tuple of ModuleModel objects representing the parsed modules.\n    - directory_modules (dict[str, list[str]]): A dictionary mapping directory paths to lists of module names.\n        This is used to keep track of the modules present in each directory.",
    "keywords": null,
    "id": "fenec:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManagerProcessFilesReturn",
    "file_path": "fenec/python_parser/visitor_manager/visitor_manager.py",
    "parent_id": "fenec:python_parser:visitor_manager:visitor_manager.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 57,
    "end_line_num": 72,
    "code_content": "\n\n@dataclass\nclass VisitorManagerProcessFilesReturn:\n    \"\"\"\n    Represents the return value of the VisitorManager.process_files() method.\n\n    Attributes:\n        - models_tuple (tuple[ModuleModel, ...]): A tuple of ModuleModel objects representing the parsed modules.\n        - directory_modules (dict[str, list[str]]): A dictionary mapping directory paths to lists of module names.\n            This is used to keep track of the modules present in each directory.\n    \"\"\"\n\n    models_tuple: tuple[ModelType, ...]\n    directory_modules: dict[str, list[str]]\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "fenec:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager"
        },
        {
            "import_names": [
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "dataclass",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "dataclasses",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ModelType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.types.fenec",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:types:fenec.py__*__MODULE"
        }
    ],
    "summary": "The `VisitorManagerProcessFilesReturn` class is a specialized data structure designed to encapsulate the output of the `VisitorManager.process_files()` method within a visitor management system. Its primary function is to provide a structured and efficient means of managing and returning detailed information about parsed modules and their directory associations. This class is implemented as a Python data class, utilizing the `dataclasses` module to automatically generate essential methods like `__init__()`, which enhances both code readability and maintainability by reducing boilerplate code. The class comprises two main attributes: `models_tuple`, a tuple containing instances of `ModuleModel` (or a similar type, denoted as `ModelType`), which represent the parsed modules; and `directory_modules`, a dictionary that maps directory paths to lists of module names, thereby facilitating the tracking of module locations within the file system.\n\nThe implementation leverages Python's type hinting to ensure clarity and correctness in the data structure's design. By specifying that `models_tuple` is a tuple of `ModelType` objects and `directory_modules` is a dictionary with string keys and list of string values, the design enforces data integrity and aids in static analysis and code comprehension. The use of the `dataclasses` module is a strategic choice, simplifying the creation of classes primarily used for storing data and allowing for a more declarative programming style.\n\nThe technical stack is minimal, relying solely on Python's standard library, specifically the `dataclasses` module, which is crucial for defining the class structure and managing its attributes. This choice reflects a focus on simplicity and efficiency, avoiding unnecessary dependencies while leveraging Python's built-in capabilities for data management.\n\nIn the context of the larger project, this class is likely part of a subsystem responsible for parsing and managing modules within the visitor management system. It interacts with other components that handle file processing and module analysis, providing a standardized return format for the `process_files()` method. This standardization facilitates further processing or integration with other parts of the system, ensuring that module information is consistently and accurately conveyed across different system components. By encapsulating the return data in a well-defined structure, the class enhances the modularity and scalability of the system, allowing for easier maintenance and potential future extensions. This structured approach is crucial for maintaining the integrity and reliability of the visitor management system as it scales and evolves.",
    "children_ids": []
}