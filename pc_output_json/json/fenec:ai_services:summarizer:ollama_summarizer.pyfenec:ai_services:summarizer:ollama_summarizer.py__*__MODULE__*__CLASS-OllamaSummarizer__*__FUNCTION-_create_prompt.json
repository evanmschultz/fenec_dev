{
    "function_name": "_create_prompt",
    "docstring": "Creates a prompt for code summarization.\n\nArgs:\n    - `code` (str): The code to summarize.\n    - `children_summaries` (str | None): Summaries of child elements.\n    - `dependency_summaries` (str | None): Summaries of dependencies.\n    - `import_details` (str | None): Details of imports.\n    - `parent_summary` (str | None): Summary of the parent element.\n    - `pass_number` (int): The current pass number in multi-pass summarization.\n    - `previous_summary` (str | None): The summary from the previous pass.\n\nReturns:\n    - `str`: The created prompt.\n\nRaises:\n    - `Exception`: If prompt creation fails.",
    "decorators": null,
    "parameters": null,
    "returns": "str",
    "is_method": true,
    "is_async": false,
    "id": "fenec:ai_services:summarizer:ollama_summarizer.py__*__MODULE__*__CLASS-OllamaSummarizer__*__FUNCTION-_create_prompt",
    "file_path": "fenec/ai_services/summarizer/ollama_summarizer.py",
    "parent_id": "fenec:ai_services:summarizer:ollama_summarizer.py__*__MODULE__*__CLASS-OllamaSummarizer",
    "block_type": "FUNCTION",
    "start_line_num": 87,
    "end_line_num": 132,
    "code_content": "\ndef _create_prompt(\n    self,\n    code: str,\n    children_summaries: str | None,\n    dependency_summaries: str | None,\n    import_details: str | None,\n    parent_summary: str | None,\n    pass_number: int,\n    previous_summary: str | None,\n) -> str:\n    \"\"\"\n        Creates a prompt for code summarization.\n\n        Args:\n            - `code` (str): The code to summarize.\n            - `children_summaries` (str | None): Summaries of child elements.\n            - `dependency_summaries` (str | None): Summaries of dependencies.\n            - `import_details` (str | None): Details of imports.\n            - `parent_summary` (str | None): Summary of the parent element.\n            - `pass_number` (int): The current pass number in multi-pass summarization.\n            - `previous_summary` (str | None): The summary from the previous pass.\n\n        Returns:\n            - `str`: The created prompt.\n\n        Raises:\n            - `Exception`: If prompt creation fails.\n        \"\"\"\n    prompt_creator: SummarizationPromptCreator = SummarizationPromptCreator()\n    prompt: str | None = prompt_creator.create_prompt(\n        code,\n        children_summaries,\n        dependency_summaries,\n        import_details,\n        parent_summary,\n        pass_number,\n        previous_summary,\n    )\n\n    if prompt:\n        # print(f\"[blue]Prompt:[/blue] {prompt}\")\n        return prompt\n    else:\n        raise Exception(\"Prompt creation failed.\")\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "This code defines a method `_create_prompt` within a class, designed to generate a structured prompt for code summarization, which is crucial in a multi-pass summarization process. The primary purpose of this method is to synthesize various contextual elements, such as code snippets, summaries of child and dependency elements, import details, and hierarchical summaries from parent elements, into a coherent prompt. This is significant for iterative refinement of summaries, ensuring that each pass incorporates comprehensive contextual information. Key components include the `SummarizationPromptCreator` class, which encapsulates the logic for prompt creation; the method parameters such as `code`, `children_summaries`, `dependency_summaries`, `import_details`, `parent_summary`, `pass_number`, and `previous_summary`, which provide the necessary context for generating a detailed prompt. The implementation involves instantiating a `SummarizationPromptCreator` object and invoking its `create_prompt` method with all relevant parameters. If the prompt creation is unsuccessful, an exception is raised, indicating a failure in the process. The technical stack, while not explicitly detailed in the code snippet, likely involves Python's standard libraries and possibly custom modules for handling summarization tasks. This method is a critical component of a larger code summarization tool, interacting with other summarization processes and potentially integrating with systems that require detailed code analysis and documentation. Its role is to ensure that all relevant information is considered in generating a contextually aware prompt, facilitating accurate and comprehensive code summarization across multiple passes. This method fits into the larger system by serving as a bridge between raw code analysis and the generation of refined, structured summaries, contributing to the overall goal of creating a robust and efficient code documentation and analysis tool.",
    "children_ids": []
}