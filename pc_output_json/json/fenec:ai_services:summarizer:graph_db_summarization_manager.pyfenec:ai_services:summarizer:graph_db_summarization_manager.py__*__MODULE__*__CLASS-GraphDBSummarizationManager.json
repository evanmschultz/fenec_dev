{
    "class_name": "GraphDBSummarizationManager",
    "decorators": null,
    "bases": null,
    "docstring": "A class for managing summarization of models in a graph database.\n\nThis class handles the process of summarizing code models, including support for multi-pass summarization.\nIt interacts with a graph database to store and retrieve model information and summaries.\n\nArgs:\n    - `all_models_tuple` (tuple[ModelType, ...]): Tuple of all models available for summarization.\n    - `summarization_mapper` (SummarizationMapper): The SummarizationMapper instance for creating summarization maps.\n    - `summarizer` (Summarizer): The Summarizer instance for generating code summaries.\n    - `graph_manager` (ArangoDBManager): The ArangoDBManager instance for handling database interactions.\n\nProperties:\n    - `total_cost` (float): Provides the total cost of the summarization process.\n\nMethods:\n    - `create_summaries_and_return_updated_models`(num_passes: int = 1): Creates summaries and updates models in the graph database.\n\nExample:\n    ```python\n    # Instantiate GraphDBSummarizationManager\n    summarization_manager = GraphDBSummarizationManager(\n        all_models_tuple=(ModuleModel(id=\"module_1\"), FunctionModel(id=\"function_1\")),\n        summarization_mapper=my_summarization_mapper_instance,\n        summarizer=my_summarizer_instance,\n        graph_manager=my_arangodb_manager_instance\n    )\n\n    # Create summaries and update models with multi-pass summarization\n    updated_models = summarization_manager.create_summaries_and_return_updated_models(num_passes=3)\n    ```",
    "keywords": null,
    "id": "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager",
    "file_path": "fenec/ai_services/summarizer/graph_db_summarization_manager.py",
    "parent_id": "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 24,
    "end_line_num": 467,
    "code_content": "\n\nclass GraphDBSummarizationManager:\n    \"\"\"\n    A class for managing summarization of models in a graph database.\n\n    This class handles the process of summarizing code models, including support for multi-pass summarization.\n    It interacts with a graph database to store and retrieve model information and summaries.\n\n    Args:\n        - `all_models_tuple` (tuple[ModelType, ...]): Tuple of all models available for summarization.\n        - `summarization_mapper` (SummarizationMapper): The SummarizationMapper instance for creating summarization maps.\n        - `summarizer` (Summarizer): The Summarizer instance for generating code summaries.\n        - `graph_manager` (ArangoDBManager): The ArangoDBManager instance for handling database interactions.\n\n    Properties:\n        - `total_cost` (float): Provides the total cost of the summarization process.\n\n    Methods:\n        - `create_summaries_and_return_updated_models`(num_passes: int = 1): Creates summaries and updates models in the graph database.\n\n    Example:\n        ```python\n        # Instantiate GraphDBSummarizationManager\n        summarization_manager = GraphDBSummarizationManager(\n            all_models_tuple=(ModuleModel(id=\"module_1\"), FunctionModel(id=\"function_1\")),\n            summarization_mapper=my_summarization_mapper_instance,\n            summarizer=my_summarizer_instance,\n            graph_manager=my_arangodb_manager_instance\n        )\n\n        # Create summaries and update models with multi-pass summarization\n        updated_models = summarization_manager.create_summaries_and_return_updated_models(num_passes=3)\n        ```\n    \"\"\"\n\n    def __init__(\n        self,\n        all_models_tuple: tuple[ModelType, ...],\n        summarization_mapper: SummarizationMapper,\n        summarizer: Summarizer,\n        graph_manager: ArangoDBManager,\n    ) -> None:\n        self.all_models_tuple: tuple[ModelType, ...] = all_models_tuple\n        self.summarization_mapper: SummarizationMapper = summarization_mapper\n        self.summarizer: Summarizer = summarizer\n        self.graph_manager: ArangoDBManager = graph_manager\n\n        self.summarized_code_block_ids: set[str] = set()\n        self.prompt_tokens: int = 0\n        self.completion_tokens: int = 0\n\n    @property\n    def total_cost(self) -> float:\n        \"\"\"Provides the total cost of the summarization process.\"\"\"\n        gpt_4o_2024_08_06_prompt_cost_per_token: float = 0.0000025\n        prompt_cost: float = self.prompt_tokens * gpt_4o_2024_08_06_prompt_cost_per_token\n        gpt_4o_2024_08_06_completion_cost_per_token: float = gpt_4o_2024_08_06_prompt_cost_per_token * 4\n        completion_cost: float = (\n            self.completion_tokens * gpt_4o_2024_08_06_completion_cost_per_token\n        )  \n        return (prompt_cost + completion_cost) \n\n    def create_summaries_and_return_updated_models(\n        self, num_passes: int = 1\n    ) -> list[ModelType] | None:\n        \"\"\"\n        Creates summaries and updates models in the graph database.\n\n        This method supports both single-pass and multi-pass summarization. In multi-pass mode,\n        it performs bottom-up, top-down, and final bottom-up passes to create comprehensive summaries.\n\n        Args:\n            - `num_passes` (int): Number of summarization passes to perform. Must be either 1 or 3. Default is 1.\n\n        Returns:\n            - `list[ModelType] | None`: Updated models in the graph database or None if graph_manager is not provided.\n\n        Raises:\n            - `ValueError`: If num_passes is not 1 or 3.\n        \"\"\"\n        if num_passes not in [1, 3]:\n            raise ValueError(\"Number of passes must be either 1 or 3\")\n\n        return self._handle_summarization_passes(num_passes)\n\n    def _handle_summarization_passes(\n        self, num_of_passes: int\n    ) -> list[ModelType] | None:\n        if num_of_passes == 1:\n            logging.info(\"Starting single-pass summarization\")\n            models: (\n                list[\n                    ModuleModel\n                    | ClassModel\n                    | FunctionModel\n                    | StandaloneCodeBlockModel\n                    | DirectoryModel\n                ]\n                | None\n            ) = self._process_summarization_map(\n                self.summarization_mapper.create_bottom_up_summarization_map(1), 1\n            )\n\n        else:\n            logging.info(\"Starting multi-pass summarization\")\n\n            for pass_num in range(1, num_of_passes + 1):\n                if pass_num % 2 != 0:\n                    logging.info(f\"[blue]Pass number:[/blue] {pass_num} (bottom-up)\")\n                    models = self._process_summarization_map(\n                        self.summarization_mapper.create_bottom_up_summarization_map(\n                            pass_num\n                        ),\n                        pass_num,\n                    )\n                else:\n                    logging.info(f\"[blue]Pass number:[/blue] {pass_num} (top-down)\")\n                    models = self._process_summarization_map(\n                        self.summarization_mapper.create_top_down_summarization_map(\n                            pass_num\n                        ),\n                        pass_num,\n                        models,\n                        top_down=True,\n                    )\n                self.summarization_mapper.model_visited_in_db = set()\n\n        return models\n\n    def _process_summarization_map(\n        self,\n        summarization_map: list[ModelType],\n        pass_number: int,\n        models: list[ModelType] | None = None,\n        top_down: bool = False,\n    ) -> list[ModelType] | None:\n        \"\"\"\n        Processes a summarization map to create or update summaries for models.\n\n        Args:\n            - `summarization_map` (list[ModelType]): The map of models to summarize.\n            - `pass_number` (int): The current summarization pass number.\n            - `models` (list[ModelType] | None): Previously summarized models (if any).\n            - `top_down` (bool): Whether this is a top-down summarization pass.\n\n        Returns:\n            - `list[ModelType] | None`: Updated list of models with new summaries.\n        \"\"\"\n        models_to_summarize_count: int = len(summarization_map)\n        models_summarized_count: int = 0\n\n        for model in summarization_map:\n            models_summarized_count += 1\n            if isinstance(model, ImportModel):\n                import_details = self._get_import_details(model)\n            else:\n                import_details = None\n            logging.info(\n                f\"Summarizing model {models_summarized_count} out of {models_to_summarize_count}; {model.id}.\"\n            )\n\n            # Check if the model is an instance of ImportModel before calling _get_import_details\n            if isinstance(model, ImportModel):\n                import_details = self._get_import_details(model)\n\n            children_summaries: str | None = self._get_child_summaries(model)\n            dependency_summaries: str | None = self._get_dependencies_summaries(model)\n\n            parent_summary: str | None = None\n            if top_down and models:\n                parent_model = next(\n                    (m for m in models if m.id == model.parent_id), None\n                )\n                if parent_model:\n                    parent_summary = parent_model.summary\n\n            code_content: str = (\n                model.code_content if not isinstance(model, DirectoryModel) else \"\"\n            )\n\n            previous_summary: str | None = None\n            if not pass_number == 1:\n                previous_summary = model.summary\n\n            if isinstance(self.summarizer, OllamaSummarizer):\n                model_summary: str | None = self.summarizer.summarize_code(\n                    code_content,\n                    model_id=model.id,\n                    children_summaries=children_summaries,\n                    dependency_summaries=dependency_summaries,\n                    import_details=import_details,\n                    parent_summary=parent_summary,\n                    pass_number=pass_number,\n                    previous_summary=previous_summary,\n                )\n                if model_summary:\n                    stripped_summary: str = model_summary.strip()\n                    print(f\"[blue]Summary: [/blue]{stripped_summary}\")\n                    self.graph_manager.update_vertex_summary_by_id(\n                        model.id, stripped_summary\n                    )\n                    model.summary = stripped_summary\n            else:\n                summary_return_context: OpenAIReturnContext | str | None = (\n                    self.summarizer.summarize_code(\n                        code_content,\n                        model_id=model.id,\n                        children_summaries=children_summaries,\n                        dependency_summaries=dependency_summaries,\n                        import_details=import_details,\n                        parent_summary=parent_summary,\n                        pass_number=pass_number,\n                        previous_summary=previous_summary,\n                    )\n                )\n                if summary_return_context and isinstance(\n                    summary_return_context, OpenAIReturnContext\n                ):\n                    if summary_return_context.summary:\n                        self.graph_manager.update_vertex_summary_by_id(\n                            model.id, summary_return_context.summary\n                        )\n                        model.summary = summary_return_context.summary\n                    print(summary_return_context.summary)\n                    self.prompt_tokens += summary_return_context.prompt_tokens\n                    self.completion_tokens += summary_return_context.completion_tokens\n                    logging.info(f\"Total cost: ${self.total_cost:.2f}\")\n\n        return self.graph_manager.get_all_vertices() if self.graph_manager else None\n\n    def _get_child_summaries(self, model: ModelType) -> str | None:\n        \"\"\"\n        Gathers summaries of child models.\n\n        Args:\n            - `model` (ModelType): The model to gather child summaries for.\n\n        Returns:\n            - `str | None`: A string of concatenated child summaries or None if the model has no children.\n        \"\"\"\n        child_summary_list: list[str] = []\n        if model.children_ids:\n            for child_id in model.children_ids:\n                if child := self.graph_manager.get_vertex_model_by_id(child_id):\n                    if child.summary:\n                        child_summary_list.append(child.summary)\n                    else:\n                        # TODO: Add logic to gather all child summaries of a directory (modules and directories within the directory)\n                        if not isinstance(child, DirectoryModel):\n                            child_summary_list.append(\n                                f\"Child ({child_id}) code content:\\n{child.code_content}\\n\"\n                            )\n        return (\n            self._stringify_children_summaries(child_summary_list)\n            if child_summary_list\n            else None\n        )\n\n    def _stringify_children_summaries(self, children_summary_list: list[str]) -> str:\n        \"\"\"\n        Converts all of the child summaries to a single string to be used in the prompt.\n\n        Args:\n            - `children_summary_list` (list[str]): A list of child summaries.\n\n        Returns:\n            - `str`: A string of all of the child summaries.\n        \"\"\"\n        return \"\\n\".join(children_summary_list)\n\n    def _get_dependencies_summaries(self, model: ModelType) -> str | None:\n        \"\"\"\n        Gathers summaries of dependencies and returns them as a string to be used in the prompt.\n\n        Args:\n            - `model` (ModelType): The model to gather dependency summaries for.\n\n        Returns:\n            - `str | None`: A string of dependency summaries or None if the model has no dependencies.\n        \"\"\"\n        if isinstance(model, DirectoryModel):\n            return None\n\n        dependency_summary_list: list[str] = []\n\n        if isinstance(model, ModuleModel):\n            if model.imports:\n                for _import in model.imports:\n                    if import_summary := self._get_import_summary(_import):\n                        dependency_summary_list.append(import_summary)\n        elif model.dependencies:\n            for dependency in model.dependencies:\n                if isinstance(dependency, DependencyModel):\n                    if dependency_summary := self._get_local_dependency_summary(\n                        dependency, model\n                    ):\n                        dependency_summary_list.append(dependency_summary)\n                elif isinstance(dependency, ImportModel):\n                    if import_summary := self._get_import_summary(dependency):\n                        dependency_summary_list.append(import_summary)\n\n        return (\n            self._stringify_dependencies_summaries(dependency_summary_list)\n            if dependency_summary_list\n            else None\n        )\n\n    def _get_local_dependency_summary(\n        self,\n        dependency: DependencyModel,\n        model: ModelType,\n    ) -> str | None:\n        \"\"\"\n        Retrieves the summary of a local dependency to be used in the prompt.\n\n        Args:\n            - `dependency` (DependencyModel): The dependency to retrieve the summary for.\n            - `model` (ModelType): The model to retrieve the summary for.\n\n        Returns:\n            - `str | None`: The summary of the local dependency or None if the dependency is not local.\n        \"\"\"\n        if not model.children_ids:\n            return None\n\n        for child_id in model.children_ids:\n            if child_id == dependency.code_block_id:\n                if child := self.graph_manager.get_vertex_model_by_id(child_id):\n                    if isinstance(child, DirectoryModel):\n                        return None\n                    return (\n                        child.summary\n                        if child.summary\n                        else f\"Dependency ({dependency.code_block_id}) code content:\\n{child.code_content}\\n\"\n                    )\n        return None\n\n    def _stringify_dependencies_summaries(\n        self, dependencies_summary_list: list[str]\n    ) -> str:\n        \"\"\"\n        Converts all of the dependency summaries to a single string to be used in the prompt.\n\n        Args:\n            - `dependencies_summary_list` (list[str]): A list of dependency summaries.\n\n        Returns:\n            - `str`: A string of all of the dependency summaries.\n        \"\"\"\n        return \"\\n\".join(dependencies_summary_list)\n\n    def _get_import_summary(self, import_model: ImportModel) -> str | None:\n        \"\"\"\n        Retrieves the summary of an import to be used in the prompt.\n\n        Args:\n            - `import_model` (ImportModel): The import to retrieve the summary for.\n\n        Returns:\n            - `str | None`: The summary of the import or None if the import is not relevant.\n        \"\"\"\n        if import_model.import_module_type == \"LOCAL\":\n            if not import_model.import_names:\n                return self._get_local_import_summary(import_model)\n            else:\n                return self._get_local_import_from_summary(import_model)\n        else:\n            return self._get_import_details(import_model)\n\n    def _get_local_import_summary(self, dependency: ImportModel) -> str | None:\n        \"\"\"\n        Retrieves the summary of a local import to be used in the prompt.\n\n        Args:\n            - `dependency` (ImportModel): The import to retrieve the summary for.\n\n        Returns:\n            - `str | None`: The summary of the local import or None if the import is not local.\n        \"\"\"\n        if model := next(\n            (m for m in self.all_models_tuple if m.id == dependency.local_module_id),\n            None,\n        ):\n            if isinstance(model, DirectoryModel):\n                return None\n            return (\n                model.summary\n                if model.summary\n                else f\"Imported module ({dependency.local_module_id}) code content:\\n{model.code_content}\\n\"\n            )\n        return None\n\n    def _get_local_import_from_summary(self, dependency: ImportModel) -> str | None:\n        \"\"\"\n        Retrieves the summary of a local import from to be used in the prompt.\n\n        Args:\n            - `dependency` (ImportModel): The import to retrieve the summary for.\n\n        Returns:\n            - `str | None`: The summary of the local import from or None if the import is not local.\n        \"\"\"\n        for import_name in dependency.import_names:\n            if model := next(\n                (\n                    m\n                    for m in self.all_models_tuple\n                    if m.id == import_name.local_block_id\n                ),\n                None,\n            ):\n                if isinstance(model, DirectoryModel):\n                    return None\n                return (\n                    model.summary\n                    if model.summary\n                    else f\"Imported code block ({dependency.local_module_id}) code content:\\n{model.code_content}\\n\"\n                )\n        return None\n\n    def _get_import_details(self, import_model: ImportModel) -> str | None:\n        \"\"\"\n        Retrieves the details of an import to be used in the prompt.\n\n        Args:\n            - `import_model` (ImportModel): The import to retrieve the details for.\n\n        Returns:\n            - `str | None`: The details of the import or None if the import is not relevant.\n        \"\"\"\n        if import_model.import_module_type == \"LOCAL\" or not import_model.import_names:\n            return None\n\n        import_names_list: list[str] = [\n            f\"{name.name} as {name.as_name}\" if name.as_name else name.name\n            for name in import_model.import_names\n        ]\n\n        if import_model.imported_from:\n            return f\"from {import_model.imported_from} import {', '.join(import_names_list)}\"\n        else:\n            return f\"import {', '.join(import_names_list)}\"\n",
    "important_comments": null,
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "print",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "rich",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "OpenAIReturnContext",
                    "as_name": null,
                    "local_block_id": "fenec:utilities:configs:configs.py__*__MODULE__*__CLASS-OpenAIReturnContext"
                }
            ],
            "imported_from": "fenec.utilities.configs.configs",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:utilities:configs:configs.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "Summarizer",
                    "as_name": null,
                    "local_block_id": "fenec:ai_services:summarizer:summarizer_protocol.py__*__MODULE__*__CLASS-Summarizer"
                }
            ],
            "imported_from": "fenec.ai_services.summarizer.summarizer_protocol",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:ai_services:summarizer:summarizer_protocol.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "OllamaSummarizer",
                    "as_name": null,
                    "local_block_id": "fenec:ai_services:summarizer:ollama_summarizer.py__*__MODULE__*__CLASS-OllamaSummarizer"
                }
            ],
            "imported_from": "fenec.ai_services.summarizer.ollama_summarizer",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:ai_services:summarizer:ollama_summarizer.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "SummarizationMapper",
                    "as_name": null,
                    "local_block_id": "fenec:ai_services:summarizer:summarization_mapper.py__*__MODULE__*__CLASS-SummarizationMapper"
                }
            ],
            "imported_from": "fenec.ai_services.summarizer.summarization_mapper",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:ai_services:summarizer:summarization_mapper.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ArangoDBManager",
                    "as_name": null,
                    "local_block_id": "fenec:databases:arangodb:arangodb_manager.py__*__MODULE__*__CLASS-ArangoDBManager"
                }
            ],
            "imported_from": "fenec.databases.arangodb.arangodb_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:databases:arangodb:arangodb_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModelType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.types.fenec",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:types:fenec.py__*__MODULE"
        }
    ],
    "summary": "The `GraphDBSummarizationManager` class is a pivotal component within a system designed to manage and summarize code models stored in a graph database, specifically supporting both single-pass and multi-pass summarization processes. Its primary purpose is to generate, update, and maintain comprehensive summaries for various code models, such as modules, functions, and classes, by interacting with a graph database to store and retrieve these summaries. This functionality is crucial for ensuring that code structures are accurately represented and easily retrievable, facilitating efficient analysis and understanding within the larger system.\n\nKey components of this class include: the `__init__` method, which initializes the manager with a tuple of models, a summarization mapper, a summarizer, and a graph manager; the `total_cost` property, which calculates the cost of the summarization process based on token usage, reflecting the financial implications of using language models like GPT-4; the `create_summaries_and_return_updated_models` method, which orchestrates the summarization process, supporting both single-pass and multi-pass modes; and the `_process_summarization_map` method, which handles the summarization logic, including gathering child and dependency summaries, and updating the graph database with new summaries. Additional methods like `_get_child_summaries`, `_get_dependencies_summaries`, and `_get_import_details` are responsible for retrieving and formatting summaries of child models, dependencies, and import details, respectively.\n\nThe implementation employs a detailed process where summarization is conducted in either a single-pass or a multi-pass manner, utilizing bottom-up and top-down strategies to ensure comprehensive summaries. The multi-pass approach involves iterative passes that refine summaries by considering hierarchical relationships and dependencies among code models. The summarization process is facilitated by the `SummarizationMapper`, which creates summarization maps, and the `Summarizer`, which generates the actual summaries. The `ArangoDBManager` is used to manage interactions with the graph database, ensuring that summaries are stored and retrieved efficiently. The code also tracks token usage to calculate the cost of summarization, which is essential for managing resources in a token-based API environment.\n\nThe technical stack includes the use of a graph database managed by `ArangoDBManager`, which is responsible for handling database interactions. The summarization logic potentially involves `OllamaSummarizer` or `OpenAIReturnContext` for generating summaries, with the latter providing detailed context and token usage information. The code also utilizes Python's logging module for tracking the summarization process and employs type hinting for clarity and type safety.\n\nIn the context of a larger project, this code fits into a system that requires dynamic and accurate summarization of code models for analysis and retrieval. It interacts with other components such as the summarization mapper and the graph manager to ensure seamless integration and operation within the system. The `GraphDBSummarizationManager` plays a pivotal role in maintaining the integrity and accessibility of code summaries, which are essential for developers and automated systems that rely on up-to-date information about code structures and their interdependencies. This functionality supports tasks such as documentation generation, code review, and dependency analysis, contributing to the overall goal of improving code readability and maintainability within the larger system.",
    "children_ids": [
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-__init__",
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-total_cost",
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-create_summaries_and_return_updated_models",
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-_handle_summarization_passes",
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-_process_summarization_map",
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-_get_child_summaries",
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-_stringify_children_summaries",
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-_get_dependencies_summaries",
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-_get_local_dependency_summary",
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-_stringify_dependencies_summaries",
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-_get_import_summary",
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-_get_local_import_summary",
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-_get_local_import_from_summary",
        "fenec:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager__*__FUNCTION-_get_import_details"
    ]
}