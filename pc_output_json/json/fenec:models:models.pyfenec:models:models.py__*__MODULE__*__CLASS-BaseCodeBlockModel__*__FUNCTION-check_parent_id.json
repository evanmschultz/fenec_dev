{
    "function_name": "check_parent_id",
    "docstring": "Validates that parent_id is a non-empty string unless block_type is MODULE.",
    "decorators": [
        {
            "content": "@field_validator(\"parent_id\")",
            "decorator_name": "field_validator",
            "decorator_args": [
                "\"parent_id\""
            ]
        }
    ],
    "parameters": null,
    "returns": "str | None",
    "is_method": true,
    "is_async": false,
    "id": "fenec:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel__*__FUNCTION-check_parent_id",
    "file_path": "fenec/models/models.py",
    "parent_id": "fenec:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel",
    "block_type": "FUNCTION",
    "start_line_num": 373,
    "end_line_num": 389,
    "code_content": "\n@field_validator(\"parent_id\")\ndef check_parent_id(cls, v, values) -> str | None:\n    \"\"\"Validates that parent_id is a non-empty string unless block_type is MODULE.\"\"\"\n    block_type = (\n        values.get(\"block_type\")\n        if isinstance(values, dict)\n        else values.data.get(\"block_type\")\n    )\n\n    if block_type and block_type != BlockType.MODULE:\n        if v is None or len(v) < 1:\n            raise ValueError(\n                \"parent_id must be a non-empty string unless block_type is MODULE\"\n            )\n    return v\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "The code snippet is a validation function within the `BaseCodeBlockModel` class, which is part of a larger system designed to manage and represent metadata for code blocks. The primary purpose of the `check_parent_id` function is to enforce the integrity of the `parent_id` attribute, ensuring it is a non-empty string unless the `block_type` is set to `MODULE`. This validation is crucial for maintaining the hierarchical relationships between code blocks, which are essential for accurately representing the structure and dependencies of code within a file or project.\n\nKey components of this function include the `check_parent_id` method itself, which is decorated with `@field_validator` to automatically trigger validation during data model operations. The function retrieves the `block_type` from the `values` dictionary or its `data` attribute, depending on whether `values` is a dictionary or an object with a `data` attribute. If the `block_type` is not `MODULE` and the `parent_id` is either `None` or an empty string, a `ValueError` is raised, ensuring strict adherence to the validation rules.\n\nThe implementation leverages Python's type hinting to specify that the function returns either a string or `None`, enhancing code readability and maintainability. The use of the `field_validator` decorator, likely from the Pydantic library, indicates that this function is part of a robust data validation framework. Pydantic is used extensively in the `BaseCodeBlockModel` class to define and validate various attributes, ensuring that the model's data is consistent and reliable. The technical stack includes Pydantic for data modeling and validation, which provides the `BaseModel` class and `Field` function for defining model attributes. The code also references custom types such as `BlockType`, which are likely defined elsewhere in the project to represent specific characteristics of code blocks.\n\nIn the context of the larger project, this validation function is a critical component of the `BaseCodeBlockModel`, which serves as a foundational model for encapsulating code block metadata. This model facilitates the conversion of code block attributes into metadata for storage or further processing, interacting with systems like ChromaDB for metadata management. The `check_parent_id` function ensures that the hierarchical relationships within the code are accurately maintained, supporting the model's role in representing and managing complex code structures and dependencies. This functionality is essential for applications that require detailed code analysis, such as code review tools, dependency management systems, or integrated development environments (IDEs). By ensuring the integrity of the `parent_id`, the system can reliably manage and analyze code block relationships, contributing to the overall robustness and accuracy of the larger code management system.",
    "children_ids": []
}