{
    "docstring": null,
    "header": [
        "# from typing import Union",
        "# from chromadb import EphemeralClient, PersistentClient, HttpClient",
        "# # import fenec.types.chroma as chroma_types",
        "# from chromadb.config import DEFAULT_DATABASE, DEFAULT_TENANT, Settings",
        "# from chromadb.api import ClientAPI",
        "# from chromadb.api.types import (",
        "#     DataLoader,",
        "#     CollectionMetadata,",
        "#     GetResult,",
        "#     QueryResult,",
        "#     Where,",
        "#     WhereDocument,",
        "#     Include,",
        "#     URIs,",
        "#     Loadable,",
        "#     Metadata,",
        "#     Embedding,",
        "# )",
        "# from chromadb import Collection",
        "# from chromadb import EmbeddingFunction",
        "# class ChromaDBClientBuilder:",
        "#     \"\"\"",
        "#     This class is used to create a ChromaDB client. It provides three methods for creating a ChromaDB client:",
        "#     Methods:",
        "#         - `create_ephemeral_client`: Creates an ephemeral client. This means the client will be in memory and will not",
        "#             persist to disk. This is useful for testing and development.",
        "#         - `create_persistent_client`: Creates a persistent client. This means the client will persist to disk, but will still",
        "#             run in memory. This is useful for testing and development.",
        "#         - `create_http_client`: Creates an HTTP client. This means the client will connect to a remote ChromaDB instance. The",
        "#             default host is localhost and the default port is 8087 for local development, and is the only method suggested for",
        "#             production in the ChromaDB documentation.",
        "#     Notes:",
        "#         - Import defined in fenec.databases.chroma `__init__.py` so import from fenec.databases.chroma:",
        "#             `from fenec.databases.chroma import ChromaDBClientBuilder`",
        "#     Examples:",
        "#         ```Python",
        "#         from fenec.databases.chroma import ChromaDBClientBuilder",
        "#         import fenec.types.chromadb.types as chroma_types",
        "#         client: chroma_types.ClientAPI = ChromaDBClientBuilder.create_persistent_client()",
        "#         ```",
        "#     \"\"\"",
        "#     @staticmethod",
        "#     def create_ephemeral_client(",
        "#         settings: Settings | None = None,",
        "#         tenant: str = DEFAULT_TENANT,",
        "#         database: str = DEFAULT_DATABASE,",
        "#     ) -> ClientAPI:",
        "#         \"\"\"",
        "#         Creates an in-memory instance of Chroma. This is useful for testing and development, but not recommended for production use according to",
        "#         the ChromaDB documentation.",
        "#         Args:",
        "#             - settings (chroma_types.Settings): The settings to use for the ephemeral client.",
        "#             - tenant (str): The tenant to use for the ephemeral client.",
        "#             - database (str): The database to use for the ephemeral client.",
        "#         \"\"\"",
        "#         return EphemeralClient(",
        "#             settings=settings if settings else Settings(),",
        "#             tenant=tenant,",
        "#             database=database,",
        "#         )",
        "#     @staticmethod",
        "#     def create_persistent_client(",
        "#         path: str = \"./chroma\",",
        "#         settings: Settings | None = None,",
        "#         tenant: str = DEFAULT_TENANT,",
        "#         database: str = DEFAULT_DATABASE,",
        "#     ) -> ClientAPI:",
        "#         \"\"\"",
        "#         Creates a persistent instance of Chroma that saves to disk. This is useful for testing and development, but not recommended for production use",
        "#         according to the ChromaDB documentation.",
        "#         Args:",
        "#             - path (str): The path to the ChromaDB directory.",
        "#             - settings (chroma.Settings): The settings to use for the persistent client.",
        "#             - tenant (str): The tenant to use for the persistent client.",
        "#             - database (str): The database to use for the persistent client.",
        "#         \"\"\"",
        "#         return PersistentClient(",
        "#             path=path,",
        "#             settings=settings if settings else Settings(),",
        "#             tenant=tenant,",
        "#             database=database,",
        "#         )",
        "#     @staticmethod",
        "#     def create_http_client(",
        "#         host: str = \"localhost\",",
        "#         port: str = \"8087\",",
        "#         ssl: bool = False,",
        "#         headers: dict[str, str] = {},",
        "#         settings: Settings | None = None,",
        "#         tenant: str = DEFAULT_TENANT,",
        "#         database: str = DEFAULT_DATABASE,",
        "#     ) -> ClientAPI:",
        "#         \"\"\"",
        "#         Creates a client that connects to a remote Chroma server. This supports many clients connecting to the same server, and is the",
        "#         recommended way to use Chroma in production according to the ChromaDB Documentation.",
        "#         Args:",
        "#             - host (str): The host of the ChromaDB server.",
        "#             - port (str): The port of the ChromaDB server.",
        "#             - ssl (bool): Whether or not to use SSL.",
        "#             - headers (dict[str, str]): The headers to use for the HTTP client.",
        "#             - settings (chroma_types.Settings): The settings to use for the HTTP client.",
        "#             - tenant (str): The tenant to use for the HTTP client.",
        "#             - database (str): The database to use for the HTTP client.",
        "#         \"\"\"",
        "#         return HttpClient(",
        "#             host=host,",
        "#             port=port,",
        "#             ssl=ssl,",
        "#             headers=headers,",
        "#             settings=settings if settings else Settings(),",
        "#             tenant=tenant,",
        "#             database=database,",
        "#         )"
    ],
    "footer": [],
    "imports": null,
    "id": "fenec:databases:chroma:chromadb_builder.py__*__MODULE",
    "file_path": "fenec/databases/chroma/chromadb_builder.py",
    "parent_id": "fenec:databases:chroma__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 127,
    "code_content": "# from typing import Union\n# from chromadb import EphemeralClient, PersistentClient, HttpClient\n\n# # import fenec.types.chroma as chroma_types\n# from chromadb.config import DEFAULT_DATABASE, DEFAULT_TENANT, Settings\n# from chromadb.api import ClientAPI\n# from chromadb.api.types import (\n#     DataLoader,\n#     CollectionMetadata,\n#     GetResult,\n#     QueryResult,\n#     Where,\n#     WhereDocument,\n#     Include,\n#     URIs,\n#     Loadable,\n#     Metadata,\n#     Embedding,\n# )\n# from chromadb import Collection\n# from chromadb import EmbeddingFunction\n\n\n# class ChromaDBClientBuilder:\n#     \"\"\"\n#     This class is used to create a ChromaDB client. It provides three methods for creating a ChromaDB client:\n\n#     Methods:\n#         - `create_ephemeral_client`: Creates an ephemeral client. This means the client will be in memory and will not\n#             persist to disk. This is useful for testing and development.\n#         - `create_persistent_client`: Creates a persistent client. This means the client will persist to disk, but will still\n#             run in memory. This is useful for testing and development.\n#         - `create_http_client`: Creates an HTTP client. This means the client will connect to a remote ChromaDB instance. The\n#             default host is localhost and the default port is 8087 for local development, and is the only method suggested for\n#             production in the ChromaDB documentation.\n\n#     Notes:\n#         - Import defined in fenec.databases.chroma `__init__.py` so import from fenec.databases.chroma:\n#             `from fenec.databases.chroma import ChromaDBClientBuilder`\n\n#     Examples:\n#         ```Python\n#         from fenec.databases.chroma import ChromaDBClientBuilder\n#         import fenec.types.chromadb.types as chroma_types\n\n#         client: chroma_types.ClientAPI = ChromaDBClientBuilder.create_persistent_client()\n#         ```\n#     \"\"\"\n\n#     @staticmethod\n#     def create_ephemeral_client(\n#         settings: Settings | None = None,\n#         tenant: str = DEFAULT_TENANT,\n#         database: str = DEFAULT_DATABASE,\n#     ) -> ClientAPI:\n#         \"\"\"\n#         Creates an in-memory instance of Chroma. This is useful for testing and development, but not recommended for production use according to\n#         the ChromaDB documentation.\n\n#         Args:\n#             - settings (chroma_types.Settings): The settings to use for the ephemeral client.\n#             - tenant (str): The tenant to use for the ephemeral client.\n#             - database (str): The database to use for the ephemeral client.\n#         \"\"\"\n#         return EphemeralClient(\n#             settings=settings if settings else Settings(),\n#             tenant=tenant,\n#             database=database,\n#         )\n\n#     @staticmethod\n#     def create_persistent_client(\n#         path: str = \"./chroma\",\n#         settings: Settings | None = None,\n#         tenant: str = DEFAULT_TENANT,\n#         database: str = DEFAULT_DATABASE,\n#     ) -> ClientAPI:\n#         \"\"\"\n#         Creates a persistent instance of Chroma that saves to disk. This is useful for testing and development, but not recommended for production use\n#         according to the ChromaDB documentation.\n\n#         Args:\n#             - path (str): The path to the ChromaDB directory.\n#             - settings (chroma.Settings): The settings to use for the persistent client.\n#             - tenant (str): The tenant to use for the persistent client.\n#             - database (str): The database to use for the persistent client.\n#         \"\"\"\n#         return PersistentClient(\n#             path=path,\n#             settings=settings if settings else Settings(),\n#             tenant=tenant,\n#             database=database,\n#         )\n\n#     @staticmethod\n#     def create_http_client(\n#         host: str = \"localhost\",\n#         port: str = \"8087\",\n#         ssl: bool = False,\n#         headers: dict[str, str] = {},\n#         settings: Settings | None = None,\n#         tenant: str = DEFAULT_TENANT,\n#         database: str = DEFAULT_DATABASE,\n#     ) -> ClientAPI:\n#         \"\"\"\n#         Creates a client that connects to a remote Chroma server. This supports many clients connecting to the same server, and is the\n#         recommended way to use Chroma in production according to the ChromaDB Documentation.\n\n#         Args:\n#             - host (str): The host of the ChromaDB server.\n#             - port (str): The port of the ChromaDB server.\n#             - ssl (bool): Whether or not to use SSL.\n#             - headers (dict[str, str]): The headers to use for the HTTP client.\n#             - settings (chroma_types.Settings): The settings to use for the HTTP client.\n#             - tenant (str): The tenant to use for the HTTP client.\n#             - database (str): The database to use for the HTTP client.\n#         \"\"\"\n#         return HttpClient(\n#             host=host,\n#             port=port,\n#             ssl=ssl,\n#             headers=headers,\n#             settings=settings if settings else Settings(),\n#             tenant=tenant,\n#             database=database,\n#         )\n",
    "important_comments": [
        {
            "content": "#     QueryResult,",
            "comment_types": [
                "Q"
            ]
        },
        {
            "content": "#     Notes:",
            "comment_types": [
                "NOTE"
            ]
        }
    ],
    "dependencies": null,
    "summary": "The provided Python code defines the `ChromaDBClientBuilder` class, which serves as a utility for creating different types of ChromaDB clients, thereby facilitating interactions with a ChromaDB database. The primary purpose of this code is to offer a streamlined and flexible interface for instantiating ChromaDB clients tailored to various environments, such as testing, development, and production. This abstraction is significant as it simplifies the complexity involved in client configuration, allowing developers to concentrate on application logic rather than connection specifics.\n\nKey components of this code include three static methods within the `ChromaDBClientBuilder` class: `create_ephemeral_client`, `create_persistent_client`, and `create_http_client`. The `create_ephemeral_client` method generates an `EphemeralClient` instance, which operates entirely in memory, making it ideal for temporary, non-persistent operations during testing and development. The `create_persistent_client` method returns a `PersistentClient` instance, which persists data to disk, suitable for scenarios where data needs to be retained between sessions. The `create_http_client` method returns an `HttpClient` instance, enabling connections to a remote ChromaDB server, which is recommended for production use due to its ability to handle multiple client connections efficiently.\n\nThe implementation employs a static method pattern, providing a straightforward and consistent interface for client creation. This design choice enhances usability by allowing users to specify configuration parameters such as settings, tenant, database, host, port, and SSL options. The code leverages default values for these parameters, ensuring ease of use while maintaining flexibility for customization. The `Settings` class is utilized to encapsulate configuration details, promoting a clean and organized approach to managing client settings. The use of Python's type hinting and static typing features enhances code readability and maintainability.\n\nThe technical stack includes the ChromaDB library, which provides the foundational classes `EphemeralClient`, `PersistentClient`, and `HttpClient`, as well as various configuration and API types such as `Settings`, `ClientAPI`, `DataLoader`, `CollectionMetadata`, and others. These components are crucial for defining the behavior and capabilities of the ChromaDB clients.\n\nIn the context of a larger system, this code serves as a utility for managing database connections within applications that utilize ChromaDB for data storage and retrieval. It abstracts the complexity of client configuration and instantiation, allowing developers to easily switch between different client types based on their specific needs, such as local development or production deployment. This modular approach enhances the flexibility and scalability of applications that rely on ChromaDB for their data management requirements. By providing a consistent interface for client creation, the `ChromaDBClientBuilder` class facilitates seamless integration with other components of the system, supporting a wide range of use cases from development to production environments. This utility is particularly valuable in systems where efficient data handling and retrieval are critical, enabling robust and scalable database interactions.",
    "children_ids": []
}