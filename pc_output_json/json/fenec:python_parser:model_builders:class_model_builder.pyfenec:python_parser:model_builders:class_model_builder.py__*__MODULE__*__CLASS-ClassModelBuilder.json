{
    "class_name": "ClassModelBuilder",
    "decorators": null,
    "bases": [
        "BaseModelBuilder"
    ],
    "docstring": "A builder class for constructing a model of a Python class.\n\nThis class extends BaseModelBuilder and is specialized for building a model of a Python class, capturing details such as decorators, base classes, documentation strings, class attributes, and class-specific keywords.\n\nAttributes:\n    - class_attributes (ClassSpecificAttributes): An instance containing attributes specific to a class, like name, decorators, bases, etc.\n\nArgs:\n    - id (str): The unique identifier for the class model.\n    - class_name (str): The name of the class.\n    - parent_id (str): The identifier of the parent model (e.g., module or class containing this class).",
    "keywords": null,
    "id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder",
    "file_path": "fenec/python_parser/model_builders/class_model_builder.py",
    "parent_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 21,
    "end_line_num": 103,
    "code_content": "\n\nclass ClassModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a Python class.\n\n    This class extends BaseModelBuilder and is specialized for building a model of a Python class, capturing details such as decorators, base classes, documentation strings, class attributes, and class-specific keywords.\n\n    Attributes:\n        - class_attributes (ClassSpecificAttributes): An instance containing attributes specific to a class, like name, decorators, bases, etc.\n\n    Args:\n        - id (str): The unique identifier for the class model.\n        - class_name (str): The name of the class.\n        - parent_id (str): The identifier of the parent model (e.g., module or class containing this class).\n    \"\"\"\n\n    def __init__(\n        self, id: str, class_name: str, parent_id: str, file_path: str\n    ) -> None:\n        super().__init__(\n            id=id, block_type=BlockType.CLASS, parent_id=parent_id, file_path=file_path\n        )\n\n        self.class_attributes = ClassSpecificAttributes(\n            class_name=class_name,\n            decorators=None,\n            bases=None,\n            docstring=None,\n            keywords=None,\n        )\n\n    def set_decorators(\n        self, decorators: list[DecoratorModel] | None\n    ) -> \"ClassModelBuilder\":\n        \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\n        if decorators:\n            self.class_attributes.decorators = decorators\n        else:\n            self.class_attributes.decorators = None\n        return self\n\n    def set_bases(self, base_classes: list[str] | None) -> \"ClassModelBuilder\":\n        \"\"\"Sets the list of base classes to the class model.\"\"\"\n        self.class_attributes.bases = base_classes\n        return self\n\n    def set_docstring(self, docstring: str | None) -> \"ClassModelBuilder\":\n        \"\"\"Sets the docstring of the class in the model.\"\"\"\n        self.class_attributes.docstring = docstring\n        return self\n\n    # # TODO: Add attribute model\n    # def add_attribute(self, attribute) -> \"ClassModelBuilder\":\n    #     \"\"\"Adds an attribute of the class in the model.\"\"\"\n    #     if not self.class_attributes.attributes:\n    #         self.class_attributes.attributes = []\n    #     self.class_attributes.attributes.append(attribute)\n    #     return self\n\n    def set_keywords(\n        self, keyword_list: list[ClassKeywordModel] | None\n    ) -> \"ClassModelBuilder\":\n        \"\"\"Sets the list of keywords to the class model.\"\"\"\n        self.class_attributes.keywords = keyword_list\n        return self\n\n    def _get_class_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Gets the class specific attributes.\"\"\"\n        return self.class_attributes.model_dump()\n\n    @logging_decorator(message=\"Building ClassModel\")\n    def build(\n        self,\n    ) -> ClassModel:\n        \"\"\"Creates a ClassModel instance after building and setting the children models.\"\"\"\n        self.build_children()\n        self.set_children_ids()\n        return ClassModel(\n            **self._get_common_attributes(),\n            **self._get_class_specific_attributes(),\n        )\n",
    "important_comments": null,
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "ClassKeywordModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DecoratorModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassKeywordModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DecoratorModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "TYPE_CHECKING",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Any",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "logging_decorator",
                    "as_name": null,
                    "local_block_id": "fenec:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator"
                }
            ],
            "imported_from": "fenec.utilities.logger.decorators",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:utilities:logger:decorators.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BaseModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.base_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:base_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ClassSpecificAttributes",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes"
                },
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-ClassModel"
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-FunctionModel"
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockModel"
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ClassSpecificAttributes",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes"
                },
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-ClassModel"
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-FunctionModel"
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockModel"
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": "fenec:models:enums.py__*__MODULE__*__CLASS-BlockType"
                }
            ],
            "imported_from": "fenec.models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:models:enums.py__*__MODULE"
        }
    ],
    "summary": "The `ClassModelBuilder` is a specialized class within a model-building framework designed to construct detailed representations of Python classes, capturing essential attributes such as decorators, base classes, documentation strings, and keywords. This class extends the `BaseModelBuilder`, inheriting its foundational structure while adding functionality specific to Python class modeling. Key components include the `__init__` method, which initializes the builder with identifiers and file paths, and methods like `set_decorators`, `set_bases`, `set_docstring`, and `set_keywords`, which configure the class-specific attributes. The `build` method, enhanced with a logging decorator, aggregates these attributes to create a `ClassModel` instance, ensuring a comprehensive representation of the class.\n\nThe implementation leverages object-oriented principles, particularly inheritance and the builder pattern, to incrementally construct a `ClassModel` object. This approach ensures that all necessary attributes are set before the model is instantiated, promoting robustness and flexibility. The `ClassSpecificAttributes` data structure is central to this process, storing class-related metadata and utilizing the `model_dump` method to convert these attributes into a dictionary format for easy integration into the `ClassModel`. The code also includes a placeholder for future expansion with a commented-out `add_attribute` method, indicating potential enhancements for handling class attributes.\n\nThe technical stack comprises Python's standard library, utilizing type hinting for method signatures to improve code clarity and maintainability. A custom logging decorator from the `fenec.utilities.logger.decorators` module is employed to track the build process, providing insights into the model construction. The code relies on custom modules from the `fenec` package, such as `fenec.models.models` for data structures and `fenec.models.enums` for enumerations, indicating a modular architecture designed for extensibility and integration within a larger system.\n\nIn the context of a larger project, this code is part of a Python parser module, likely interacting with other model builders to form a comprehensive representation of Python code structures. This functionality is crucial for tasks such as code analysis, documentation generation, or refactoring, where a detailed understanding of class structures is necessary. The `ClassModelBuilder` fits into a broader system that may include components for parsing, analyzing, and transforming Python code, contributing to a robust toolset for developers and analysts working with complex codebases. It interfaces with other components that manage different block types or perform operations based on the class metadata encapsulated by this object, supporting a wide range of code analysis tasks.",
    "children_ids": [
        "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-__init__",
        "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-set_decorators",
        "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-set_bases",
        "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-set_docstring",
        "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-set_keywords",
        "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-_get_class_specific_attributes",
        "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-build"
    ]
}