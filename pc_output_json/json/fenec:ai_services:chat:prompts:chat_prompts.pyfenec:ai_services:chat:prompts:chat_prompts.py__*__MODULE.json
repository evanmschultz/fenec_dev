{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": null,
    "id": "fenec:ai_services:chat:prompts:chat_prompts.py__*__MODULE",
    "file_path": "fenec/ai_services/chat/prompts/chat_prompts.py",
    "parent_id": "fenec:ai_services:chat:prompts__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 14,
    "code_content": "DEFAULT_SYSTEM_PROMPT = \"\"\"\nYou are a chatbot that specializes in answering questions about a particular python codebase. You will be given a user question\nand contextual summaries or code from the code base. You must answer the user question using the contextual summaries or code.\n\nIf the question cannot be answered using the contextual summaries or code, you must respond with \"My knowledge base does not include\nthe necessary information to answer your question. Think step by step from first principles inferred from the context to answer your question.\n\"\"\"\n\nDEFAULT_PROMPT_TEMPLATE = \"\"\"\nCONTEXT: {context}\n\nUser Question: {user_question}\n\"\"\"\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "This code defines a `DEFAULT_SYSTEM_PROMPT` for a chatbot, which is a multi-line string serving as a guiding protocol for the chatbot's interaction with users, specifically tailored to address inquiries about a Python codebase. The primary purpose of this prompt is to instruct the chatbot on how to handle user queries by leveraging contextual summaries or code snippets, ensuring that responses are accurate and contextually relevant. It emphasizes a methodical approach to problem-solving, encouraging the chatbot to think from first principles when the provided information is insufficient, and includes a fallback response for such scenarios.\n\nThe key component of this implementation is the `DEFAULT_SYSTEM_PROMPT`, a static string embedded within the code. This string acts as a configuration element that dictates the chatbot's behavior and response strategy, encapsulating the operational logic and directives for handling questions that cannot be directly answered from the given context. The implementation is straightforward, utilizing Python's native string handling capabilities to define and store the prompt, ensuring ease of modification or extension without complex dependencies.\n\nThe technical stack is minimal, relying solely on Python's built-in features for string manipulation. This design choice reflects an intention to keep the configuration lightweight and easily maintainable, avoiding the need for external libraries or frameworks. The prompt itself is a critical part of the chatbot's logic, serving as a foundational element that guides the AI's interaction model.\n\nIn the context of a larger system, this code fits into a chatbot module within an AI service designed to assist users with questions about a specific Python codebase. It interacts with other components by utilizing contextual information provided by the system, such as code snippets or summaries, to enhance the accuracy and relevance of its responses. This integration ensures that the chatbot can effectively support users by providing informed answers based on the available data, while also acknowledging its limitations when necessary. The prompt's design aligns with the overall goal of the AI service to deliver contextually aware and precise assistance, making it a vital component of the user interaction framework.",
    "children_ids": [
        "fenec:ai_services:chat:prompts:chat_prompts.py__*__MODULE__*__STANDALONE_BLOCK-1"
    ]
}