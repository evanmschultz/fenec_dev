{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "RichHandler",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "rich.logging",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Syntax",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "rich.syntax",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "id": "fenec:utilities:logger:logging_config.py__*__MODULE",
    "file_path": "fenec/utilities/logger/logging_config.py",
    "parent_id": "fenec:utilities:logger__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 73,
    "code_content": "import logging\n\nfrom rich.logging import RichHandler\nfrom rich.syntax import Syntax\n\n\ndef setup_logging(level=logging.INFO) -> None:\n    \"\"\"\n    Configures the logging system to use RichSyntaxHandler for output.\n\n    This function sets up logging with a specific log level and format. It utilizes the RichSyntaxHandler to support rich text and syntax highlighting in log outputs.\n\n    Args:\n        level (int, optional): The logging level to set for the root logger. Defaults to logging.INFO.\n\n    Example:\n        >>> setup_logging(logging.DEBUG)\n        # Configures logging at DEBUG level with RichSyntaxHandler.\n    \"\"\"\n\n    format_str = \"%(message)s\"\n    logging.basicConfig(\n        level=level,\n        format=format_str,\n        handlers=[RichHandler(markup=True)],\n    )\n\n\nclass RichSyntaxHandler(RichHandler):\n    \"\"\"\n    A custom logging handler that extends RichHandler to add syntax highlighting.\n\n    This handler checks if the log record contains a 'syntax_highlight' attribute and, if so, uses 'rich.syntax.Syntax' to render the message with Python syntax highlighting.\n\n    Inherits:\n        RichHandler: The base handler provided by the rich library for rich text formatting.\n    \"\"\"\n\n    def emit(self, record) -> None:\n        \"\"\"\n        Emits a logging record.\n\n        If the record has the 'syntax_highlight' attribute set to True, it renders the 'content' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\n\n        Args:\n            record: The logging record to emit.\n\n        Example:\n            # Assuming `logger` is a logger instance\n            >>> logger.info(\"Regular log message\")\n            # Outputs a regular log message.\n\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print('Hello, world!')\"})\n            # Outputs the message with syntax highlighting.\n        \"\"\"\n\n        try:\n            if hasattr(record, \"syntax_highlight\") and getattr(\n                record, \"syntax_highlight\"\n            ):\n                content: str = getattr(record, \"content\", \"\")\n                if isinstance(content, str):\n                    syntax = Syntax(\n                        content, \"python\", theme=\"material\", line_numbers=True\n                    )\n                    self.console.print(syntax)\n                return\n\n        except Exception as e:\n            self.handleError(record)\n\n        super().emit(record)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "This Python code is designed to enhance the logging system by integrating rich text formatting and syntax highlighting capabilities, primarily using the Rich library. Its main purpose is to configure logging outputs to be more visually informative, especially for Python code snippets, by leveraging the `RichSyntaxHandler`, a custom handler that extends the `RichHandler`. Key components include the `setup_logging` function, which configures the logging system with a specified log level and format, utilizing the `RichSyntaxHandler` for output; and the `RichSyntaxHandler` class, which overrides the `emit` method to check for a 'syntax_highlight' attribute in log records and apply syntax highlighting using the `rich.syntax.Syntax` class if present.\n\nThe implementation involves setting up a basic logging configuration with a custom handler that can render log messages with Python syntax highlighting when the appropriate attribute is set. The `setup_logging` function configures the logging system by setting the log level and format string, and it attaches the `RichSyntaxHandler` to the root logger. The `RichSyntaxHandler` class extends the `RichHandler` from the Rich library, adding functionality to check each log record for a 'syntax_highlight' attribute. If this attribute is present and set to `True`, the handler uses the `Syntax` class from the Rich library to format the message with Python syntax highlighting, including line numbers and a specified theme. This is achieved by creating a `Syntax` object with the content of the log record and printing it to the console. If the attribute is not present or set to `False`, the handler defaults to the standard behavior of the `RichHandler`. The implementation also includes error handling within the `emit` method to manage any exceptions that occur during the processing of log records.\n\nThe technical stack includes the Python `logging` module for standard logging operations and the `rich` library, specifically its `RichHandler` and `Syntax` components, to provide enhanced text formatting and syntax highlighting. The `rich` library is utilized for its capabilities in rendering rich text and code syntax, making log outputs more readable and informative, particularly in development environments.\n\nIn the context of a larger system, this code serves as a utility module that can be integrated into applications requiring advanced logging features, particularly those that benefit from syntax-highlighted log outputs, such as development tools or educational platforms. It interacts with other components by providing a configurable logging setup that can be easily incorporated into existing logging workflows. This enhanced logging capability is particularly useful in environments where developers need to quickly interpret log messages that include code snippets, as it improves readability and aids in debugging and educational scenarios. The modular design allows for easy integration and customization within larger codebases, supporting a wide range of applications that require sophisticated logging solutions.",
    "children_ids": [
        "fenec:utilities:logger:logging_config.py__*__MODULE__*__FUNCTION-setup_logging",
        "fenec:utilities:logger:logging_config.py__*__MODULE__*__CLASS-RichSyntaxHandler"
    ]
}