{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Union",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "WhitespaceInclusivePositionProvider",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "CodeRange",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "libcst.metadata",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "_UNDEFINED_DEFAULT",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "libcst._metadata_dependent",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModuleModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.module_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:module_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "StandaloneBlockModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.standalone_block_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "CommentModel",
                    "as_name": null,
                    "local_block_id": "fenec:models:models.py__*__MODULE__*__CLASS-CommentModel"
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "fenec.python_parser.visitors.node_processing.common_functions",
                    "as_name": "common_functions",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "PositionData",
                    "as_name": null,
                    "local_block_id": "fenec:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData"
                }
            ],
            "imported_from": "fenec.utilities.processing_context",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:utilities:processing_context.py__*__MODULE"
        }
    ],
    "id": "fenec:python_parser:visitors:base_code_block_visitor.py__*__MODULE",
    "file_path": "fenec/python_parser/visitors/base_code_block_visitor.py",
    "parent_id": "fenec:python_parser:visitors__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 91,
    "code_content": "from typing import Union\nimport libcst\nfrom libcst.metadata import (\n    WhitespaceInclusivePositionProvider,\n    CodeRange,\n)\nfrom libcst._metadata_dependent import _UNDEFINED_DEFAULT\nfrom fenec.python_parser.model_builders.class_model_builder import ClassModelBuilder\nfrom fenec.python_parser.model_builders.function_model_builder import (\n    FunctionModelBuilder,\n)\nfrom fenec.python_parser.model_builders.module_model_builder import (\n    ModuleModelBuilder,\n)\nfrom fenec.python_parser.model_builders.standalone_block_model_builder import (\n    StandaloneBlockModelBuilder,\n)\n\n# from fenec.types.fenec import BuilderType\nfrom fenec.models.models import CommentModel\nimport fenec.python_parser.visitors.node_processing.common_functions as common_functions\nfrom fenec.utilities.processing_context import PositionData\n\n\nBuilderType = Union[\n    ModuleModelBuilder,\n    ClassModelBuilder,\n    FunctionModelBuilder,\n    StandaloneBlockModelBuilder,\n]\n\n\nclass BaseVisitor(libcst.CSTVisitor):\n    \"\"\"\n    Base visitor class for traversing and processing nodes in a CST (Concrete Syntax Tree).\n\n    This abstract class provides the foundational functionality for processing various nodes in a CST, using the libcst library. It is designed to be extended by more specific visitor classes like ModuleVisitor.\n\n    Attributes:\n        id (str): An identifier for the visitor instance.\n        builder_stack (list[BuilderType]): A stack of model builders for handling different CST nodes.\n\n    METADATA_DEPENDENCIES (tuple): Metadata dependencies required for processing the CST nodes.\n    \"\"\"\n\n    METADATA_DEPENDENCIES: tuple[type[WhitespaceInclusivePositionProvider]] = (\n        WhitespaceInclusivePositionProvider,\n    )\n\n    def __init__(self, id: str) -> None:\n        self.id: str = id\n        self.builder_stack: list[BuilderType] = []\n\n    def visit_Comment(self, node: libcst.Comment) -> None:\n        \"\"\"\n        Visits a Comment node in the CST.\n\n        Extracts important comments from the node and adds them to the current builder in the stack.\n        \"\"\"\n\n        parent_builder = self.builder_stack[-1]\n        content: CommentModel | None = common_functions.extract_important_comment(node)\n        if content:\n            parent_builder.add_important_comment(content)\n\n    def get_node_position_data(\n        self,\n        node: libcst.CSTNode,\n    ) -> PositionData:\n        \"\"\"\n        Retrieves position data for a given CST node.\n\n        Extracts the start and end line numbers of the node in the source code.\n\n        Args:\n            node (libcst.CSTNode): The CST node to get position data for.\n\n        Returns:\n            PositionData: An object containing start and end line numbers of the node.\n        \"\"\"\n\n        position_data: CodeRange | type[_UNDEFINED_DEFAULT] = self.get_metadata(\n            WhitespaceInclusivePositionProvider, node\n        )\n\n        start, end = 0, 0\n        if isinstance(position_data, CodeRange):\n            start: int = position_data.start.line\n            end: int = position_data.end.line\n        return PositionData(start=start, end=end)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "The provided code defines a `BaseVisitor` class, a foundational component for traversing and processing nodes within a Concrete Syntax Tree (CST) using the `libcst` library, specifically tailored for analyzing and manipulating Python code structures. The primary purpose of this class is to serve as a base for more specialized visitor classes that can perform detailed analysis and transformation of Python code by interacting with CST nodes. Key components include the `BaseVisitor` class, which extends `libcst.CSTVisitor` and provides essential methods such as `visit_Comment` for processing comment nodes and `get_node_position_data` for retrieving positional metadata of nodes; the `BuilderType` union, which defines a type for model builders that handle different CST nodes, including `ModuleModelBuilder`, `ClassModelBuilder`, `FunctionModelBuilder`, and `StandaloneBlockModelBuilder`; and the `METADATA_DEPENDENCIES` attribute, which specifies the necessary metadata providers for node processing.\n\nThe implementation employs a stack-based approach, where a list of model builders (`builder_stack`) is maintained to manage different CST nodes. The `visit_Comment` method is responsible for extracting significant comments from nodes using a utility function from `common_functions` and adding them to the current builder in the stack, which is crucial for capturing meaningful documentation or annotations within the code. The `get_node_position_data` method utilizes the `WhitespaceInclusivePositionProvider` to extract the start and end line numbers of a node, encapsulating this information in a `PositionData` object, which is vital for precise code analysis and transformation tasks.\n\nThe technical stack includes the `libcst` library, which is a powerful tool for parsing and manipulating Python code as CSTs, allowing for fine-grained code analysis and transformation. Additionally, the code leverages custom modules from the `fenec` package, such as `ClassModelBuilder`, `FunctionModelBuilder`, `ModuleModelBuilder`, and `StandaloneBlockModelBuilder`, which are specialized for constructing models of different code structures. The `CommentModel` from `fenec.models.models` is used to represent extracted comments, and utility functions from `fenec.python_parser.visitors.node_processing.common_functions` assist in processing node data. The `PositionData` class from `fenec.utilities.processing_context` is used to encapsulate positional information of nodes.\n\nIn the context of a larger system, this code is a critical part of a Python parser within the `fenec` framework, which processes and analyzes Python code to extract and manage code metadata and comments. It interacts with other components like model builders and utility functions to provide a comprehensive analysis of code structures. This modular design supports extensibility and integration with other parsing and analysis tools, enabling the `fenec` framework to offer robust capabilities for code analysis, refactoring, and documentation generation. The `BaseVisitor` class serves as a reusable and extendable foundation for building more complex visitors that can perform specific tasks within the broader code analysis pipeline.",
    "children_ids": [
        "fenec:python_parser:visitors:base_code_block_visitor.py__*__MODULE__*__STANDALONE_BLOCK-1",
        "fenec:python_parser:visitors:base_code_block_visitor.py__*__MODULE__*__CLASS-BaseVisitor"
    ]
}