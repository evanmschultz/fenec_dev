{
    "function_name": "process_class_def",
    "docstring": "Processes a libcst.ClassDef node to build a class model.\n\nExtracts various components of a class definition such as its docstring, code content, base classes, decorators, and keywords,\nand updates the provided ClassModelBuilder with these details.\n\nArgs:\n    - node (libcst.ClassDef): The class definition node from the CST.\n    - position_data (PositionData): Positional data for the class in the source code.\n    - builder (ClassModelBuilder): The builder used to construct the class model.\n\nExample:\n    ```Python\n    class_builder = ClassModelBuilder(id=\"class1\", ...)\n    process_class_def(class_node, position_data, class_builder)\n    # Processes the class definition and updates the class builder.\n    ```",
    "decorators": null,
    "parameters": null,
    "returns": "None",
    "is_method": false,
    "is_async": false,
    "id": "fenec:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-process_class_def",
    "file_path": "fenec/python_parser/visitors/node_processing/class_def_functions.py",
    "parent_id": "fenec:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 10,
    "end_line_num": 51,
    "code_content": "\n\ndef process_class_def(\n    node: libcst.ClassDef,\n    position_data: PositionData,\n    builder: ClassModelBuilder,\n) -> None:\n    \"\"\"\n    Processes a libcst.ClassDef node to build a class model.\n\n    Extracts various components of a class definition such as its docstring, code content, base classes, decorators, and keywords,\n    and updates the provided ClassModelBuilder with these details.\n\n    Args:\n        - node (libcst.ClassDef): The class definition node from the CST.\n        - position_data (PositionData): Positional data for the class in the source code.\n        - builder (ClassModelBuilder): The builder used to construct the class model.\n\n    Example:\n        ```Python\n        class_builder = ClassModelBuilder(id=\"class1\", ...)\n        process_class_def(class_node, position_data, class_builder)\n        # Processes the class definition and updates the class builder.\n        ```\n    \"\"\"\n\n    docstring: str | None = node.get_docstring()\n    code_content: str = common_functions.extract_code_content(node)\n    bases: list[str] | None = _extract_bases(node.bases)\n    keywords: list[ClassKeywordModel] | None = _extract_keywords(node.keywords)\n    decorators: list[DecoratorModel] | None = common_functions.extract_decorators(\n        node.decorators\n    )\n\n    (\n        builder.set_docstring(docstring)\n        .set_code_content(code_content)\n        .set_start_line_num(position_data.start)\n        .set_end_line_num(position_data.end)\n    )\n    builder.set_bases(bases).set_decorators(decorators).set_keywords(keywords)\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "fenec:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-_extract_bases"
        },
        {
            "code_block_id": "fenec:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-_extract_keywords"
        },
        {
            "import_names": [
                {
                    "name": "ClassKeywordModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DecoratorModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassKeywordModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DecoratorModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "fenec.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": null,
                    "local_block_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "fenec.python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "fenec.python_parser.visitors.node_processing.common_functions",
                    "as_name": "common_functions",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "PositionData",
                    "as_name": null,
                    "local_block_id": "fenec:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData"
                }
            ],
            "imported_from": "fenec.utilities.processing_context",
            "import_module_type": "LOCAL",
            "local_module_id": "fenec:utilities:processing_context.py__*__MODULE"
        }
    ],
    "summary": "This code is a crucial component of a static code analysis or documentation generation framework, specifically designed to process class definition nodes from a Concrete Syntax Tree (CST) using the `libcst` library. Its primary purpose is to construct a detailed class model by extracting and organizing various elements of a class definition, such as its docstring, code content, base classes, decorators, and keywords, and updating a `ClassModelBuilder` instance with these details. Key components include the `process_class_def` function, which serves as the main method for processing class nodes; it utilizes helper functions like `common_functions.extract_code_content`, `_extract_bases`, `_extract_keywords`, and `common_functions.extract_decorators` to extract specific attributes of the class. The implementation involves parsing the class node to retrieve its docstring using `node.get_docstring()`, extracting code content and decorators through utility functions, and gathering base classes and keywords with dedicated extraction functions. The `ClassModelBuilder` is then updated with these extracted elements, including setting the start and end line numbers from the `PositionData`, which provides positional context within the source code. The technical stack includes the `libcst` library, which is essential for CST manipulation and allows for precise parsing and analysis of Python code structures. This code fits into a larger system by interacting with other components responsible for parsing and modeling different code elements, contributing to a comprehensive understanding of the codebase. It plays a significant role in enabling static analysis tools to generate detailed documentation or perform code quality assessments by providing a structured representation of class definitions. This structured representation is vital for tools that aim to enhance code readability, maintainability, and compliance with coding standards, thereby supporting developers in managing complex codebases effectively.",
    "children_ids": []
}