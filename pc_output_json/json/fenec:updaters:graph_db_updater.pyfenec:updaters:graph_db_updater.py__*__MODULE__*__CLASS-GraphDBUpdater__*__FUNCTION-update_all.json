{
    "function_name": "update_all",
    "docstring": "Updates all the models for a project using the graph database with multi-pass summarization support.\n\nArgs:\n    - num_passes (int): Number of summarization passes to perform. Must be either 1 or 3. Default is 1.\n\nNote:\n    This method will delete all the existing collections in the graph database, summarize every code block in the project,\n    and save the new models in the graph database and as JSON. Use with caution as it is expensive with respect to time, resources,\n    and money.\n\nReturns:\n    - `chroma_collection_manager` (ChromaDBCollectionManager): The ChromaDB collection manager.\n\nRaises:\n    - `Exception`: If no finalized models are returned from summarization.\n    - `ValueError`: If num_passes is not 1 or 3.\n\nExample:\n    ```Python\n    graph_updater = GraphDBUpdater(directory, output_directory)\n\n    # Update all the models for the project with multi-pass summarization and setup Chroma.\n    chroma_manager = graph_updater.update_all(num_passes=3)\n    ```",
    "decorators": null,
    "parameters": null,
    "returns": "ChromaCollectionManager",
    "is_method": true,
    "is_async": false,
    "id": "fenec:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater__*__FUNCTION-update_all",
    "file_path": "fenec/updaters/graph_db_updater.py",
    "parent_id": "fenec:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater",
    "block_type": "FUNCTION",
    "start_line_num": 172,
    "end_line_num": 232,
    "code_content": "\ndef update_all(self, num_passes: int = 1) -> ChromaCollectionManager:\n    \"\"\"\n        Updates all the models for a project using the graph database with multi-pass summarization support.\n\n        Args:\n            - num_passes (int): Number of summarization passes to perform. Must be either 1 or 3. Default is 1.\n\n        Note:\n            This method will delete all the existing collections in the graph database, summarize every code block in the project,\n            and save the new models in the graph database and as JSON. Use with caution as it is expensive with respect to time, resources,\n            and money.\n\n        Returns:\n            - `chroma_collection_manager` (ChromaDBCollectionManager): The ChromaDB collection manager.\n\n        Raises:\n            - `Exception`: If no finalized models are returned from summarization.\n            - `ValueError`: If num_passes is not 1 or 3.\n\n        Example:\n            ```Python\n            graph_updater = GraphDBUpdater(directory, output_directory)\n\n            # Update all the models for the project with multi-pass summarization and setup Chroma.\n            chroma_manager = graph_updater.update_all(num_passes=3)\n            ```\n        \"\"\"\n    if num_passes not in [1, 3]:\n        raise ValueError(\"Number of passes must be either 1 or 3\")\n\n    self.graph_connector.delete_all_collections()\n    self.graph_connector.ensure_collections()\n\n    process_files_return: VisitorManagerProcessFilesReturn = (\n        self._visit_and_parse_files(self.directory)\n    )\n    models_tuple: tuple[ModelType, ...] = process_files_return.models_tuple\n\n    self._upsert_models_to_graph_db(models_tuple)\n\n    finalized_models: list[ModelType] | None = self._map_and_summarize_models(\n        models_tuple, num_passes\n    )\n\n    if not finalized_models:\n        raise Exception(\"No finalized models returned from summarization.\")\n\n    json_manager = JSONHandler(\n        self.directory,\n        process_files_return.directory_modules,\n        self.output_directory,\n    )\n    self._save_json(finalized_models, json_manager)\n    self._upsert_models_to_graph_db(tuple(finalized_models))\n\n    current_commit_hash: str = git_updater.get_current_commit_hash()\n    self._save_last_commit_hash(current_commit_hash)\n\n    return chroma_setup.setup_chroma_with_update(finalized_models)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "The `update_all` method is a pivotal function within a project management tool designed to update and maintain model representations in a graph database, utilizing a multi-pass summarization approach to ensure comprehensive and current model data. Its primary purpose is to delete existing collections in the graph database, parse and summarize code blocks from a specified directory, and store the updated models both in the graph database and as JSON files. This process is resource-intensive, necessitating careful consideration of computational and financial costs. Key components include: the `update_all` method itself, which orchestrates the entire update process; `graph_connector`, which manages the lifecycle of graph database collections; `VisitorManagerProcessFilesReturn`, which handles the results of file processing; `JSONHandler`, which manages the serialization of models into JSON format; and `chroma_setup`, which configures the ChromaDB collection manager for the updated models.\n\nThe implementation begins by validating the `num_passes` argument, ensuring it is either 1 or 3, as these are the only supported options for summarization passes. It then proceeds to clear existing data by invoking `delete_all_collections` and `ensure_collections` on the `graph_connector`. The method `_visit_and_parse_files` is called to traverse the specified directory, extracting models into a tuple. These models are initially upserted into the graph database. The core summarization logic is handled by `_map_and_summarize_models`, which processes the models according to the specified number of passes. If no models are finalized, an exception is raised, indicating a failure in the summarization process. Once models are finalized, they are serialized into JSON using the `JSONHandler`, and the updated models are again upserted into the graph database. The method also tracks the current state of the project by retrieving the current commit hash via a Git utility, ensuring version control is maintained. Finally, the method returns a `ChromaDBCollectionManager` instance, configured with the updated models through `chroma_setup`.\n\nThe technical stack includes a graph database for efficient model storage and retrieval, JSON for data serialization, and Git for version control, ensuring that updates are consistent with the project's current state. In the broader context of the system, this method is integral to maintaining the integrity and currency of model data within the project management tool. It interacts with file processing components, JSON management utilities, and version control systems, ensuring that the project remains synchronized with its underlying data representations. This integration facilitates efficient data retrieval and analysis, supporting the tool's role in managing complex projects with dynamic codebases. The method's design reflects a robust approach to handling large-scale data updates, leveraging both graph database capabilities and JSON serialization to maintain a comprehensive and accessible model repository.",
    "children_ids": []
}