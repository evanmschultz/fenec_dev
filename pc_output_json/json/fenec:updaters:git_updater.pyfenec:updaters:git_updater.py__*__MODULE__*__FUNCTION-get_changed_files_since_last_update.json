{
    "function_name": "get_changed_files_since_last_update",
    "docstring": "Returns a list of Python files that have been changed since the last update.\n\nArgs:\n    `last_commit_hash` (str): The commit hash of the last update.\n\nReturns:\n    `list[str]`: A list of changed Python file paths.",
    "decorators": null,
    "parameters": null,
    "returns": "list[str]",
    "is_method": false,
    "is_async": false,
    "id": "fenec:updaters:git_updater.py__*__MODULE__*__FUNCTION-get_changed_files_since_last_update",
    "file_path": "fenec/updaters/git_updater.py",
    "parent_id": "fenec:updaters:git_updater.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 2,
    "end_line_num": 22,
    "code_content": "\n\ndef get_changed_files_since_last_update(last_commit_hash: str) -> list[str]:\n    \"\"\"\n    Returns a list of Python files that have been changed since the last update.\n\n    Args:\n        `last_commit_hash` (str): The commit hash of the last update.\n\n    Returns:\n        `list[str]`: A list of changed Python file paths.\n    \"\"\"\n    git_command = f\"git diff --name-only {last_commit_hash} HEAD\"\n\n    result = subprocess.run(git_command, shell=True, capture_output=True, text=True)\n    if result.returncode != 0:\n        raise Exception(f\"Git command failed: {result.stderr}\")\n\n    changed_files = result.stdout.strip().split(\"\\n\")\n    return [file for file in changed_files if file.endswith(\".py\")]\n",
    "important_comments": null,
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "subprocess",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        }
    ],
    "summary": "This code is a utility function designed to identify Python files that have been modified since a specified commit in a Git repository, serving as a critical tool for tracking changes in Python scripts. Its primary purpose is to streamline processes such as code review, testing, and deployment by ensuring that only relevant files are considered, thereby enhancing efficiency and accuracy in development workflows. The main function, `get_changed_files_since_last_update`, takes a `last_commit_hash` as an argument and returns a list of paths to Python files that have changed since that commit. It constructs a Git command to list all files modified since the specified commit and executes this command using Python's `subprocess.run` method. The output of this command is captured, processed, and filtered to include only files with a `.py` extension, indicating they are Python scripts.\n\nThe implementation leverages Python's `subprocess` module to interact with the system's shell, executing Git commands and capturing their output. This approach allows the function to dynamically retrieve information from the version control system without requiring additional dependencies beyond Python's standard library. The use of `subprocess.run` with parameters such as `shell=True`, `capture_output=True`, and `text=True` ensures that the command is executed in a shell environment, with its output captured as a string for further processing. The function then processes this output by stripping whitespace and splitting the result into a list of file paths, filtering for those that end with the `.py` extension.\n\nThe technical stack is minimalistic, relying solely on Python's standard library, specifically the `subprocess` module, to facilitate interaction with the system's shell and Git. This ensures broad compatibility and ease of integration into various environments without the need for external libraries, making it a versatile tool for different development setups.\n\nIn the context of a larger system, this function can be integrated into a continuous integration (CI) pipeline, where it plays a pivotal role in identifying which Python files need to be tested or reviewed following code changes. It interacts with version control systems to provide up-to-date information on file modifications and can be used in conjunction with other components that handle code analysis, testing, or deployment automation. By focusing on Python files, it ensures that the CI pipeline remains efficient and targeted, reducing unnecessary processing of unchanged files. This utility is a critical component in maintaining code quality and facilitating smooth development workflows in projects that rely heavily on Python, ensuring that changes are tracked accurately and efficiently.",
    "children_ids": []
}