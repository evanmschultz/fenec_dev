{
    "class_name": "VisitorManagerProcessFilesReturn",
    "decorators": [
        {
            "content": "@dataclass",
            "decorator_name": "dataclass",
            "decorator_args": null
        }
    ],
    "bases": null,
    "docstring": "Represents the return value of the VisitorManager.process_files() method.\n\nAttributes:\n    - models_tuple (tuple[ModuleModel, ...]): A tuple of ModuleModel objects representing the parsed modules.\n    - directory_modules (dict[str, list[str]]): A dictionary mapping directory paths to lists of module names.\n        This is used to keep track of the modules present in each directory.",
    "keywords": null,
    "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManagerProcessFilesReturn",
    "file_path": "postcode/python_parser/visitor_manager/visitor_manager.py",
    "parent_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 57,
    "end_line_num": 72,
    "code_content": "\n\n@dataclass\nclass VisitorManagerProcessFilesReturn:\n    \"\"\"\n    Represents the return value of the VisitorManager.process_files() method.\n\n    Attributes:\n        - models_tuple (tuple[ModuleModel, ...]): A tuple of ModuleModel objects representing the parsed modules.\n        - directory_modules (dict[str, list[str]]): A dictionary mapping directory paths to lists of module names.\n            This is used to keep track of the modules present in each directory.\n    \"\"\"\n\n    models_tuple: tuple[ModelType, ...]\n    directory_modules: dict[str, list[str]]\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager"
        },
        {
            "import_names": [
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "dataclass",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "dataclasses",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ModelType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.types.postcode",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:types:postcode.py__*__MODULE"
        }
    ],
    "summary": "\nThe code defines a `dataclass`, `VisitorManagerProcessFilesReturn`, which is designed to encapsulate the results of a `VisitorManager` class's `process_files()` method. It includes a `models_tuple` attribute, a tuple of `ModelType` instances representing the parsed modules, and a `directory_modules` attribute, a dictionary for tracking the modules within each directory by mapping directory paths to lists of module names. The `dataclass` decorator from the Python standard library is utilized to streamline the creation of this return type by automatically adding generated special methods such as `__init__` and `__repr__` for the class.",
    "children_ids": []
}