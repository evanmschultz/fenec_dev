{
    "function_name": "extract_type_annotation",
    "docstring": "Extracts the type annotation from a node.\n\nProcesses a libcst.CSTNode to extract the type annotation, if present.\nIt handles various forms of type annotations, including generics and unions.\n\nArgs:\n    - node (libcst.CSTNode): The node to extract the type annotation from.\n\nReturns:\n    - str | None: The extracted type annotation as a string, or None if no type annotation is found.\n\nExample:\n    ```Python\n    extract_type_annotation(some_cst_node)\n    # Returns the type annotation as a string, or None if not present.\n    ```",
    "decorators": null,
    "parameters": null,
    "returns": "str | None",
    "is_method": false,
    "is_async": false,
    "id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-extract_type_annotation",
    "file_path": "postcode/python_parser/visitors/node_processing/common_functions.py",
    "parent_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 180,
    "end_line_num": 206,
    "code_content": "\n\ndef extract_type_annotation(node: libcst.CSTNode) -> str | None:\n    \"\"\"\n    Extracts the type annotation from a node.\n\n    Processes a libcst.CSTNode to extract the type annotation, if present.\n    It handles various forms of type annotations, including generics and unions.\n\n    Args:\n        - node (libcst.CSTNode): The node to extract the type annotation from.\n\n    Returns:\n        - str | None: The extracted type annotation as a string, or None if no type annotation is found.\n\n    Example:\n        ```Python\n        extract_type_annotation(some_cst_node)\n        # Returns the type annotation as a string, or None if not present.\n        ```\n    \"\"\"\n\n    annotation: libcst.Annotation | None = _get_node_annotation(node)\n    if annotation and isinstance(annotation, libcst.Annotation):\n        return _process_type_annotation_expression(annotation.annotation)\n    return None\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-_get_node_annotation"
        },
        {
            "code_block_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-_process_type_annotation_expression"
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "summary": "\nThe `extract_type_annotation` function uses the `libcst` library to extract and return a string representation of a type annotation from a `libcst.CSTNode`, handling complex types like generics and unions, or returns `None` if no annotation is present.",
    "children_ids": []
}