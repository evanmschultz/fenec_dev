{
    "function_name": "_update_metadata_or_documents_by_ids",
    "docstring": "Updates the metadata or documents of specific entries in the collection by their ids.\n\nArgs:\n    - ids (list[str]): List of ids of the entries to be updated.\n    - metadatas (list[Mapping[str, Any]] | None): List of metadata updates corresponding to the ids.\n    - documents (list[str] | None): List of document updates corresponding to the ids.\n\nRaises:\n    - ValueError: If neither metadatas nor documents are provided.\n    - ValueError: If the length of ids and documents don't match.\n    - ValueError: If the length of ids and metadatas don't match.\n    - ValueError: If the length of ids, metadatas, and documents don't match.\n\nNotes:\n    - As of now, ChromaDB doesn't raise an exception if you provide an id that doesn't exist.\n\nExamples:\n    ```Python\n    # Update metadata and documents for specific ids\n    ids_to_update = ['id1', 'id2']\n    metadata_updates = [{\"key1\": \"value1\"}, {\"key2\": \"value2\"}]\n    document_updates = [\"new document 1\", \"new document 2\"]\n    collection_manager.update_metadata_or_documents_by_ids(ids_to_update, metadata_updates, document_updates)\n    ```",
    "decorators": null,
    "parameters": null,
    "returns": "None",
    "is_method": true,
    "is_async": false,
    "id": "postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaDBCollectionManager__*__FUNCTION-_update_metadata_or_documents_by_ids",
    "file_path": "postcode/databases/chroma/chromadb_collection_manager.py",
    "parent_id": "postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaDBCollectionManager",
    "block_type": "FUNCTION",
    "start_line_num": 312,
    "end_line_num": 384,
    "code_content": "\ndef _update_metadata_or_documents_by_ids(\n    self,\n    ids: list[str],\n    metadatas: list[Mapping[str, str | int | float | bool]] | None = None,\n    documents: list[str] | None = None,\n) -> None:\n    \"\"\"\n        Updates the metadata or documents of specific entries in the collection by their ids.\n\n        Args:\n            - ids (list[str]): List of ids of the entries to be updated.\n            - metadatas (list[Mapping[str, Any]] | None): List of metadata updates corresponding to the ids.\n            - documents (list[str] | None): List of document updates corresponding to the ids.\n\n        Raises:\n            - ValueError: If neither metadatas nor documents are provided.\n            - ValueError: If the length of ids and documents don't match.\n            - ValueError: If the length of ids and metadatas don't match.\n            - ValueError: If the length of ids, metadatas, and documents don't match.\n\n        Notes:\n            - As of now, ChromaDB doesn't raise an exception if you provide an id that doesn't exist.\n\n        Examples:\n            ```Python\n            # Update metadata and documents for specific ids\n            ids_to_update = ['id1', 'id2']\n            metadata_updates = [{\"key1\": \"value1\"}, {\"key2\": \"value2\"}]\n            document_updates = [\"new document 1\", \"new document 2\"]\n            collection_manager.update_metadata_or_documents_by_ids(ids_to_update, metadata_updates, document_updates)\n            ```\n        \"\"\"\n\n    if not metadatas and not documents:\n        raise ValueError(\"You must provide either metadatas or documents.\")\n    if not metadatas and documents:\n        if len(ids) != len(documents):\n            raise ValueError(\"The length of ids and documents must match.\")\n    if metadatas and not documents:\n        if len(ids) != len(metadatas):\n            raise ValueError(\"The length of ids and metadatas must match.\")\n    if metadatas and documents:\n        if len(ids) != len(metadatas) != len(documents):\n            raise ValueError(\n                \"The length of ids, metadatas, and documents must match.\"\n            )\n    for index, id in enumerate(ids):\n        if not self.collection.get(id):\n            logging.error(\n                f\"Id {id} does not exist in collection {self.collection.name}.\"\n            )\n            ids.pop(index)\n            if metadatas:\n                popped_metadata = metadatas.pop(index)\n                if popped_metadata:\n                    logging.warning(\n                        f\"Removing metadata at index {index} from update.\"\n                    )\n            if documents:\n                popped_document = documents.pop(index)\n                if popped_document:\n                    logging.warning(\n                        f\"Removing document at index {index} from update.\"\n                    )\n\n    if not ids:\n        logging.warning(\"All updates failed.\")\n        return None\n    else:\n        logging.info(f\"Updating collection {self.collection.name} with ids {ids}.\")\n        self.collection.update(ids=ids, metadatas=metadatas, documents=documents)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaDBCollectionManager__*__FUNCTION-_update_metadata_or_documents_by_ids\n\n        None, None, None\n        ",
    "children_ids": []
}