{
    "function_name": "_process_type_annotation_expression",
    "docstring": "Process the type annotation expression and return a string representation recursively.",
    "decorators": null,
    "parameters": null,
    "returns": "str",
    "is_method": false,
    "is_async": false,
    "id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-_process_type_annotation_expression",
    "file_path": "postcode/python_parser/visitors/node_processing/common_functions.py",
    "parent_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 199,
    "end_line_num": 213,
    "code_content": "\n\ndef _process_type_annotation_expression(expression: libcst.BaseExpression) -> str:\n    \"\"\"Process the type annotation expression and return a string representation recursively.\"\"\"\n\n    if isinstance(expression, libcst.Subscript):\n        return _extract_generic_types_from_subscript(expression)\n    elif isinstance(expression, libcst.BinaryOperation):\n        left: str = _process_type_annotation_expression(expression.left)\n        right: str = _process_type_annotation_expression(expression.right)\n        return f\"{left} | {right}\"\n    elif isinstance(expression, libcst.Name):\n        return expression.value\n    return \"\"\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-_extract_generic_types_from_subscript"
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "summary": "\nSummary:\n\n        postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-_process_type_annotation_expression\n\n        None, None, \nimport libcst\n        ",
    "children_ids": []
}