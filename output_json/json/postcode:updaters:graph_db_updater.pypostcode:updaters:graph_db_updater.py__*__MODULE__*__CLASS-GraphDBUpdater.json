{
    "class_name": "GraphDBUpdater",
    "decorators": null,
    "bases": null,
    "docstring": "Graph DB based updater.\n\nUpdates parses the files in a directory, saves the models as JSON, in the graph database, and in a ChromaDB collection.\n\nArgs:\n    - directory (str): The directory of the project to update.\n    - output_directory (str): The directory to save the JSON files.\n    - graph_connector (ArangoDBConnector): The ArangoDB connector to use for connecting to the graph database.\n        - default: ArangoDBConnector() - instantiates a new ArangoDBConnector with its default values\n\nExample:\n    ```Python\n    from postcode.databases.arangodb.arangodb_connector import ArangoDBConnector\n    from postcode.updaters.graph_db_updater import GraphDBUpdater\n\n    # Create the ArangoDB connector.\n    arango_connector = ArangoDBConnector()\n\n    # Create the GraphDBUpdater.\n    graph_updater = GraphDBUpdater(directory, output_directory, arango_connector)\n\n    # Update all the models for the project and setup Chroma.\n    chroma__collection_manager = graph_updater.update_all()\n    ```",
    "keywords": null,
    "id": "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater",
    "file_path": "postcode/updaters/graph_db_updater.py",
    "parent_id": "postcode:updaters:graph_db_updater.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 26,
    "end_line_num": 182,
    "code_content": "\n\nclass GraphDBUpdater:\n    \"\"\"\n    Graph DB based updater.\n\n    Updates parses the files in a directory, saves the models as JSON, in the graph database, and in a ChromaDB collection.\n\n    Args:\n        - directory (str): The directory of the project to update.\n        - output_directory (str): The directory to save the JSON files.\n        - graph_connector (ArangoDBConnector): The ArangoDB connector to use for connecting to the graph database.\n            - default: ArangoDBConnector() - instantiates a new ArangoDBConnector with its default values\n\n    Example:\n        ```Python\n        from postcode.databases.arangodb.arangodb_connector import ArangoDBConnector\n        from postcode.updaters.graph_db_updater import GraphDBUpdater\n\n        # Create the ArangoDB connector.\n        arango_connector = ArangoDBConnector()\n\n        # Create the GraphDBUpdater.\n        graph_updater = GraphDBUpdater(directory, output_directory, arango_connector)\n\n        # Update all the models for the project and setup Chroma.\n        chroma__collection_manager = graph_updater.update_all()\n        ```\n    \"\"\"\n\n    def __init__(\n        self,\n        directory: str,\n        output_directory: str,\n        graph_connector: ArangoDBConnector = ArangoDBConnector(),\n    ) -> None:\n        self.directory: str = directory\n        self.output_directory: str = output_directory\n        self.graph_connector: ArangoDBConnector = graph_connector\n\n        self.graph_manager = ArangoDBManager(graph_connector)\n\n    def update_all(self) -> ChromaCollectionManager:\n        \"\"\"\n        Updates all the models for a project using the graph database.\n\n        Note:\n            This method will delete all the existing collections in the graph database, summarize every code block in the project,\n            and save the new models in the graph database and as JSON. Use with caution as it is expensive with respect to time, resources,\n            and money.\n\n        Args:\n            - directory (str): The directory of the project to update.\n            - output_directory (str): The directory to save the JSON files.\n\n        Returns:\n            - chroma_collection_manager (ChromaDBCollectionManager): The ChromaDB collection manager.\n\n        Raises:\n            - Exception: If no finalized models are returned from summarization.\n\n        Example:\n            ```Python\n            graph_updater = GraphDBUpdater(directory, output_directory)\n\n            # Update all the models for the project and setup Chroma.\n            chroma_manager = graph_updater.update_all()\n            ```\n        \"\"\"\n\n        self.graph_connector.delete_all_collections()\n        self.graph_connector.ensure_collections()\n\n        process_files_return: VisitorManagerProcessFilesReturn = (\n            self._visit_and_parse_files(self.directory)\n        )\n        models_tuple: tuple[ModelType, ...] = process_files_return.models_tuple\n\n        self._upsert_models_to_graph_db(models_tuple)\n\n        finalized_models: list[ModelType] | None = self._map_and_summarize_models(\n            models_tuple\n        )\n\n        if not finalized_models:\n            raise Exception(\"No finalized models returned from summarization.\")\n\n        json_manager = JSONHandler(\n            self.directory,\n            process_files_return.directory_modules,\n            self.output_directory,\n        )\n        self._save_json(finalized_models, json_manager)\n        self._upsert_models_to_graph_db(tuple(finalized_models))\n\n        return chroma_setup.setup_chroma_with_update(finalized_models)\n\n    def _visit_and_parse_files(\n        self, directory: str\n    ) -> VisitorManagerProcessFilesReturn:\n        \"\"\"Visits and parses the files in the directory.\"\"\"\n\n        logging.info(\"Starting the directory parsing.\")\n        visitor_manager = VisitorManager(directory)\n\n        return visitor_manager.process_files()\n\n    def _get_module_ids(self, models_tuple: tuple[ModelType, ...]) -> list[str]:\n        \"\"\"Returns a list of module IDs from the models tuple.\"\"\"\n\n        return [model.id for model in models_tuple if isinstance(model, ModuleModel)]\n\n    def _upsert_models_to_graph_db(self, models_tuple: tuple[ModelType, ...]) -> None:\n        \"\"\"Upserts the models to the graph database.\"\"\"\n\n        self.graph_manager.upsert_models(\n            list(models_tuple)\n        ).process_imports_and_dependencies().get_or_create_graph()\n\n    def _save_json(self, models: list[ModelType], json_manager: JSONHandler) -> None:\n        \"\"\"Saves the models as JSON.\"\"\"\n\n        logging.info(\"Saving models as JSON\")\n        for model in models:\n            if isinstance(model, DirectoryModel):\n                output_path: str = model.id\n\n            else:\n                output_path: str = model.file_path + model.id\n            json_manager.save_model_as_json(model, output_path)\n\n        json_manager.save_visited_directories()\n        logging.info(\"JSON save complete\")\n\n    def _map_and_summarize_models(\n        self,\n        models_tuple: tuple[ModelType, ...],\n    ) -> list[ModelType] | None:\n        \"\"\"Maps and summarizes the models.\"\"\"\n\n        module_ids: list[str] = self._get_module_ids(models_tuple)\n        summarization_mapper = SummarizationMapper(\n            module_ids, models_tuple, self.graph_manager\n        )\n        client = OpenAI(max_retries=4)\n        summarizer = OpenAISummarizer(client=client)\n        summarization_manager = GraphDBSummarizationManager(\n            models_tuple, summarization_mapper, summarizer, self.graph_manager\n        )\n\n        finalized_models: list[\n            ModelType\n        ] | None = summarization_manager.create_summaries_and_return_updated_models()\n        logging.info(\"Summarization complete\")\n\n        return finalized_models if finalized_models else None\n",
    "important_comments": null,
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "VisitorManager",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "VisitorManagerProcessFilesReturn",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.python_parser.visitor_manager.visitor_manager",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "VisitorManager",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "VisitorManagerProcessFilesReturn",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.python_parser.visitor_manager.visitor_manager",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "OpenAI",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "GraphDBSummarizationManager",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager"
                }
            ],
            "imported_from": "postcode.ai_services.summarizer.graph_db_summarization_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "OpenAISummarizer",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:summarizer:openai_summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer"
                }
            ],
            "imported_from": "postcode.ai_services.summarizer.openai_summarizer",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:summarizer:openai_summarizer.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "SummarizationMapper",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE__*__CLASS-SummarizationMapper"
                }
            ],
            "imported_from": "postcode.ai_services.summarizer.summarization_mapper",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ArangoDBConnector",
                    "as_name": null,
                    "local_block_id": "postcode:databases:arangodb:arangodb_connector.py__*__MODULE__*__CLASS-ArangoDBConnector"
                }
            ],
            "imported_from": "postcode.databases.arangodb.arangodb_connector",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:arangodb:arangodb_connector.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ArangoDBManager",
                    "as_name": null,
                    "local_block_id": "postcode:databases:arangodb:arangodb_manager.py__*__MODULE__*__CLASS-ArangoDBManager"
                }
            ],
            "imported_from": "postcode.databases.arangodb.arangodb_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:arangodb:arangodb_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ChromaCollectionManager",
                    "as_name": null,
                    "local_block_id": "postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaCollectionManager"
                }
            ],
            "imported_from": "postcode.databases.chroma.chromadb_collection_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "postcode.databases.chroma.chroma_setup",
                    "as_name": "chroma_setup",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:chroma:chroma_setup.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "JSONHandler",
                    "as_name": null,
                    "local_block_id": "postcode:json_management:json_handler.py__*__MODULE__*__CLASS-JSONHandler"
                }
            ],
            "imported_from": "postcode.json_management.json_handler",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:json_management:json_handler.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModelType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.types.postcode",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:types:postcode.py__*__MODULE"
        }
    ],
    "summary": "\n\nThe `GraphDBUpdater` class in Python is designed to manage the updating of project models within a graph database environment. It initializes with directories for project files and JSON output, and a connection to an ArangoDB graph database through the `ArangoDBConnector`. The `update_all` method serves as the central function, orchestrating the update process by first clearing the database, then parsing and summarizing project files, and finally saving the updated models both in the database and as JSON files. It leverages several internal methods: `_visit_and_parse_files` to parse files and return results for monitoring, `_get_module_ids` to filter model IDs, `_upsert_models_to_graph_db` to insert or update models in the database, `_save_json` to save models as JSON, and `_map_and_summarize_models` to summarize models using OpenAI's summarization capabilities. The process is safeguarded by an exception if no models are returned post-summarization, and it concludes by setting up a Chroma environment with the updated models. The class ensures a comprehensive update cycle, from database cleanup to Chroma configuration, for project models.",
    "children_ids": [
        "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater__*__FUNCTION-__init__",
        "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater__*__FUNCTION-update_all",
        "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater__*__FUNCTION-_visit_and_parse_files",
        "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater__*__FUNCTION-_get_module_ids",
        "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater__*__FUNCTION-_upsert_models_to_graph_db",
        "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater__*__FUNCTION-_save_json",
        "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater__*__FUNCTION-_map_and_summarize_models"
    ]
}