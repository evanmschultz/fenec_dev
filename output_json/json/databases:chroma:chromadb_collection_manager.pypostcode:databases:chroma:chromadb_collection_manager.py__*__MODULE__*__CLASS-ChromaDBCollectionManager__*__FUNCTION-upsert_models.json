{
    "function_name": "upsert_models",
    "docstring": "Loads or updates the embeddings of the provided module models into the collection.\n\nThe Pydantic models are converted to a dictionary with a format that ChromaDB can use, then the ids, documents, and metadatas\nare added to their respective lists. The lists are then either added to or updated in the collection depending on whether or\nnot the code blocks were in the the collection to begin with.\n\nArgs:\n    - module_models (tuple[ModuleModel, ...]): The module models to load or update into the collection.\n\nExamples:\n    ```Python\n    # Upsert module models into the collection\n    module_models = (module_model1, module_model2)\n    collection_manager.upsert_models(module_models)\n    ```",
    "decorators": null,
    "parameters": null,
    "returns": "None",
    "is_method": true,
    "is_async": false,
    "id": "postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaDBCollectionManager__*__FUNCTION-upsert_models",
    "file_path": "postcode/databases/chroma/chromadb_collection_manager.py",
    "parent_id": "postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaDBCollectionManager",
    "block_type": "FUNCTION",
    "start_line_num": 457,
    "end_line_num": 503,
    "code_content": "\ndef upsert_models(self, models: tuple[ModelType, ...]) -> None:\n    \"\"\"\n        Loads or updates the embeddings of the provided module models into the collection.\n\n        The Pydantic models are converted to a dictionary with a format that ChromaDB can use, then the ids, documents, and metadatas\n        are added to their respective lists. The lists are then either added to or updated in the collection depending on whether or\n        not the code blocks were in the the collection to begin with.\n\n        Args:\n            - module_models (tuple[ModuleModel, ...]): The module models to load or update into the collection.\n\n        Examples:\n            ```Python\n            # Upsert module models into the collection\n            module_models = (module_model1, module_model2)\n            collection_manager.upsert_models(module_models)\n            ```\n        \"\"\"\n\n    ids: list[str] = []\n    documents: list[str] = []\n    metadatas: list[Mapping[str, str | int | float | bool]] = []\n\n    for model in models:\n        if model.summary:\n            ids.append(model.id)\n            documents.append(model.summary)\n            metadatas.append(model.convert_to_metadata())\n\n        # if model.children_ids:\n        #     for child in model.children_ids:\n        #         child_data: dict[str, Any] = self._recursively_gather_child_data(\n        #             child\n        #         )\n        #         ids.extend(child_data[\"ids\"])\n        #         documents.extend(child_data[\"documents\"])\n        #         metadatas.extend(child_data[\"metadatas\"])\n\n    logging.info(\n        f\"{self.collection.name} has {self.collection_embedding_count()} embeddings.\"\n    )\n    self._upsert_documents(ids=ids, documents=documents, metadatas=metadatas)\n    logging.info(\n        f\"After upsert {self.collection.name} has {self.collection_embedding_count()} embeddings.\"\n    )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaDBCollectionManager__*__FUNCTION-upsert_models\n\n        None, None, None\n        ",
    "children_ids": []
}