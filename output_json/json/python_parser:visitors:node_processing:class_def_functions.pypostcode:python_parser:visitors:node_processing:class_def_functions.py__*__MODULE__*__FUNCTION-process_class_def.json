{
    "function_name": "process_class_def",
    "docstring": "Processes a libcst.ClassDef node to build a class model.\n\nExtracts various components of a class definition such as its docstring, code content, base classes, decorators, and keywords, and updates the provided ClassModelBuilder with these details.\n\nArgs:\n    node (libcst.ClassDef): The class definition node from the CST.\n    position_data (PositionData): Positional data for the class in the source code.\n    builder (ClassModelBuilder): The builder used to construct the class model.\n\nExample:\n    >>> class_builder = ClassModelBuilder(id=\"class1\", ...)\n    >>> process_class_def(class_node, position_data, class_builder)\n    # Processes the class definition and updates the class builder.",
    "decorators": null,
    "parameters": null,
    "returns": "None",
    "is_method": false,
    "is_async": false,
    "id": "postcode:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-process_class_def",
    "file_path": "postcode/python_parser/visitors/node_processing/class_def_functions.py",
    "parent_id": "postcode:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 10,
    "end_line_num": 48,
    "code_content": "\n\ndef process_class_def(\n    node: libcst.ClassDef,\n    position_data: PositionData,\n    builder: ClassModelBuilder,\n) -> None:\n    \"\"\"\n    Processes a libcst.ClassDef node to build a class model.\n\n    Extracts various components of a class definition such as its docstring, code content, base classes, decorators, and keywords, and updates the provided ClassModelBuilder with these details.\n\n    Args:\n        node (libcst.ClassDef): The class definition node from the CST.\n        position_data (PositionData): Positional data for the class in the source code.\n        builder (ClassModelBuilder): The builder used to construct the class model.\n\n    Example:\n        >>> class_builder = ClassModelBuilder(id=\"class1\", ...)\n        >>> process_class_def(class_node, position_data, class_builder)\n        # Processes the class definition and updates the class builder.\n    \"\"\"\n\n    docstring: str | None = node.get_docstring()\n    code_content: str = common_functions.extract_code_content(node)\n    bases: list[str] | None = _extract_bases(node.bases)\n    keywords: list[ClassKeywordModel] | None = _extract_keywords(node.keywords)\n    decorators: list[DecoratorModel] | None = common_functions.extract_decorators(\n        node.decorators\n    )\n\n    (\n        builder.set_docstring(docstring)\n        .set_code_content(code_content)\n        .set_start_line_num(position_data.start)\n        .set_end_line_num(position_data.end)\n    )\n    builder.set_bases(bases).set_decorators(decorators).set_keywords(keywords)\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "postcode:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-_extract_bases"
        },
        {
            "code_block_id": "postcode:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-_extract_keywords"
        },
        {
            "import_names": [
                {
                    "name": "ClassKeywordModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DecoratorModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassKeywordModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "DecoratorModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "postcode.python_parser.visitors.node_processing.common_functions",
                    "as_name": "common_functions",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "PositionData",
                    "as_name": null,
                    "local_block_id": "postcode:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData"
                }
            ],
            "imported_from": "postcode.utilities.processing_context",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:utilities:processing_context.py__*__MODULE"
        }
    ],
    "summary": "\nSummary:\n\n        postcode:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-process_class_def\n\n        None, \nImported code block (postcode:python_parser:model_builders:class_model_builder.py__*__MODULE) code content:\n\n\nclass ClassModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a Python class.\n\n    This class extends BaseModelBuilder and is specialized for building a model of a Python class, capturing details such as decorators, base classes, documentation strings, class attributes, and class-specific keywords.\n\n    Attributes:\n        - class_attributes (ClassSpecificAttributes): An instance containing attributes specific to a class, like name, decorators, bases, etc.\n\n    Args:\n        - id (str): The unique identifier for the class model.\n        - class_name (str): The name of the class.\n        - parent_id (str): The identifier of the parent model (e.g., module or class containing this class).\n    \"\"\"\n\n    def __init__(\n        self, id: str, class_name: str, parent_id: str, file_path: str\n    ) -> None:\n        super().__init__(\n            id=id, block_type=BlockType.CLASS, parent_id=parent_id, file_path=file_path\n        )\n\n        self.class_attributes = ClassSpecificAttributes(\n            class_name=class_name,\n            decorators=None,\n            bases=None,\n            docstring=None,\n            keywords=None,\n        )\n\n    def set_decorators(\n        self, decorators: list[DecoratorModel] | None\n    ) -> \"ClassModelBuilder\":\n        \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\n        if decorators:\n            self.class_attributes.decorators = decorators\n        else:\n            self.class_attributes.decorators = None\n        return self\n\n    def set_bases(self, base_classes: list[str] | None) -> \"ClassModelBuilder\":\n        \"\"\"Sets the list of base classes to the class model.\"\"\"\n        self.class_attributes.bases = base_classes\n        return self\n\n    def set_docstring(self, docstring: str | None) -> \"ClassModelBuilder\":\n        \"\"\"Sets the docstring of the class in the model.\"\"\"\n        self.class_attributes.docstring = docstring\n        return self\n\n    # # TODO: Add attribute model\n    # def add_attribute(self, attribute) -> \"ClassModelBuilder\":\n    #     \"\"\"Adds an attribute of the class in the model.\"\"\"\n    #     if not self.class_attributes.attributes:\n    #         self.class_attributes.attributes = []\n    #     self.class_attributes.attributes.append(attribute)\n    #     return self\n\n    def set_keywords(\n        self, keyword_list: list[ClassKeywordModel] | None\n    ) -> \"ClassModelBuilder\":\n        \"\"\"Sets the list of keywords to the class model.\"\"\"\n        self.class_attributes.keywords = keyword_list\n        return self\n\n    def _get_class_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Gets the class specific attributes.\"\"\"\n        return self.class_attributes.model_dump()\n\n    @logging_decorator(message=\"Building ClassModel\")\n    def build(\n        self,\n    ) -> ClassModel:\n        \"\"\"Creates a ClassModel instance after building and setting the children models.\"\"\"\n        self.build_children()\n        self.set_children_ids()\n        return ClassModel(\n            **self._get_common_attributes(),\n            **self._get_class_specific_attributes(),\n        )\n\n\nImported code block (postcode:utilities:processing_context.py__*__MODULE) code content:\n\n\n@dataclass\nclass PositionData:\n    \"\"\"Positional data for a node in the syntax tree.\"\"\"\n\n    start: int\n    end: int\n\n, \nimport libcst\n        ",
    "children_ids": []
}