{
    "function_name": "_get_new_import_name_models",
    "docstring": "Returns a list of new ImportNameModel objects based on the given import names.\n\nArgs:\n    external_builder (ModuleModelBuilder): The external module builder.\n    import_names (list[str]): The list of import names.\n    import_model (ImportModel): The import model.\n\nReturns:\n    list[ImportNameModel]: The list of new ImportNameModel objects.",
    "decorators": null,
    "parameters": null,
    "returns": "list[ImportNameModel]",
    "is_method": true,
    "is_async": false,
    "id": "postcode:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-_get_new_import_name_models",
    "file_path": "postcode/python_parser/visitor_manager/import_and_dependency_updater.py",
    "parent_id": "postcode:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater",
    "block_type": "FUNCTION",
    "start_line_num": 214,
    "end_line_num": 252,
    "code_content": "\ndef _get_new_import_name_models(\n    self,\n    external_builder: ModuleModelBuilder,\n    import_names: list[str],\n    import_model: ImportModel,\n) -> list[ImportNameModel]:\n    \"\"\"\n        Returns a list of new ImportNameModel objects based on the given import names.\n\n        Args:\n            external_builder (ModuleModelBuilder): The external module builder.\n            import_names (list[str]): The list of import names.\n            import_model (ImportModel): The import model.\n\n        Returns:\n            list[ImportNameModel]: The list of new ImportNameModel objects.\n        \"\"\"\n\n    new_import_name_models: list = []\n    for child_builder in external_builder.child_builders:\n        for import_name in import_names:\n            child_builder_id_split: list[str] = child_builder.id.split(\"-\")\n\n            if import_name == child_builder_id_split[-1]:\n                for import_name_model in import_model.import_names:\n                    if import_name_model.name == import_name:\n                        new_import_name_model: ImportNameModel = (\n                            import_name_model.model_copy()\n                        )\n                        # if import_name_model.name == \"OpenAISummarizer\":\n                        #     print(f\"Found OpenAISummarizer: id\")\n\n                        new_import_name_model.local_block_id = child_builder.id\n                        new_import_name_models.append(new_import_name_model)\n                        break\n\n    return new_import_name_models\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportUpdater__*__FUNCTION-_get_new_import_name_models\n\n        None, None, None\n        ",
    "children_ids": []
}