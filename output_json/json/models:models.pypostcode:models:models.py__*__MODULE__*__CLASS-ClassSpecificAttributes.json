{
    "class_name": "ClassSpecificAttributes",
    "decorators": null,
    "bases": [
        "BaseModel"
    ],
    "docstring": "Class specific attributes.",
    "keywords": null,
    "id": "postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes",
    "file_path": "postcode/models/models.py",
    "parent_id": "postcode:models:models.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 232,
    "end_line_num": 272,
    "code_content": "\n\nclass ClassSpecificAttributes(BaseModel):\n    \"\"\"Class specific attributes.\"\"\"\n\n    class_name: str = Field(min_length=1)\n    decorators: list[DecoratorModel] | None = None\n    bases: list[str] | None = None\n    docstring: str | None = None\n    keywords: list[ClassKeywordModel] | None = None\n    # attributes: list[dict] | None = None\n\n    def _convert_decorators_to_metadata(self) -> str:\n        \"\"\"Converts the decorators to a metadata string.\"\"\"\n        decorators_str: str = self.model_dump_json() if self.decorators else \"\"\n        return f\"{decorators_str}\"\n\n    def _convert_bases_to_metadata(self) -> str:\n        \"\"\"Converts the bases to a metadata string.\"\"\"\n        return self.model_dump_json() if self.bases else \"\"\n\n    def _convert_docstring_to_metadata(self) -> str:\n        \"\"\"Converts the docstring to a metadata string.\"\"\"\n        return f\"{self.docstring}\" if self.docstring else \"\"\n\n    def _convert_keywords_to_metadata(self) -> str:\n        \"\"\"Converts the keywords to a metadata string.\"\"\"\n        keywords_str: str = self.model_dump_json() if self.keywords else \"\"\n        return f\"{keywords_str}\"\n\n    def _convert_class_attributes_to_metadata_dict(self) -> dict[str, str | int]:\n        \"\"\"Converts the class attributes to a metadata dictionary.\"\"\"\n\n        return {\n            \"class_name\": self.class_name,\n            \"decorators\": self._convert_decorators_to_metadata(),\n            \"bases\": self._convert_bases_to_metadata(),\n            \"docstring\": self._convert_docstring_to_metadata(),\n            \"keywords\": self._convert_keywords_to_metadata(),\n        }\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DecoratorModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ClassKeywordModel"
        },
        {
            "import_names": [
                {
                    "name": "BaseModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Field",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "validator",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "pydantic",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "BaseModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Field",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "validator",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "pydantic",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "summary": "\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes\n\n        \nChild (postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_decorators_to_metadata) code content:\n# attributes: list[dict] | None = None\n\ndef _convert_decorators_to_metadata(self) -> str:\n    \"\"\"Converts the decorators to a metadata string.\"\"\"\n    decorators_str: str = self.model_dump_json() if self.decorators else \"\"\n    return f\"{decorators_str}\"\n\n\nChild (postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_bases_to_metadata) code content:\n\ndef _convert_bases_to_metadata(self) -> str:\n    \"\"\"Converts the bases to a metadata string.\"\"\"\n    return self.model_dump_json() if self.bases else \"\"\n\n\nChild (postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_docstring_to_metadata) code content:\n\ndef _convert_docstring_to_metadata(self) -> str:\n    \"\"\"Converts the docstring to a metadata string.\"\"\"\n    return f\"{self.docstring}\" if self.docstring else \"\"\n\n\nChild (postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_keywords_to_metadata) code content:\n\ndef _convert_keywords_to_metadata(self) -> str:\n    \"\"\"Converts the keywords to a metadata string.\"\"\"\n    keywords_str: str = self.model_dump_json() if self.keywords else \"\"\n    return f\"{keywords_str}\"\n\n\nChild (postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_class_attributes_to_metadata_dict) code content:\n\ndef _convert_class_attributes_to_metadata_dict(self) -> dict[str, str | int]:\n    \"\"\"Converts the class attributes to a metadata dictionary.\"\"\"\n\n    return {\n        \"class_name\": self.class_name,\n        \"decorators\": self._convert_decorators_to_metadata(),\n        \"bases\": self._convert_bases_to_metadata(),\n        \"docstring\": self._convert_docstring_to_metadata(),\n        \"keywords\": self._convert_keywords_to_metadata(),\n    }\n\n, None, None\n        ",
    "children_ids": [
        "postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_decorators_to_metadata",
        "postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_bases_to_metadata",
        "postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_docstring_to_metadata",
        "postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_keywords_to_metadata",
        "postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_class_attributes_to_metadata_dict"
    ]
}