{
    "function_name": "set_decorators",
    "docstring": "Adds decorator to the decorators list in the class model.",
    "decorators": null,
    "parameters": null,
    "returns": "No return annotation",
    "is_method": true,
    "is_async": false,
    "id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder__*__FUNCTION-set_decorators",
    "file_path": "postcode/python_parser/model_builders/class_model_builder.py",
    "parent_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder",
    "block_type": "FUNCTION",
    "start_line_num": 52,
    "end_line_num": 62,
    "code_content": "\ndef set_decorators(\n    self, decorators: list[DecoratorModel] | None\n) -> \"ClassModelBuilder\":\n    \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\n    if decorators:\n        self.class_attributes.decorators = decorators\n    else:\n        self.class_attributes.decorators = None\n    return self\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nThe `set_decorators` method in `ClassModelBuilder` takes an optional list of `DecoratorModel` instances, updates the class's decorators attribute accordingly, and returns the instance to enable a fluent interface through method chaining.",
    "children_ids": []
}