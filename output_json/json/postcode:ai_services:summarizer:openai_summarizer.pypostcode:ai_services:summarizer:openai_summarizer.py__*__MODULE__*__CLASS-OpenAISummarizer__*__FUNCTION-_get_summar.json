{
    "function_name": "_get_summary",
    "docstring": "Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\nArgs:\n    - messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n    - configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\nReturns:\n    str | None: The summary generated by the OpenAI API, or None if no summary is found.",
    "decorators": null,
    "parameters": null,
    "returns": "OpenAIReturnContext | None",
    "is_method": true,
    "is_async": false,
    "id": "postcode:ai_services:summarizer:openai_summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-_get_summary",
    "file_path": "postcode/ai_services/summarizer/openai_summarizer.py",
    "parent_id": "postcode:ai_services:summarizer:openai_summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
    "block_type": "FUNCTION",
    "start_line_num": 109,
    "end_line_num": 150,
    "code_content": "\ndef _get_summary(\n    self,\n    messages: list[ChatCompletionMessageParam],\n    *,\n    configs: SummaryCompletionConfigs,\n) -> OpenAIReturnContext | None:\n    \"\"\"\n        Retrieves the summary from the OpenAI API based on the provided messages and configuration settings.\n\n        Args:\n            - messages (list[ChatCompletionMessageParam]): A list of messages for chat completion.\n            - configs (SummaryCompletionConfigs): Configuration settings for the summarization completion.\n\n        Returns:\n            str | None: The summary generated by the OpenAI API, or None if no summary is found.\n        \"\"\"\n\n    try:\n        response: ChatCompletion = self.client.chat.completions.create(\n            messages=messages,\n            model=configs.model,\n            max_tokens=configs.max_tokens,\n            temperature=configs.temperature,\n        )\n        prompt_tokens: int = 0\n        completion_tokens: int = 0\n        summary: str | None = response.choices[0].message.content\n        if response.usage:\n            prompt_tokens = response.usage.prompt_tokens\n            completion_tokens = response.usage.completion_tokens\n\n        return OpenAIReturnContext(\n            prompt_tokens=prompt_tokens,\n            completion_tokens=completion_tokens,\n            summary=summary,\n        )\n\n    except Exception as e:\n        logging.error(e)\n        return None\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nThe `_get_summary` method in a class retrieves a summary from the OpenAI API using `ChatCompletionMessageParam` messages and `SummaryCompletionConfigs`, which specify the AI model, token limit, and temperature. It constructs an `OpenAIReturnContext` with the extracted summary and token usage data if available, or logs the exception and returns `None` in case of an API call failure.",
    "children_ids": []
}