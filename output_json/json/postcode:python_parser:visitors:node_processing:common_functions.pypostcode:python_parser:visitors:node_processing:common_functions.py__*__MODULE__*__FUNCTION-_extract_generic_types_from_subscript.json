{
    "function_name": "_extract_generic_types_from_subscript",
    "docstring": "Recursively extracts generic types from a Subscript node or a BaseExpression node.\n\nArgs:\n    - node (libcst.Subscript | libcst.BaseExpression): The Subscript or BaseExpression node to extract generic types from.\n\nReturns:\n    - str: The string representation of the extracted generic types.",
    "decorators": null,
    "parameters": null,
    "returns": "str",
    "is_method": false,
    "is_async": false,
    "id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-_extract_generic_types_from_subscript",
    "file_path": "postcode/python_parser/visitors/node_processing/common_functions.py",
    "parent_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 246,
    "end_line_num": 285,
    "code_content": "\n\ndef _extract_generic_types_from_subscript(\n    node: libcst.Subscript | libcst.BaseExpression,\n) -> str:\n    \"\"\"\n    Recursively extracts generic types from a Subscript node or a BaseExpression node.\n\n    Args:\n        - node (libcst.Subscript | libcst.BaseExpression): The Subscript or BaseExpression node to extract generic types from.\n\n    Returns:\n        - str: The string representation of the extracted generic types.\n    \"\"\"\n\n    if isinstance(node, libcst.Subscript):\n        generics: list[str] = []\n        for element in node.slice:\n            if isinstance(element.slice, libcst.Index):\n                if isinstance(element.slice.value, libcst.BinaryOperation):\n                    union_type: str = _process_type_annotation_expression(\n                        element.slice.value\n                    )\n                    generics.append(union_type)\n                else:\n                    generic_type: str = _extract_generic_types_from_subscript(\n                        element.slice.value\n                    )\n                    generics.append(generic_type)\n\n        if isinstance(node.value, libcst.Name):\n            generics_str = \", \".join(generics)\n            return f\"{node.value.value}[{generics_str}]\"\n        else:\n            return \"\"\n\n    elif isinstance(node, libcst.Name):\n        return node.value\n    return \"\"\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE__*__FUNCTION-_process_type_annotation_expression"
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "summary": "\nThe `_extract_generic_types_from_subscript` function recursively constructs a string representation of generic types from `libcst.Subscript` or `libcst.BaseExpression` nodes. It discerns node types with `isinstance`, processes `libcst.Index` and `libcst.BinaryOperation`, employs recursion for nested generics, and integrates `_process_type_annotation_expression` for binary operations.",
    "children_ids": []
}