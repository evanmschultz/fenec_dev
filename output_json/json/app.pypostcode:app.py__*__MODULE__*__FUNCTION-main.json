{
    "function_name": "main",
    "docstring": null,
    "decorators": null,
    "parameters": null,
    "returns": "None",
    "is_method": false,
    "is_async": false,
    "id": "postcode:app.py__*__MODULE__*__FUNCTION-main",
    "file_path": "postcode/app.py",
    "parent_id": "postcode:app.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 60,
    "end_line_num": 90,
    "code_content": "\n\ndef main(\n    directory: str = \".\",\n    output_directory: str = \"output_json\",\n) -> None:\n    setup_logging()\n    logger: Logger = logging.getLogger(__name__)\n\n    #   ==================== GraphDB ====================\n    graph_db_updater = GraphDBUpdater(directory, output_directory, logger)\n    chroma_context: ChromaSetupReturnContext = graph_db_updater.update_all(\n        directory, output_directory, logger\n    )\n    # ==================== End GraphDB ====================\n\n    #   ==================== Standard ====================\n    # chroma_context: ChromaSetupReturnContext = StandardUpdater.update_all(\n    #     directory, output_directory, logger\n    # )\n    # StandardUpdater.update_all(directory, output_directory, logger)\n    # ==================== End Standard ====================\n\n    query: str = \"summarizes code block\"\n    query_chroma(\n        query,\n        chroma_context.chroma_collection_manager,\n        chroma_context.chroma_collection,\n        logger,\n    )\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "postcode:app.py__*__MODULE__*__FUNCTION-query_chroma"
        },
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Logger",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "logging",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChromaSetupReturnContext",
                    "as_name": null,
                    "local_block_id": "postcode:databases:chroma:setup_chroma.py__*__MODULE__*__CLASS-ChromaSetupReturnContext"
                }
            ],
            "imported_from": "postcode.databases.chroma.setup_chroma",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:chroma:setup_chroma.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "GraphDBUpdater",
                    "as_name": null,
                    "local_block_id": "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater"
                }
            ],
            "imported_from": "postcode.updaters.graph_db_updater",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:updaters:graph_db_updater.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "setup_logging",
                    "as_name": null,
                    "local_block_id": "postcode:utilities:logger:logging_config.py__*__MODULE__*__FUNCTION-setup_logging"
                }
            ],
            "imported_from": "postcode.utilities.logger.logging_config",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:utilities:logger:logging_config.py__*__MODULE"
        }
    ],
    "summary": "\nSummary:\n\n        postcode:app.py__*__MODULE__*__FUNCTION-main\n\n        None, \nImported code block (postcode:databases:chroma:setup_chroma.py__*__MODULE) code content:\n\n\n@dataclass\nclass ChromaSetupReturnContext:\n    \"\"\"\n    Represents the return value of the ChromaDB setup method.\n\n    Attributes:\n        - chroma_collection_manager (ChromaDBCollectionManager): The ChromaDB collection manager.\n        - chroma_collection (Collection): The ChromaDB collection.\n    \"\"\"\n\n    chroma_collection_manager: ChromaDBCollectionManager\n    chroma_collection: chroma_types.Collection\n\n\nImported code block (postcode:updaters:graph_db_updater.py__*__MODULE) code content:\n\n\nclass GraphDBUpdater:\n    def __init__(\n        self,\n        directory: str,\n        output_directory: str,\n        logger: Logger,\n        arango_connector: ArangoDBConnector = ArangoDBConnector(),\n    ) -> None:\n        self.directory: str = directory\n        self.output_directory: str = output_directory\n        self.logger: Logger = logger\n        self.arango_connector: ArangoDBConnector = arango_connector\n\n        self.graph_manager = ArangoDBManager(arango_connector)\n\n    def update_all(\n        self,\n        directory: str,\n        output_directory: str,\n        logger: Logger,\n    ) -> ChromaSetupReturnContext:\n        self.arango_connector.delete_all_collections()\n        self.arango_connector.ensure_collections()\n\n        process_files_return: VisitorManagerProcessFilesReturn = (\n            self._visit_and_parse_files(directory, logger)\n        )\n        models_tuple: tuple[ModelType, ...] = process_files_return.models_tuple\n\n        self._upsert_models_to_graph_db(models_tuple)\n\n        finalized_models: list[ModelType] | None = self._map_and_summarize_models(\n            models_tuple, logger\n        )\n\n        if not finalized_models:\n            raise Exception(\"No finalized models returned from summarization.\")\n\n        json_manager = JSONHandler(\n            directory, process_files_return.directory_modules, output_directory\n        )\n        self._save_json(finalized_models, json_manager, logger)\n        self._upsert_models_to_graph_db(tuple(finalized_models))\n\n        return setup_chroma(finalized_models, logger)\n\n    def _visit_and_parse_files(\n        self, directory: str, logger: Logger\n    ) -> VisitorManagerProcessFilesReturn:\n        \"\"\"Visits and parses the files in the directory.\"\"\"\n\n        logger.info(\"Starting the directory parsing.\")\n        visitor_manager = VisitorManager(directory)\n\n        return visitor_manager.process_files()\n\n    def _get_module_ids(self, models_tuple: tuple[ModelType, ...]) -> list[str]:\n        \"\"\"Returns a list of module IDs from the models tuple.\"\"\"\n\n        return [model.id for model in models_tuple if isinstance(model, ModuleModel)]\n\n    def _upsert_models_to_graph_db(self, models_tuple: tuple[ModelType, ...]) -> None:\n        \"\"\"Upserts the models to the graph database.\"\"\"\n\n        self.graph_manager.upsert_models(\n            list(models_tuple)\n        ).process_imports_and_dependencies().get_or_create_graph()\n\n    def _save_json(\n        self, models: list[ModelType], json_manager: JSONHandler, logger: Logger\n    ) -> None:\n        \"\"\"Saves the models as JSON.\"\"\"\n\n        logger.info(\"Saving models as JSON\")\n        for model in models:\n            if isinstance(model, DirectoryModel):\n                output_path: str = model.id\n\n            else:\n                output_path: str = model.file_path + model.id\n            json_manager.save_model_as_json(model, output_path)\n\n        json_manager.save_visited_directories()\n        logger.info(\"JSON save complete\")\n\n    def _map_and_summarize_models(\n        self,\n        models_tuple: tuple[ModelType, ...],\n        logger: Logger,\n    ) -> list[ModelType] | None:\n        \"\"\"Maps and summarizes the models.\"\"\"\n\n        module_ids: list[str] = self._get_module_ids(models_tuple)\n        summarization_mapper = SummarizationMapper(\n            module_ids, models_tuple, self.graph_manager\n        )\n        client = OpenAI(max_retries=4)\n        summarizer = OpenAISummarizer(client=client)\n        summarization_manager = GraphDBSummarizationManager(\n            models_tuple, summarization_mapper, summarizer, self.graph_manager\n        )\n\n        finalized_models: list[\n            ModelType\n        ] | None = summarization_manager.create_summaries_and_return_updated_models()\n        logger.info(\"Summarization complete\")\n\n        return finalized_models if finalized_models else None\n\n\nImported code block (postcode:utilities:logger:logging_config.py__*__MODULE) code content:\n\n\ndef setup_logging(level=logging.INFO) -> None:\n    \"\"\"\n    Configures the logging system to use RichSyntaxHandler for output.\n\n    This function sets up logging with a specific log level and format. It utilizes the RichSyntaxHandler to support rich text and syntax highlighting in log outputs.\n\n    Args:\n        level (int, optional): The logging level to set for the root logger. Defaults to logging.INFO.\n\n    Example:\n        >>> setup_logging(logging.DEBUG)\n        # Configures logging at DEBUG level with RichSyntaxHandler.\n    \"\"\"\n\n    format_str = \"%(message)s\"\n    logging.basicConfig(level=level, format=format_str, handlers=[RichSyntaxHandler()])\n\n, \nimport logging\nfrom logging import Logger\n        ",
    "children_ids": []
}