{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Logger",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "logging",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "QueryResult",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "chromadb.api.types",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Collection",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "chromadb",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChromaSetupReturnContext",
                    "as_name": null,
                    "local_block_id": "postcode:databases:chroma:setup_chroma.py__*__MODULE__*__CLASS-ChromaSetupReturnContext"
                }
            ],
            "imported_from": "postcode.databases.chroma.setup_chroma",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:chroma:setup_chroma.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "GraphDBUpdater",
                    "as_name": null,
                    "local_block_id": "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater"
                }
            ],
            "imported_from": "postcode.updaters.graph_db_updater",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:updaters:graph_db_updater.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModelType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.types.postcode",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:types:postcode.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "setup_logging",
                    "as_name": null,
                    "local_block_id": "postcode:utilities:logger:logging_config.py__*__MODULE__*__FUNCTION-setup_logging"
                }
            ],
            "imported_from": "postcode.utilities.logger.logging_config",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:utilities:logger:logging_config.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ChromaDBCollectionManager",
                    "as_name": null,
                    "local_block_id": "postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaDBCollectionManager"
                }
            ],
            "imported_from": "postcode.databases.chroma.chromadb_collection_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE"
        }
    ],
    "id": "postcode:app.py__*__MODULE",
    "file_path": "postcode/app.py",
    "parent_id": "",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 90,
    "code_content": "import logging\nfrom logging import Logger\n\n# from typing import Union\n\n# from postcode.models.models import (\n#     ModuleModel,\n#     ClassModel,\n#     FunctionModel,\n#     StandaloneCodeBlockModel,\n# )\n\nfrom postcode.databases.chroma.setup_chroma import (\n    ChromaSetupReturnContext,\n)\nfrom postcode.updaters.graph_db_updater import GraphDBUpdater\nfrom postcode.types.postcode import ModelType\n\n# ModelType = Union[\n#     ModuleModel,\n#     ClassModel,\n#     FunctionModel,\n#     StandaloneCodeBlockModel,\n# ]\n\nfrom postcode.utilities.logger.logging_config import setup_logging\n\nfrom postcode.databases.chroma.chromadb_collection_manager import (\n    ChromaDBCollectionManager,\n)\n\nfrom chromadb.api.types import (\n    QueryResult,\n)\nfrom chromadb import Collection\n\n# from postcode.updaters.standard_updater import StandardUpdater\n\n\ndef query_chroma(\n    query: str,\n    chroma_collection_manager: ChromaDBCollectionManager,\n    chroma_collection: Collection,\n    logger: Logger,\n) -> None:\n    logger.info(f\"Querying ChromaDB collection {chroma_collection.name}\")\n    results: QueryResult | None = chroma_collection_manager.query_collection(\n        [query],\n        n_results=10,\n        # where_filter={\"block_type\": \"MODULE\"},\n        include_in_result=[\"metadatas\", \"documents\", \"embeddings\"],\n    )\n    logger.info(\"Query results:\")\n    if results:\n        if results[\"ids\"]:\n            for document in results[\"ids\"][0]:\n                print(document)\n\n            print(f\"Total results: {len(results['ids'][0])}\")\n\n\ndef main(\n    directory: str = \".\",\n    output_directory: str = \"output_json\",\n) -> None:\n    setup_logging()\n    logger: Logger = logging.getLogger(__name__)\n\n    #   ==================== GraphDB ====================\n    graph_db_updater = GraphDBUpdater(directory, output_directory, logger)\n    chroma_context: ChromaSetupReturnContext = graph_db_updater.update_all(\n        directory, output_directory, logger\n    )\n    # ==================== End GraphDB ====================\n\n    #   ==================== Standard ====================\n    # chroma_context: ChromaSetupReturnContext = StandardUpdater.update_all(\n    #     directory, output_directory, logger\n    # )\n    # StandardUpdater.update_all(directory, output_directory, logger)\n    # ==================== End Standard ====================\n\n    query: str = \"summarizes code block\"\n    query_chroma(\n        query,\n        chroma_context.chroma_collection_manager,\n        chroma_context.chroma_collection,\n        logger,\n    )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:app.py__*__MODULE\n\n        \n\nSummary:\n\n        postcode:app.py__*__MODULE__*__FUNCTION-query_chroma\n\n        None, \nImported code block (postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE) code content:\n# from postcode.models.models import (\n#     ModuleModel,\n#     ClassModel,\n#     FunctionModel,\n#     StandaloneCodeBlockModel,\n#     DecoratorModel,\n# )\n\n\n\nclass ChromaDBCollectionManager:\n    \"\"\"\n    Manages a collection within ChromaDB instance, providing functionalities for adding, retrieving,\n    and querying embeddings, and their associated metadata.\n\n    This class serves as an interface to interact with a specific collection in ChromaDB.\n\n    Attributes:\n        - collection (chroma_types.Collection): An instance of the Collection class from ChromaDB\n            which this manager is responsible for.\n\n    Methods:\n        - `collection_embedding_count`: Gets the total number of embeddings in the collection.\n        - `add_embeddings`: Adds embeddings to the collection.\n        - `get_embeddings`: Gets embeddings and their metadata from the collection in the form of a TypedDict.\n        - `query_collection`: Queries and returns the `n` nearest neighbors from the collection.\n        - `upsert_models`: Loads or updates the embeddings of the provided module models into the collection.\n\n    Examples:\n        ```Python\n        from postcode.databases.chroma import ChromaDBClientBuilder\n        import postcode.types.chromadb.types as chroma_types\n\n        # Create a persistent ChromaDB client\n        client: chroma_types.ClientAPI = ChromaDBClientBuilder.create_persistent_client()\n\n        # Instantiate the ChromaDBCollectionManager with a specific collection\n        collection_manager: ChromaDBCollectionManager = (\n            ChromaDBCollectionManager(client.get_collection(\"my_collection\"))\n        )\n\n        # Example usage of the collection manager\n        embedding_count: int = collection_manager.collection_embedding_count()\n        print(f\"Total embeddings: {embedding_count}\")\n        ```\n    \"\"\"\n\n    def __init__(self, collection:chroma_types.Collection) -> None:\n        self.collection: chroma_types.Collection = collection\n\n    def collection_embedding_count(self) -> int | None:\n        \"\"\"\n        Gets the total number of embeddings in the collection.\n\n        Returns:\n            - embedding_count (int): The total number of embeddings in the collection.\n\n        Examples:\n            ```Python\n            embedding_count: int = collection_manager.get_collection_embedding_count()\n            ```\n        \"\"\"\n        try:\n            embedding_count: int = self.collection.count()\n            logging.info(\n                f\"Collection {self.collection.name} has {embedding_count} embeddings.\"\n            )\n            return embedding_count\n        except Exception as exception:\n            logging.error(exception)\n\n    def add_embeddings(\n        self,\n        ids: list[str],\n        documents: list[str],\n        metadatas: list[Mapping[str, str | int | float | bool]],\n    ) -> None:\n        \"\"\"\n        Adds embeddings to the collection.\n\n        Args:\n            - ids (list[str]): A list of ids to add to the collection.\n            - documents (list[str]): A list of documents to add to the collection.\n            - metadatas (list[dict[str, Any]]): A list of metadatas to add to the collection.\n\n        Raises:\n            - ValueError - If you don't provide either embeddings or documents.\n            - ValueError: If the length of ids, embeddings, metadatas, or documents don't match.\n            - ValueError - If you provide an id that already exists.\n\n        Examples:\n            ```Python\n            # define the ids, metadatas, and documents to add to the collection\n            id: list[str] = [\"my_id\", \"my_id2\"]\n            metadatas: list[dict[str, Any]] = [\n                {\"my_metadata\": \"my_metadata_value\"},\n                {\"my_metadata2\": \"my_metadata_value2\"},\n            ]\n            documents: list[str] = [\"my_document\", \"my_document2\"]\n\n            # add the embeddings to the collection\n            collection_manager.add_embeddings(id, metadatas, documents)\n            ```\n        \"\"\"\n\n        if not len(ids) == len(documents) == len(metadatas):\n            raise ValueError(\"The length of ids, documents, and metadatas must match.\")\n\n        try:\n            logging.info(f\"Adding embeddings to collection {self.collection.name}\")\n            self.collection.add(ids, documents=documents, metadatas=metadatas)\n        except Exception as exception:\n            raise exception\n\n    def get_embeddings(\n        self,\n        ids: list[str] | None,\n        *,\n        where_filter: chroma_types.Where | None = None,\n        limit: int | None = None,\n        where_document_filter: chroma_types.WhereDocument | None = None,\n        include_in_result: chroma_types.Include = [\"metadatas\", \"documents\"],\n    ) -> chroma_types.GetResult | None:\n        \"\"\"\n        Gets embeddings and their metadata from the collection in the form of a TypedDict.\n\n        Args:\n            - ids (list[str]): A list of ids to get from the collection.\n            - where_filter (chroma_types.Where | None): A TypedDict used to filter the results.\n            - limit (int | None): The maximum number of results to return.\n            - where_document_filter (chroma_types.WhereDocument | None): A TypedDict used to filter the results by the document,\n                e.g. `{$contains: {\"text\": \"hello\"}}`\n            - include_in_result (chroma_types.Include | None): A list used of what to return from the results, e.g. `[\"metadatas\", \"embeddings\", \"documents\"]`\n\n        Returns:\n            - embeddings (TypedDict): A typed dict of embedding data from the collection with the following keys:\n                - ids: list[str]\n                - embeddings: list[Embedding] | None\n                - documents: list[str] | None\n                - uris: chroma_types.URIs | None\n                - data: chroma_types.Loadable | None\n                - metadatas: list[chroma_types.Metadata]]\n\n        Raises:\n            - ValueError: If the length of ids, embeddings, metadatas, or documents don't match.\n            - ValueError: If you provide an id that doesn't exist.\n\n        Examples:\n            ```Python\n            import postcode.types.chromadb.types as chroma_types\n\n            # define the ids, filters to use to get embeddings from the collection\n            ids: list[str] = [\"my_id\", \"my_id2\"]\n            where_filter: chroma_types.Where = {\"my_metadata\": \"my_metadata_value\"}\n            where_document_filter: chroma_types.WhereDocument = {\"$contains\": {\"text\": \"hello\"}}\n\n            # define the data to return from the collection\n            include_in_result: chroma_types.Include = [\"metadatas\"]\n\n            # get the embeddings from the collection\n            embeddings: chroma_types.GetResult = collection_manager.get_embeddings(\n                ids,\n                where_filter=where_filter,\n                where_document_filter=where_document_filter,\n                include_in_result=include_in_result\n                )\n            ```\n        \"\"\"\n\n        try:\n            logging.info(f\"Getting embeddings from collection {self.collection.name}\")\n            return self.collection.get(\n                ids,\n                where=where_filter,\n                limit=limit,\n                where_document=where_document_filter,\n                include=include_in_result,\n            )\n        except Exception as exception:\n            raise exception\n\n    def query_collection(\n        self,\n        queries: list[str],\n        n_results: int = 10,\n        where_filter: chroma_types.Where | None = None,\n        where_document_filter: chroma_types.WhereDocument | None = None,\n        include_in_result: chroma_types.Include = [\"metadatas\", \"documents\"],\n    ) -> chroma_types.QueryResult | None:\n        \"\"\"\n        Queries and returns the `n` nearest neighbors from the collection.\n\n        Args:\n            - queries (list[str]): A list of queries to search the collection for.\n            - n_results (int): The number of results to return.\n            - where_filter (chroma_types.Where | None): A TypedDict used to filter the results.\n                - e.g. `{\"block_type\": \"FUNCTION\", \"children\": None}`\n            - where_document_filter (chroma_types.WhereDocument | None): A TypedDict used to filter the results by the document,\n                - e.g. `{$contains: \"binary search\"}`\n            - include_in_result (chroma_types.Include | None): A list used of what to return from the results, e.g. `[\"metadatas\", \"embeddings\", \"documents\"]`\n\n        Returns:\n            - results (chroma_types.QueryResult | None): A typed dict of query results from the collection, can have the following keys based on the\n                `include_in_result` parameter:\n                - ids: list[str] # The ids are always returned.\n                - embeddings: List[list[Embedding]] | None\n                - documents: list[list[str]]] | None\n                - uris: list[list[URI]]] | None\n                - data: list[Loadable] | None\n                - metadatas: list[list[Metadata]] | None\n                - distances: list[list[float]] | None\n\n        Raises:\n            - ValueError: If you don't provide query_texts.\n\n        Examples:\n            ```Python\n            import postcode.types.chromadb.types as chroma\n\n            # define the queries and filters used to search the collection\n            queries: list[str] = [\"binary search\", \"linear search\"]\n            where_filter: chroma_types.Where = {\"block_type\": \"FUNCTION\"}\n\n            # define the data to return from the collection\n            include_in_result: chroma_types.Include = [\"metadatas\", \"documents\", \"distances\"]\n\n            # query the collection and return the results from the collection\n            results: chroma_types.QueryResult = collection_manager.query_collection(\n                queries,\n                where_filter=where_filter,\n                include_in_result=include_in_result\n                )\n            ```\n        \"\"\"\n\n        try:\n            logging.info(f\"Querying collection {self.collection.name}\")\n\n            if results := self.collection.query(\n                query_texts=queries,\n                n_results=n_results,\n                where=where_filter,\n                where_document=where_document_filter,\n                include=include_in_result,\n            ):\n                return results\n            else:\n                logging.warning(\n                    f\"No results found from collection {self.collection.name}.\"\n                )\n\n        except Exception as exception:\n            raise exception\n\n    def modify_collection_name(self, name: str) -> None:\n        \"\"\"\n        Modifies the name of the collection managed by this class.\n\n        Args:\n            - name (str): The new name to assign to the collection.\n\n        Examples:\n            ```Python\n            # Rename the collection to 'new_collection_name'\n            collection_manager.modify_collection_name('new_collection_name')\n            ```\n        \"\"\"\n\n        self.collection.modify(name=name)\n\n    def modify_collection_metadata(\n        self, metadata: dict[str, Any] | None = None\n    ) -> None:\n        \"\"\"\n        Modifies the metadata of the collection managed by this class.\n\n        Args:\n            - metadata (dict[str, Any] | None): The new metadata to assign to the collection. If None, no change is made.\n\n        Examples:\n            ```Python\n            # Update metadata of the collection\n            new_metadata = {\"description\": \"Updated collection metadata\"}\n            collection_manager.modify_collection_metadata(new_metadata)\n            ```\n        \"\"\"\n\n        self.collection.modify(metadata=metadata)\n\n    def _update_metadata_or_documents_by_ids(\n        self,\n        ids: list[str],\n        metadatas: list[Mapping[str, str | int | float | bool]] | None = None,\n        documents: list[str] | None = None,\n    ) -> None:\n        \"\"\"\n        Updates the metadata or documents of specific entries in the collection by their ids.\n\n        Args:\n            - ids (list[str]): List of ids of the entries to be updated.\n            - metadatas (list[Mapping[str, Any]] | None): List of metadata updates corresponding to the ids.\n            - documents (list[str] | None): List of document updates corresponding to the ids.\n\n        Raises:\n            - ValueError: If neither metadatas nor documents are provided.\n            - ValueError: If the length of ids and documents don't match.\n            - ValueError: If the length of ids and metadatas don't match.\n            - ValueError: If the length of ids, metadatas, and documents don't match.\n\n        Notes:\n            - As of now, ChromaDB doesn't raise an exception if you provide an id that doesn't exist.\n\n        Examples:\n            ```Python\n            # Update metadata and documents for specific ids\n            ids_to_update = ['id1', 'id2']\n            metadata_updates = [{\"key1\": \"value1\"}, {\"key2\": \"value2\"}]\n            document_updates = [\"new document 1\", \"new document 2\"]\n            collection_manager.update_metadata_or_documents_by_ids(ids_to_update, metadata_updates, document_updates)\n            ```\n        \"\"\"\n\n        if not metadatas and not documents:\n            raise ValueError(\"You must provide either metadatas or documents.\")\n        if not metadatas and documents:\n            if len(ids) != len(documents):\n                raise ValueError(\"The length of ids and documents must match.\")\n        if metadatas and not documents:\n            if len(ids) != len(metadatas):\n                raise ValueError(\"The length of ids and metadatas must match.\")\n        if metadatas and documents:\n            if len(ids) != len(metadatas) != len(documents):\n                raise ValueError(\n                    \"The length of ids, metadatas, and documents must match.\"\n                )\n        for index, id in enumerate(ids):\n            if not self.collection.get(id):\n                logging.error(\n                    f\"Id {id} does not exist in collection {self.collection.name}.\"\n                )\n                ids.pop(index)\n                if metadatas:\n                    popped_metadata = metadatas.pop(index)\n                    if popped_metadata:\n                        logging.warning(\n                            f\"Removing metadata at index {index} from update.\"\n                        )\n                if documents:\n                    popped_document = documents.pop(index)\n                    if popped_document:\n                        logging.warning(\n                            f\"Removing document at index {index} from update.\"\n                        )\n\n        if not ids:\n            logging.warning(\"All updates failed.\")\n            return None\n        else:\n            logging.info(f\"Updating collection {self.collection.name} with ids {ids}.\")\n            self.collection.update(ids=ids, metadatas=metadatas, documents=documents)\n\n    def _upsert_documents(\n        self,\n        ids: list[str],\n        documents: list[str],\n        metadatas: list[Mapping[str, str | int | float | bool]],\n        # embeddings: list[chroma_types.Embedding],\n    ) -> None:\n        \"\"\"\n        Inserts or updates documents in the collection, based on the provided ids.\n\n        Args:\n            - ids (list[str]): List of ids for the documents to be inserted or updated.\n            - documents (list[str]): List of documents corresponding to the ids.\n            - metadatas (list[Mapping[str, Any]]): List of metadata corresponding to the ids.\n\n        Raises:\n            - ValueError: If the lengths of ids, documents, and metadatas don't match.\n\n        Examples:\n            ```Python\n            # Upsert documents in the collection\n            ids = ['id1', 'id2']\n            documents = ['doc1', 'doc2']\n            metadatas = [{\"meta1\": \"value1\"}, {\"meta2\": \"value2\"}]\n\n            # Upsert documents in the collection\n            collection_manager.upsert_documents(ids, documents, metadatas)\n            ```\n        \"\"\"\n\n        if len(ids) != len(documents) != len(metadatas):\n            raise ValueError(\"The length of ids, documents, and metadatas must match.\")\n\n        logging.info(f\"Upserting collection {self.collection.name} with ids {ids}.\")\n        self.collection.upsert(\n            ids=ids,\n            # embeddings=embeddings,\n            metadatas=metadatas,\n            documents=documents,\n        )\n\n    def delete_embeddings(self, ids: list[str]) -> None:\n        \"\"\"\n        Deletes embeddings from the collection based on the provided ids.\n\n        Args:\n            - ids (list[str]): List of ids corresponding to the embeddings to be deleted.\n\n        Examples:\n            ```Python\n            # Delete specific embeddings by ids\n            ids_to_delete = ['id1', 'id2']\n            collection_manager.delete_embeddings(ids_to_delete)\n            ```\n        \"\"\"\n\n        ids_to_delete: list[str] = ids.copy()\n        for index, id in enumerate(ids_to_delete):\n            if not self.collection.get(id):\n                logging.error(\n                    f\"Id {id} does not exist in collection {self.collection.name}.\"\n                )\n                ids_to_delete.pop(index)\n\n        if not ids_to_delete:\n            logging.warning(\"No IDs given were in the database.\")\n            return None\n\n        logging.info(\n            f\"Deleting embeddings from collection {self.collection.name} with ids {ids_to_delete}.\"\n        )\n        self.collection.delete(ids_to_delete)\n\n    def upsert_models(self, models: tuple[ModelType, ...]) -> None:\n        \"\"\"\n        Loads or updates the embeddings of the provided module models into the collection.\n\n        The Pydantic models are converted to a dictionary with a format that ChromaDB can use, then the ids, documents, and metadatas\n        are added to their respective lists. The lists are then either added to or updated in the collection depending on whether or\n        not the code blocks were in the the collection to begin with.\n\n        Args:\n            - module_models (tuple[ModuleModel, ...]): The module models to load or update into the collection.\n\n        Examples:\n            ```Python\n            # Upsert module models into the collection\n            module_models = (module_model1, module_model2)\n            collection_manager.upsert_models(module_models)\n            ```\n        \"\"\"\n\n        ids: list[str] = []\n        documents: list[str] = []\n        metadatas: list[Mapping[str, str | int | float | bool]] = []\n\n        for model in models:\n            if model.summary:\n                ids.append(model.id)\n                documents.append(model.summary)\n                metadatas.append(model.convert_to_metadata())\n\n            # if model.children_ids:\n            #     for child in model.children_ids:\n            #         child_data: dict[str, Any] = self._recursively_gather_child_data(\n            #             child\n            #         )\n            #         ids.extend(child_data[\"ids\"])\n            #         documents.extend(child_data[\"documents\"])\n            #         metadatas.extend(child_data[\"metadatas\"])\n\n        logging.info(\n            f\"{self.collection.name} has {self.collection_embedding_count()} embeddings.\"\n        )\n        self._upsert_documents(ids=ids, documents=documents, metadatas=metadatas)\n        logging.info(\n            f\"After upsert {self.collection.name} has {self.collection_embedding_count()} embeddings.\"\n        )\n\n    # def _recursively_gather_child_data(self, model: ModelType) -> dict[str, Any]:\n    #     ids: list[str] = []\n    #     documents: list[str] = []\n    #     metadatas: list[Mapping[str, str | int | float | bool]] = []\n    #     if model.summary:\n    #         ids.append(model.id)\n    #         documents.append(model.summary)\n    #         metadatas.append(model.convert_to_metadata())\n    #     else:\n    #         logging.warning(f\"Child {model.id} has no summary.\")\n    #     # if model.children_ids:\n    #     #     for child in model.children_ids:\n    #     #         child_data: dict[str, Any] = self._recursively_gather_child_data(child)\n    #     #         ids.extend(child_data[\"ids\"])\n    #     #         documents.extend(child_data[\"documents\"])\n    #     #         metadatas.extend(child_data[\"metadatas\"])\n\n    #     return {\n    #         \"ids\": ids,\n    #         \"documents\": documents,\n    #         \"metadatas\": metadatas,\n    #     }\n\n, \nfrom logging import Logger\nfrom chromadb.api.types import QueryResult\nfrom chromadb import Collection\n        \n\nSummary:\n\n        postcode:app.py__*__MODULE__*__FUNCTION-main\n\n        None, \nImported code block (postcode:databases:chroma:setup_chroma.py__*__MODULE) code content:\n\n\n@dataclass\nclass ChromaSetupReturnContext:\n    \"\"\"\n    Represents the return value of the ChromaDB setup method.\n\n    Attributes:\n        - chroma_collection_manager (ChromaDBCollectionManager): The ChromaDB collection manager.\n        - chroma_collection (Collection): The ChromaDB collection.\n    \"\"\"\n\n    chroma_collection_manager: ChromaDBCollectionManager\n    chroma_collection: chroma_types.Collection\n\n\nImported code block (postcode:updaters:graph_db_updater.py__*__MODULE) code content:\n\n\nclass GraphDBUpdater:\n    def __init__(\n        self,\n        directory: str,\n        output_directory: str,\n        logger: Logger,\n        arango_connector: ArangoDBConnector = ArangoDBConnector(),\n    ) -> None:\n        self.directory: str = directory\n        self.output_directory: str = output_directory\n        self.logger: Logger = logger\n        self.arango_connector: ArangoDBConnector = arango_connector\n\n        self.graph_manager = ArangoDBManager(arango_connector)\n\n    def update_all(\n        self,\n        directory: str,\n        output_directory: str,\n        logger: Logger,\n    ) -> ChromaSetupReturnContext:\n        self.arango_connector.delete_all_collections()\n        self.arango_connector.ensure_collections()\n\n        process_files_return: VisitorManagerProcessFilesReturn = (\n            self._visit_and_parse_files(directory, logger)\n        )\n        models_tuple: tuple[ModelType, ...] = process_files_return.models_tuple\n\n        self._upsert_models_to_graph_db(models_tuple)\n\n        finalized_models: list[ModelType] | None = self._map_and_summarize_models(\n            models_tuple, logger\n        )\n\n        if not finalized_models:\n            raise Exception(\"No finalized models returned from summarization.\")\n\n        json_manager = JSONHandler(\n            directory, process_files_return.directory_modules, output_directory\n        )\n        self._save_json(finalized_models, json_manager, logger)\n        self._upsert_models_to_graph_db(tuple(finalized_models))\n\n        return setup_chroma(finalized_models, logger)\n\n    def _visit_and_parse_files(\n        self, directory: str, logger: Logger\n    ) -> VisitorManagerProcessFilesReturn:\n        \"\"\"Visits and parses the files in the directory.\"\"\"\n\n        logger.info(\"Starting the directory parsing.\")\n        visitor_manager = VisitorManager(directory)\n\n        return visitor_manager.process_files()\n\n    def _get_module_ids(self, models_tuple: tuple[ModelType, ...]) -> list[str]:\n        \"\"\"Returns a list of module IDs from the models tuple.\"\"\"\n\n        return [model.id for model in models_tuple if isinstance(model, ModuleModel)]\n\n    def _upsert_models_to_graph_db(self, models_tuple: tuple[ModelType, ...]) -> None:\n        \"\"\"Upserts the models to the graph database.\"\"\"\n\n        self.graph_manager.upsert_models(\n            list(models_tuple)\n        ).process_imports_and_dependencies().get_or_create_graph()\n\n    def _save_json(\n        self, models: list[ModelType], json_manager: JSONHandler, logger: Logger\n    ) -> None:\n        \"\"\"Saves the models as JSON.\"\"\"\n\n        logger.info(\"Saving models as JSON\")\n        for model in models:\n            if isinstance(model, DirectoryModel):\n                output_path: str = model.id\n\n            else:\n                output_path: str = model.file_path + model.id\n            json_manager.save_model_as_json(model, output_path)\n\n        json_manager.save_visited_directories()\n        logger.info(\"JSON save complete\")\n\n    def _map_and_summarize_models(\n        self,\n        models_tuple: tuple[ModelType, ...],\n        logger: Logger,\n    ) -> list[ModelType] | None:\n        \"\"\"Maps and summarizes the models.\"\"\"\n\n        module_ids: list[str] = self._get_module_ids(models_tuple)\n        summarization_mapper = SummarizationMapper(\n            module_ids, models_tuple, self.graph_manager\n        )\n        client = OpenAI(max_retries=4)\n        summarizer = OpenAISummarizer(client=client)\n        summarization_manager = GraphDBSummarizationManager(\n            models_tuple, summarization_mapper, summarizer, self.graph_manager\n        )\n\n        finalized_models: list[\n            ModelType\n        ] | None = summarization_manager.create_summaries_and_return_updated_models()\n        logger.info(\"Summarization complete\")\n\n        return finalized_models if finalized_models else None\n\n\nImported code block (postcode:utilities:logger:logging_config.py__*__MODULE) code content:\n\n\ndef setup_logging(level=logging.INFO) -> None:\n    \"\"\"\n    Configures the logging system to use RichSyntaxHandler for output.\n\n    This function sets up logging with a specific log level and format. It utilizes the RichSyntaxHandler to support rich text and syntax highlighting in log outputs.\n\n    Args:\n        level (int, optional): The logging level to set for the root logger. Defaults to logging.INFO.\n\n    Example:\n        >>> setup_logging(logging.DEBUG)\n        # Configures logging at DEBUG level with RichSyntaxHandler.\n    \"\"\"\n\n    format_str = \"%(message)s\"\n    logging.basicConfig(level=level, format=format_str, handlers=[RichSyntaxHandler()])\n\n, \nimport logging\nfrom logging import Logger\n        , None, None\n        ",
    "children_ids": [
        "postcode:app.py__*__MODULE__*__FUNCTION-query_chroma",
        "postcode:app.py__*__MODULE__*__FUNCTION-main"
    ]
}