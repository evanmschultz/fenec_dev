{
    "function_name": "_extract_bases",
    "docstring": "Extracts the base classes from a sequence of libcst.Arg representing class bases.\n\nArgs:\n    bases (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class base classes.\n\nReturns:\n    list[str] | None: A list of base class names, or None if there are no bases.\n\nExample:\n    >>> class_bases = _extract_bases(class_node.bases)\n    # Returns a list of base class names from the class definition.",
    "decorators": null,
    "parameters": null,
    "returns": "list[str] | None",
    "is_method": false,
    "is_async": false,
    "id": "postcode:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-_extract_bases",
    "file_path": "postcode/python_parser/visitors/node_processing/class_def_functions.py",
    "parent_id": "postcode:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 48,
    "end_line_num": 74,
    "code_content": "\n\ndef _extract_bases(bases: Sequence[libcst.Arg]) -> list[str] | None:\n    \"\"\"\n    Extracts the base classes from a sequence of libcst.Arg representing class bases.\n\n    Args:\n        bases (Sequence[libcst.Arg]): A sequence of libcst.Arg nodes representing class base classes.\n\n    Returns:\n        list[str] | None: A list of base class names, or None if there are no bases.\n\n    Example:\n        >>> class_bases = _extract_bases(class_node.bases)\n        # Returns a list of base class names from the class definition.\n    \"\"\"\n\n    bases_list: list[str] = []\n    for base in bases:\n        if (\n            isinstance(base, libcst.Arg)\n            and isinstance(base.value, libcst.Name)\n            and base.value.value\n        ):\n            bases_list.append(base.value.value)\n    return bases_list if bases_list else None\n",
    "important_comments": null,
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "Sequence",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "summary": "\nSummary:\n\n        postcode:python_parser:visitors:node_processing:class_def_functions.py__*__MODULE__*__FUNCTION-_extract_bases\n\n        None, None, \nfrom typing import Sequence\nimport libcst\n        ",
    "children_ids": []
}