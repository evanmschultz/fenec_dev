{
    "class_name": "BlockType",
    "decorators": null,
    "bases": [
        "str",
        "Enum"
    ],
    "docstring": "Enum of code block types.",
    "keywords": null,
    "id": "postcode:models:enums.py__*__MODULE__*__CLASS-BlockType",
    "file_path": "postcode/models/enums.py",
    "parent_id": "postcode:models:enums.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 34,
    "end_line_num": 47,
    "code_content": "\n\nclass BlockType(str, Enum):\n    \"\"\"Enum of code block types.\"\"\"\n\n    STANDALONE_CODE_BLOCK = \"STANDALONE_BLOCK\"\n    CLASS = \"CLASS\"\n    FUNCTION = \"FUNCTION\"\n    MODULE = \"MODULE\"\n    DIRECTORY = \"DIRECTORY\"\n\n    def __str__(self) -> str:\n        return self.value\n",
    "important_comments": null,
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "Enum",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "enum",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        }
    ],
    "summary": "\nThe code presents a `BlockType` class, which is an enumeration derived from `str` and `Enum`, defining constants for different code block types like standalone blocks, classes, functions, modules, and directories. It includes an overridden `__str__` method that returns the string representation of the enumeration's value, ensuring that when instances of the enumeration are converted to strings, they yield their assigned values.",
    "children_ids": [
        "postcode:models:enums.py__*__MODULE__*__CLASS-BlockType__*__FUNCTION-__str__"
    ]
}