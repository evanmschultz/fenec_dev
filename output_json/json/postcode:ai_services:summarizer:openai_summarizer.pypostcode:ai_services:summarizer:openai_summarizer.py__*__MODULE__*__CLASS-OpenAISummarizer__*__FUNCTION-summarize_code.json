{
    "function_name": "summarize_code",
    "docstring": "Summarizes the provided code snippet using the OpenAI API.\n\nArgs:\n    - code (str): The code snippet to summarize.\n    - configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n        Defaults to SummaryCompletionConfigs().\n\nReturns:\n    - str: The summary of the provided code snippet.\n\nExamples:\n    ```Python\n    client = OpenAI()\n\n    # Create a summarizer instance with the OpenAI client\n    summarizer = Summarizer(client=client)\n    code_example = \"print('Hello, world')\"\n\n    # Summarize the code snippet\n    summary = summarizer.summarize_code(code_example)\n    print(summary)\n    ```",
    "decorators": null,
    "parameters": null,
    "returns": "OpenAIReturnContext | None",
    "is_method": true,
    "is_async": false,
    "id": "postcode:ai_services:summarizer:openai_summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer__*__FUNCTION-summarize_code",
    "file_path": "postcode/ai_services/summarizer/openai_summarizer.py",
    "parent_id": "postcode:ai_services:summarizer:openai_summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer",
    "block_type": "FUNCTION",
    "start_line_num": 150,
    "end_line_num": 202,
    "code_content": "\ndef summarize_code(\n    self,\n    code: str,\n    *,\n    model_id: str,\n    children_summaries: str | None,\n    dependency_summaries: str | None,\n    import_details: str | None,\n    configs: SummaryCompletionConfigs = SummaryCompletionConfigs(),\n) -> OpenAIReturnContext | None:\n    \"\"\"\n        Summarizes the provided code snippet using the OpenAI API.\n\n        Args:\n            - code (str): The code snippet to summarize.\n            - configs (SummaryCompletionConfigs, optional): Configuration settings for the summarization.\n                Defaults to SummaryCompletionConfigs().\n\n        Returns:\n            - str: The summary of the provided code snippet.\n\n        Examples:\n            ```Python\n            client = OpenAI()\n\n            # Create a summarizer instance with the OpenAI client\n            summarizer = Summarizer(client=client)\n            code_example = \"print('Hello, world')\"\n\n            # Summarize the code snippet\n            summary = summarizer.summarize_code(code_example)\n            print(summary)\n            ```\n        \"\"\"\n\n    logging.info(f\"Summarizing code for model: {model_id}\")\n    prompt: str = self._create_prompt(\n        code, children_summaries, dependency_summaries, import_details\n    )\n    messages: list[ChatCompletionMessageParam] = self._create_messages_list(\n        system_message=configs.system_message, user_message=prompt\n    )\n\n    if summary_return_context := self._get_summary(messages, configs=configs):\n        if summary_return_context:\n            if summary_return_context.summary:\n                summary_return_context.summary = (\n                    summary_return_context.summary.split(\"FINAL SUMMARY:\")[-1]\n                )\n                return summary_return_context\n    return None\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\" delimiter, encapsulated in an `OpenAIReturnContext`.",
    "children_ids": []
}