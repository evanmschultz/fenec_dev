{
    "function_name": "_get_json_output_path",
    "docstring": "Gets the output path for a JSON file.\n\nArgs:\n    - file_path (str): The file path of the original Python file.\n    - json_output_directory (str): The path to the JSON output directory.\n\nReturns:\n    str: The output path for the JSON file.",
    "decorators": null,
    "parameters": null,
    "returns": "str",
    "is_method": true,
    "is_async": false,
    "id": "postcode:json_management:json_handler.py__*__MODULE__*__CLASS-JSONHandler__*__FUNCTION-_get_json_output_path",
    "file_path": "postcode/json_management/json_handler.py",
    "parent_id": "postcode:json_management:json_handler.py__*__MODULE__*__CLASS-JSONHandler",
    "block_type": "FUNCTION",
    "start_line_num": 123,
    "end_line_num": 143,
    "code_content": "\ndef _get_json_output_path(self, file_path: str, json_output_directory: str) -> str:\n    \"\"\"\n        Gets the output path for a JSON file.\n\n        Args:\n            - file_path (str): The file path of the original Python file.\n            - json_output_directory (str): The path to the JSON output directory.\n\n        Returns:\n            str: The output path for the JSON file.\n        \"\"\"\n\n    if \"DIRECTORY\" in file_path:\n        safe_file_path: str = file_path.replace(\"/\", \":\")\n        return str(Path(json_output_directory) / f\"{safe_file_path}.json\")\n    else:\n        relative_path: Path = Path(file_path).relative_to(Path(self.directory))\n        safe_relative_path: str = str(relative_path).replace(\"/\", \":\").rstrip(\".py\")\n        return str(Path(json_output_directory) / f\"{safe_relative_path}.json\")\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nThe `_get_json_output_path` method in the code takes a Python file path and a JSON output directory to construct a JSON file path. It checks for \"DIRECTORY\" in the file path, then either sanitizes the path directly or computes a relative path, sanitizes it, and appends a `.json` extension using the `pathlib.Path` class for path manipulation.",
    "children_ids": []
}