{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Console",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "rich.console",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Prompt",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "rich.prompt",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "GraphDBUpdater",
                    "as_name": null,
                    "local_block_id": "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater"
                }
            ],
            "imported_from": "postcode.updaters.graph_db_updater",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:updaters:graph_db_updater.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "setup_logging",
                    "as_name": null,
                    "local_block_id": "postcode:utilities:logger:logging_config.py__*__MODULE__*__FUNCTION-setup_logging"
                }
            ],
            "imported_from": "postcode.utilities.logger.logging_config",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:utilities:logger:logging_config.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ChromaCollectionManager",
                    "as_name": null,
                    "local_block_id": "postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaCollectionManager"
                }
            ],
            "imported_from": "postcode.databases.chroma.chromadb_collection_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ChromaLibrarian",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:librarians:chroma_librarians.py__*__MODULE__*__CLASS-ChromaLibrarian"
                }
            ],
            "imported_from": "postcode.ai_services.librarians.chroma_librarians",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:librarians:chroma_librarians.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "OpenAIChatAgent",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:chat:openai_agents.py__*__MODULE__*__CLASS-OpenAIChatAgent"
                }
            ],
            "imported_from": "postcode.ai_services.chat.openai_agents",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:chat:openai_agents.py__*__MODULE"
        }
    ],
    "id": "postcode:app.py__*__MODULE",
    "file_path": "postcode/app.py",
    "parent_id": "postcode__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 83,
    "code_content": "from postcode.updaters.graph_db_updater import GraphDBUpdater\nfrom postcode.utilities.logger.logging_config import setup_logging\n\nfrom postcode.databases.chroma.chromadb_collection_manager import (\n    ChromaCollectionManager,\n)\nfrom postcode.ai_services.librarians.chroma_librarians import ChromaLibrarian\nfrom postcode.ai_services.chat.openai_agents import OpenAIChatAgent\n\nfrom rich.console import Console\nfrom rich.prompt import Prompt\n\n\n# from postcode.updaters.standard_updater import StandardUpdater\n\n\ndef update_all_with_graph_db(\n    directory: str = \".\", output_directory: str = \"output_json\"\n) -> ChromaCollectionManager:\n    \"\"\"\n    Parses and summarizes all code snippets in the specified directory and updates the graph database and sets up a\n    ChromaDB collection.\n\n    Args:\n        - directory (str, optional): The directory containing code snippets to parse and summarize. Defaults to \".\".\n        - output_directory (str, optional): The directory to output the parsed and summarized code snippets.\n            Defaults to \"output_json\".\n\n    Returns:\n        - ChromaCollectionManager: An instance of ChromaCollectionManager for the specified collection.\n    \"\"\"\n    setup_logging()\n\n    graph_db_updater = GraphDBUpdater(directory, output_directory)\n    return graph_db_updater.update_all()\n\n\ndef _cli_loop(openai_chat_agent: OpenAIChatAgent, console: Console) -> None:\n    \"\"\"\n    Sets up a simple CLI loop for the chat agent.\n\n    Args:\n        - openai_chat_agent (OpenAIChatAgent): The OpenAI chat agent.\n        - console (Console): The Rich Console instance.\n    \"\"\"\n    while True:\n        user_input: str = Prompt.ask(\n            \"[bold blue]Ask a question about Postcode or type 'exit' to end[/]\"\n        )\n        if user_input.lower() == \"exit\":\n            break\n        response: str | None = openai_chat_agent.get_response(user_input)\n        console.print(f\"[bold green]Response:[/bold green]\\n{response}\")\n\n\ndef simple_chat(chroma_collection_manager: ChromaCollectionManager) -> None:\n    \"\"\"\n    Creates a simple chat app in the terminal using the OpenAI chat agent.\n\n    Args:\n        - chroma_collection_manager (ChromaCollectionManager): The Chroma collection manager instance.\n\n    Examples:\n        ```Python\n        from postcode import simple_chat\n        from postcode import setup_chroma\n\n        chroma_collection_manager = setup_chroma()\n        simple_chat(chroma_collection_manager)\n        # Now you can ask questions about Postcode in the terminal!\n        ```\n    \"\"\"\n\n    setup_logging()\n    console = Console()\n    chroma_librarian = ChromaLibrarian(chroma_collection_manager)\n    openai_chat_agent = OpenAIChatAgent(chroma_librarian)\n\n    try:\n        _cli_loop(openai_chat_agent, console)\n    finally:\n        console.print(\"Exiting the simple chat app.\")\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\n\nThe provided Python code comprises three main functions that work together to parse code snippets, update a graph database, and facilitate a simple chat application in the terminal. The `update_all_with_graph_db` function initializes logging, creates a `GraphDBUpdater` instance, and invokes its `update_all` method to parse code snippets from a given directory, update a graph database, and return a `ChromaCollectionManager` for the updated collection. The `_cli_loop` function establishes a CLI loop that uses `OpenAIChatAgent` and `Console` from the `rich` library to interact with users, allowing them to ask questions and receive responses until they choose to exit. The `simple_chat` function sets up the chat application, leveraging `ChromaLibrarian` and `OpenAIChatAgent` to manage user queries and display responses in the terminal, ensuring a graceful shutdown with a closing message. The code utilizes external modules such as `rich.console` and `rich.prompt` for user interaction, and custom classes like `GraphDBUpdater`, `ChromaCollectionManager`, and `OpenAIChatAgent` for its core functionalities.",
    "children_ids": [
        "postcode:app.py__*__MODULE__*__FUNCTION-update_all_with_graph_db",
        "postcode:app.py__*__MODULE__*__FUNCTION-_cli_loop",
        "postcode:app.py__*__MODULE__*__FUNCTION-simple_chat"
    ]
}