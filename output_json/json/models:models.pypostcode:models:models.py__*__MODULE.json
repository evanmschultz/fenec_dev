{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Union",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "BaseModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Field",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "validator",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "pydantic",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ImportModuleType",
                    "as_name": null,
                    "local_block_id": "postcode:models:enums.py__*__MODULE__*__CLASS-ImportModuleType"
                },
                {
                    "name": "CommentType",
                    "as_name": null,
                    "local_block_id": "postcode:models:enums.py__*__MODULE__*__CLASS-CommentType"
                },
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": "postcode:models:enums.py__*__MODULE__*__CLASS-BlockType"
                }
            ],
            "imported_from": "postcode.models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:models:enums.py__*__MODULE"
        }
    ],
    "id": "postcode:models:models.py__*__MODULE",
    "file_path": "postcode/models/models.py",
    "parent_id": "postcode:models__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 396,
    "code_content": "from typing import Union\nfrom pydantic import BaseModel, Field, validator\n\nfrom postcode.models.enums import (\n    BlockType,\n    ImportModuleType,\n    CommentType,\n)\n\n\nclass ImportNameModel(BaseModel):\n    \"\"\"Class representing the name of an import.\"\"\"\n\n    name: str\n    as_name: str | None = None\n    local_block_id: str | None = None\n\n    # def convert_import_names_to_metadata(self) -> str:\n    #     \"\"\"Converts the import name to a metadata string.\"\"\"\n\n    #     return self.model_dump_json()\n\n\nclass ImportModel(BaseModel):\n    \"\"\"Class representing an import statement.\"\"\"\n\n    import_names: list[ImportNameModel]\n    imported_from: str | None = None\n    import_module_type: ImportModuleType = ImportModuleType.STANDARD_LIBRARY\n    local_module_id: str | None = None\n\n    def convert_import_to_metadata(self) -> str:\n        \"\"\"Converts the import to a metadata string.\"\"\"\n        return self.model_dump_json()\n\n\nclass DependencyModel(BaseModel):\n    \"\"\"Class representing a module dependency.\"\"\"\n\n    code_block_id: str\n\n    def convert_dependency_to_metadata(self) -> str:\n        \"\"\"Converts the dependency to a metadata string.\"\"\"\n        return self.model_dump_json()\n\n\nclass CommentModel(BaseModel):\n    \"\"\"Class representing a comment.\"\"\"\n\n    content: str\n    comment_types: list[CommentType]\n\n    def convert_comment_to_metadata(self) -> str:\n        \"\"\"Converts the comment to a metadata string.\"\"\"\n        return self.model_dump_json()\n\n\nclass DecoratorModel(BaseModel):\n    \"\"\"Class representing a decorator.\"\"\"\n\n    content: str\n    decorator_name: str\n    decorator_args: list[str] | None = None\n\n    def convert_decorator_to_metadata(self) -> str:\n        \"\"\"Converts the decorator to a metadata string.\"\"\"\n        return self.model_dump_json()\n\n\nclass ClassKeywordModel(BaseModel):\n    \"\"\"Class representing a class keyword.\"\"\"\n\n    content: str\n    keyword_name: str\n    args: str | None = None\n\n    def convert_class_keyword_to_metadata(self) -> str:\n        \"\"\"Converts the class keyword to a metadata string.\"\"\"\n        return self.model_dump_json()\n\n\nclass ParameterModel(BaseModel):\n    \"\"\"Class representing a function parameter.\"\"\"\n\n    content: str\n\n\nclass ParameterListModel(BaseModel):\n    \"\"\"Class representing a list of parameters.\"\"\"\n\n    params: list[ParameterModel] | None = None\n    star_arg: ParameterModel | None = None\n    kwonly_params: list[ParameterModel] | None = None\n    star_kwarg: ParameterModel | None = None\n    posonly_params: list[ParameterModel] | None = None\n\n    def convert_parameters_to_metadata(self) -> str:\n        \"\"\"Converts the parameter list to a metadata string.\"\"\"\n        return self.model_dump_json()\n\n\nclass BaseCodeBlockModel(BaseModel):\n    \"\"\"Attributes common to all code block models.\"\"\"\n\n    id: str\n    file_path: str = Field(min_length=1)\n    parent_id: str | None = None\n    block_type: BlockType\n    start_line_num: int\n    end_line_num: int\n    code_content: str = \"\"\n    important_comments: list[CommentModel] | None = None\n    dependencies: list[ImportModel | DependencyModel] | None = None\n    summary: str | None = None\n    children_ids: list[str] | None = []\n\n    @validator(\"parent_id\", always=True)\n    def check_parent_id(cls, v, values, **kwargs) -> str | None:\n        \"\"\"Validates that parent_id is a non-empty string unless block_type is MODULE.\"\"\"\n\n        if \"block_type\" in values and values[\"block_type\"] != BlockType.MODULE:\n            if len(v) < 1:\n                raise ValueError(\"parent_id is required!\")\n        return v\n\n    def _convert_parent_id_to_metadata(self) -> str:\n        \"\"\"Converts the parent_id to a metadata string.\"\"\"\n        return f\"{self.parent_id}\" if self.parent_id else \"\"\n\n    def _convert_block_type_to_metadata(self) -> str:\n        \"\"\"Converts the block_type to a metadata string.\"\"\"\n        return f\"{self.block_type.name}\"\n\n    def _convert_important_comments_to_metadata(self) -> str:\n        \"\"\"Converts the important comments to a metadata string.\"\"\"\n\n        important_comments: str = (\n            self.model_dump_json() if self.important_comments else \"\"\n        )\n\n        return f\"{important_comments}\"\n\n    def _convert_dependencies_to_metadata(self) -> str:\n        \"\"\"Converts the dependencies to a metadata string.\"\"\"\n\n        dependencies_str: str = \"\"\n\n        if self.dependencies:\n            for dependency in self.dependencies:\n                if isinstance(dependency, ImportModel):\n                    dependencies_str += f\"{dependency.convert_import_to_metadata()}\\n\"\n                elif isinstance(dependency, DependencyModel):\n                    dependencies_str += (\n                        f\"{dependency.convert_dependency_to_metadata()}\\n\"\n                    )\n\n        return dependencies_str\n\n    def _convert_summary_to_metadata(self) -> str:\n        \"\"\"Converts the summary to a metadata string.\"\"\"\n        return f\"{self.summary}\" if self.summary else \"\"\n\n    def _convert_children_to_metadata(self) -> str:\n        \"\"\"Converts the children to a metadata string.\"\"\"\n\n        return str(self.children_ids) if self.children_ids else \"\"\n\n    def _convert_base_attributes_to_metadata_dict(self) -> dict[str, str | int]:\n        \"\"\"Converts the base attributes to a metadata dictionary.\"\"\"\n\n        return {\n            \"id\": self.id,\n            \"file_path\": self.file_path,\n            \"parent_id\": self._convert_parent_id_to_metadata(),\n            \"block_type\": self._convert_block_type_to_metadata(),\n            \"start_line_num\": self.start_line_num,\n            \"end_line_num\": self.end_line_num,\n            \"code_content\": self.code_content,\n            \"important_comments\": self._convert_important_comments_to_metadata(),\n            \"dependencies\": self._convert_dependencies_to_metadata(),\n            \"summary\": self._convert_summary_to_metadata(),\n            \"children\": self._convert_children_to_metadata(),\n        }\n\n\nclass ModuleSpecificAttributes(BaseModel):\n    \"\"\"Module specific attributes.\"\"\"\n\n    docstring: str | None = None\n    header: list[str] | None = None\n    footer: list[str] | None = None\n    imports: list[ImportModel] | None = None\n\n    def _convert_docstring_to_metadata(self) -> str:\n        \"\"\"Converts the docstring to a metadata string.\"\"\"\n        return f\"{self.docstring}\"\n\n    def _convert_header_to_metadata(self) -> str:\n        \"\"\"Converts the header and footer to a metadata string.\"\"\"\n        return self.model_dump_json()\n\n    def _convert_footer_to_metadata(self) -> str:\n        \"\"\"Converts the header and footer to a metadata string.\"\"\"\n        return self.model_dump_json()\n\n    def _convert_imports_to_metadata(self) -> str:\n        \"\"\"Converts the imports to a metadata string.\"\"\"\n        imports_str: str = self.model_dump_json() if self.imports else \"\"\n        return f\"{imports_str}\"\n\n    def _convert_module_attributes_to_metadata_dict(self) -> dict[str, str | int]:\n        \"\"\"Converts the module attributes to a metadata dictionary.\"\"\"\n\n        return {\n            \"docstring\": self._convert_docstring_to_metadata(),\n            \"header\": self._convert_header_to_metadata(),\n            \"footer\": self._convert_footer_to_metadata(),\n            \"imports\": self._convert_imports_to_metadata(),\n        }\n\n\nclass ModuleModel(BaseCodeBlockModel, ModuleSpecificAttributes):\n    \"\"\"Model for a module.\"\"\"\n\n    def convert_to_metadata(self) -> dict[str, str | int]:\n        \"\"\"Converts the module model to a metadata dictionary.\"\"\"\n\n        return {\n            **self._convert_base_attributes_to_metadata_dict(),\n            **self._convert_module_attributes_to_metadata_dict(),\n        }\n\n\nclass ClassSpecificAttributes(BaseModel):\n    \"\"\"Class specific attributes.\"\"\"\n\n    class_name: str = Field(min_length=1)\n    decorators: list[DecoratorModel] | None = None\n    bases: list[str] | None = None\n    docstring: str | None = None\n    keywords: list[ClassKeywordModel] | None = None\n    # attributes: list[dict] | None = None\n\n    def _convert_decorators_to_metadata(self) -> str:\n        \"\"\"Converts the decorators to a metadata string.\"\"\"\n        decorators_str: str = self.model_dump_json() if self.decorators else \"\"\n        return f\"{decorators_str}\"\n\n    def _convert_bases_to_metadata(self) -> str:\n        \"\"\"Converts the bases to a metadata string.\"\"\"\n        return self.model_dump_json() if self.bases else \"\"\n\n    def _convert_docstring_to_metadata(self) -> str:\n        \"\"\"Converts the docstring to a metadata string.\"\"\"\n        return f\"{self.docstring}\" if self.docstring else \"\"\n\n    def _convert_keywords_to_metadata(self) -> str:\n        \"\"\"Converts the keywords to a metadata string.\"\"\"\n        keywords_str: str = self.model_dump_json() if self.keywords else \"\"\n        return f\"{keywords_str}\"\n\n    def _convert_class_attributes_to_metadata_dict(self) -> dict[str, str | int]:\n        \"\"\"Converts the class attributes to a metadata dictionary.\"\"\"\n\n        return {\n            \"class_name\": self.class_name,\n            \"decorators\": self._convert_decorators_to_metadata(),\n            \"bases\": self._convert_bases_to_metadata(),\n            \"docstring\": self._convert_docstring_to_metadata(),\n            \"keywords\": self._convert_keywords_to_metadata(),\n        }\n\n\nclass ClassModel(BaseCodeBlockModel, ClassSpecificAttributes):\n    \"\"\"Model for a class.\"\"\"\n\n    def convert_to_metadata(self) -> dict[str, str | int]:\n        \"\"\"Converts the class model to a metadata dictionary.\"\"\"\n        return {\n            **self._convert_base_attributes_to_metadata_dict(),\n            **self._convert_class_attributes_to_metadata_dict(),\n        }\n\n\nclass FunctionSpecificAttributes(BaseModel):\n    \"\"\"Function specific attributes.\"\"\"\n\n    function_name: str = Field(min_length=1)\n    docstring: str | None = None\n    decorators: list[DecoratorModel] | None = None\n    parameters: ParameterListModel | None = None\n    returns: str | None = None\n    is_method: bool = False\n    is_async: bool = False\n\n    def _convert_docstring_to_metadata(self) -> str:\n        \"\"\"Converts the docstring to a metadata string.\"\"\"\n        return f\"{self.docstring}\" if self.docstring else \"\"\n\n    def _convert_decorators_to_metadata(self) -> str:\n        \"\"\"Converts the decorators to a metadata string.\"\"\"\n        decorators_str: str = self.model_dump_json() if self.decorators else \"\"\n        return f\"{decorators_str}\"\n\n    def _convert_parameters_to_metadata(self) -> str:\n        \"\"\"Converts the parameters to a metadata string.\"\"\"\n        return (\n            self.parameters.convert_parameters_to_metadata() if self.parameters else \"\"\n        )\n\n    def _convert_returns_to_metadata(self) -> str:\n        \"\"\"Converts the returns to a metadata string.\"\"\"\n        return f\"{self.returns}\" if self.returns else \"\"\n\n    def _convert_function_attributes_to_metadata_dict(self) -> dict[str, str | bool]:\n        \"\"\"Converts the function attributes to a metadata dictionary.\"\"\"\n\n        return {\n            \"function_name\": self.function_name,\n            \"docstring\": self._convert_docstring_to_metadata(),\n            \"decorators\": self._convert_decorators_to_metadata(),\n            \"parameters\": self._convert_parameters_to_metadata(),\n            \"returns\": self._convert_returns_to_metadata(),\n            \"is_method\": self.is_method,\n            \"is_async\": self.is_async,\n        }\n\n\nclass FunctionModel(BaseCodeBlockModel, FunctionSpecificAttributes):\n    \"\"\"Model for a function.\"\"\"\n\n    def convert_to_metadata(self) -> dict[str, str | int]:\n        \"\"\"Converts the function model to a metadata dictionary.\"\"\"\n\n        return {\n            **self._convert_base_attributes_to_metadata_dict(),\n            **self._convert_function_attributes_to_metadata_dict(),\n        }\n\n\nclass StandaloneCodeBlockSpecificAttributes(BaseModel):\n    \"\"\"Standalone code block specific attributes.\"\"\"\n\n    variable_assignments: list[str] | None = None\n\n    def _convert_variable_assignments_to_metadata(self) -> str:\n        \"\"\"Converts the variable assignments to a metadata string.\"\"\"\n        return self.model_dump_json() if self.variable_assignments else \"\"\n\n    def _convert_standalone_block_attributes_to_metadata_dict(\n        self,\n    ) -> dict[str, str | int]:\n        \"\"\"Converts the standalone code block attributes to a metadata dictionary.\"\"\"\n        return {\n            \"variable_assignments\": self._convert_variable_assignments_to_metadata(),\n        }\n\n\nclass StandaloneCodeBlockModel(\n    BaseCodeBlockModel, StandaloneCodeBlockSpecificAttributes\n):\n    \"\"\"Model for a standalone code block.\"\"\"\n\n    def convert_to_metadata(self) -> dict[str, str | int]:\n        \"\"\"Converts the standalone code block model to a metadata dictionary.\"\"\"\n\n        return {\n            **self._convert_base_attributes_to_metadata_dict(),\n            **self._convert_standalone_block_attributes_to_metadata_dict(),\n        }\n\n\nclass DirectoryModel(BaseModel):\n    \"\"\"Model for a directory.\"\"\"\n\n    id: str\n    block_type: BlockType = BlockType.DIRECTORY\n    directory_name: str\n    sub_directories_ids: list[str]\n    children_ids: list[str]\n    parent_id: str | None\n    summary: str | None = None\n\n    def convert_to_metadata(self) -> dict[str, str | int]:\n        \"\"\"Converts the directory model to a metadata dictionary.\"\"\"\n\n        return {\n            \"directory_name\": self.directory_name,\n            \"sub_directories\": str(self.sub_directories_ids)\n            if self.sub_directories_ids\n            else \"\",\n            \"children_ids\": self.model_dump_json() if self.children_ids else \"\",\n            \"parent_id\": self.parent_id if self.parent_id else \"\",\n            \"summary\": self.summary if self.summary else \"\",\n        }\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:models:models.py__*__MODULE\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ImportNameModel\n\n        None, None, \nfrom pydantic import BaseModel, Field, validator\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ImportModel\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ImportModel__*__FUNCTION-convert_import_to_metadata\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-DependencyModel\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-DependencyModel__*__FUNCTION-convert_dependency_to_metadata\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-CommentModel\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-CommentModel__*__FUNCTION-convert_comment_to_metadata\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-DecoratorModel\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-DecoratorModel__*__FUNCTION-convert_decorator_to_metadata\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ClassKeywordModel\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ClassKeywordModel__*__FUNCTION-convert_class_keyword_to_metadata\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ParameterModel\n\n        None, None, \nfrom pydantic import BaseModel, Field, validator\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ParameterListModel\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ParameterListModel__*__FUNCTION-convert_parameters_to_metadata\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel__*__FUNCTION-check_parent_id\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel__*__FUNCTION-_convert_parent_id_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel__*__FUNCTION-_convert_block_type_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel__*__FUNCTION-_convert_important_comments_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel__*__FUNCTION-_convert_dependencies_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel__*__FUNCTION-_convert_summary_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel__*__FUNCTION-_convert_children_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel__*__FUNCTION-_convert_base_attributes_to_metadata_dict\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes__*__FUNCTION-_convert_docstring_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes__*__FUNCTION-_convert_header_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes__*__FUNCTION-_convert_footer_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes__*__FUNCTION-_convert_imports_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes__*__FUNCTION-_convert_module_attributes_to_metadata_dict\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ModuleModel\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ModuleModel__*__FUNCTION-convert_to_metadata\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_decorators_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_bases_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_docstring_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_keywords_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_class_attributes_to_metadata_dict\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ClassModel\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-ClassModel__*__FUNCTION-convert_to_metadata\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes__*__FUNCTION-_convert_docstring_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes__*__FUNCTION-_convert_decorators_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes__*__FUNCTION-_convert_parameters_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes__*__FUNCTION-_convert_returns_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes__*__FUNCTION-_convert_function_attributes_to_metadata_dict\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-FunctionModel\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-FunctionModel__*__FUNCTION-convert_to_metadata\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockSpecificAttributes\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockSpecificAttributes__*__FUNCTION-_convert_variable_assignments_to_metadata\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockSpecificAttributes__*__FUNCTION-_convert_standalone_block_attributes_to_metadata_dict\n\n        None, None, None\n        , None, None\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockModel\n\n        \n\nSummary:\n\n        postcode:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockModel__*__FUNCTION-convert_to_metadata\n\n        None, None, None\n        , None, None\n        \nChild (postcode:models:models.py__*__MODULE__*__CLASS-DirectoryModel) code content:\n\n\nclass DirectoryModel(BaseModel):\n    \"\"\"Model for a directory.\"\"\"\n\n    id: str\n    block_type: BlockType = BlockType.DIRECTORY\n    directory_name: str\n    sub_directories_ids: list[str]\n    children_ids: list[str]\n    parent_id: str | None\n    summary: str | None = None\n\n    def convert_to_metadata(self) -> dict[str, str | int]:\n        \"\"\"Converts the directory model to a metadata dictionary.\"\"\"\n\n        return {\n            \"directory_name\": self.directory_name,\n            \"sub_directories\": str(self.sub_directories_ids)\n            if self.sub_directories_ids\n            else \"\",\n            \"children_ids\": self.model_dump_json() if self.children_ids else \"\",\n            \"parent_id\": self.parent_id if self.parent_id else \"\",\n            \"summary\": self.summary if self.summary else \"\",\n        }\n\n, None, None\n        ",
    "children_ids": [
        "postcode:models:models.py__*__MODULE__*__CLASS-ImportNameModel",
        "postcode:models:models.py__*__MODULE__*__CLASS-ImportModel",
        "postcode:models:models.py__*__MODULE__*__CLASS-DependencyModel",
        "postcode:models:models.py__*__MODULE__*__CLASS-CommentModel",
        "postcode:models:models.py__*__MODULE__*__CLASS-DecoratorModel",
        "postcode:models:models.py__*__MODULE__*__CLASS-ClassKeywordModel",
        "postcode:models:models.py__*__MODULE__*__CLASS-ParameterModel",
        "postcode:models:models.py__*__MODULE__*__CLASS-ParameterListModel",
        "postcode:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel",
        "postcode:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes",
        "postcode:models:models.py__*__MODULE__*__CLASS-ModuleModel",
        "postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes",
        "postcode:models:models.py__*__MODULE__*__CLASS-ClassModel",
        "postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes",
        "postcode:models:models.py__*__MODULE__*__CLASS-FunctionModel",
        "postcode:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockSpecificAttributes",
        "postcode:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockModel",
        "postcode:models:models.py__*__MODULE__*__CLASS-DirectoryModel"
    ]
}