{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Sequence",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "DecoratorModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DecoratorModel"
                },
                {
                    "name": "ParameterModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ParameterModel"
                },
                {
                    "name": "ParameterListModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ParameterListModel"
                }
            ],
            "imported_from": "postcode.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": "postcode:models:enums.py__*__MODULE__*__CLASS-BlockType"
                }
            ],
            "imported_from": "postcode.models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:models:enums.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "postcode.python_parser.visitors.node_processing.common_functions",
                    "as_name": "common_functions",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "PositionData",
                    "as_name": null,
                    "local_block_id": "postcode:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData"
                }
            ],
            "imported_from": "postcode.utilities.processing_context",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:utilities:processing_context.py__*__MODULE"
        }
    ],
    "id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
    "file_path": "postcode/python_parser/visitors/node_processing/function_def_functions.py",
    "parent_id": "postcode:python_parser:visitors:node_processing__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 200,
    "code_content": "from typing import Sequence\n\nimport libcst\n\nfrom postcode.python_parser.model_builders.function_model_builder import (\n    FunctionModelBuilder,\n)\n\nfrom postcode.models.models import (\n    DecoratorModel,\n    ParameterListModel,\n    ParameterModel,\n)\nfrom postcode.models.enums import BlockType\nimport postcode.python_parser.visitors.node_processing.common_functions as common_functions\n\nfrom postcode.utilities.processing_context import PositionData\n\n\ndef process_func_def(\n    func_id: str,\n    node: libcst.FunctionDef,\n    position_data: PositionData,\n    func_builder: FunctionModelBuilder,\n) -> None:\n    \"\"\"\n    Processes a libcst.FunctionDef node to build a function model.\n\n    Extracts various components of a function definition such as its docstring, code content, decorators, and return annotations,\n    and updates the provided FunctionModelBuilder with these details.\n\n    Args:\n        - func_id (str): The unique identifier for the function.\n        - node (libcst.FunctionDef): The function definition node from the CST.\n        - position_data (PositionData): Positional data for the function in the source code.\n        - func_builder (FunctionModelBuilder): The builder used to construct the function model.\n\n    Example:\n        ```Python\n        func_builder = FunctionModelBuilder(id=\"func1\", ...)\n        process_func_def(\"func1\", function_node, position_data, func_builder)\n        # Processes the function definition and updates the function builder.\n        ```\n    \"\"\"\n\n    docstring: str | None = node.get_docstring()\n    code_content: str = common_functions.extract_code_content(node)\n    decorators: list[DecoratorModel] | None = common_functions.extract_decorators(\n        node.decorators\n    )\n\n    returns: str = (\n        _extract_return_annotation(node.returns)\n        if node.returns\n        else \"Function has no return annotation\"\n    )\n    (\n        func_builder.set_docstring(docstring)\n        .set_code_content(code_content)\n        .set_start_line_num(position_data.start)\n        .set_end_line_num(position_data.end)\n    )\n    (\n        func_builder.set_decorators(decorators)\n        .set_is_method(_func_is_method(func_id))\n        .set_is_async(_func_is_async(node))\n        .set_return_annotation(returns)\n    )\n\n\ndef process_parameters(\n    node: libcst.Parameters,\n) -> ParameterListModel | None:\n    \"\"\"\n    Processes libcst.Parameters node to create a ParameterListModel.\n\n    Extracts parameters, keyword-only parameters, positional-only parameters, and special arguments (like *args and **kwargs)\n    from the function definition and forms a model representing these parameters.\n\n    Args:\n        - node (libcst.Parameters): The parameters node from a function definition.\n\n    Returns:\n        - ParameterListModel | None: A model representing the function's parameters, or None if there are no parameters.\n\n    Example:\n        ```Python\n        parameters_model = process_parameters(function_node.params)\n        # Processes the function parameters and returns a parameter model.\n        ```\n    \"\"\"\n\n    params: list[ParameterModel] | None = (\n        _get_parameters_list(node.params) if node.params else []\n    )\n    kwonly_params: list[ParameterModel] | None = (\n        _get_parameters_list(node.kwonly_params) if node.kwonly_params else []\n    )\n    posonly_params: list[ParameterModel] | None = (\n        _get_parameters_list(node.posonly_params) if node.posonly_params else []\n    )\n\n    star_arg: ParameterModel | None = (\n        ParameterModel(\n            content=common_functions.extract_stripped_code_content(node.star_arg)\n        )\n        if node.star_arg and isinstance(node.star_arg, libcst.Param)\n        else None\n    )\n    star_kwarg: ParameterModel | None = (\n        ParameterModel(\n            content=common_functions.extract_stripped_code_content(node.star_kwarg)\n        )\n        if node.star_kwarg\n        else None\n    )\n\n    if params and kwonly_params and posonly_params and star_arg and star_kwarg:\n        return ParameterListModel(\n            params=params,\n            kwonly_params=kwonly_params,\n            posonly_params=posonly_params,\n            star_arg=star_arg,\n            star_kwarg=star_kwarg,\n        )\n\n\ndef _func_is_method(id: str) -> bool:\n    \"\"\"\n    Returns true if an ancestor of the function is a class.\n\n    Args:\n        - id (str): The identifier of the function.\n\n    Returns:\n        - bool: True if the function is a method, False otherwise.\n    \"\"\"\n\n    return str(BlockType.CLASS) in id\n\n\ndef _func_is_async(node: libcst.FunctionDef) -> bool:\n    \"\"\"\n    Returns true if the function is async.\n\n    Args:\n        - node (libcst.FunctionDef): The function definition node.\n\n    Returns:\n        - bool: True if the function is async, False otherwise.\n    \"\"\"\n\n    return True if node.asynchronous else False\n\n\ndef _get_parameters_list(\n    parameter_sequence: Sequence[libcst.Param],\n) -> list[ParameterModel] | None:\n    \"\"\"\n    Returns a list of ParameterModel representing the parameters in a function definition.\n\n    Args:\n        - parameter_sequence (Sequence[libcst.Param]): The sequence of parameters from the function definition.\n\n    Returns:\n        - list[ParameterModel] | None: A list of ParameterModel instances or None if there are no parameters.\n    \"\"\"\n\n    params: list[ParameterModel] | None = None\n\n    if parameter_sequence:\n        params = []\n        for parameter in parameter_sequence:\n            param: ParameterModel = ParameterModel(\n                content=common_functions.extract_stripped_code_content(parameter)\n            )\n            params.append(param)\n\n    return params if params else None\n\n\ndef _extract_return_annotation(\n    node_returns: libcst.Annotation | None,\n) -> str:\n    \"\"\" \"\n    Extracts the return annotation from a function definition.\n\n    Args:\n        - node_returns (libcst.Annotation | None): The return annotation node.\n\n    Returns:\n        - str: The extracted return annotation or \"No return annotation\" if none is found.\n    \"\"\"\n\n    if isinstance(node_returns, libcst.Annotation) and node_returns:\n        annotation: str | None = common_functions.extract_type_annotation(node_returns)\n        return annotation if annotation else \"No return annotation\"\n    else:\n        return \"No return annotation\"\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\n\nThe provided Python code defines a set of functions for processing and extracting information from function definitions using the `libcst` library. The `process_func_def` function constructs a function model by extracting a function's docstring, code content, decorators, and return annotations, and updates a `FunctionModelBuilder` instance with these details. It utilizes helper functions `_func_is_method` to determine if the function is a method of a class, `_func_is_async` to check if the function is asynchronous, and `_extract_return_annotation` to retrieve the function's return type annotation.\n\nThe `process_parameters` function creates a `ParameterListModel` from a `libcst.Parameters` node, which includes regular, keyword-only, positional-only parameters, and special arguments like `*args` and `**kwargs`. It uses the `_get_parameters_list` helper function to convert sequences of parameters into lists of `ParameterModel` instances or returns `None` if no parameters are present.\n\nEach function is documented with Args and Returns sections, providing clear descriptions of their inputs and outputs. The code is structured to facilitate the parsing and modeling of Python function definitions, aiding in the analysis and representation of code structure.",
    "children_ids": [
        "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-process_func_def",
        "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-process_parameters",
        "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_func_is_method",
        "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_func_is_async",
        "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_get_parameters_list",
        "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_extract_return_annotation"
    ]
}