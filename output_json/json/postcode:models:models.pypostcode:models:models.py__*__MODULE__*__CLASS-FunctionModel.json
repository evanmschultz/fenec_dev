{
    "class_name": "FunctionModel",
    "decorators": null,
    "bases": [
        "BaseCodeBlockModel",
        "FunctionSpecificAttributes"
    ],
    "docstring": "A model for a function.\n\nAttributes:\n    - id (str): The unique identifier for the function.\n    - file_path (str): The path to the Python file that the function represents.\n    - parent_id (str | None): The identifier of the parent (usually a module or class).\n    - block_type (BlockType): The type of code block that the function represents.\n    - start_line_num (int): The line number of the first line of the function.\n    - end_line_num (int): The line number of the last line of the function.\n    - code_content (str): The string content of the function.\n    - important_comments (list[CommentModel] | None): A list of important comments in the function.\n    - dependencies (list[ImportModel | DependencyModel] | None): A list of dependencies for the function.\n    - summary (str | None): A summary of the function.\n    - children_ids (list[str] | None): A list of the identifiers of the children of the function.\n    - function_name (str): The name of the function.\n    - docstring (str | None): The docstring of the function.\n    - decorators (list[DecoratorModel] | None): A list of decorators for the function.\n    - parameters (ParameterListModel | None): A model representing the function's parameters.\n    - returns (str | None): A string representing the function's return annotation.\n    - is_method (bool): True if the function is a method, False otherwise.\n    - is_async (bool): True if the function is asynchronous, False otherwise.\n\nMethods:\n    - `convert_to_metadata() -> dict[str, str | int]`:\n        Converts the function model to a metadata dictionary for ChromaDB.",
    "keywords": null,
    "id": "postcode:models:models.py__*__MODULE__*__CLASS-FunctionModel",
    "file_path": "postcode/models/models.py",
    "parent_id": "postcode:models:models.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 375,
    "end_line_num": 413,
    "code_content": "\n\nclass FunctionModel(BaseCodeBlockModel, FunctionSpecificAttributes):\n    \"\"\"\n    A model for a function.\n\n    Attributes:\n        - id (str): The unique identifier for the function.\n        - file_path (str): The path to the Python file that the function represents.\n        - parent_id (str | None): The identifier of the parent (usually a module or class).\n        - block_type (BlockType): The type of code block that the function represents.\n        - start_line_num (int): The line number of the first line of the function.\n        - end_line_num (int): The line number of the last line of the function.\n        - code_content (str): The string content of the function.\n        - important_comments (list[CommentModel] | None): A list of important comments in the function.\n        - dependencies (list[ImportModel | DependencyModel] | None): A list of dependencies for the function.\n        - summary (str | None): A summary of the function.\n        - children_ids (list[str] | None): A list of the identifiers of the children of the function.\n        - function_name (str): The name of the function.\n        - docstring (str | None): The docstring of the function.\n        - decorators (list[DecoratorModel] | None): A list of decorators for the function.\n        - parameters (ParameterListModel | None): A model representing the function's parameters.\n        - returns (str | None): A string representing the function's return annotation.\n        - is_method (bool): True if the function is a method, False otherwise.\n        - is_async (bool): True if the function is asynchronous, False otherwise.\n\n    Methods:\n        - `convert_to_metadata() -> dict[str, str | int]`:\n            Converts the function model to a metadata dictionary for ChromaDB.\n    \"\"\"\n\n    def convert_to_metadata(self) -> dict[str, str | int]:\n        \"\"\"Converts the function model to a metadata dictionary for ChromaDB.\"\"\"\n\n        return {\n            **self._convert_base_attributes_to_metadata_dict(),\n            **self._convert_function_attributes_to_metadata_dict(),\n        }\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ImportModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DependencyModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-CommentModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DecoratorModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ParameterListModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModuleType",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "CommentType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": null
        }
    ],
    "summary": "\n\nThe `FunctionModel` class, inheriting from `BaseCodeBlockModel` and `FunctionSpecificAttributes`, encapsulates the representation of a function within a Python codebase, providing detailed attributes such as unique identifier (`id`), file path (`file_path`), parent identifier (`parent_id`), block type (`block_type`), line numbers (`start_line_num`, `end_line_num`), code content (`code_content`), and more. It includes a list of important comments (`important_comments`), dependencies (`dependencies`), a summary (`summary`), and identifiers of child elements (`children_ids`). The class also defines the function's name (`function_name`), docstring (`docstring`), decorators (`decorators`), parameters (`parameters`), return annotation (`returns`), and flags indicating if it's a method (`is_method`) or asynchronous (`is_async`). The `convert_to_metadata` method within `FunctionModel` is responsible for converting the function model into a metadata dictionary suitable for ChromaDB, merging base attributes with function-specific attributes into a single dictionary.",
    "children_ids": [
        "postcode:models:models.py__*__MODULE__*__CLASS-FunctionModel__*__FUNCTION-convert_to_metadata"
    ]
}