{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": null,
    "id": "postcode:ai_services:librarians:prompts:chroma_librarian_prompts.py__*__MODULE",
    "file_path": "postcode/ai_services/librarians/prompts/chroma_librarian_prompts.py",
    "parent_id": "postcode:ai_services:librarians:prompts__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 45,
    "code_content": "DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT: str = f\"\"\"\nYou are an expert at writing queries to retrieve data from a ChromaDB vector database. You take user questions and\nwrite a given number of queries that will best retrieve the relevant data from the vector store. The vector contains\ndata for a Python project, so write your queries accordingly. Always return your queries as a list\nin a json object where the key to the list is \"query_list\".\n\"\"\"\n\nDEFAULT_CHROMA_LIBRARIAN_PROMPT: str = \"\"\"\nGiven the following user question, write {queries_count} queries that will best retrieve the relevant data from the\nvector store.\n\nWhen creating queries for a vector database, especially concerning specific functionalities or components within a Python project, it's helpful to:\n    1. Specify the Component: Clearly mention the class, module, or function you're interested in.\n    2. Focus on the Action or Feature: Highlight what you want to know about - whether it's retrieving results, serialization, validation methods, etc.\n    3. Vary the Structure: Include variations of your query to cover different ways the information might be phrased or indexed.\n\nExamples:\n    - User question:\n        - How do I get the results from the chromadb vector database using a list of queries in this project?\n    - Your queries:\n        \"query_list\": [\n            \"chromadb vector database results from list of queries\",\n            \"query chromadb vector database\",\n            \"search vector database\"\n        ]\n\n    - User Question:\n        - \"What methods are available for data validation in the UserInputValidator module?\"\n    - Your Queries:\n        \"query_list\": [\n            \"Methods in UserInputValidator module for data validation in Python\",\n            \"UserInputValidator Python module data validation techniques\",\n            \"List methods UserInputValidator for validating data in Python\"\n        ]\n\nUser Question: {user_question}\n\nMake sure to return your queries as a list in a json object where the key to the list is \"query_list\".\n\"\"\"\n\nprompts_list: list[str] = [\n    DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT,\n    DEFAULT_CHROMA_LIBRARIAN_PROMPT,\n]\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\n\nThe provided Python code defines two string constants, `DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT` and `DEFAULT_CHROMA_LIBRARIAN_PROMPT`, which serve as templates for generating queries to retrieve data from a ChromaDB vector database related to a Python project. These templates instruct users on constructing effective queries by specifying the component of interest, focusing on the desired action or feature, and varying the query structure. The templates are designed to be filled with specific user questions and the number of queries to generate. The resulting queries are expected to be returned as a list within a JSON object with the key \"query_list\". Both templates are included in the `prompts_list` array, suggesting their use in a system that assists users in formulating queries for data retrieval from the vector database.",
    "children_ids": [
        "postcode:ai_services:librarians:prompts:chroma_librarian_prompts.py__*__MODULE__*__STANDALONE_BLOCK-1"
    ]
}