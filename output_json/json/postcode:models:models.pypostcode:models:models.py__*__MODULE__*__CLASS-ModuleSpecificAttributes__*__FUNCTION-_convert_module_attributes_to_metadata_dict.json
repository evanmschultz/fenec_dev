{
    "function_name": "_convert_module_attributes_to_metadata_dict",
    "docstring": "Converts the module attributes to a metadata dictionary for ChromaDB.",
    "decorators": null,
    "parameters": null,
    "returns": "dict[str, str | int]",
    "is_method": true,
    "is_async": false,
    "id": "postcode:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes__*__FUNCTION-_convert_module_attributes_to_metadata_dict",
    "file_path": "postcode/models/models.py",
    "parent_id": "postcode:models:models.py__*__MODULE__*__CLASS-ModuleSpecificAttributes",
    "block_type": "FUNCTION",
    "start_line_num": 210,
    "end_line_num": 220,
    "code_content": "\ndef _convert_module_attributes_to_metadata_dict(self) -> dict[str, str | int]:\n    \"\"\"Converts the module attributes to a metadata dictionary for ChromaDB.\"\"\"\n\n    return {\n        \"docstring\": self._convert_docstring_to_metadata(),\n        \"header\": self._convert_header_to_metadata(),\n        \"footer\": self._convert_footer_to_metadata(),\n        \"imports\": self._convert_imports_to_metadata(),\n    }\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nThe code snippet features a private method `_convert_module_attributes_to_metadata_dict` within a class, designed to compile a dictionary with keys \"docstring\", \"header\", \"footer\", and \"imports\". Each key corresponds to metadata extracted from a module's attributes, formatted for ChromaDB integration, and the values are of types string or integer, as indicated by the return type hint `dict[str, str | int]`.",
    "children_ids": []
}