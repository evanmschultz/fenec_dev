{
    "function_name": "test_query_chroma",
    "docstring": null,
    "decorators": null,
    "parameters": null,
    "returns": "None",
    "is_method": false,
    "is_async": false,
    "id": "postcode:tests:ai_services:librarians:test_chroma_librarians.py__*__MODULE__*__FUNCTION-test_query_chroma",
    "file_path": "postcode/tests/ai_services/librarians/test_chroma_librarians.py",
    "parent_id": "postcode:tests:ai_services:librarians:test_chroma_librarians.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 28,
    "end_line_num": 51,
    "code_content": "\n\ndef test_query_chroma(\n    mock_chroma_collection_manager: MagicMock, mock_openai_client: MagicMock\n) -> None:\n    librarian = ChromaLibrarian(mock_chroma_collection_manager)\n\n    mock_openai_client.chat.completions.create.return_value = MagicMock(\n        choices=[\n            MagicMock(\n                message=MagicMock(\n                    content=json.dumps({\"query_list\": [\"query1\", \"query2\", \"query3\"]})\n                )\n            )\n        ]\n    )\n\n    mock_chroma_collection_manager.query_collection.return_value = MagicMock()\n\n    result: chroma_types.QueryResult | None = librarian.query_chroma(\"user_question\")\n\n    assert result is not None\n    assert mock_chroma_collection_manager.query_collection.called\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "postcode:tests:ai_services:librarians:test_chroma_librarians.py__*__MODULE__*__FUNCTION-mock_openai_client"
        },
        {
            "code_block_id": "postcode:tests:ai_services:librarians:test_chroma_librarians.py__*__MODULE__*__FUNCTION-mock_chroma_collection_manager"
        },
        {
            "import_names": [
                {
                    "name": "json",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "patch",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "MagicMock",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "unittest.mock",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ChromaLibrarian",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:librarians:chroma_librarians.py__*__MODULE__*__CLASS-ChromaLibrarian"
                }
            ],
            "imported_from": "postcode.ai_services.librarians.chroma_librarians",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:librarians:chroma_librarians.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "postcode.types.chroma",
                    "as_name": "chroma_types",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:types:chroma.py__*__MODULE"
        }
    ],
    "summary": "\nThe code defines a test function `test_query_chroma` that verifies the functionality of querying a chroma collection using a `ChromaLibrarian` object. The test uses two mock objects, `mock_chroma_collection_manager` and `mock_openai_client`, to simulate the behavior of the collection manager and the OpenAI client, respectively. The `ChromaLibrarian` is initialized with the mocked collection manager. The OpenAI client mock is set up to return a predefined JSON response containing a list of queries when its `chat.completions.create` method is called. The test then calls the `query_chroma` method of the `ChromaLibrarian` with a sample user question and checks that a `QueryResult` is returned and that the `query_collection` method of the collection manager mock was called. The `json` module from the standard library is used to encode the mock response data.",
    "children_ids": []
}