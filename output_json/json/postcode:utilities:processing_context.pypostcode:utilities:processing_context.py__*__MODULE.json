{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "dataclass",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "dataclasses",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "id": "postcode:utilities:processing_context.py__*__MODULE",
    "file_path": "postcode/utilities/processing_context.py",
    "parent_id": "postcode:utilities__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 30,
    "code_content": "from dataclasses import dataclass\n\nimport libcst\n\n\n@dataclass\nclass PositionData:\n    \"\"\"Positional data for a node in the syntax tree.\"\"\"\n\n    start: int\n    end: int\n\n\n@dataclass\nclass NodeAndPositionData:\n    \"\"\"A node in the syntax tree and its positional data.\"\"\"\n\n    nodes: list[libcst.CSTNode]\n    start: int\n    end: int\n\n\n@dataclass\nclass LoggingCallerInfo:\n    \"\"\"Information about the caller of a function that is being logged. Used for `logging_decorator`.\"\"\"\n\n    caller_module_name: str\n    caller_file_path: str\n    caller_line_no: int\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\n\nThe provided Python code defines three data classes using the `dataclass` decorator from the `dataclasses` module, each representing different types of data structures to hold specific information. The `PositionData` class encapsulates positional data for a syntax tree node, with attributes for the start and end positions. The `NodeAndPositionData` class extends this concept by including a list of `libcst.CSTNode` objects alongside the start and end positions, representing a collection of nodes in the syntax tree and their positional data. Lastly, the `LoggingCallerInfo` class is designed to store information about the caller of a function, such as the module name, file path, and line number, which is particularly useful for a `logging_decorator`. These classes are intended to be used in a larger context where syntax tree analysis and function call logging are required, leveraging the `libcst` library for handling concrete syntax trees.",
    "children_ids": [
        "postcode:utilities:processing_context.py__*__MODULE__*__CLASS-PositionData",
        "postcode:utilities:processing_context.py__*__MODULE__*__CLASS-NodeAndPositionData",
        "postcode:utilities:processing_context.py__*__MODULE__*__CLASS-LoggingCallerInfo"
    ]
}