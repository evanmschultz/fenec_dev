{
    "class_name": "OpenAIResponseContent",
    "decorators": null,
    "bases": [
        "BaseModel"
    ],
    "docstring": "Pydantic model representing the content structure of an OpenAI response.\n\nOpenAI is set to respond with a JSON object, so this model is used to parse the response.\n\nAttributes:\n    - query_list (list[str]): List of queries in the OpenAI response.",
    "keywords": null,
    "id": "postcode:ai_services:librarians:chroma_librarians.py__*__MODULE__*__CLASS-OpenAIResponseContent",
    "file_path": "postcode/ai_services/librarians/chroma_librarians.py",
    "parent_id": "postcode:ai_services:librarians:chroma_librarians.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 18,
    "end_line_num": 55,
    "code_content": "\n# TOOLS: list[dict[str, Any]] = [\n#     {\n#         \"type\": \"function\",\n#         \"function\": {\n#             \"name\": \"query_chroma\",\n#             \"description\": \"Get the results from the chromadb vector database using a list of queries.\",\n#             \"parameters\": {\n#                 \"type\": \"object\",\n#                 \"properties\": {\n#                     \"queries\": {\n#                         \"type\": \"list[str]\",\n#                         \"description\": \"List of queries to use to get the results from the chromadb vector database.\",\n#                     },\n#                     \"n_results\": {\n#                         \"type\": \"int\",\n#                         \"description\": \"Number of results to return, default is 10.\",\n#                     },\n#                 },\n#                 \"required\": [\"queries\"],\n#             },\n#         },\n#     }\n# ]\n\n\nclass OpenAIResponseContent(BaseModel):\n    \"\"\"\n    Pydantic model representing the content structure of an OpenAI response.\n\n    OpenAI is set to respond with a JSON object, so this model is used to parse the response.\n\n    Attributes:\n        - query_list (list[str]): List of queries in the OpenAI response.\n    \"\"\"\n\n    query_list: list[str]\n",
    "important_comments": [
        {
            "content": "#             \"name\": \"query_chroma\",",
            "comment_types": [
                "Q"
            ]
        },
        {
            "content": "#             \"description\": \"Get the results from the chromadb vector database using a list of queries.\",",
            "comment_types": [
                "Q"
            ]
        },
        {
            "content": "#                     \"queries\": {",
            "comment_types": [
                "Q"
            ]
        },
        {
            "content": "#                         \"description\": \"List of queries to use to get the results from the chromadb vector database.\",",
            "comment_types": [
                "Q"
            ]
        },
        {
            "content": "#                 \"required\": [\"queries\"],",
            "comment_types": [
                "Q"
            ]
        }
    ],
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "OpenAI",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "BaseModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "pydantic",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "summary": "\nThe code features a Pydantic `BaseModel` subclass named `OpenAIResponseContent`, which is structured to parse JSON responses from OpenAI, focusing on extracting a list of string queries. Additionally, there is a detailed but commented-out schema for a function tool that outlines how to query a \"chromadb\" vector database, including parameters and expected results, although this part is not executable.",
    "children_ids": []
}