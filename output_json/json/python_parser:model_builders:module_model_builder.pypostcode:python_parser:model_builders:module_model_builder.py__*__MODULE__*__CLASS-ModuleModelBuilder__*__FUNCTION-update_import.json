{
    "function_name": "update_import",
    "docstring": "Update an import in the imports list.\n\nLoops through the imports list and replaces the old import with the updated import.\n\nArgs:\n    updated_import_model (ImportModel): The updated import model.\n    old_import_model\n\nReturns:\n    ModuleModelBuilder: The module model builder instance.\n\nRaises:\n    Exception: If the import to be updated is not found.",
    "decorators": null,
    "parameters": null,
    "returns": "No return annotation",
    "is_method": true,
    "is_async": false,
    "id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder__*__FUNCTION-update_import",
    "file_path": "postcode/python_parser/model_builders/module_model_builder.py",
    "parent_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder",
    "block_type": "FUNCTION",
    "start_line_num": 85,
    "end_line_num": 132,
    "code_content": "\ndef update_import(\n    self, updated_import_model: ImportModel, old_import_model: ImportModel\n) -> \"ModuleModelBuilder\":\n    \"\"\"\n        Update an import in the imports list.\n\n        Loops through the imports list and replaces the old import with the updated import.\n\n        Args:\n            updated_import_model (ImportModel): The updated import model.\n            old_import_model\n\n        Returns:\n            ModuleModelBuilder: The module model builder instance.\n\n        Raises:\n            Exception: If the import to be updated is not found.\n        \"\"\"\n    if self.module_attributes.imports:\n        import_to_remove: ImportModel | None = None\n        for existing_import in self.module_attributes.imports:\n            if (\n                existing_import.import_names == old_import_model.import_names\n                and existing_import.imported_from == old_import_model.imported_from\n                and existing_import.import_module_type\n                == old_import_model.import_module_type\n            ):\n                import_to_remove = existing_import\n                # if \"OpenAISummarizer\" in [\n                #     name.name for name in existing_import.import_names\n                # ]:\n                #     print(\"Updating OpenAISummarizer import\")\n                break\n\n        if not import_to_remove:\n            # raise Exception(f\"Could not find import to remove: {old_import_model}\")\n            # print(f\"Could not find import to remove: {old_import_model}\")\n            ...\n        else:\n            self.module_attributes.imports.remove(import_to_remove)\n            self.module_attributes.imports.append(updated_import_model)\n    else:\n        raise Exception(\n            f\"No imports in the builders imports list: {self.module_attributes.imports}\"\n        )\n    return self\n",
    "important_comments": null,
    "dependencies": null,
    "summary": null,
    "children_ids": []
}