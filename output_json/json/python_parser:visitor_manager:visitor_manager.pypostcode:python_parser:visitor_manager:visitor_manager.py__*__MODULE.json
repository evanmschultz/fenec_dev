{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "dataclass",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "dataclasses",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Path",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "pathlib",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Union",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ModuleModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.module_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "logging_decorator",
                    "as_name": null,
                    "local_block_id": "postcode:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator"
                }
            ],
            "imported_from": "postcode.utilities.logger.decorators",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:utilities:logger:decorators.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "PythonParser",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:parsers:python_parser.py__*__MODULE__*__CLASS-PythonParser"
                }
            ],
            "imported_from": "postcode.python_parser.parsers.python_parser",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:parsers:python_parser.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ImportAndDependencyUpdater",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE__*__CLASS-ImportAndDependencyUpdater"
                }
            ],
            "imported_from": "postcode.python_parser.visitor_manager.import_and_dependency_updater",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitor_manager:import_and_dependency_updater.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ModuleModel"
                },
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ClassModel"
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-FunctionModel"
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockModel"
                },
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DirectoryModel"
                }
            ],
            "imported_from": "postcode.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "StandaloneBlockModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.standalone_block_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModuleIDGenerationStrategy",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-ModuleIDGenerationStrategy"
                },
                {
                    "name": "DirectoryIDGenerationStrategy",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:id_generation:id_generation_strategies.py__*__MODULE__*__CLASS-DirectoryIDGenerationStrategy"
                }
            ],
            "imported_from": "postcode.python_parser.id_generation.id_generation_strategies",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:id_generation:id_generation_strategies.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModelType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.types.postcode",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:types:postcode.py__*__MODULE"
        }
    ],
    "id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE",
    "file_path": "postcode/python_parser/visitor_manager/visitor_manager.py",
    "parent_id": "postcode:python_parser:visitor_manager__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 307,
    "code_content": "from dataclasses import dataclass\nimport logging\nfrom pathlib import Path\nfrom typing import Union\n\nfrom postcode.python_parser.model_builders.module_model_builder import (\n    ModuleModelBuilder,\n)\nfrom postcode.utilities.logger.decorators import logging_decorator\n\nfrom postcode.python_parser.parsers.python_parser import PythonParser\nfrom postcode.python_parser.visitor_manager.import_and_dependency_updater import (\n    ImportAndDependencyUpdater,\n)\nfrom postcode.models.models import (\n    ClassModel,\n    DirectoryModel,\n    FunctionModel,\n    ModuleModel,\n    StandaloneCodeBlockModel,\n)\n\n\nfrom postcode.python_parser.model_builders.class_model_builder import (\n    ClassModelBuilder,\n)\nfrom postcode.python_parser.model_builders.function_model_builder import (\n    FunctionModelBuilder,\n)\nfrom postcode.python_parser.model_builders.standalone_block_model_builder import (\n    StandaloneBlockModelBuilder,\n)\n\nfrom postcode.python_parser.id_generation.id_generation_strategies import (\n    ModuleIDGenerationStrategy,\n    DirectoryIDGenerationStrategy,\n)\nfrom postcode.types.postcode import ModelType\n\n\nBuilderType = Union[\n    ModuleModelBuilder,\n    ClassModelBuilder,\n    FunctionModelBuilder,\n    StandaloneBlockModelBuilder,\n]\n\n# ModelType = Union[\n#     ModuleModel,\n#     ClassModel,\n#     FunctionModel,\n#     StandaloneCodeBlockModel,\n#     DirectoryModel,\n# ]\n\nEXCLUDED_DIRECTORIES: set[str] = {\".venv\", \"node_modules\", \"__pycache__\", \".git\"}\n\n\n@dataclass\nclass VisitorManagerProcessFilesReturn:\n    \"\"\"\n    Represents the return value of the VisitorManager.process_files() method.\n\n    Attributes:\n        - models_tuple (tuple[ModuleModel, ...]): A tuple of ModuleModel objects representing the parsed modules.\n        - directory_modules (dict[str, list[str]]): A dictionary mapping directory paths to lists of module names.\n            This is used to keep track of the modules present in each directory.\n    \"\"\"\n\n    models_tuple: tuple[ModelType, ...]\n    directory_modules: dict[str, list[str]]\n\n\n@dataclass\nclass DirectoryDetails:\n    \"\"\"\n    Represents the details of a directory.\n\n    Attributes:\n        - directory_name (str): The name of the directory.\n        - sub_directories (list[str]): A list of the names of the sub-directories of the directory.\n        - module_ids (list[str]): A list of the module ids of the modules in the directory.\n    \"\"\"\n\n    directory_name: str\n    sub_directories: list[str]\n    module_ids: list[str]\n\n\nclass VisitorManager:\n    \"\"\"\n    Manages the visiting and processing of Python files in a given directory.\n\n    This class scans a specified directory, filters for Python files, parses them, and saves the parsed data in a structured JSON format. It also maintains a mapping of directories to the Python files they contain.\n\n    Attributes:\n        - directory (str): The root directory to scan for Python files.\n        - output_directory (str): The directory where output JSON files will be saved.\n        - directory_modules (dict): A mapping of directories to their contained Python files.\n\n    Example:\n        ```Python\n        visitor_manager = VisitorManager(\"/path/to/python/code\", \"output\")\n        visitor_manager.process_files()\n        # This will process all Python files in /path/to/python/code and save their parsed data in the output directory.\n        ```\n    \"\"\"\n\n    @logging_decorator(message=\"Initializing VisitorManager\")\n    def __init__(self, directory: str) -> None:\n        self.directory: str = directory\n        self.directory_modules: dict[str, list[str]] = {}\n\n    def process_files(self) -> VisitorManagerProcessFilesReturn:\n        \"\"\"\n        Process the files in the directory and return the module models.\n\n        This function iterates through all the Python files in the directory, processes each file,\n        updates the imports, and builds module models for each file. It returns a tuple of module models\n        and a dictionary of directory modules.\n\n        Returns:\n            - VisitorManagerProcessFilesReturn, a named tuple containing:\n                - models_tuple (tuple[ModuleModel, ...]): A tuple of module models.\n                - directory_modules (dict[str, ModuleModel]): A dictionary of directory modules.\n\n        Examples:\n            ```Python\n            visitor_manager = VisitorManager()\n            result = visitor_manager.process_files()\n            print(result.models_tuple)\n            # (ModuleModel(file_path='/path/to/file1.py'), ModuleModel(file_path='/path/to/file2.py'))\n            print(result.directory_modules)\n            {'/path/to/directory1': ModuleModel(file_path='/path/to/directory1/__init__.py')}\n            ```\n        \"\"\"\n\n        logging.info(\"Processing files\")\n        python_files: list[str] = self._get_python_files()\n        model_builder_list: list[ModuleModelBuilder] = []\n        for file_path in python_files:\n            if model_builder := self._process_file(file_path):\n                model_builder_list.append((model_builder))\n\n        logging.info(\"File processing completed\")\n        logging.info(\"Updating imports\")\n\n        # TODO: Test making this a tuple of tuples, see if that solves the double update import issue\n        model_builder_tuple: tuple[ModuleModelBuilder, ...] = tuple(model_builder_list)\n\n        import_and_dependency_updater = ImportAndDependencyUpdater(model_builder_tuple)\n        import_and_dependency_updater.update_imports()\n        logging.info(\"Updated imports\")\n\n        models_list: list[\n            ModuleModel | ClassModel | FunctionModel | StandaloneCodeBlockModel\n        ] = []\n        for module_model_builder in model_builder_tuple:\n            module_model_return: tuple[\n                ModuleModel,\n                list[ClassModel | FunctionModel | StandaloneCodeBlockModel] | None,\n            ] = self._build_module_model(module_model_builder)\n            models_list.append(module_model_return[0])\n            if module_model_return[1]:\n                models_list.extend(module_model_return[1])\n\n        directory_models_list: list[DirectoryModel] = []\n        for directory_path in self.directory_modules.keys():\n            directory_model: DirectoryModel = self._build_directory_model(\n                directory_path\n            )\n            directory_models_list.append(directory_model)\n\n        all_models: list[ModelType] = [\n            *models_list,\n            *directory_models_list,\n        ]\n\n        models_tuple: tuple[ModelType, ...] = tuple(all_models)\n\n        return VisitorManagerProcessFilesReturn(\n            models_tuple=models_tuple, directory_modules=self.directory_modules\n        )\n\n    def _walk_directories(self) -> list[str]:\n        \"\"\"Walks the specified directory and returns a list of all files.\"\"\"\n\n        all_files: list[str] = []\n        for file_path in Path(self.directory).rglob(\"*\"):\n            if not any(\n                excluded in file_path.parts for excluded in EXCLUDED_DIRECTORIES\n            ):\n                all_files.append(str(file_path))\n        return all_files\n\n    def _filter_python_files(self, files: list[str]) -> list[str]:\n        \"\"\"Filters a list of files to only include Python files.\"\"\"\n\n        return [file for file in files if file.endswith(\".py\")]\n\n    @logging_decorator(message=\"Getting Python files\")\n    def _get_python_files(self) -> list[str]:\n        \"\"\"Gets all Python files in the specified directory.\"\"\"\n\n        all_files: list[str] = self._walk_directories()\n        return self._filter_python_files(all_files)\n\n    def _process_file(self, file_path: str) -> ModuleModelBuilder | None:\n        \"\"\"Processes a single Python file.\"\"\"\n\n        file_path_obj = Path(file_path)\n        root = str(file_path_obj.parent)\n        self.directory_modules.setdefault(root, []).append(file_path_obj.name)\n        return self._parse_file(file_path)\n\n    @logging_decorator(message=\"Processing file\")\n    def _parse_file(self, file_path: str) -> ModuleModelBuilder | None:\n        \"\"\"Parses a Python file and saves the parsed data as JSON.\"\"\"\n\n        parser = PythonParser(file_path)\n        code: str = parser.open_file()\n\n        parent_id: str | None = self._get_parent_directory_id(file_path)\n        if not parent_id:\n            parent_id = \"\"\n\n        module_model_builder: ModuleModelBuilder | None = parser.parse(code, parent_id)\n\n        return module_model_builder if module_model_builder else None\n\n    def _build_module_model(\n        self, visitor_stack: ModuleModelBuilder | None\n    ) -> tuple[\n        ModuleModel, list[ClassModel | FunctionModel | StandaloneCodeBlockModel] | None\n    ]:\n        \"\"\"\n        Builds a module model from the provided module builder.\n\n        Args:\n            - visitor_stack (ModuleModelBuilder): The module builder to build the model from.\n\n        Returns:\n            - ModuleModel: A structured module model.\n        \"\"\"\n\n        if not isinstance(visitor_stack, ModuleModelBuilder):\n            raise TypeError(\"Expected the first builder to be a ModuleModelBuilder\")\n\n        return visitor_stack.build()\n\n    def _build_directory_model(self, directory_path: str) -> DirectoryModel:\n        \"\"\"Builds a directory model for the given directory path.\"\"\"\n\n        id: str = DirectoryIDGenerationStrategy().generate_id(directory_path)\n        parent_id: str | None = self._get_parent_directory_id(directory_path)\n\n        return DirectoryModel(\n            id=id,\n            parent_id=parent_id,\n            directory_name=self._get_directory_name(directory_path),\n            sub_directories_ids=self._get_subdirectory_ids(directory_path),\n            children_ids=self._generate_module_ids(directory_path),\n        )\n\n    def _get_subdirectory_ids(self, directory_path: str) -> list[str]:\n        \"\"\"Gets the sub-directories of the given directory.\"\"\"\n\n        subdirectories: list[str] = [\n            directory.name\n            for directory in Path(directory_path).iterdir()\n            if directory.is_dir() and directory.name not in EXCLUDED_DIRECTORIES\n        ]\n\n        subdirectory_ids: list[str] = [\n            DirectoryIDGenerationStrategy().generate_id(\n                str(Path(directory_path) / subdirectory)\n            )\n            for subdirectory in subdirectories\n        ]\n\n        return subdirectory_ids\n\n    def _get_directory_name(self, directory_path: str) -> str:\n        \"\"\"Gets the name of the given directory.\"\"\"\n\n        return Path(directory_path).name\n\n    def _generate_module_ids(self, directory_path: str) -> list[str]:\n        \"\"\"Generates module ids for the given directory.\"\"\"\n\n        file_names: list[str] = self.directory_modules.get(directory_path, [])\n        python_files: list[str] = self._filter_python_files(file_names)\n\n        return [\n            ModuleIDGenerationStrategy.generate_id(str(Path(directory_path) / module))\n            for module in python_files\n        ]\n\n    def _get_parent_directory_id(self, directory_path: str) -> str | None:\n        \"\"\"Gets the parent id of the given directory.\"\"\"\n\n        parent_path: str = str(Path(directory_path).parent)\n        if parent_path == self.directory:\n            return None\n        else:\n            return DirectoryIDGenerationStrategy().generate_id(parent_path)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE\n\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__STANDALONE_BLOCK-1\n\n        None, \nImported code block (postcode:python_parser:model_builders:module_model_builder.py__*__MODULE) code content:\n\n\nclass ModuleModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a Python module.\n\n    This class extends BaseModelBuilder and specializes in building a detailed model of a Python module, capturing various aspects such as the module's docstring, header content, footer content, and imports. It allows for the incremental construction of the module model by adding or setting various components.\n\n    Attributes:\n        - module_attributes (ModuleSpecificAttributes): An instance containing attributes specific to a module, like file path, docstring, header, footer, and imports.\n\n    Args:\n        - id (str): The unique identifier for the module model.\n        - file_path (str): The file path of the module being modeled.\n\n    Example:\n        ```Python\n        module_builder = ModuleModelBuilder(id='module1', file_path='/path/to/module.py')\n        module_builder.set_docstring(\"This is a docstring\").add_import(some_import_model)\n        # Configures the module builder with a docstring and an import.\n        ```\n    \"\"\"\n\n    def __init__(self, id: str, file_path: str, parent_id: str) -> None:\n        super().__init__(\n            id=id, block_type=BlockType.MODULE, parent_id=parent_id, file_path=file_path\n        )\n\n        self.module_attributes = ModuleSpecificAttributes(\n            docstring=None,\n            header=None,\n            footer=None,\n            imports=None,\n        )\n\n    def set_docstring(self, docstring: str | None) -> \"ModuleModelBuilder\":\n        \"\"\"Set the docstring.\"\"\"\n        if docstring:\n            self.module_attributes.docstring = docstring\n        return self\n\n    def set_header_content(self, header_content: list[str]) -> \"ModuleModelBuilder\":\n        \"\"\"Set the header.\"\"\"\n        if not self.module_attributes.header:\n            self.module_attributes.header = []\n        for line in header_content:\n            self.module_attributes.header.append(line)\n        return self\n\n    def set_footer_content(self, footer_content: list[str]) -> \"ModuleModelBuilder\":\n        \"\"\"Set the footer.\"\"\"\n        if not self.module_attributes.footer:\n            self.module_attributes.footer = []\n        for line in footer_content:\n            self.module_attributes.footer.append(line)\n        return self\n\n    def add_import(self, import_model: ImportModel) -> \"ModuleModelBuilder\":\n        \"\"\"Add an import to the imports list.\"\"\"\n        if not self.module_attributes.imports:\n            self.module_attributes.imports = []\n        # if \"OpenAISummarizer\" in [name.name for name in import_model.import_names]:\n        #     print(\"Adding OpenAISummarizer import\")\n        self.module_attributes.imports.append(import_model)\n        return self\n\n    def update_import(\n        self, updated_import_model: ImportModel, old_import_model: ImportModel\n    ) -> \"ModuleModelBuilder\":\n        \"\"\"\n        Update an import in the imports list.\n\n        Loops through the imports list and replaces the old import with the updated import.\n\n        Args:\n            updated_import_model (ImportModel): The updated import model.\n            old_import_model\n\n        Returns:\n            ModuleModelBuilder: The module model builder instance.\n\n        Raises:\n            Exception: If the import to be updated is not found.\n        \"\"\"\n        if self.module_attributes.imports:\n            import_to_remove: ImportModel | None = None\n            for existing_import in self.module_attributes.imports:\n                if (\n                    existing_import.import_names == old_import_model.import_names\n                    and existing_import.imported_from == old_import_model.imported_from\n                    and existing_import.import_module_type\n                    == old_import_model.import_module_type\n                ):\n                    import_to_remove = existing_import\n                    # if \"OpenAISummarizer\" in [\n                    #     name.name for name in existing_import.import_names\n                    # ]:\n                    #     print(\"Updating OpenAISummarizer import\")\n                    break\n\n            if not import_to_remove:\n                # raise Exception(f\"Could not find import to remove: {old_import_model}\")\n                # print(f\"Could not find import to remove: {old_import_model}\")\n                ...\n            else:\n                self.module_attributes.imports.remove(import_to_remove)\n                self.module_attributes.imports.append(updated_import_model)\n        else:\n            raise Exception(\n                f\"No imports in the builders imports list: {self.module_attributes.imports}\"\n            )\n        return self\n\n    def _get_module_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Get the module specific attributes.\"\"\"\n        return self.module_attributes.model_dump()\n\n    @logging_decorator(message=\"Building module model\")\n    def build(\n        self,\n    ) -> tuple[\n        ModuleModel, list[ClassModel | FunctionModel | StandaloneCodeBlockModel] | None\n    ]:\n        \"\"\"Builds and returns the module model instance after building and setting the children models.\"\"\"\n        self.build_children()\n        self.set_children_ids()\n        return (\n            ModuleModel(\n                **self._get_common_attributes(),\n                **self._get_module_specific_attributes(),\n            ),\n            self.child_models,\n        )\n\n\nImported code block (postcode:python_parser:model_builders:class_model_builder.py__*__MODULE) code content:\n\n\nclass ClassModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a Python class.\n\n    This class extends BaseModelBuilder and is specialized for building a model of a Python class, capturing details such as decorators, base classes, documentation strings, class attributes, and class-specific keywords.\n\n    Attributes:\n        - class_attributes (ClassSpecificAttributes): An instance containing attributes specific to a class, like name, decorators, bases, etc.\n\n    Args:\n        - id (str): The unique identifier for the class model.\n        - class_name (str): The name of the class.\n        - parent_id (str): The identifier of the parent model (e.g., module or class containing this class).\n    \"\"\"\n\n    def __init__(\n        self, id: str, class_name: str, parent_id: str, file_path: str\n    ) -> None:\n        super().__init__(\n            id=id, block_type=BlockType.CLASS, parent_id=parent_id, file_path=file_path\n        )\n\n        self.class_attributes = ClassSpecificAttributes(\n            class_name=class_name,\n            decorators=None,\n            bases=None,\n            docstring=None,\n            keywords=None,\n        )\n\n    def set_decorators(\n        self, decorators: list[DecoratorModel] | None\n    ) -> \"ClassModelBuilder\":\n        \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\n        if decorators:\n            self.class_attributes.decorators = decorators\n        else:\n            self.class_attributes.decorators = None\n        return self\n\n    def set_bases(self, base_classes: list[str] | None) -> \"ClassModelBuilder\":\n        \"\"\"Sets the list of base classes to the class model.\"\"\"\n        self.class_attributes.bases = base_classes\n        return self\n\n    def set_docstring(self, docstring: str | None) -> \"ClassModelBuilder\":\n        \"\"\"Sets the docstring of the class in the model.\"\"\"\n        self.class_attributes.docstring = docstring\n        return self\n\n    # # TODO: Add attribute model\n    # def add_attribute(self, attribute) -> \"ClassModelBuilder\":\n    #     \"\"\"Adds an attribute of the class in the model.\"\"\"\n    #     if not self.class_attributes.attributes:\n    #         self.class_attributes.attributes = []\n    #     self.class_attributes.attributes.append(attribute)\n    #     return self\n\n    def set_keywords(\n        self, keyword_list: list[ClassKeywordModel] | None\n    ) -> \"ClassModelBuilder\":\n        \"\"\"Sets the list of keywords to the class model.\"\"\"\n        self.class_attributes.keywords = keyword_list\n        return self\n\n    def _get_class_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Gets the class specific attributes.\"\"\"\n        return self.class_attributes.model_dump()\n\n    @logging_decorator(message=\"Building ClassModel\")\n    def build(\n        self,\n    ) -> ClassModel:\n        \"\"\"Creates a ClassModel instance after building and setting the children models.\"\"\"\n        self.build_children()\n        self.set_children_ids()\n        return ClassModel(\n            **self._get_common_attributes(),\n            **self._get_class_specific_attributes(),\n        )\n\n\nImported code block (postcode:python_parser:model_builders:function_model_builder.py__*__MODULE) code content:\n\n\nclass FunctionModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a Python function.\n\n    This class extends BaseModelBuilder and specializes in building a detailed model of a Python function, capturing various aspects such as function name, docstring, parameters, decorators, return type, and whether the function is a method or asynchronous.\n\n    Attributes:\n        - function_attributes (FunctionSpecificAttributes): An instance containing attributes specific to a function.\n\n    Args:\n        - id (str): The unique identifier for the function model.\n        - function_name (str): The name of the function.\n        - parent_id (str): The identifier of the parent model (e.g., module or class containing this function).\n    \"\"\"\n\n    def __init__(self, id: str, function_name: str, parent_id: str, file_path: str) -> None:\n        super().__init__(\n            id=id,\n            file_path=file_path,\n            block_type=BlockType.FUNCTION,\n            parent_id=parent_id,\n        )\n        self.function_attributes = FunctionSpecificAttributes(\n            function_name=function_name,\n            docstring=None,\n            decorators=None,\n            parameters=None,\n            is_method=False,\n            is_async=False,\n            returns=None,\n        )\n\n    def set_parameters_list(\n        self, parameter_list_model: ParameterListModel | None\n    ) -> \"FunctionModelBuilder\":\n        \"\"\"Adds a parameter to the function model.\"\"\"\n        self.function_attributes.parameters = parameter_list_model\n        return self\n\n    def set_decorators(\n        self, decorators: list[DecoratorModel] | None\n    ) -> \"FunctionModelBuilder\":\n        \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\n        if decorators:\n            self.function_attributes.decorators = decorators\n        else:\n            self.function_attributes.decorators = None\n        return self\n\n    def set_docstring(self, docstring: str | None) -> \"FunctionModelBuilder\":\n        \"\"\"Sets the docstring.\"\"\"\n        self.function_attributes.docstring = docstring\n        return self\n\n    def set_return_annotation(self, return_type: str) -> \"FunctionModelBuilder\":\n        \"\"\"Sets the return type.\"\"\"\n        self.function_attributes.returns = return_type\n        return self\n\n    def set_is_method(self, is_method: bool) -> \"FunctionModelBuilder\":\n        \"\"\"Sets the is_method attribute in the function model.\"\"\"\n        self.function_attributes.is_method = is_method\n        return self\n\n    def set_is_async(self, is_async: bool) -> \"FunctionModelBuilder\":\n        \"\"\"Sets the is_async attribute in the function model.\"\"\"\n        self.function_attributes.is_async = is_async\n        return self\n\n    def _get_function_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"\n        Gets the function specific attributes from the builder.\n        \"\"\"\n        return self.function_attributes.model_dump()\n\n    @logging_decorator(message=\"Building function model\")\n    def build(self) -> FunctionModel:\n        \"\"\"Builds and returns the function model instance after building and setting the children models.\"\"\"\n        self.build_children()\n        self.set_children_ids()\n        return FunctionModel(\n            **self._get_common_attributes(),\n            **self._get_function_specific_attributes(),\n        )\n\n\nImported code block (postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE) code content:\n\n\nclass StandaloneBlockModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a standalone code block.\n\n    This class extends BaseModelBuilder and specializes in building models of standalone code blocks, which are blocks of code not part of any class or function definitions. It captures details such as variable assignments within the block.\n\n    Attributes:\n        - standalone_block_attributes (StandaloneCodeBlockSpecificAttributes): An instance containing attributes specific to a standalone code block, such as variable assignments.\n\n    Args:\n        - id (str): The unique identifier for the standalone code block model.\n        - parent_id (str): The identifier of the parent model (e.g., module or class containing this standalone block).\n\n    Example:\n        ```Python\n        standalone_block_builder = StandaloneBlockModelBuilder(id='block1', parent_id='module1')\n        standalone_block_builder.set_variable_assignments(['x = 1', 'y = 2'])\n        # Configures the builder with variable assignments for the standalone code block.\n        ```\n    \"\"\"\n\n    def __init__(self, id: str, parent_id: str, file_path: str) -> None:\n        super().__init__(\n            id=id,\n            block_type=BlockType.STANDALONE_CODE_BLOCK,\n            parent_id=parent_id,\n            file_path=file_path,\n        )\n\n        self.standalone_block_attributes = StandaloneCodeBlockSpecificAttributes(\n            variable_assignments=None,\n        )\n\n    def set_variable_assignments(\n        self, variable_declarations: list[str]\n    ) -> \"StandaloneBlockModelBuilder\":\n        \"\"\"Sets the list of variable declarations to the standalone code block model.\"\"\"\n        self.standalone_block_attributes.variable_assignments = variable_declarations\n        return self\n\n    def _get_standalone_block_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Gets the standalone block specific attributes.\"\"\"\n        return self.standalone_block_attributes.model_dump()\n\n    @logging_decorator(message=\"Building standalone code block model\")\n    def build(self) -> StandaloneCodeBlockModel:\n        \"\"\"Creates a StandaloneCodeBlockModel instance after building and setting the children models.\"\"\"\n        return StandaloneCodeBlockModel(\n            **self._get_common_attributes(),\n            **self._get_standalone_block_specific_attributes(),\n        )\n\n, \nfrom typing import Union\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManagerProcessFilesReturn\n\n        None, None, \nfrom dataclasses import dataclass\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-DirectoryDetails\n\n        None, None, \nfrom dataclasses import dataclass\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager\n\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-__init__\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-process_files\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_walk_directories\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_filter_python_files\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_get_python_files\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_process_file\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_parse_file\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_build_module_model\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_build_directory_model\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_get_subdirectory_ids\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_get_directory_name\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_generate_module_ids\n\n        None, None, None\n        \n\nSummary:\n\n        postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager__*__FUNCTION-_get_parent_directory_id\n\n        None, None, None\n        , None, None\n        , None, None\n        ",
    "children_ids": [
        "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__STANDALONE_BLOCK-1",
        "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManagerProcessFilesReturn",
        "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-DirectoryDetails",
        "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager"
    ]
}