{
    "docstring": null,
    "header": [
        "# import time",
        "# from openai import OpenAI",
        "# from openai.types.beta.assistant import Assistant",
        "# from openai.types.beta.thread import Thread",
        "# from openai.types.beta.threads.run import Run",
        "# from openai.types.beta.threads.thread_message import ThreadMessage, Content",
        "# from openai.types.beta.threads.message_content_text import MessageContentText",
        "# from openai.types.beta.assistant_create_params import Tool",
        "# from openai._types import NotGiven, NOT_GIVEN",
        "# from openai.pagination import SyncCursorPage",
        "# from temp import code_example",
        "# from postcode.ai_services.summarizer.prompts.summarization_prompts import (",
        "#     SUMMARIZER_DEFAULT_INSTRUCTIONS,",
        "#     SUMMARIZER_DEFAULT_DESCRIPTION,",
        "#     summary_prompt_list,",
        "# )",
        "# class SummarizerAssistant:",
        "#     def __init__(",
        "#         self,",
        "#         assistant: Assistant | None = None,",
        "#     ) -> None:",
        "#         self.client = OpenAI()",
        "#         self.prompt_list: list[str] = summary_prompt_list",
        "#         self.default_prompt: str = self.prompt_list[0]",
        "#         self.assistant: Assistant = assistant if assistant else self._create_assistant()",
        "#         self.assistant_id: str = self.assistant.id",
        "#     def _create_assistant(",
        "#         self,",
        "#         *,",
        "#         name: str = \"Python Code Summarizer\",",
        "#         model: str = \"gpt-4-1106-preview\",",
        "#         instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,",
        "#         description: str = SUMMARIZER_DEFAULT_DESCRIPTION,",
        "#         tools: list[Tool] | NotGiven = NOT_GIVEN,",
        "#     ) -> Assistant:",
        "#         try:",
        "#             return self.client.beta.assistants.create(",
        "#                 name=name,",
        "#                 model=model,",
        "#                 instructions=instructions,",
        "#                 description=description,",
        "#                 tools=tools,",
        "#             )",
        "#         except Exception as e:",
        "#             raise Exception(f\"Error creating assistant (OpenAI): {e}\")",
        "#     def _delete_assistant(self) -> None:",
        "#         try:",
        "#             self.client.beta.assistants.delete(self.assistant_id)",
        "#         except Exception as e:",
        "#             print(f\"Error deleting assistant (OpenAI): {e}\")",
        "#     def _create_thread(self) -> Thread:",
        "#         return self.client.beta.threads.create()",
        "#     def _delete_thread(self, thread_id: str) -> None:",
        "#         try:",
        "#             self.client.beta.threads.delete(thread_id)",
        "#         except Exception as e:",
        "#             print(f\"Error deleting thread (OpenAI): {e}\")",
        "#     def _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:",
        "#         \"\"\"",
        "#         Returns the prompt for the code snippet.",
        "#         Args:",
        "#             code (str): The code snippet.",
        "#             custom_prompt (str | None): Custom prompt to be used. Defaults to None.",
        "#         Returns:",
        "#             str: The formatted prompt.",
        "#         Notes:",
        "#             - If custom_prompt is not provided, the default prompt will be used.",
        "#             - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.",
        "#             - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.",
        "#         \"\"\"",
        "#         if not custom_prompt:",
        "#             return self.default_prompt.format(code=code)",
        "#         else:",
        "#             if \"{code}\" in custom_prompt:",
        "#                 return custom_prompt.format(code=code)",
        "#             else:",
        "#                 return f\"{custom_prompt}\\n\\n{code}\"",
        "#     def _add_message_to_thread(self, thread_id: str, message: str) -> None:",
        "#         try:",
        "#             self.client.beta.threads.messages.create(",
        "#                 thread_id, content=message, role=\"user\"",
        "#             )",
        "#         except Exception as e:",
        "#             raise Exception(f\"Error adding message to thread (OpenAI): {e}\")",
        "#     def _run_thread(self, thread_id: str) -> Run:",
        "#         try:",
        "#             return self.client.beta.threads.runs.create(",
        "#                 thread_id, assistant_id=self.assistant_id",
        "#             )",
        "#         except Exception as e:",
        "#             raise Exception(f\"Error running thread (OpenAI): {e}\")",
        "#     def _get_response(self, thread_id: str, run_id: str) -> list[str]:",
        "#         run: Run = self._run_thread(thread_id)",
        "#         while True:",
        "#             run_retrieval: Run = self.client.beta.threads.runs.retrieve(",
        "#                 thread_id=thread_id, run_id=run.id",
        "#             )",
        "#             print(f\"Run status: {run_retrieval.status}\")",
        "#             if run_retrieval.status == \"completed\":",
        "#                 break",
        "#             time.sleep(1)",
        "#         messages: SyncCursorPage[",
        "#             ThreadMessage",
        "#         ] = self.client.beta.threads.messages.list(thread_id=thread_id)",
        "#         return [",
        "#             item.text.value",
        "#             for content in messages",
        "#             for item in content.content",
        "#             if type(item) == MessageContentText and content.role == \"assistant\"",
        "#         ]",
        "#     def summarize_code(self, code: str, file_path: str) -> list[str] | str | None:",
        "#         try:",
        "#             thread: Thread = self._create_thread()",
        "#             self._add_message_to_thread(thread.id, self._interpolate_prompt(code))",
        "#             summary: list[str] = self._get_response(thread.id, code)",
        "#             self._delete_thread(thread.id)",
        "#             return summary",
        "#         except Exception as e:",
        "#             return f\"An error occurred while summarizing '{file_path}' (OpenAI): {e}\"",
        "#     def print_assistants_list(self) -> None:",
        "#         print(f\"Assistants list: {self.client.beta.assistants.list()}\")",
        "# # Instantiate Summarizer",
        "# summarizer = SummarizerAssistant()",
        "# # Test Summarize Code",
        "# try:",
        "#     summary_list: list[str] | str | None = summarizer.summarize_code(",
        "#         code_example, \"test_code.py\"",
        "#     )",
        "#     if isinstance(summary_list, list):",
        "#         for summary in summary_list:",
        "#             print(summary)",
        "# except Exception as e:",
        "#     print(\"An error occurred:\", e)"
    ],
    "footer": [],
    "imports": null,
    "id": "postcode:ai_services:summarizer:summarizer_assistant.py__*__MODULE",
    "file_path": "postcode/ai_services/summarizer/summarizer_assistant.py",
    "parent_id": "postcode:ai_services:summarizer__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 157,
    "code_content": "# import time\n# from openai import OpenAI\n# from openai.types.beta.assistant import Assistant\n# from openai.types.beta.thread import Thread\n# from openai.types.beta.threads.run import Run\n# from openai.types.beta.threads.thread_message import ThreadMessage, Content\n# from openai.types.beta.threads.message_content_text import MessageContentText\n# from openai.types.beta.assistant_create_params import Tool\n# from openai._types import NotGiven, NOT_GIVEN\n# from openai.pagination import SyncCursorPage\n\n# from temp import code_example\n# from postcode.ai_services.summarizer.prompts.summarization_prompts import (\n#     SUMMARIZER_DEFAULT_INSTRUCTIONS,\n#     SUMMARIZER_DEFAULT_DESCRIPTION,\n#     summary_prompt_list,\n# )\n\n\n# class SummarizerAssistant:\n#     def __init__(\n#         self,\n#         assistant: Assistant | None = None,\n#     ) -> None:\n#         self.client = OpenAI()\n#         self.prompt_list: list[str] = summary_prompt_list\n#         self.default_prompt: str = self.prompt_list[0]\n#         self.assistant: Assistant = assistant if assistant else self._create_assistant()\n#         self.assistant_id: str = self.assistant.id\n\n#     def _create_assistant(\n#         self,\n#         *,\n#         name: str = \"Python Code Summarizer\",\n#         model: str = \"gpt-4-1106-preview\",\n#         instructions: str = SUMMARIZER_DEFAULT_INSTRUCTIONS,\n#         description: str = SUMMARIZER_DEFAULT_DESCRIPTION,\n#         tools: list[Tool] | NotGiven = NOT_GIVEN,\n#     ) -> Assistant:\n#         try:\n#             return self.client.beta.assistants.create(\n#                 name=name,\n#                 model=model,\n#                 instructions=instructions,\n#                 description=description,\n#                 tools=tools,\n#             )\n#         except Exception as e:\n#             raise Exception(f\"Error creating assistant (OpenAI): {e}\")\n\n#     def _delete_assistant(self) -> None:\n#         try:\n#             self.client.beta.assistants.delete(self.assistant_id)\n#         except Exception as e:\n#             print(f\"Error deleting assistant (OpenAI): {e}\")\n\n#     def _create_thread(self) -> Thread:\n#         return self.client.beta.threads.create()\n\n#     def _delete_thread(self, thread_id: str) -> None:\n#         try:\n#             self.client.beta.threads.delete(thread_id)\n#         except Exception as e:\n#             print(f\"Error deleting thread (OpenAI): {e}\")\n\n#     def _interpolate_prompt(self, code: str, custom_prompt: str | None = None) -> str:\n#         \"\"\"\n#         Returns the prompt for the code snippet.\n\n#         Args:\n#             code (str): The code snippet.\n#             custom_prompt (str | None): Custom prompt to be used. Defaults to None.\n\n#         Returns:\n#             str: The formatted prompt.\n\n#         Notes:\n#             - If custom_prompt is not provided, the default prompt will be used.\n#             - If custom_prompt contains \"{code}\", it will be replaced with the code snippet.\n#             - If custom_prompt does not contain \"{code}\", the code snippet will be appended below the custom_prompt.\n#         \"\"\"\n\n#         if not custom_prompt:\n#             return self.default_prompt.format(code=code)\n\n#         else:\n#             if \"{code}\" in custom_prompt:\n#                 return custom_prompt.format(code=code)\n#             else:\n#                 return f\"{custom_prompt}\\n\\n{code}\"\n\n#     def _add_message_to_thread(self, thread_id: str, message: str) -> None:\n#         try:\n#             self.client.beta.threads.messages.create(\n#                 thread_id, content=message, role=\"user\"\n#             )\n#         except Exception as e:\n#             raise Exception(f\"Error adding message to thread (OpenAI): {e}\")\n\n#     def _run_thread(self, thread_id: str) -> Run:\n#         try:\n#             return self.client.beta.threads.runs.create(\n#                 thread_id, assistant_id=self.assistant_id\n#             )\n#         except Exception as e:\n#             raise Exception(f\"Error running thread (OpenAI): {e}\")\n\n#     def _get_response(self, thread_id: str, run_id: str) -> list[str]:\n#         run: Run = self._run_thread(thread_id)\n\n#         while True:\n#             run_retrieval: Run = self.client.beta.threads.runs.retrieve(\n#                 thread_id=thread_id, run_id=run.id\n#             )\n#             print(f\"Run status: {run_retrieval.status}\")\n#             if run_retrieval.status == \"completed\":\n#                 break\n#             time.sleep(1)\n\n#         messages: SyncCursorPage[\n#             ThreadMessage\n#         ] = self.client.beta.threads.messages.list(thread_id=thread_id)\n#         return [\n#             item.text.value\n#             for content in messages\n#             for item in content.content\n#             if type(item) == MessageContentText and content.role == \"assistant\"\n#         ]\n\n#     def summarize_code(self, code: str, file_path: str) -> list[str] | str | None:\n#         try:\n#             thread: Thread = self._create_thread()\n#             self._add_message_to_thread(thread.id, self._interpolate_prompt(code))\n#             summary: list[str] = self._get_response(thread.id, code)\n#             self._delete_thread(thread.id)\n#             return summary\n#         except Exception as e:\n#             return f\"An error occurred while summarizing '{file_path}' (OpenAI): {e}\"\n\n#     def print_assistants_list(self) -> None:\n#         print(f\"Assistants list: {self.client.beta.assistants.list()}\")\n\n\n# # Instantiate Summarizer\n# summarizer = SummarizerAssistant()\n\n# # Test Summarize Code\n# try:\n#     summary_list: list[str] | str | None = summarizer.summarize_code(\n#         code_example, \"test_code.py\"\n#     )\n#     if isinstance(summary_list, list):\n#         for summary in summary_list:\n#             print(summary)\n# except Exception as e:\n#     print(\"An error occurred:\", e)\n",
    "important_comments": [
        {
            "content": "#         model: str = \"gpt-4-1106-preview\",",
            "comment_types": [
                "REVIEW"
            ]
        },
        {
            "content": "#         Notes:",
            "comment_types": [
                "NOTE"
            ]
        }
    ],
    "dependencies": null,
    "summary": "\nThe `SummarizerAssistant` class utilizes OpenAI's `gpt-4-1106-preview` model to provide code summarization services. It manages the lifecycle of assistants and threads, customizes summarization prompts, and handles errors during API interactions. The class's `summarize_code` method processes a given code snippet and file path, returning a concise summary or an error message.",
    "children_ids": []
}