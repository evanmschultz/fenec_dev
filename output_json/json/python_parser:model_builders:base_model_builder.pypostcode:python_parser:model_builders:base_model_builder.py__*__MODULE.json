{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "annotations",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "__future__",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "TYPE_CHECKING",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Any",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Union",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ABC",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "abstractmethod",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "abc",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ImportModel"
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                },
                {
                    "name": "CommentModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-CommentModel"
                },
                {
                    "name": "BaseCodeBlockModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel"
                },
                {
                    "name": "ClassModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ClassModel"
                },
                {
                    "name": "FunctionModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-FunctionModel"
                },
                {
                    "name": "StandaloneCodeBlockModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockModel"
                },
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ClassModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE__*__CLASS-ClassModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.class_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:class_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "FunctionModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.function_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModuleModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE__*__CLASS-ModuleModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.module_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:module_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "StandaloneBlockModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.standalone_block_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
        }
    ],
    "id": "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE",
    "file_path": "postcode/python_parser/model_builders/base_model_builder.py",
    "parent_id": "postcode:python_parser:model_builders__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 262,
    "code_content": "from __future__ import annotations\n\nfrom typing import TYPE_CHECKING, Any, Union\nfrom abc import ABC, abstractmethod\n\nfrom postcode.models.models import (\n    BaseCodeBlockModel,\n    ClassModel,\n    CommentModel,\n    FunctionModel,\n    ImportModel,\n    DependencyModel,\n    BlockType,\n    StandaloneCodeBlockModel,\n)\n\n\nif TYPE_CHECKING:\n    from postcode.python_parser.model_builders.class_model_builder import (\n        ClassModelBuilder,\n    )\n    from postcode.python_parser.model_builders.function_model_builder import (\n        FunctionModelBuilder,\n    )\n    from postcode.python_parser.model_builders.module_model_builder import (\n        ModuleModelBuilder,\n    )\n    from postcode.python_parser.model_builders.standalone_block_model_builder import (\n        StandaloneBlockModelBuilder,\n    )\n\n\nclass BaseModelBuilder(ABC):\n    \"\"\"\n    Abstract base class for building models of different code blocks.\n\n    This class follows the builder pattern, providing a structured approach to constructing models for various types of code blocks (like modules, classes, functions). It defines common attributes and methods used across all specific model builders.\n\n    Attributes:\n        - id (str): The unique identifier for the code block.\n        - children_builders (list[Union[ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]]):\n            A list of builders for the children code blocks.\n        - common_attributes (BaseCodeBlockModel): An instance containing common attributes shared across different code block models.\n\n    Example:\n        ```Python\n        # This example demonstrates how a derived builder might be initialized and used.\n        class SomeModelBuilder(BaseModelBuilder):\n            def build(self):\n                # Building logic specific to 'SomeModelBuilder'\n                pass\n        builder = SomeModelBuilder(id='123', block_type=BlockType.CLASS, parent_id='root')\n        builder.set_start_line_num(1).set_end_line_num(10)\n        # Sets the start and end line numbers for the code block.\n        ```\n    \"\"\"\n\n    def __init__(\n        self, *, id: str, block_type: BlockType, parent_id: str | None, file_path: str\n    ) -> None:\n        self.id: str = id\n        self.child_builders: list[\n            ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\n        ] = []\n        self.child_models: list[\n            ClassModel | FunctionModel | StandaloneCodeBlockModel\n        ] | None = None\n\n        self.common_attributes = BaseCodeBlockModel(\n            id=id,\n            file_path=file_path,\n            parent_id=parent_id,\n            block_type=block_type,\n            start_line_num=0,\n            end_line_num=0,\n            code_content=\"\",\n            important_comments=None,\n            children_ids=None,\n            dependencies=None,\n            summary=None,\n        )\n\n    def set_start_line_num(\n        self, line_num: int\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the start line number of the code block model instance.\"\"\"\n        self.common_attributes.start_line_num = line_num\n        return self\n\n    def set_end_line_num(\n        self, line_num: int\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the end line number of the code block model instance.\"\"\"\n        self.common_attributes.end_line_num = line_num\n        return self\n\n    def set_code_content(\n        self, code_content: str\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds the string containing the content of the code block to the model instance.\"\"\"\n        self.common_attributes.code_content = code_content\n        return self\n\n    def add_important_comment(\n        self, comment: CommentModel\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds an important comment to the model instance.\"\"\"\n        if not self.common_attributes.important_comments:\n            self.common_attributes.important_comments = []\n        self.common_attributes.important_comments.append(comment)\n        return self\n\n    def add_summary(\n        self, summary: str\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds a summary to the model instance.\"\"\"\n        self.common_attributes.summary = summary\n        # print(f\"Added summary to {self.common_attributes.id}\")\n        return self\n\n    def add_child_builder(\n        self,\n        child: Union[\n            \"ClassModelBuilder\", \"FunctionModelBuilder\", StandaloneBlockModelBuilder\n        ],\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds a child code block to the model instance.\"\"\"\n        self.child_builders.append(child)\n        return self\n\n    def set_dependencies(\n        self, dependencies: list[ImportModel | DependencyModel] | None\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the dependencies of the model instance.\"\"\"\n        self.common_attributes.dependencies = dependencies\n        return self\n\n    def update_import_dependency(\n        self,\n        new_import_model: ImportModel,\n        old_import_model: ImportModel,\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"\n        Updates an import in the model instance.\n\n        Args:\n            new_import_model (ImportModel): The updated import model.\n            old_import_model\n\n        Returns:\n            BaseModelBuilder: The base model builder instance.\n        \"\"\"\n\n        if self.common_attributes.dependencies:\n            import_model_to_remove: ImportModel | None = None\n            for existing_import_model in self.common_attributes.dependencies:\n                if isinstance(existing_import_model, DependencyModel):\n                    continue\n\n                if (\n                    existing_import_model.import_names == old_import_model.import_names\n                    and existing_import_model.imported_from\n                    == old_import_model.imported_from\n                    and existing_import_model.import_module_type\n                    == old_import_model.import_module_type\n                ):\n                    import_model_to_remove = existing_import_model\n                    break\n\n            if not import_model_to_remove:\n                raise Exception(f\"Could not find import to remove: {old_import_model}\")\n\n            self.common_attributes.dependencies.remove(import_model_to_remove)\n            self.common_attributes.dependencies.append(new_import_model)\n        else:\n            raise Exception(\n                f\"No imports in the builders imports list: {self.common_attributes.dependencies}\"\n            )\n        return self\n\n    def build_children(\n        self,\n    ) -> None:\n        if self.child_builders:\n            self.child_models = []\n            for child_builder in self.child_builders:\n                self.child_models.append(child_builder.build())\n                if child_builder.child_models:\n                    self.child_models.extend(child_builder.child_models)\n\n    def set_children_ids(\n        self,\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the children ids of the model instance.\"\"\"\n        self.common_attributes.children_ids = [\n            child.id for child in self.child_builders\n        ]\n        return self\n\n    def _get_common_attributes(self) -> dict[str, Any]:\n        \"\"\"\n        Returns a dictionary containing the attributes common to all code block models.\n        \"\"\"\n        return self.common_attributes.model_dump()\n\n    @abstractmethod\n    def build(\n        self,\n    ) -> None:\n        \"\"\"\n        Builds and returns the code block model instance.\n\n        Returns:\n            CodeBlockModel: The built code block model instance.\n        \"\"\"\n        ...\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:python_parser:model_builders:base_model_builder.py__*__MODULE\n\n        \n\nSummary:\n\n        postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__STANDALONE_BLOCK-1\n\n        None, \nImported code block (postcode:python_parser:model_builders:class_model_builder.py__*__MODULE) code content:\n\n\nclass ClassModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a Python class.\n\n    This class extends BaseModelBuilder and is specialized for building a model of a Python class, capturing details such as decorators, base classes, documentation strings, class attributes, and class-specific keywords.\n\n    Attributes:\n        - class_attributes (ClassSpecificAttributes): An instance containing attributes specific to a class, like name, decorators, bases, etc.\n\n    Args:\n        - id (str): The unique identifier for the class model.\n        - class_name (str): The name of the class.\n        - parent_id (str): The identifier of the parent model (e.g., module or class containing this class).\n    \"\"\"\n\n    def __init__(\n        self, id: str, class_name: str, parent_id: str, file_path: str\n    ) -> None:\n        super().__init__(\n            id=id, block_type=BlockType.CLASS, parent_id=parent_id, file_path=file_path\n        )\n\n        self.class_attributes = ClassSpecificAttributes(\n            class_name=class_name,\n            decorators=None,\n            bases=None,\n            docstring=None,\n            keywords=None,\n        )\n\n    def set_decorators(\n        self, decorators: list[DecoratorModel] | None\n    ) -> \"ClassModelBuilder\":\n        \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\n        if decorators:\n            self.class_attributes.decorators = decorators\n        else:\n            self.class_attributes.decorators = None\n        return self\n\n    def set_bases(self, base_classes: list[str] | None) -> \"ClassModelBuilder\":\n        \"\"\"Sets the list of base classes to the class model.\"\"\"\n        self.class_attributes.bases = base_classes\n        return self\n\n    def set_docstring(self, docstring: str | None) -> \"ClassModelBuilder\":\n        \"\"\"Sets the docstring of the class in the model.\"\"\"\n        self.class_attributes.docstring = docstring\n        return self\n\n    # # TODO: Add attribute model\n    # def add_attribute(self, attribute) -> \"ClassModelBuilder\":\n    #     \"\"\"Adds an attribute of the class in the model.\"\"\"\n    #     if not self.class_attributes.attributes:\n    #         self.class_attributes.attributes = []\n    #     self.class_attributes.attributes.append(attribute)\n    #     return self\n\n    def set_keywords(\n        self, keyword_list: list[ClassKeywordModel] | None\n    ) -> \"ClassModelBuilder\":\n        \"\"\"Sets the list of keywords to the class model.\"\"\"\n        self.class_attributes.keywords = keyword_list\n        return self\n\n    def _get_class_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Gets the class specific attributes.\"\"\"\n        return self.class_attributes.model_dump()\n\n    @logging_decorator(message=\"Building ClassModel\")\n    def build(\n        self,\n    ) -> ClassModel:\n        \"\"\"Creates a ClassModel instance after building and setting the children models.\"\"\"\n        self.build_children()\n        self.set_children_ids()\n        return ClassModel(\n            **self._get_common_attributes(),\n            **self._get_class_specific_attributes(),\n        )\n\n\nImported code block (postcode:python_parser:model_builders:function_model_builder.py__*__MODULE) code content:\n\n\nclass FunctionModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a Python function.\n\n    This class extends BaseModelBuilder and specializes in building a detailed model of a Python function, capturing various aspects such as function name, docstring, parameters, decorators, return type, and whether the function is a method or asynchronous.\n\n    Attributes:\n        - function_attributes (FunctionSpecificAttributes): An instance containing attributes specific to a function.\n\n    Args:\n        - id (str): The unique identifier for the function model.\n        - function_name (str): The name of the function.\n        - parent_id (str): The identifier of the parent model (e.g., module or class containing this function).\n    \"\"\"\n\n    def __init__(self, id: str, function_name: str, parent_id: str, file_path: str) -> None:\n        super().__init__(\n            id=id,\n            file_path=file_path,\n            block_type=BlockType.FUNCTION,\n            parent_id=parent_id,\n        )\n        self.function_attributes = FunctionSpecificAttributes(\n            function_name=function_name,\n            docstring=None,\n            decorators=None,\n            parameters=None,\n            is_method=False,\n            is_async=False,\n            returns=None,\n        )\n\n    def set_parameters_list(\n        self, parameter_list_model: ParameterListModel | None\n    ) -> \"FunctionModelBuilder\":\n        \"\"\"Adds a parameter to the function model.\"\"\"\n        self.function_attributes.parameters = parameter_list_model\n        return self\n\n    def set_decorators(\n        self, decorators: list[DecoratorModel] | None\n    ) -> \"FunctionModelBuilder\":\n        \"\"\"Adds decorator to the decorators list in the class model.\"\"\"\n        if decorators:\n            self.function_attributes.decorators = decorators\n        else:\n            self.function_attributes.decorators = None\n        return self\n\n    def set_docstring(self, docstring: str | None) -> \"FunctionModelBuilder\":\n        \"\"\"Sets the docstring.\"\"\"\n        self.function_attributes.docstring = docstring\n        return self\n\n    def set_return_annotation(self, return_type: str) -> \"FunctionModelBuilder\":\n        \"\"\"Sets the return type.\"\"\"\n        self.function_attributes.returns = return_type\n        return self\n\n    def set_is_method(self, is_method: bool) -> \"FunctionModelBuilder\":\n        \"\"\"Sets the is_method attribute in the function model.\"\"\"\n        self.function_attributes.is_method = is_method\n        return self\n\n    def set_is_async(self, is_async: bool) -> \"FunctionModelBuilder\":\n        \"\"\"Sets the is_async attribute in the function model.\"\"\"\n        self.function_attributes.is_async = is_async\n        return self\n\n    def _get_function_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"\n        Gets the function specific attributes from the builder.\n        \"\"\"\n        return self.function_attributes.model_dump()\n\n    @logging_decorator(message=\"Building function model\")\n    def build(self) -> FunctionModel:\n        \"\"\"Builds and returns the function model instance after building and setting the children models.\"\"\"\n        self.build_children()\n        self.set_children_ids()\n        return FunctionModel(\n            **self._get_common_attributes(),\n            **self._get_function_specific_attributes(),\n        )\n\n\nImported code block (postcode:python_parser:model_builders:module_model_builder.py__*__MODULE) code content:\n\n\nclass ModuleModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a Python module.\n\n    This class extends BaseModelBuilder and specializes in building a detailed model of a Python module, capturing various aspects such as the module's docstring, header content, footer content, and imports. It allows for the incremental construction of the module model by adding or setting various components.\n\n    Attributes:\n        - module_attributes (ModuleSpecificAttributes): An instance containing attributes specific to a module, like file path, docstring, header, footer, and imports.\n\n    Args:\n        - id (str): The unique identifier for the module model.\n        - file_path (str): The file path of the module being modeled.\n\n    Example:\n        ```Python\n        module_builder = ModuleModelBuilder(id='module1', file_path='/path/to/module.py')\n        module_builder.set_docstring(\"This is a docstring\").add_import(some_import_model)\n        # Configures the module builder with a docstring and an import.\n        ```\n    \"\"\"\n\n    def __init__(self, id: str, file_path: str, parent_id: str) -> None:\n        super().__init__(\n            id=id, block_type=BlockType.MODULE, parent_id=parent_id, file_path=file_path\n        )\n\n        self.module_attributes = ModuleSpecificAttributes(\n            docstring=None,\n            header=None,\n            footer=None,\n            imports=None,\n        )\n\n    def set_docstring(self, docstring: str | None) -> \"ModuleModelBuilder\":\n        \"\"\"Set the docstring.\"\"\"\n        if docstring:\n            self.module_attributes.docstring = docstring\n        return self\n\n    def set_header_content(self, header_content: list[str]) -> \"ModuleModelBuilder\":\n        \"\"\"Set the header.\"\"\"\n        if not self.module_attributes.header:\n            self.module_attributes.header = []\n        for line in header_content:\n            self.module_attributes.header.append(line)\n        return self\n\n    def set_footer_content(self, footer_content: list[str]) -> \"ModuleModelBuilder\":\n        \"\"\"Set the footer.\"\"\"\n        if not self.module_attributes.footer:\n            self.module_attributes.footer = []\n        for line in footer_content:\n            self.module_attributes.footer.append(line)\n        return self\n\n    def add_import(self, import_model: ImportModel) -> \"ModuleModelBuilder\":\n        \"\"\"Add an import to the imports list.\"\"\"\n        if not self.module_attributes.imports:\n            self.module_attributes.imports = []\n        # if \"OpenAISummarizer\" in [name.name for name in import_model.import_names]:\n        #     print(\"Adding OpenAISummarizer import\")\n        self.module_attributes.imports.append(import_model)\n        return self\n\n    def update_import(\n        self, updated_import_model: ImportModel, old_import_model: ImportModel\n    ) -> \"ModuleModelBuilder\":\n        \"\"\"\n        Update an import in the imports list.\n\n        Loops through the imports list and replaces the old import with the updated import.\n\n        Args:\n            updated_import_model (ImportModel): The updated import model.\n            old_import_model\n\n        Returns:\n            ModuleModelBuilder: The module model builder instance.\n\n        Raises:\n            Exception: If the import to be updated is not found.\n        \"\"\"\n        if self.module_attributes.imports:\n            import_to_remove: ImportModel | None = None\n            for existing_import in self.module_attributes.imports:\n                if (\n                    existing_import.import_names == old_import_model.import_names\n                    and existing_import.imported_from == old_import_model.imported_from\n                    and existing_import.import_module_type\n                    == old_import_model.import_module_type\n                ):\n                    import_to_remove = existing_import\n                    # if \"OpenAISummarizer\" in [\n                    #     name.name for name in existing_import.import_names\n                    # ]:\n                    #     print(\"Updating OpenAISummarizer import\")\n                    break\n\n            if not import_to_remove:\n                # raise Exception(f\"Could not find import to remove: {old_import_model}\")\n                # print(f\"Could not find import to remove: {old_import_model}\")\n                ...\n            else:\n                self.module_attributes.imports.remove(import_to_remove)\n                self.module_attributes.imports.append(updated_import_model)\n        else:\n            raise Exception(\n                f\"No imports in the builders imports list: {self.module_attributes.imports}\"\n            )\n        return self\n\n    def _get_module_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Get the module specific attributes.\"\"\"\n        return self.module_attributes.model_dump()\n\n    @logging_decorator(message=\"Building module model\")\n    def build(\n        self,\n    ) -> tuple[\n        ModuleModel, list[ClassModel | FunctionModel | StandaloneCodeBlockModel] | None\n    ]:\n        \"\"\"Builds and returns the module model instance after building and setting the children models.\"\"\"\n        self.build_children()\n        self.set_children_ids()\n        return (\n            ModuleModel(\n                **self._get_common_attributes(),\n                **self._get_module_specific_attributes(),\n            ),\n            self.child_models,\n        )\n\n\nImported code block (postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE) code content:\n\n\nclass StandaloneBlockModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a standalone code block.\n\n    This class extends BaseModelBuilder and specializes in building models of standalone code blocks, which are blocks of code not part of any class or function definitions. It captures details such as variable assignments within the block.\n\n    Attributes:\n        - standalone_block_attributes (StandaloneCodeBlockSpecificAttributes): An instance containing attributes specific to a standalone code block, such as variable assignments.\n\n    Args:\n        - id (str): The unique identifier for the standalone code block model.\n        - parent_id (str): The identifier of the parent model (e.g., module or class containing this standalone block).\n\n    Example:\n        ```Python\n        standalone_block_builder = StandaloneBlockModelBuilder(id='block1', parent_id='module1')\n        standalone_block_builder.set_variable_assignments(['x = 1', 'y = 2'])\n        # Configures the builder with variable assignments for the standalone code block.\n        ```\n    \"\"\"\n\n    def __init__(self, id: str, parent_id: str, file_path: str) -> None:\n        super().__init__(\n            id=id,\n            block_type=BlockType.STANDALONE_CODE_BLOCK,\n            parent_id=parent_id,\n            file_path=file_path,\n        )\n\n        self.standalone_block_attributes = StandaloneCodeBlockSpecificAttributes(\n            variable_assignments=None,\n        )\n\n    def set_variable_assignments(\n        self, variable_declarations: list[str]\n    ) -> \"StandaloneBlockModelBuilder\":\n        \"\"\"Sets the list of variable declarations to the standalone code block model.\"\"\"\n        self.standalone_block_attributes.variable_assignments = variable_declarations\n        return self\n\n    def _get_standalone_block_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Gets the standalone block specific attributes.\"\"\"\n        return self.standalone_block_attributes.model_dump()\n\n    @logging_decorator(message=\"Building standalone code block model\")\n    def build(self) -> StandaloneCodeBlockModel:\n        \"\"\"Creates a StandaloneCodeBlockModel instance after building and setting the children models.\"\"\"\n        return StandaloneCodeBlockModel(\n            **self._get_common_attributes(),\n            **self._get_standalone_block_specific_attributes(),\n        )\n\n, \nfrom typing import TYPE_CHECKING, Any, Union\n        \nChild (postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder) code content:\n\n\nclass BaseModelBuilder(ABC):\n    \"\"\"\n    Abstract base class for building models of different code blocks.\n\n    This class follows the builder pattern, providing a structured approach to constructing models for various types of code blocks (like modules, classes, functions). It defines common attributes and methods used across all specific model builders.\n\n    Attributes:\n        - id (str): The unique identifier for the code block.\n        - children_builders (list[Union[ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]]):\n            A list of builders for the children code blocks.\n        - common_attributes (BaseCodeBlockModel): An instance containing common attributes shared across different code block models.\n\n    Example:\n        ```Python\n        # This example demonstrates how a derived builder might be initialized and used.\n        class SomeModelBuilder(BaseModelBuilder):\n            def build(self):\n                # Building logic specific to 'SomeModelBuilder'\n                pass\n        builder = SomeModelBuilder(id='123', block_type=BlockType.CLASS, parent_id='root')\n        builder.set_start_line_num(1).set_end_line_num(10)\n        # Sets the start and end line numbers for the code block.\n        ```\n    \"\"\"\n\n    def __init__(\n        self, *, id: str, block_type: BlockType, parent_id: str | None, file_path: str\n    ) -> None:\n        self.id: str = id\n        self.child_builders: list[\n            ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder\n        ] = []\n        self.child_models: list[\n            ClassModel | FunctionModel | StandaloneCodeBlockModel\n        ] | None = None\n\n        self.common_attributes = BaseCodeBlockModel(\n            id=id,\n            file_path=file_path,\n            parent_id=parent_id,\n            block_type=block_type,\n            start_line_num=0,\n            end_line_num=0,\n            code_content=\"\",\n            important_comments=None,\n            children_ids=None,\n            dependencies=None,\n            summary=None,\n        )\n\n    def set_start_line_num(\n        self, line_num: int\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the start line number of the code block model instance.\"\"\"\n        self.common_attributes.start_line_num = line_num\n        return self\n\n    def set_end_line_num(\n        self, line_num: int\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the end line number of the code block model instance.\"\"\"\n        self.common_attributes.end_line_num = line_num\n        return self\n\n    def set_code_content(\n        self, code_content: str\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds the string containing the content of the code block to the model instance.\"\"\"\n        self.common_attributes.code_content = code_content\n        return self\n\n    def add_important_comment(\n        self, comment: CommentModel\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds an important comment to the model instance.\"\"\"\n        if not self.common_attributes.important_comments:\n            self.common_attributes.important_comments = []\n        self.common_attributes.important_comments.append(comment)\n        return self\n\n    def add_summary(\n        self, summary: str\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds a summary to the model instance.\"\"\"\n        self.common_attributes.summary = summary\n        # print(f\"Added summary to {self.common_attributes.id}\")\n        return self\n\n    def add_child_builder(\n        self,\n        child: Union[\n            \"ClassModelBuilder\", \"FunctionModelBuilder\", StandaloneBlockModelBuilder\n        ],\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Adds a child code block to the model instance.\"\"\"\n        self.child_builders.append(child)\n        return self\n\n    def set_dependencies(\n        self, dependencies: list[ImportModel | DependencyModel] | None\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the dependencies of the model instance.\"\"\"\n        self.common_attributes.dependencies = dependencies\n        return self\n\n    def update_import_dependency(\n        self,\n        new_import_model: ImportModel,\n        old_import_model: ImportModel,\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"\n        Updates an import in the model instance.\n\n        Args:\n            new_import_model (ImportModel): The updated import model.\n            old_import_model\n\n        Returns:\n            BaseModelBuilder: The base model builder instance.\n        \"\"\"\n\n        if self.common_attributes.dependencies:\n            import_model_to_remove: ImportModel | None = None\n            for existing_import_model in self.common_attributes.dependencies:\n                if isinstance(existing_import_model, DependencyModel):\n                    continue\n\n                if (\n                    existing_import_model.import_names == old_import_model.import_names\n                    and existing_import_model.imported_from\n                    == old_import_model.imported_from\n                    and existing_import_model.import_module_type\n                    == old_import_model.import_module_type\n                ):\n                    import_model_to_remove = existing_import_model\n                    break\n\n            if not import_model_to_remove:\n                raise Exception(f\"Could not find import to remove: {old_import_model}\")\n\n            self.common_attributes.dependencies.remove(import_model_to_remove)\n            self.common_attributes.dependencies.append(new_import_model)\n        else:\n            raise Exception(\n                f\"No imports in the builders imports list: {self.common_attributes.dependencies}\"\n            )\n        return self\n\n    def build_children(\n        self,\n    ) -> None:\n        if self.child_builders:\n            self.child_models = []\n            for child_builder in self.child_builders:\n                self.child_models.append(child_builder.build())\n                if child_builder.child_models:\n                    self.child_models.extend(child_builder.child_models)\n\n    def set_children_ids(\n        self,\n    ) -> Union[\n        \"BaseModelBuilder\",\n        \"ModuleModelBuilder\",\n        \"ClassModelBuilder\",\n        \"FunctionModelBuilder\",\n    ]:\n        \"\"\"Sets the children ids of the model instance.\"\"\"\n        self.common_attributes.children_ids = [\n            child.id for child in self.child_builders\n        ]\n        return self\n\n    def _get_common_attributes(self) -> dict[str, Any]:\n        \"\"\"\n        Returns a dictionary containing the attributes common to all code block models.\n        \"\"\"\n        return self.common_attributes.model_dump()\n\n    @abstractmethod\n    def build(\n        self,\n    ) -> None:\n        \"\"\"\n        Builds and returns the code block model instance.\n\n        Returns:\n            CodeBlockModel: The built code block model instance.\n        \"\"\"\n        ...\n\n, None, None\n        ",
    "children_ids": [
        "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__STANDALONE_BLOCK-1",
        "postcode:python_parser:model_builders:base_model_builder.py__*__MODULE__*__CLASS-BaseModelBuilder"
    ]
}