{
    "variable_assignments": [
        "DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT: str = \"\"\"\nYou are an expert at writing queries to retrieve data from a ChromaDB vector database. You take user questions and\nwrite a given number of queries that will best retrieve the relevant data from the vector store. The vector contains\ndata for a Python project, so write your queries accordingly. Always return your queries as a list\nafter the phrase 'QUERIES_LIST:'.\n\"\"\"",
        "DEFAULT_CHROMA_LIBRARIAN_PROMPT: str = \"\"\"\nGiven the following user question, write {queries_count} queries that will best retrieve the relevant data from the\nvector store.\n\nWhen creating queries for a vector database, especially concerning specific functionalities or components within a Python project, it's helpful to:\n    1. Specify the Component: Clearly mention the class, module, or function you're interested in.\n    2. Focus on the Action or Feature: Highlight what you want to know about - whether it's retrieving results, serialization, validation methods, etc.\n    3. Vary the Structure: Include variations of your query to cover different ways the information might be phrased or indexed.\n\nExamples:\n    - User question:\n        - How do I get the results from the chromadb vector database using a list of queries in this project?\n    - Your queries:\n        - chromadb vector database results from list of queries\n        - query chromadb vector database\n        - search vector database\n    - User Question:\n        - \"What methods are available for data validation in the UserInputValidator module?\"\n    - Your Queries:\n        - Methods in UserInputValidator module for data validation in Python\n        - UserInputValidator Python module data validation techniques\n        - List methods UserInputValidator for validating data in Python\n\nUser Question: {user_question}\n\nDO NOT NUMBER THE QUERIES. SIMPLY WRITE EACH ON A NEW LINE WITH A HYPHEN IN FRONT OF IT.\n\nMake sure to return your queries after the phrase 'QUERIES_LIST:'.\n\"\"\"",
        "prompts_list: list[str] = [\n    DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT,\n    DEFAULT_CHROMA_LIBRARIAN_PROMPT,\n]"
    ],
    "id": "postcode:ai_services:librarians:prompts:chroma_librarian_prompts.py__*__MODULE__*__STANDALONE_BLOCK-1",
    "file_path": "postcode/ai_services/librarians/prompts/chroma_librarian_prompts.py",
    "parent_id": "postcode:ai_services:librarians:prompts:chroma_librarian_prompts.py__*__MODULE",
    "block_type": "STANDALONE_BLOCK",
    "start_line_num": 1,
    "end_line_num": 42,
    "code_content": "DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT: str = \"\"\"\nYou are an expert at writing queries to retrieve data from a ChromaDB vector database. You take user questions and\nwrite a given number of queries that will best retrieve the relevant data from the vector store. The vector contains\ndata for a Python project, so write your queries accordingly. Always return your queries as a list\nafter the phrase 'QUERIES_LIST:'.\n\"\"\"\nDEFAULT_CHROMA_LIBRARIAN_PROMPT: str = \"\"\"\nGiven the following user question, write {queries_count} queries that will best retrieve the relevant data from the\nvector store.\n\nWhen creating queries for a vector database, especially concerning specific functionalities or components within a Python project, it's helpful to:\n    1. Specify the Component: Clearly mention the class, module, or function you're interested in.\n    2. Focus on the Action or Feature: Highlight what you want to know about - whether it's retrieving results, serialization, validation methods, etc.\n    3. Vary the Structure: Include variations of your query to cover different ways the information might be phrased or indexed.\n\nExamples:\n    - User question:\n        - How do I get the results from the chromadb vector database using a list of queries in this project?\n    - Your queries:\n        - chromadb vector database results from list of queries\n        - query chromadb vector database\n        - search vector database\n    - User Question:\n        - \"What methods are available for data validation in the UserInputValidator module?\"\n    - Your Queries:\n        - Methods in UserInputValidator module for data validation in Python\n        - UserInputValidator Python module data validation techniques\n        - List methods UserInputValidator for validating data in Python\n\nUser Question: {user_question}\n\nDO NOT NUMBER THE QUERIES. SIMPLY WRITE EACH ON A NEW LINE WITH A HYPHEN IN FRONT OF IT.\n\nMake sure to return your queries after the phrase 'QUERIES_LIST:'.\n\"\"\"\nprompts_list: list[str] = [\n    DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT,\n    DEFAULT_CHROMA_LIBRARIAN_PROMPT,\n]\n",
    "important_comments": null,
    "dependencies": [],
    "summary": "\nSummary:\n\n        postcode:ai_services:librarians:prompts:chroma_librarian_prompts.py__*__MODULE__*__STANDALONE_BLOCK-1\n\n        None, None, None\n        ",
    "children_ids": null
}