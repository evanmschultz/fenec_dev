{
    "function_name": "get_module_names_updated_since_commit",
    "docstring": "Returns a list of the Python modules that have been changed since the specified commit.\n\nArgs:\n    - commit (str): The commit hash or reference to compare the current state against.\n\nRuns the following command using subprocess:\n    (git ls-files --others --exclude-standard; git diff --name-only COMMIT) | sort | uniq\n\nReturns:\n    - list[str]: A list of the modules that have been changed since the specified commit.\n\nRaises:\n    - Exception: If the git command fails.",
    "decorators": [
        {
            "content": "@staticmethod",
            "decorator_name": "staticmethod",
            "decorator_args": null
        }
    ],
    "parameters": null,
    "returns": "list[str]",
    "is_method": true,
    "is_async": false,
    "id": "postcode:updaters:git_updater.py__*__MODULE__*__CLASS-UpdateUsingGit__*__FUNCTION-get_module_names_updated_since_commit",
    "file_path": "postcode/updaters/git_updater.py",
    "parent_id": "postcode:updaters:git_updater.py__*__MODULE__*__CLASS-UpdateUsingGit",
    "block_type": "FUNCTION",
    "start_line_num": 54,
    "end_line_num": 84,
    "code_content": "\n@staticmethod\ndef get_module_names_updated_since_commit(commit_hash: str) -> list[str]:\n    \"\"\"\n        Returns a list of the Python modules that have been changed since the specified commit.\n\n        Args:\n            - commit (str): The commit hash or reference to compare the current state against.\n\n        Runs the following command using subprocess:\n            (git ls-files --others --exclude-standard; git diff --name-only COMMIT) | sort | uniq\n\n        Returns:\n            - list[str]: A list of the modules that have been changed since the specified commit.\n\n        Raises:\n            - Exception: If the git command fails.\n        \"\"\"\n\n    git_command = f\"(git ls-files --others --exclude-standard; git diff --name-only {commit_hash}) | sort | uniq\"\n\n    result: subprocess.CompletedProcess[str] = subprocess.run(\n        git_command, shell=True, capture_output=True, text=True\n    )\n    if result.returncode != 0:\n        raise Exception(\"Git command failed: \" + result.stderr)\n\n    changed_files: list[str] = result.stdout.strip().split(\"\\n\")\n\n    return [file for file in changed_files if file.endswith(\".py\")]\n",
    "important_comments": null,
    "dependencies": null,
    "summary": null,
    "children_ids": []
}