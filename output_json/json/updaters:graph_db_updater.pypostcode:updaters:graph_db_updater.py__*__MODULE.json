{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "Logger",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "logging",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "OpenAI",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "openai",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "GraphDBSummarizationManager",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager"
                }
            ],
            "imported_from": "postcode.ai_services.summarizer.graph_db_summarization_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "OpenAISummarizer",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:summarizer:openai_summarizer.py__*__MODULE__*__CLASS-OpenAISummarizer"
                }
            ],
            "imported_from": "postcode.ai_services.summarizer.openai_summarizer",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:summarizer:openai_summarizer.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "SummarizationMapper",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE__*__CLASS-SummarizationMapper"
                }
            ],
            "imported_from": "postcode.ai_services.summarizer.summarization_mapper",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ArangoDBConnector",
                    "as_name": null,
                    "local_block_id": "postcode:databases:arangodb:arangodb_connector.py__*__MODULE__*__CLASS-ArangoDBConnector"
                }
            ],
            "imported_from": "postcode.databases.arangodb.arangodb_connector",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:arangodb:arangodb_connector.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ArangoDBManager",
                    "as_name": null,
                    "local_block_id": "postcode:databases:arangodb:arangodb_manager.py__*__MODULE__*__CLASS-ArangoDBManager"
                }
            ],
            "imported_from": "postcode.databases.arangodb.arangodb_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:arangodb:arangodb_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ChromaSetupReturnContext",
                    "as_name": null,
                    "local_block_id": "postcode:databases:chroma:setup_chroma.py__*__MODULE__*__CLASS-ChromaSetupReturnContext"
                },
                {
                    "name": "setup_chroma",
                    "as_name": null,
                    "local_block_id": "postcode:databases:chroma:setup_chroma.py__*__MODULE__*__FUNCTION-setup_chroma"
                }
            ],
            "imported_from": "postcode.databases.chroma.setup_chroma",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:chroma:setup_chroma.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "JSONHandler",
                    "as_name": null,
                    "local_block_id": "postcode:json_management:json_handler.py__*__MODULE__*__CLASS-JSONHandler"
                }
            ],
            "imported_from": "postcode.json_management.json_handler",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:json_management:json_handler.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ModuleModel"
                },
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DirectoryModel"
                }
            ],
            "imported_from": "postcode.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:models:models.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "VisitorManagerProcessFilesReturn",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManagerProcessFilesReturn"
                },
                {
                    "name": "VisitorManager",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE__*__CLASS-VisitorManager"
                }
            ],
            "imported_from": "postcode.python_parser.visitor_manager.visitor_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitor_manager:visitor_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModelType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.types.postcode",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:types:postcode.py__*__MODULE"
        }
    ],
    "id": "postcode:updaters:graph_db_updater.py__*__MODULE",
    "file_path": "postcode/updaters/graph_db_updater.py",
    "parent_id": "postcode:updaters__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 136,
    "code_content": "from logging import Logger\n\nfrom openai import OpenAI\nfrom postcode.ai_services.summarizer.graph_db_summarization_manager import (\n    GraphDBSummarizationManager,\n)\nfrom postcode.ai_services.summarizer.openai_summarizer import OpenAISummarizer\nfrom postcode.ai_services.summarizer.summarization_mapper import SummarizationMapper\nfrom postcode.databases.arangodb.arangodb_connector import ArangoDBConnector\n\nfrom postcode.databases.arangodb.arangodb_manager import ArangoDBManager\nfrom postcode.databases.chroma.setup_chroma import (\n    ChromaSetupReturnContext,\n    setup_chroma,\n)\nfrom postcode.json_management.json_handler import JSONHandler\nfrom postcode.models.models import (\n    DirectoryModel,\n    ModuleModel,\n)\nfrom postcode.python_parser.visitor_manager.visitor_manager import (\n    VisitorManager,\n    VisitorManagerProcessFilesReturn,\n)\nfrom postcode.types.postcode import ModelType\n\n\nclass GraphDBUpdater:\n    def __init__(\n        self,\n        directory: str,\n        output_directory: str,\n        logger: Logger,\n        arango_connector: ArangoDBConnector = ArangoDBConnector(),\n    ) -> None:\n        self.directory: str = directory\n        self.output_directory: str = output_directory\n        self.logger: Logger = logger\n        self.arango_connector: ArangoDBConnector = arango_connector\n\n        self.graph_manager = ArangoDBManager(arango_connector)\n\n    def update_all(\n        self,\n        directory: str,\n        output_directory: str,\n        logger: Logger,\n    ) -> ChromaSetupReturnContext:\n        self.arango_connector.delete_all_collections()\n        self.arango_connector.ensure_collections()\n\n        process_files_return: VisitorManagerProcessFilesReturn = (\n            self._visit_and_parse_files(directory, logger)\n        )\n        models_tuple: tuple[ModelType, ...] = process_files_return.models_tuple\n\n        self._upsert_models_to_graph_db(models_tuple)\n\n        finalized_models: list[ModelType] | None = self._map_and_summarize_models(\n            models_tuple, logger\n        )\n\n        if not finalized_models:\n            raise Exception(\"No finalized models returned from summarization.\")\n\n        json_manager = JSONHandler(\n            directory, process_files_return.directory_modules, output_directory\n        )\n        self._save_json(finalized_models, json_manager, logger)\n        self._upsert_models_to_graph_db(tuple(finalized_models))\n\n        return setup_chroma(finalized_models, logger)\n\n    def _visit_and_parse_files(\n        self, directory: str, logger: Logger\n    ) -> VisitorManagerProcessFilesReturn:\n        \"\"\"Visits and parses the files in the directory.\"\"\"\n\n        logger.info(\"Starting the directory parsing.\")\n        visitor_manager = VisitorManager(directory)\n\n        return visitor_manager.process_files()\n\n    def _get_module_ids(self, models_tuple: tuple[ModelType, ...]) -> list[str]:\n        \"\"\"Returns a list of module IDs from the models tuple.\"\"\"\n\n        return [model.id for model in models_tuple if isinstance(model, ModuleModel)]\n\n    def _upsert_models_to_graph_db(self, models_tuple: tuple[ModelType, ...]) -> None:\n        \"\"\"Upserts the models to the graph database.\"\"\"\n\n        self.graph_manager.upsert_models(\n            list(models_tuple)\n        ).process_imports_and_dependencies().get_or_create_graph()\n\n    def _save_json(\n        self, models: list[ModelType], json_manager: JSONHandler, logger: Logger\n    ) -> None:\n        \"\"\"Saves the models as JSON.\"\"\"\n\n        logger.info(\"Saving models as JSON\")\n        for model in models:\n            if isinstance(model, DirectoryModel):\n                output_path: str = model.id\n\n            else:\n                output_path: str = model.file_path + model.id\n            json_manager.save_model_as_json(model, output_path)\n\n        json_manager.save_visited_directories()\n        logger.info(\"JSON save complete\")\n\n    def _map_and_summarize_models(\n        self,\n        models_tuple: tuple[ModelType, ...],\n        logger: Logger,\n    ) -> list[ModelType] | None:\n        \"\"\"Maps and summarizes the models.\"\"\"\n\n        module_ids: list[str] = self._get_module_ids(models_tuple)\n        summarization_mapper = SummarizationMapper(\n            module_ids, models_tuple, self.graph_manager\n        )\n        client = OpenAI(max_retries=4)\n        summarizer = OpenAISummarizer(client=client)\n        summarization_manager = GraphDBSummarizationManager(\n            models_tuple, summarization_mapper, summarizer, self.graph_manager\n        )\n\n        finalized_models: list[\n            ModelType\n        ] | None = summarization_manager.create_summaries_and_return_updated_models()\n        logger.info(\"Summarization complete\")\n\n        return finalized_models if finalized_models else None\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:updaters:graph_db_updater.py__*__MODULE\n\n        \nChild (postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater) code content:\n\n\nclass GraphDBUpdater:\n    def __init__(\n        self,\n        directory: str,\n        output_directory: str,\n        logger: Logger,\n        arango_connector: ArangoDBConnector = ArangoDBConnector(),\n    ) -> None:\n        self.directory: str = directory\n        self.output_directory: str = output_directory\n        self.logger: Logger = logger\n        self.arango_connector: ArangoDBConnector = arango_connector\n\n        self.graph_manager = ArangoDBManager(arango_connector)\n\n    def update_all(\n        self,\n        directory: str,\n        output_directory: str,\n        logger: Logger,\n    ) -> ChromaSetupReturnContext:\n        self.arango_connector.delete_all_collections()\n        self.arango_connector.ensure_collections()\n\n        process_files_return: VisitorManagerProcessFilesReturn = (\n            self._visit_and_parse_files(directory, logger)\n        )\n        models_tuple: tuple[ModelType, ...] = process_files_return.models_tuple\n\n        self._upsert_models_to_graph_db(models_tuple)\n\n        finalized_models: list[ModelType] | None = self._map_and_summarize_models(\n            models_tuple, logger\n        )\n\n        if not finalized_models:\n            raise Exception(\"No finalized models returned from summarization.\")\n\n        json_manager = JSONHandler(\n            directory, process_files_return.directory_modules, output_directory\n        )\n        self._save_json(finalized_models, json_manager, logger)\n        self._upsert_models_to_graph_db(tuple(finalized_models))\n\n        return setup_chroma(finalized_models, logger)\n\n    def _visit_and_parse_files(\n        self, directory: str, logger: Logger\n    ) -> VisitorManagerProcessFilesReturn:\n        \"\"\"Visits and parses the files in the directory.\"\"\"\n\n        logger.info(\"Starting the directory parsing.\")\n        visitor_manager = VisitorManager(directory)\n\n        return visitor_manager.process_files()\n\n    def _get_module_ids(self, models_tuple: tuple[ModelType, ...]) -> list[str]:\n        \"\"\"Returns a list of module IDs from the models tuple.\"\"\"\n\n        return [model.id for model in models_tuple if isinstance(model, ModuleModel)]\n\n    def _upsert_models_to_graph_db(self, models_tuple: tuple[ModelType, ...]) -> None:\n        \"\"\"Upserts the models to the graph database.\"\"\"\n\n        self.graph_manager.upsert_models(\n            list(models_tuple)\n        ).process_imports_and_dependencies().get_or_create_graph()\n\n    def _save_json(\n        self, models: list[ModelType], json_manager: JSONHandler, logger: Logger\n    ) -> None:\n        \"\"\"Saves the models as JSON.\"\"\"\n\n        logger.info(\"Saving models as JSON\")\n        for model in models:\n            if isinstance(model, DirectoryModel):\n                output_path: str = model.id\n\n            else:\n                output_path: str = model.file_path + model.id\n            json_manager.save_model_as_json(model, output_path)\n\n        json_manager.save_visited_directories()\n        logger.info(\"JSON save complete\")\n\n    def _map_and_summarize_models(\n        self,\n        models_tuple: tuple[ModelType, ...],\n        logger: Logger,\n    ) -> list[ModelType] | None:\n        \"\"\"Maps and summarizes the models.\"\"\"\n\n        module_ids: list[str] = self._get_module_ids(models_tuple)\n        summarization_mapper = SummarizationMapper(\n            module_ids, models_tuple, self.graph_manager\n        )\n        client = OpenAI(max_retries=4)\n        summarizer = OpenAISummarizer(client=client)\n        summarization_manager = GraphDBSummarizationManager(\n            models_tuple, summarization_mapper, summarizer, self.graph_manager\n        )\n\n        finalized_models: list[\n            ModelType\n        ] | None = summarization_manager.create_summaries_and_return_updated_models()\n        logger.info(\"Summarization complete\")\n\n        return finalized_models if finalized_models else None\n\n, None, None\n        ",
    "children_ids": [
        "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater"
    ]
}