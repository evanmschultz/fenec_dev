{
    "function_name": "parse",
    "docstring": "Parses the provided Python code into a structured module model.\n\nUses libcst to parse the provided code using the ModuleVisitor class. A ModuleModelBuilder instance is returned\nalong with its hierarchy of child builders.\n\nArgs:\n    - code (str): The Python code to be parsed.\n    - parent_id (str): The ID of the parent module or block.\n\nReturns:\n    - ModuleModelBuilder | None: The module model builder for the provided code.\n\nExample:\n    ```Python\n    python_parser = PythonParser(\"/path/to/python/file.py\")\n    code = python_parser.open_file()\n    module_model = python_parser.parse(code, parent_id=\"parent_module_id\")\n    # Parses the provided code and returns a module model builder.\n    ```",
    "decorators": null,
    "parameters": null,
    "returns": "ModuleModelBuilder | None",
    "is_method": true,
    "is_async": false,
    "id": "postcode:python_parser:parsers:python_parser.py__*__MODULE__*__CLASS-PythonParser__*__FUNCTION-parse",
    "file_path": "postcode/python_parser/parsers/python_parser.py",
    "parent_id": "postcode:python_parser:parsers:python_parser.py__*__MODULE__*__CLASS-PythonParser",
    "block_type": "FUNCTION",
    "start_line_num": 73,
    "end_line_num": 115,
    "code_content": "\ndef parse(self, code: str, parent_id: str) -> ModuleModelBuilder | None:\n    \"\"\"\n        Parses the provided Python code into a structured module model.\n\n        Uses libcst to parse the provided code using the ModuleVisitor class. A ModuleModelBuilder instance is returned\n        along with its hierarchy of child builders.\n\n        Args:\n            - code (str): The Python code to be parsed.\n            - parent_id (str): The ID of the parent module or block.\n\n        Returns:\n            - ModuleModelBuilder | None: The module model builder for the provided code.\n\n        Example:\n            ```Python\n            python_parser = PythonParser(\"/path/to/python/file.py\")\n            code = python_parser.open_file()\n            module_model = python_parser.parse(code, parent_id=\"parent_module_id\")\n            # Parses the provided code and returns a module model builder.\n            ```\n        \"\"\"\n\n    wrapper = MetadataWrapper(libcst.parse_module(code))\n    module_id: str = ModuleIDGenerationStrategy.generate_id(\n        file_path=self.file_path\n    )\n    module_builder: ModuleModelBuilder = BuilderFactory.create_builder_instance(\n        block_type=BlockType.MODULE,\n        id=module_id,\n        file_path=self.file_path,\n        parent_id=parent_id,\n    )\n    visitor = ModuleVisitor(id=module_id, module_builder=module_builder)\n    wrapper.visit(visitor)\n\n    return (\n        visitor.builder_stack[0]\n        if isinstance(visitor.builder_stack[0], ModuleModelBuilder)\n        else None\n    )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nThe `parse` method leverages `libcst` to parse a Python code string, wraps the parsed module for metadata handling, and generates a unique ID for the module. It constructs a `ModuleModelBuilder` using `BuilderFactory` with specified parameters including block type, ID, file path, and parent ID. A `ModuleVisitor` is then used to traverse and build the module's structure. The method concludes by returning the root `ModuleModelBuilder` from the `builder_stack` if it matches the expected type, otherwise `None`.",
    "children_ids": []
}