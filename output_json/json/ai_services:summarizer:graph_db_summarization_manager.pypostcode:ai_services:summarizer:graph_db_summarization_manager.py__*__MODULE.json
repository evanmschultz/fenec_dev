{
    "docstring": null,
    "header": [
        "# TODO: Add logic to gather all child summaries of a directory (modules and directories within the directory)"
    ],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "pprint",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "pprint",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "OpenAIReturnContext",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:summarizer:summarization_context.py__*__MODULE__*__CLASS-OpenAIReturnContext"
                },
                {
                    "name": "Summarizer",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:summarizer:summarization_context.py__*__MODULE__*__CLASS-Summarizer"
                }
            ],
            "imported_from": "postcode.ai_services.summarizer.summarization_context",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:summarizer:summarization_context.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "SummarizationMapper",
                    "as_name": null,
                    "local_block_id": "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE__*__CLASS-SummarizationMapper"
                }
            ],
            "imported_from": "postcode.ai_services.summarizer.summarization_mapper",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ArangoDBManager",
                    "as_name": null,
                    "local_block_id": "postcode:databases:arangodb:arangodb_manager.py__*__MODULE__*__CLASS-ArangoDBManager"
                }
            ],
            "imported_from": "postcode.databases.arangodb.arangodb_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:arangodb:arangodb_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModelType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.types.postcode",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:types:postcode.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ImportModel"
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                },
                {
                    "name": "ModuleModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ModuleModel"
                },
                {
                    "name": "DirectoryModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DirectoryModel"
                }
            ],
            "imported_from": "postcode.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:models:models.py__*__MODULE"
        }
    ],
    "id": "postcode:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE",
    "file_path": "postcode/ai_services/summarizer/graph_db_summarization_manager.py",
    "parent_id": "postcode:ai_services:summarizer__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 285,
    "code_content": "# TODO: Add logic to gather all child summaries of a directory (modules and directories within the directory)\n\nimport logging\nfrom pprint import pprint\n\nfrom postcode.ai_services.summarizer.summarization_context import (\n    Summarizer,\n    OpenAIReturnContext,\n)\nfrom postcode.ai_services.summarizer.summarization_mapper import SummarizationMapper\nfrom postcode.databases.arangodb.arangodb_manager import ArangoDBManager\n\nfrom postcode.types.postcode import ModelType\n\nfrom postcode.models.models import (\n    DependencyModel,\n    DirectoryModel,\n    ImportModel,\n    ModuleModel,\n)\n\n\nclass GraphDBSummarizationManager:\n    def __init__(\n        self,\n        all_models_tuple: tuple[ModelType, ...],\n        summarization_mapper: SummarizationMapper,\n        summarizer: Summarizer,\n        graph_manager: ArangoDBManager,\n    ) -> None:\n        self.all_models_tuple: tuple[ModelType, ...] = all_models_tuple\n        self.summarization_mapper: SummarizationMapper = summarization_mapper\n        self.summarizer: Summarizer = summarizer\n        self.graph_manager: ArangoDBManager = graph_manager\n\n        self.summarized_code_block_ids: set[str] = set()\n        self.prompt_tokens: int = 0\n        self.completion_tokens: int = 0\n\n    @property\n    def total_cost(self) -> float:\n        \"\"\"Provides the total cost of the summarization process.\"\"\"\n        prompt_cost: int = self.prompt_tokens * 1  # Costs 1 cent per 1,000 tokens\n        completion_cost: int = (\n            self.completion_tokens * 3\n        )  # Costs 3 cents per 1,000 tokens\n        return (prompt_cost + completion_cost) / 100_000  # Convert to dollars\n\n    def create_summaries_and_return_updated_models(self) -> list[ModelType] | None:\n        summarization_map: list[\n            ModelType\n        ] = self.summarization_mapper.create_summarization_map()\n        models_to_summarize_count: int = len(summarization_map)\n        models_summarized_count: int = 0\n\n        for model in summarization_map:\n            children_summaries: str | None = None\n            dependency_summaries: str | None = None\n            import_details: str | None = None\n\n            if model.children_ids:\n                if children_summary_list := self._get_child_summaries(model):\n                    self._get_child_summaries(model)\n\n                    children_summaries: str | None = self._stringify_children_summaries(\n                        children_summary_list\n                    )\n\n            # if isinstance(model, DirectoryModel):\n            #     ...\n\n            elif isinstance(model, ModuleModel):\n                if model.imports:\n                    dependency_summaries = self._get_dependencies_summaries(model)\n                    import_details = \"\"\n                    for _import in model.imports:\n                        if import_summary := self._get_import_details(_import):\n                            import_details += f\"\\n{import_summary}\"\n            else:\n                if not isinstance(model, DirectoryModel):\n                    if model.dependencies:\n                        dependency_summaries = self._get_dependencies_summaries(model)\n                        import_details = \"\"\n                        for dependency in model.dependencies:\n                            if isinstance(dependency, DependencyModel):\n                                continue\n                            if import_summary := self._get_import_details(dependency):\n                                import_details += f\"\\n{import_summary}\"\n\n            models_summarized_count += 1\n            logging.info(\n                f\"Summarizing model {models_summarized_count} out of {models_to_summarize_count}; {model.id}.\"\n            )\n\n            code_content: str = \"\"\n            if isinstance(model, DirectoryModel):\n                code_content = \"\"\n            else:\n                code_content = model.code_content\n\n            summary_return_context: OpenAIReturnContext | None = (\n                self.summarizer.test_summarize_code(\n                    code_content,\n                    model_id=model.id,\n                    children_summaries=children_summaries,\n                    dependency_summaries=dependency_summaries,\n                    import_details=import_details,\n                )\n            )\n            if summary_return_context:\n                if summary_return_context.summary:\n                    self.graph_manager.update_vertex_summary_by_id(\n                        model.id, summary_return_context.summary\n                    )\n                self.prompt_tokens += summary_return_context.prompt_tokens\n                self.completion_tokens += summary_return_context.completion_tokens\n\n        print(len(summarization_map))\n        # pprint([model.id for model in summarization_map][::-1])\n        count = 1\n        for model in summarization_map[::-1]:\n            pprint({\"count\": count, \"id\": model.id})\n            count += 1\n        return self.graph_manager.get_all_vertices() if self.graph_manager else None\n\n    def _get_child_summaries(self, model: ModelType) -> list[str] | None:\n        \"\"\"Gathers summaries of child models.\"\"\"\n\n        child_summary_list: list[str] = []\n        if model.children_ids:\n            for child_id in model.children_ids:\n                if child := self.graph_manager.get_vertex_model_by_id(child_id):\n                    if child.summary:\n                        child_summary: str = child.summary\n\n                    else:\n                        # TODO: Add logic to gather all child summaries of a directory (modules and directories within the directory)\n                        if isinstance(child, DirectoryModel):\n                            # for child_child_id in child.children_ids:\n                            #     if child_child := self.graph_manager.get_vertex_model_by_id(\n                            #         child_child_id\n                            #     ):\n                            #         if child_child.summary:\n                            #             child_summary = child_child.summary\n                            #             break\n                            continue\n\n                        child_summary = (\n                            f\"Child ({child_id}) code content:\\n{child.code_content}\\n\"\n                        )\n                    child_summary_list.append(child_summary)\n        return child_summary_list\n\n    def _stringify_children_summaries(self, children_summary_list: list[str]) -> str:\n        \"\"\"Converts all of the child summaries to a single string to be used in the prompt.\"\"\"\n\n        children_summaries: str = \"\"\n        for child_summary in children_summary_list:\n            children_summaries += f\"\\n{child_summary}\"\n        return children_summaries\n\n    def _get_dependencies_summaries(self, model: ModelType) -> str | None:\n        dependency_list: list[ImportModel | DependencyModel] | list[ImportModel] = []\n        dependency_summary_list: list[str] = []\n\n        if isinstance(model, DirectoryModel):\n            return None\n\n        if isinstance(model, ModuleModel):\n            if not model.imports:\n                return None\n\n            dependency_list = model.imports\n        else:\n            if not model.dependencies:\n                return None\n\n            dependency_list = model.dependencies\n        for dependency in dependency_list:\n            if isinstance(dependency, DependencyModel) and dependency.code_block_id:\n                if module_local_dependency_summary := self._get_local_dependency_summary(\n                    dependency, model\n                ):\n                    dependency_summary_list.append(module_local_dependency_summary)\n\n            elif isinstance(dependency, ImportModel):\n                if dependency.import_module_type == \"LOCAL\":\n                    if not dependency.import_names:\n                        if module_import_dependency := self._get_local_import_summary(\n                            dependency\n                        ):\n                            dependency_summary_list.append(module_import_dependency)\n                    else:\n                        if import_from_dependency := self._get_local_import_from_summary(\n                            dependency\n                        ):\n                            dependency_summary_list.append(import_from_dependency)\n\n        dependency_summaries = self._stringify_dependencies_summaries(\n            dependency_summary_list\n        )\n\n        return dependency_summaries\n\n    def _get_local_dependency_summary(\n        self,\n        dependency: DependencyModel,\n        model: ModelType,\n    ) -> str | None:\n        \"\"\"Gets a summary for a dependency local to the module.\"\"\"\n        if not model.children_ids:\n            return None\n\n        for child_id in model.children_ids:\n            if child_id == dependency.code_block_id:\n                for model in self.all_models_tuple:\n                    if model.id == child_id:\n                        if isinstance(model, DirectoryModel):\n                            return None\n\n                        if model.summary:\n                            return model.summary\n                        else:\n                            return f\"Dependency ({dependency.code_block_id}) code content:\\n{model.code_content}\\n\"\n        return None\n\n    def _stringify_dependencies_summaries(\n        self, dependencies_summary_list: list[str] | None\n    ) -> str | None:\n        \"\"\"Converts all of the dependency summaries to a single string to be used in the prompt.\"\"\"\n        if not dependencies_summary_list:\n            return None\n\n        dependency_summaries: str = \"\"\n        for dependency_summary in dependencies_summary_list:\n            dependency_summaries += f\"\\n{dependency_summary}\"\n        return dependency_summaries\n\n    def _get_local_import_summary(self, dependency: ImportModel) -> str | None:\n        for model in self.all_models_tuple:\n            if model.id == dependency.local_module_id:\n                import_summary: str | None = None\n                if model.summary:\n                    import_summary = model.summary\n                else:\n                    if not isinstance(model, DirectoryModel):\n                        import_summary = f\"Imported module ({dependency.local_module_id}) code content:\\n{model.code_content}\\n\"\n\n                return import_summary\n        return None\n\n    def _get_local_import_from_summary(self, dependency: ImportModel) -> str | None:\n        for import_name in dependency.import_names:\n            for model in self.all_models_tuple:\n                if model.id == import_name.local_block_id:\n                    if isinstance(model, DirectoryModel):\n                        return None\n\n                    import_summary: str = \"\"\n                    if model.summary:\n                        import_summary = model.summary\n                    else:\n                        import_summary = f\"Imported code block ({dependency.local_module_id}) code content:\\n{model.code_content}\\n\"\n                    return import_summary\n        return None\n\n    def _get_import_details(self, import_model: ImportModel) -> str | None:\n        \"\"\"Retrieves details of import statements to be used in the prompt.\"\"\"\n        if import_model.import_module_type == \"LOCAL\" or not import_model.import_names:\n            return None\n\n        import_names_list: list[str] = []\n        for import_name in import_model.import_names:\n            if import_name.as_name:\n                import_names_list.append(f\"{import_name.name} as {import_name.as_name}\")\n            else:\n                import_names_list.append(f\"{import_name.name}\")\n\n        if import_model.imported_from:\n            import_details: str = f\"from {import_model.imported_from} import {', '.join(import_names_list)}\"\n        else:\n            import_details = f\"import {', '.join(import_names_list)}\"\n\n        return import_details\n",
    "important_comments": [
        {
            "content": "# TODO: Add logic to gather all child summaries of a directory (modules and directories within the directory)",
            "comment_types": [
                "TODO"
            ]
        }
    ],
    "dependencies": null,
    "summary": null,
    "children_ids": [
        "postcode:ai_services:summarizer:graph_db_summarization_manager.py__*__MODULE__*__CLASS-GraphDBSummarizationManager"
    ]
}