{
    "function_name": "_convert_decorators_to_metadata",
    "docstring": "Converts the decorators to a metadata string.",
    "decorators": null,
    "parameters": null,
    "returns": "str",
    "is_method": true,
    "is_async": false,
    "id": "postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes__*__FUNCTION-_convert_decorators_to_metadata",
    "file_path": "postcode/models/models.py",
    "parent_id": "postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes",
    "block_type": "FUNCTION",
    "start_line_num": 347,
    "end_line_num": 352,
    "code_content": "\ndef _convert_decorators_to_metadata(self) -> str:\n    \"\"\"Converts the decorators to a metadata string.\"\"\"\n    decorators_str: str = self.model_dump_json() if self.decorators else \"\"\n    return f\"{decorators_str}\"\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nThe `_convert_decorators_to_metadata` method within a class checks if the instance has decorators and, if so, calls `model_dump_json` to create a string representation of metadata; otherwise, it returns an empty string. This method is used to serialize decorator information into a consistent string format for the class instance.",
    "children_ids": []
}