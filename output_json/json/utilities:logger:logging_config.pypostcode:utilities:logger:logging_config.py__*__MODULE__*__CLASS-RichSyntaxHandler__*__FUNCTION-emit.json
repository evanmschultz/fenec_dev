{
    "function_name": "emit",
    "docstring": "Emits a logging record.\n\nIf the record has the 'syntax_highlight' attribute set to True, it renders the 'content' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\n\nArgs:\n    record: The logging record to emit.\n\nExample:\n    # Assuming `logger` is a logger instance\n    >>> logger.info(\"Regular log message\")\n    # Outputs a regular log message.\n\n    >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print('Hello, world!')\"})\n    # Outputs the message with syntax highlighting.",
    "decorators": null,
    "parameters": null,
    "returns": "None",
    "is_method": true,
    "is_async": false,
    "id": "postcode:utilities:logger:logging_config.py__*__MODULE__*__CLASS-RichSyntaxHandler__*__FUNCTION-emit",
    "file_path": "postcode/utilities/logger/logging_config.py",
    "parent_id": "postcode:utilities:logger:logging_config.py__*__MODULE__*__CLASS-RichSyntaxHandler",
    "block_type": "FUNCTION",
    "start_line_num": 34,
    "end_line_num": 69,
    "code_content": "\ndef emit(self, record) -> None:\n    \"\"\"\n        Emits a logging record.\n\n        If the record has the 'syntax_highlight' attribute set to True, it renders the 'content' attribute of the record with syntax highlighting. Otherwise, it falls back to the standard behavior of RichHandler.\n\n        Args:\n            record: The logging record to emit.\n\n        Example:\n            # Assuming `logger` is a logger instance\n            >>> logger.info(\"Regular log message\")\n            # Outputs a regular log message.\n\n            >>> logger.info(\"Highlighted log message\", extra={\"syntax_highlight\": True, \"content\": \"print('Hello, world!')\"})\n            # Outputs the message with syntax highlighting.\n        \"\"\"\n\n    try:\n        if hasattr(record, \"syntax_highlight\") and getattr(\n            record, \"syntax_highlight\"\n        ):\n            content: str = getattr(record, \"content\", \"\")\n            if isinstance(content, str):\n                syntax = Syntax(\n                    content, \"python\", theme=\"material\", line_numbers=True\n                )\n                self.console.print(syntax)\n            return\n\n    except Exception as e:\n        self.handleError(record)\n\n    super().emit(record)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": null,
    "children_ids": []
}