{
    "function_name": "_gather_standalone_block_dependency_for_standalone_block",
    "docstring": "Determines if a given standalone block is a dependency for another standalone block.\n\nThis function checks if any of the variable assignments in the provided standalone block\nare present in the given code content of another standalone block.\n\nArgs:\n    builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\n    code_content (str): The code content of another standalone block to analyze.\n\nReturns:\n    str | None: The ID of the standalone block builder if a dependency is found, otherwise None.",
    "decorators": null,
    "parameters": null,
    "returns": "DependencyModel | None",
    "is_method": false,
    "is_async": false,
    "id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_gather_standalone_block_dependency_for_standalone_block",
    "file_path": "postcode/python_parser/visitors/node_processing/gather_dependencies.py",
    "parent_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 115,
    "end_line_num": 143,
    "code_content": "\n\ndef _gather_standalone_block_dependency_for_standalone_block(\n    builder: StandaloneBlockModelBuilder,\n    code_content: str,\n    dependency_creator: Callable[[str], DependencyModel],\n) -> DependencyModel | None:\n    \"\"\"\n    Determines if a given standalone block is a dependency for another standalone block.\n\n    This function checks if any of the variable assignments in the provided standalone block\n    are present in the given code content of another standalone block.\n\n    Args:\n        builder (StandaloneBlockModelBuilder): The standalone block builder to check for dependencies.\n        code_content (str): The code content of another standalone block to analyze.\n\n    Returns:\n        str | None: The ID of the standalone block builder if a dependency is found, otherwise None.\n    \"\"\"\n\n    variables: list[\n        str\n    ] | None = builder.standalone_block_attributes.variable_assignments\n    if variables:\n        for variable in variables:\n            if variable in code_content:\n                return dependency_creator(builder.id)\n",
    "important_comments": null,
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "re",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Callable",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Sequence",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "StandaloneBlockModelBuilder",
                    "as_name": null,
                    "local_block_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE__*__CLASS-StandaloneBlockModelBuilder"
                }
            ],
            "imported_from": "postcode.python_parser.model_builders.standalone_block_model_builder",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ImportModel"
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                }
            ],
            "imported_from": "postcode.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:models:models.py__*__MODULE"
        }
    ],
    "summary": "\nSummary:\n\n        postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_gather_standalone_block_dependency_for_standalone_block\n\n        None, \nImported code block (postcode:python_parser:model_builders:standalone_block_model_builder.py__*__MODULE) code content:\n\n\nclass StandaloneBlockModelBuilder(BaseModelBuilder):\n    \"\"\"\n    A builder class for constructing a model of a standalone code block.\n\n    This class extends BaseModelBuilder and specializes in building models of standalone code blocks, which are blocks of code not part of any class or function definitions. It captures details such as variable assignments within the block.\n\n    Attributes:\n        - standalone_block_attributes (StandaloneCodeBlockSpecificAttributes): An instance containing attributes specific to a standalone code block, such as variable assignments.\n\n    Args:\n        - id (str): The unique identifier for the standalone code block model.\n        - parent_id (str): The identifier of the parent model (e.g., module or class containing this standalone block).\n\n    Example:\n        ```Python\n        standalone_block_builder = StandaloneBlockModelBuilder(id='block1', parent_id='module1')\n        standalone_block_builder.set_variable_assignments(['x = 1', 'y = 2'])\n        # Configures the builder with variable assignments for the standalone code block.\n        ```\n    \"\"\"\n\n    def __init__(self, id: str, parent_id: str, file_path: str) -> None:\n        super().__init__(\n            id=id,\n            block_type=BlockType.STANDALONE_CODE_BLOCK,\n            parent_id=parent_id,\n            file_path=file_path,\n        )\n\n        self.standalone_block_attributes = StandaloneCodeBlockSpecificAttributes(\n            variable_assignments=None,\n        )\n\n    def set_variable_assignments(\n        self, variable_declarations: list[str]\n    ) -> \"StandaloneBlockModelBuilder\":\n        \"\"\"Sets the list of variable declarations to the standalone code block model.\"\"\"\n        self.standalone_block_attributes.variable_assignments = variable_declarations\n        return self\n\n    def _get_standalone_block_specific_attributes(self) -> dict[str, Any]:\n        \"\"\"Gets the standalone block specific attributes.\"\"\"\n        return self.standalone_block_attributes.model_dump()\n\n    @logging_decorator(message=\"Building standalone code block model\")\n    def build(self) -> StandaloneCodeBlockModel:\n        \"\"\"Creates a StandaloneCodeBlockModel instance after building and setting the children models.\"\"\"\n        return StandaloneCodeBlockModel(\n            **self._get_common_attributes(),\n            **self._get_standalone_block_specific_attributes(),\n        )\n\n\nImported code block (postcode:models:models.py__*__MODULE) code content:\n\n\nclass ImportModel(BaseModel):\n    \"\"\"Class representing an import statement.\"\"\"\n\n    import_names: list[ImportNameModel]\n    imported_from: str | None = None\n    import_module_type: ImportModuleType = ImportModuleType.STANDARD_LIBRARY\n    local_module_id: str | None = None\n\n    def convert_import_to_metadata(self) -> str:\n        \"\"\"Converts the import to a metadata string.\"\"\"\n        return self.model_dump_json()\n\n, \nimport re\nfrom typing import Callable, Sequence\n        ",
    "children_ids": []
}