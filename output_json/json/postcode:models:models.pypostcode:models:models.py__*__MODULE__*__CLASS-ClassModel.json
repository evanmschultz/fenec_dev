{
    "class_name": "ClassModel",
    "decorators": null,
    "bases": [
        "BaseCodeBlockModel",
        "ClassSpecificAttributes"
    ],
    "docstring": "Model for a class.\n\nAttributes:\n    - id (str): The unique identifier for the class.\n    - file_path (str): The path to the Python file that the class represents.\n    - parent_id (str | None): The identifier of the parent (usually a module).\n    - block_type (BlockType): The type of code block that the class represents.\n    - start_line_num (int): The line number of the first line of the class.\n    - end_line_num (int): The line number of the last line of the class.\n    - code_content (str): The string content of the class.\n    - important_comments (list[CommentModel] | None): A list of important comments in the class.\n    - dependencies (list[ImportModel | DependencyModel] | None): A list of dependencies for the class.\n    - summary (str | None): A summary of the class.\n    - children_ids (list[str] | None): A list of the identifiers of the children of the class.\n    - class_name (str): The name of the class.\n    - decorators (list[DecoratorModel] | None): A list of decorators for the class.\n    - bases (list[str] | None): A list of base classes for the class.\n    - docstring (str | None): The docstring of the class.\n    - keywords (list[ClassKeywordModel] | None): A list of keywords for the class.\n\n\nMethods:\n    - `convert_to_metadata() -> dict[str, str | int]`:\n        Converts the class model to a metadata dictionary for ChromaDB.",
    "keywords": null,
    "id": "postcode:models:models.py__*__MODULE__*__CLASS-ClassModel",
    "file_path": "postcode/models/models.py",
    "parent_id": "postcode:models:models.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 295,
    "end_line_num": 331,
    "code_content": "\n\nclass ClassModel(BaseCodeBlockModel, ClassSpecificAttributes):\n    \"\"\"\n    Model for a class.\n\n    Attributes:\n        - id (str): The unique identifier for the class.\n        - file_path (str): The path to the Python file that the class represents.\n        - parent_id (str | None): The identifier of the parent (usually a module).\n        - block_type (BlockType): The type of code block that the class represents.\n        - start_line_num (int): The line number of the first line of the class.\n        - end_line_num (int): The line number of the last line of the class.\n        - code_content (str): The string content of the class.\n        - important_comments (list[CommentModel] | None): A list of important comments in the class.\n        - dependencies (list[ImportModel | DependencyModel] | None): A list of dependencies for the class.\n        - summary (str | None): A summary of the class.\n        - children_ids (list[str] | None): A list of the identifiers of the children of the class.\n        - class_name (str): The name of the class.\n        - decorators (list[DecoratorModel] | None): A list of decorators for the class.\n        - bases (list[str] | None): A list of base classes for the class.\n        - docstring (str | None): The docstring of the class.\n        - keywords (list[ClassKeywordModel] | None): A list of keywords for the class.\n\n\n    Methods:\n        - `convert_to_metadata() -> dict[str, str | int]`:\n            Converts the class model to a metadata dictionary for ChromaDB.\n    \"\"\"\n\n    def convert_to_metadata(self) -> dict[str, str | int]:\n        \"\"\"Converts the class model to a metadata dictionary for ChromaDB.\"\"\"\n        return {\n            **self._convert_base_attributes_to_metadata_dict(),\n            **self._convert_class_attributes_to_metadata_dict(),\n        }\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ImportModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DependencyModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-CommentModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DecoratorModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ClassKeywordModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-BaseCodeBlockModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes"
        },
        {
            "import_names": [
                {
                    "name": "BlockType",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ImportModuleType",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "CommentType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.models.enums",
            "import_module_type": "LOCAL",
            "local_module_id": null
        }
    ],
    "summary": "\n\nThe `ClassModel` class, inheriting from `BaseCodeBlockModel` and `ClassSpecificAttributes`, encapsulates the representation of a class in a Python codebase, with attributes to store metadata such as unique identifiers, file paths, parent module identifiers, block types, line numbers, and content details including comments, dependencies, and summaries. It also holds information specific to the class like its name, decorators, base classes, docstring, and keywords. The class features a method `convert_to_metadata` which aggregates and converts the class's base and specific attributes into a metadata dictionary suitable for use with ChromaDB, ensuring that both inherited and class-specific details are included in the output.",
    "children_ids": [
        "postcode:models:models.py__*__MODULE__*__CLASS-ClassModel__*__FUNCTION-convert_to_metadata"
    ]
}