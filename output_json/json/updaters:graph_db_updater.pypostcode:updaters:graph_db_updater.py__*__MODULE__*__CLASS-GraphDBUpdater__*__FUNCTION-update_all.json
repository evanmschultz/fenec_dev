{
    "function_name": "update_all",
    "docstring": "Updates all the models for a project using the graph database.\n\nNote:\n    This method will delete all the existing collections in the graph database, summarize every code block in the project,\n    and save the new models in the graph database and as JSON. Use with caution as it is expensive with respect to time, resources,\n    and money.\n\nArgs:\n    - directory (str): The directory of the project to update.\n    - output_directory (str): The directory to save the JSON files.\n\nReturns:\n    - chroma_collection_manager (ChromaDBCollectionManager): The ChromaDB collection manager.\n\nRaises:\n    - Exception: If no finalized models are returned from summarization.\n\nExample:\n    ```Python\n    graph_updater = GraphDBUpdater(directory, output_directory)\n\n    # Update all the models for the project and setup Chroma.\n    chroma_manager = graph_updater.update_all()\n    ```",
    "decorators": null,
    "parameters": null,
    "returns": "ChromaCollectionManager",
    "is_method": true,
    "is_async": false,
    "id": "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater__*__FUNCTION-update_all",
    "file_path": "postcode/updaters/graph_db_updater.py",
    "parent_id": "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater",
    "block_type": "FUNCTION",
    "start_line_num": 67,
    "end_line_num": 122,
    "code_content": "\ndef update_all(self) -> ChromaCollectionManager:\n    \"\"\"\n        Updates all the models for a project using the graph database.\n\n        Note:\n            This method will delete all the existing collections in the graph database, summarize every code block in the project,\n            and save the new models in the graph database and as JSON. Use with caution as it is expensive with respect to time, resources,\n            and money.\n\n        Args:\n            - directory (str): The directory of the project to update.\n            - output_directory (str): The directory to save the JSON files.\n\n        Returns:\n            - chroma_collection_manager (ChromaDBCollectionManager): The ChromaDB collection manager.\n\n        Raises:\n            - Exception: If no finalized models are returned from summarization.\n\n        Example:\n            ```Python\n            graph_updater = GraphDBUpdater(directory, output_directory)\n\n            # Update all the models for the project and setup Chroma.\n            chroma_manager = graph_updater.update_all()\n            ```\n        \"\"\"\n\n    self.graph_connector.delete_all_collections()\n    self.graph_connector.ensure_collections()\n\n    process_files_return: VisitorManagerProcessFilesReturn = (\n        self._visit_and_parse_files(self.directory)\n    )\n    models_tuple: tuple[ModelType, ...] = process_files_return.models_tuple\n\n    self._upsert_models_to_graph_db(models_tuple)\n\n    finalized_models: list[ModelType] | None = self._map_and_summarize_models(\n        models_tuple\n    )\n\n    if not finalized_models:\n        raise Exception(\"No finalized models returned from summarization.\")\n\n    json_manager = JSONHandler(\n        self.directory,\n        process_files_return.directory_modules,\n        self.output_directory,\n    )\n    self._save_json(finalized_models, json_manager)\n    self._upsert_models_to_graph_db(tuple(finalized_models))\n\n    return chroma_setup.setup_chroma(finalized_models)\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater__*__FUNCTION-update_all\n\n        None, None, None\n        ",
    "children_ids": []
}