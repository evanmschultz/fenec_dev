{
    "function_name": "update_all",
    "docstring": null,
    "decorators": null,
    "parameters": null,
    "returns": "ChromaSetupReturnContext",
    "is_method": true,
    "is_async": false,
    "id": "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater__*__FUNCTION-update_all",
    "file_path": "postcode/updaters/graph_db_updater.py",
    "parent_id": "postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater",
    "block_type": "FUNCTION",
    "start_line_num": 57,
    "end_line_num": 123,
    "code_content": "\ndef update_all(\n    self,\n    directory: str,\n    output_directory: str,\n    logger: Logger,\n) -> ChromaSetupReturnContext:\n    process_files_return: VisitorManagerProcessFilesReturn = (\n        self._visit_and_parse_files(directory, output_directory, logger)\n    )\n    models_tuple: tuple[ModelType, ...] = process_files_return.models_tuple\n    module_ids: list[str] = [\n        model.id for model in models_tuple if isinstance(model, ModuleModel)\n    ]\n\n    self.graph_manager.upsert_models(\n        list(models_tuple)\n    ).process_imports_and_dependencies().get_or_create_graph()\n    summarization_mapper = SummarizationMapper(\n        module_ids, models_tuple, self.graph_manager\n    )\n    client = OpenAI(max_retries=4)\n    summarizer = OpenAISummarizer(client=client)\n    summarization_manager = GraphDBSummarizationManager(\n        models_tuple, summarization_mapper, summarizer, self.graph_manager\n    )\n    finalized_models: list[\n        ModelType\n    ] | None = summarization_manager.create_summaries_and_return_updated_models()\n    logger.info(\"Summarization complete\")\n\n    logger.info(\"Saving models as JSON\")\n\n    json_manager = JSONHandler(\n        directory, process_files_return.directory_modules, output_directory\n    )\n\n    if not finalized_models:\n        raise Exception(\"No finalized models returned from summarization.\")\n\n    for model in finalized_models:\n        if isinstance(model, DirectoryModel):\n            output_path: str = model.id\n\n        else:\n            output_path: str = model.file_path + model.id\n        json_manager.save_model_as_json(model, output_path)\n\n    json_manager.save_visited_directories()\n    logger.info(\"JSON save complete\")\n\n    logger.info(\"Directory parsing completed.\")\n\n    if finalized_models:\n        self.graph_manager.upsert_models(\n            list(finalized_models)\n        ).process_imports_and_dependencies().get_or_create_graph()\n\n    if finalized_models:\n        chroma_context: ChromaSetupReturnContext = setup_chroma(\n            finalized_models, logger\n        )\n    else:\n        raise Exception(\"No finalized models returned from summarization.\")\n\n    return chroma_context\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:updaters:graph_db_updater.py__*__MODULE__*__CLASS-GraphDBUpdater__*__FUNCTION-update_all\n\n        None, None, None\n        ",
    "children_ids": []
}