{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "main",
                    "as_name": null,
                    "local_block_id": "postcode:app.py__*__MODULE__*__FUNCTION-main"
                }
            ],
            "imported_from": "postcode.app",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:app.py__*__MODULE"
        }
    ],
    "id": "postcode:__init__.py__*__MODULE",
    "file_path": "postcode/__init__.py",
    "parent_id": "",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 2,
    "code_content": "from postcode.app import main\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:__init__.py__*__MODULE\n\n        None, \nImported code block (postcode:app.py__*__MODULE) code content:\n\n\ndef main(\n    directory: str = \".\",\n    output_directory: str = \"output_json\",\n) -> None:\n    setup_logging()\n    logger: Logger = logging.getLogger(__name__)\n\n    #   ==================== GraphDB ====================\n    graph_db_updater = GraphDBUpdater(directory, output_directory, logger)\n    chroma_context: ChromaSetupReturnContext = graph_db_updater.update_all(\n        directory, output_directory, logger\n    )\n    # ==================== End GraphDB ====================\n\n    #   ==================== Standard ====================\n    # chroma_context: ChromaSetupReturnContext = StandardUpdater.update_all(\n    #     directory, output_directory, logger\n    # )\n    # StandardUpdater.update_all(directory, output_directory, logger)\n    # ==================== End Standard ====================\n\n    query: str = \"summarizes code block\"\n    query_chroma(\n        query,\n        chroma_context.chroma_collection_manager,\n        chroma_context.chroma_collection,\n        logger,\n    )\n\n, \n        ",
    "children_ids": []
}