{
    "docstring": null,
    "header": [
        "# from typing import Union",
        "# from chromadb import EphemeralClient, PersistentClient, HttpClient",
        "# # import postcode.types.chroma as chroma_types",
        "# from chromadb.config import DEFAULT_DATABASE, DEFAULT_TENANT, Settings",
        "# from chromadb.api import ClientAPI",
        "# from chromadb.api.types import (",
        "#     DataLoader,",
        "#     CollectionMetadata,",
        "#     GetResult,",
        "#     QueryResult,",
        "#     Where,",
        "#     WhereDocument,",
        "#     Include,",
        "#     URIs,",
        "#     Loadable,",
        "#     Metadata,",
        "#     Embedding,",
        "# )",
        "# from chromadb import Collection",
        "# from chromadb import EmbeddingFunction",
        "# class ChromaDBClientBuilder:",
        "#     \"\"\"",
        "#     This class is used to create a ChromaDB client. It provides three methods for creating a ChromaDB client:",
        "#     Methods:",
        "#         - `create_ephemeral_client`: Creates an ephemeral client. This means the client will be in memory and will not",
        "#             persist to disk. This is useful for testing and development.",
        "#         - `create_persistent_client`: Creates a persistent client. This means the client will persist to disk, but will still",
        "#             run in memory. This is useful for testing and development.",
        "#         - `create_http_client`: Creates an HTTP client. This means the client will connect to a remote ChromaDB instance. The",
        "#             default host is localhost and the default port is 8087 for local development, and is the only method suggested for",
        "#             production in the ChromaDB documentation.",
        "#     Notes:",
        "#         - Import defined in postcode.databases.chroma `__init__.py` so import from postcode.databases.chroma:",
        "#             `from postcode.databases.chroma import ChromaDBClientBuilder`",
        "#     Examples:",
        "#         ```Python",
        "#         from postcode.databases.chroma import ChromaDBClientBuilder",
        "#         import postcode.types.chromadb.types as chroma_types",
        "#         client: chroma_types.ClientAPI = ChromaDBClientBuilder.create_persistent_client()",
        "#         ```",
        "#     \"\"\"",
        "#     @staticmethod",
        "#     def create_ephemeral_client(",
        "#         settings: Settings | None = None,",
        "#         tenant: str = DEFAULT_TENANT,",
        "#         database: str = DEFAULT_DATABASE,",
        "#     ) -> ClientAPI:",
        "#         \"\"\"",
        "#         Creates an in-memory instance of Chroma. This is useful for testing and development, but not recommended for production use according to",
        "#         the ChromaDB documentation.",
        "#         Args:",
        "#             - settings (chroma_types.Settings): The settings to use for the ephemeral client.",
        "#             - tenant (str): The tenant to use for the ephemeral client.",
        "#             - database (str): The database to use for the ephemeral client.",
        "#         \"\"\"",
        "#         return EphemeralClient(",
        "#             settings=settings if settings else Settings(),",
        "#             tenant=tenant,",
        "#             database=database,",
        "#         )",
        "#     @staticmethod",
        "#     def create_persistent_client(",
        "#         path: str = \"./chroma\",",
        "#         settings: Settings | None = None,",
        "#         tenant: str = DEFAULT_TENANT,",
        "#         database: str = DEFAULT_DATABASE,",
        "#     ) -> ClientAPI:",
        "#         \"\"\"",
        "#         Creates a persistent instance of Chroma that saves to disk. This is useful for testing and development, but not recommended for production use",
        "#         according to the ChromaDB documentation.",
        "#         Args:",
        "#             - path (str): The path to the ChromaDB directory.",
        "#             - settings (chroma.Settings): The settings to use for the persistent client.",
        "#             - tenant (str): The tenant to use for the persistent client.",
        "#             - database (str): The database to use for the persistent client.",
        "#         \"\"\"",
        "#         return PersistentClient(",
        "#             path=path,",
        "#             settings=settings if settings else Settings(),",
        "#             tenant=tenant,",
        "#             database=database,",
        "#         )",
        "#     @staticmethod",
        "#     def create_http_client(",
        "#         host: str = \"localhost\",",
        "#         port: str = \"8087\",",
        "#         ssl: bool = False,",
        "#         headers: dict[str, str] = {},",
        "#         settings: Settings | None = None,",
        "#         tenant: str = DEFAULT_TENANT,",
        "#         database: str = DEFAULT_DATABASE,",
        "#     ) -> ClientAPI:",
        "#         \"\"\"",
        "#         Creates a client that connects to a remote Chroma server. This supports many clients connecting to the same server, and is the",
        "#         recommended way to use Chroma in production according to the ChromaDB Documentation.",
        "#         Args:",
        "#             - host (str): The host of the ChromaDB server.",
        "#             - port (str): The port of the ChromaDB server.",
        "#             - ssl (bool): Whether or not to use SSL.",
        "#             - headers (dict[str, str]): The headers to use for the HTTP client.",
        "#             - settings (chroma_types.Settings): The settings to use for the HTTP client.",
        "#             - tenant (str): The tenant to use for the HTTP client.",
        "#             - database (str): The database to use for the HTTP client.",
        "#         \"\"\"",
        "#         return HttpClient(",
        "#             host=host,",
        "#             port=port,",
        "#             ssl=ssl,",
        "#             headers=headers,",
        "#             settings=settings if settings else Settings(),",
        "#             tenant=tenant,",
        "#             database=database,",
        "#         )"
    ],
    "footer": [],
    "imports": null,
    "id": "postcode:databases:chroma:chromadb_builder.py__*__MODULE",
    "file_path": "postcode/databases/chroma/chromadb_builder.py",
    "parent_id": "postcode:databases:chroma__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 127,
    "code_content": "# from typing import Union\n# from chromadb import EphemeralClient, PersistentClient, HttpClient\n\n# # import postcode.types.chroma as chroma_types\n# from chromadb.config import DEFAULT_DATABASE, DEFAULT_TENANT, Settings\n# from chromadb.api import ClientAPI\n# from chromadb.api.types import (\n#     DataLoader,\n#     CollectionMetadata,\n#     GetResult,\n#     QueryResult,\n#     Where,\n#     WhereDocument,\n#     Include,\n#     URIs,\n#     Loadable,\n#     Metadata,\n#     Embedding,\n# )\n# from chromadb import Collection\n# from chromadb import EmbeddingFunction\n\n\n# class ChromaDBClientBuilder:\n#     \"\"\"\n#     This class is used to create a ChromaDB client. It provides three methods for creating a ChromaDB client:\n\n#     Methods:\n#         - `create_ephemeral_client`: Creates an ephemeral client. This means the client will be in memory and will not\n#             persist to disk. This is useful for testing and development.\n#         - `create_persistent_client`: Creates a persistent client. This means the client will persist to disk, but will still\n#             run in memory. This is useful for testing and development.\n#         - `create_http_client`: Creates an HTTP client. This means the client will connect to a remote ChromaDB instance. The\n#             default host is localhost and the default port is 8087 for local development, and is the only method suggested for\n#             production in the ChromaDB documentation.\n\n#     Notes:\n#         - Import defined in postcode.databases.chroma `__init__.py` so import from postcode.databases.chroma:\n#             `from postcode.databases.chroma import ChromaDBClientBuilder`\n\n#     Examples:\n#         ```Python\n#         from postcode.databases.chroma import ChromaDBClientBuilder\n#         import postcode.types.chromadb.types as chroma_types\n\n#         client: chroma_types.ClientAPI = ChromaDBClientBuilder.create_persistent_client()\n#         ```\n#     \"\"\"\n\n#     @staticmethod\n#     def create_ephemeral_client(\n#         settings: Settings | None = None,\n#         tenant: str = DEFAULT_TENANT,\n#         database: str = DEFAULT_DATABASE,\n#     ) -> ClientAPI:\n#         \"\"\"\n#         Creates an in-memory instance of Chroma. This is useful for testing and development, but not recommended for production use according to\n#         the ChromaDB documentation.\n\n#         Args:\n#             - settings (chroma_types.Settings): The settings to use for the ephemeral client.\n#             - tenant (str): The tenant to use for the ephemeral client.\n#             - database (str): The database to use for the ephemeral client.\n#         \"\"\"\n#         return EphemeralClient(\n#             settings=settings if settings else Settings(),\n#             tenant=tenant,\n#             database=database,\n#         )\n\n#     @staticmethod\n#     def create_persistent_client(\n#         path: str = \"./chroma\",\n#         settings: Settings | None = None,\n#         tenant: str = DEFAULT_TENANT,\n#         database: str = DEFAULT_DATABASE,\n#     ) -> ClientAPI:\n#         \"\"\"\n#         Creates a persistent instance of Chroma that saves to disk. This is useful for testing and development, but not recommended for production use\n#         according to the ChromaDB documentation.\n\n#         Args:\n#             - path (str): The path to the ChromaDB directory.\n#             - settings (chroma.Settings): The settings to use for the persistent client.\n#             - tenant (str): The tenant to use for the persistent client.\n#             - database (str): The database to use for the persistent client.\n#         \"\"\"\n#         return PersistentClient(\n#             path=path,\n#             settings=settings if settings else Settings(),\n#             tenant=tenant,\n#             database=database,\n#         )\n\n#     @staticmethod\n#     def create_http_client(\n#         host: str = \"localhost\",\n#         port: str = \"8087\",\n#         ssl: bool = False,\n#         headers: dict[str, str] = {},\n#         settings: Settings | None = None,\n#         tenant: str = DEFAULT_TENANT,\n#         database: str = DEFAULT_DATABASE,\n#     ) -> ClientAPI:\n#         \"\"\"\n#         Creates a client that connects to a remote Chroma server. This supports many clients connecting to the same server, and is the\n#         recommended way to use Chroma in production according to the ChromaDB Documentation.\n\n#         Args:\n#             - host (str): The host of the ChromaDB server.\n#             - port (str): The port of the ChromaDB server.\n#             - ssl (bool): Whether or not to use SSL.\n#             - headers (dict[str, str]): The headers to use for the HTTP client.\n#             - settings (chroma_types.Settings): The settings to use for the HTTP client.\n#             - tenant (str): The tenant to use for the HTTP client.\n#             - database (str): The database to use for the HTTP client.\n#         \"\"\"\n#         return HttpClient(\n#             host=host,\n#             port=port,\n#             ssl=ssl,\n#             headers=headers,\n#             settings=settings if settings else Settings(),\n#             tenant=tenant,\n#             database=database,\n#         )\n",
    "important_comments": [
        {
            "content": "#     QueryResult,",
            "comment_types": [
                "Q"
            ]
        },
        {
            "content": "#     Notes:",
            "comment_types": [
                "NOTE"
            ]
        }
    ],
    "dependencies": null,
    "summary": "\nThe `ChromaDBClientBuilder` class offers static methods to initialize three variants of ChromaDB clients: `EphemeralClient` for transient in-memory databases ideal for testing, `PersistentClient` for local databases with disk persistence suitable for development, and `HttpClient` for remote server connections via HTTP/HTTPS, which is the recommended approach for production environments. Each method allows for optional configuration through a `Settings` object and accepts parameters for tenant and database customization, with sensible defaults in place.",
    "children_ids": []
}