{
    "class_name": "StandaloneCodeBlockSpecificAttributes",
    "decorators": null,
    "bases": [
        "BaseModel"
    ],
    "docstring": "Standalone code block specific attributes.",
    "keywords": null,
    "id": "postcode:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockSpecificAttributes",
    "file_path": "postcode/models/models.py",
    "parent_id": "postcode:models:models.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 413,
    "end_line_num": 431,
    "code_content": "\n\nclass StandaloneCodeBlockSpecificAttributes(BaseModel):\n    \"\"\"Standalone code block specific attributes.\"\"\"\n\n    variable_assignments: list[str] | None = None\n\n    def _convert_variable_assignments_to_metadata(self) -> str:\n        \"\"\"Converts the variable assignments to a metadata string.\"\"\"\n        return self.model_dump_json() if self.variable_assignments else \"\"\n\n    def _convert_standalone_block_attributes_to_metadata_dict(\n        self,\n    ) -> dict[str, str | int]:\n        \"\"\"Converts the standalone code block attributes to a metadata dictionary for ChromaDB.\"\"\"\n        return {\n            \"variable_assignments\": self._convert_variable_assignments_to_metadata(),\n        }\n",
    "important_comments": null,
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "BaseModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Field",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "field_validator",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "pydantic",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "summary": "\nThe `StandaloneCodeBlockSpecificAttributes` class, extending `BaseModel`, encapsulates an optional `variable_assignments` list and provides two private methods. `_convert_variable_assignments_to_metadata` returns a JSON representation of the model if `variable_assignments` are present, otherwise an empty string. `_convert_standalone_block_attributes_to_metadata_dict` assembles a dictionary mapping 'variable_assignments' to their metadata string, formatted for ChromaDB usage.",
    "children_ids": [
        "postcode:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockSpecificAttributes__*__FUNCTION-_convert_variable_assignments_to_metadata",
        "postcode:models:models.py__*__MODULE__*__CLASS-StandaloneCodeBlockSpecificAttributes__*__FUNCTION-_convert_standalone_block_attributes_to_metadata_dict"
    ]
}