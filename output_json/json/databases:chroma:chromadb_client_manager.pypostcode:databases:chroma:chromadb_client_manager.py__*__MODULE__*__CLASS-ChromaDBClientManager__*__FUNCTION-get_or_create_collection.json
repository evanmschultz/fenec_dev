{
    "function_name": "get_or_create_collection",
    "docstring": "Gets or creates a ChromaDB collection with the given name.\n\nChecks if the collection exists and returns it if it does. Otherwise, creates the collection and returns it.\n\nArgs:\n    - name (str): The name of the collection to get or create.\n    - metadata (dict[str, Any]): The metadata for the collection.\n    - embedding_function (chroma_types.EmbeddingFunction): The embedding function for the collection.\n\nReturns:\n    - collection (chroma.Collection): The collection object with the given name. The collection object is a Pydantic Model\n        with the following attributes:\n            - name: str\n            - id: UUID\n            - metadata: CollectionMetadata | None\n            - tenant: str | None\n            - database: str | None\n\nNotes:\n    - This is done this way for logging purposes as opposed simply using chromadb's `get_or_create_collection` method\n        directly.\n\nExamples:\n    ```Python\n    from postcode.databases.chroma import ChromaDBClientBuilder, ChromaDBClientManager\n    import postcode.types.chromadb.types as chroma_types\n\n    from example_module_with_manager_defined import client_manager\n\n    # Create or get a collection using the client_manager instance\n    collection: chroma_types.Collection = client_manager.get_or_create_collection(\"my_collection\")\n    ```",
    "decorators": null,
    "parameters": null,
    "returns": "No return annotation",
    "is_method": true,
    "is_async": false,
    "id": "postcode:databases:chroma:chromadb_client_manager.py__*__MODULE__*__CLASS-ChromaDBClientManager__*__FUNCTION-get_or_create_collection",
    "file_path": "postcode/databases/chroma/chromadb_client_manager.py",
    "parent_id": "postcode:databases:chroma:chromadb_client_manager.py__*__MODULE__*__CLASS-ChromaDBClientManager",
    "block_type": "FUNCTION",
    "start_line_num": 62,
    "end_line_num": 111,
    "code_content": "\ndef get_or_create_collection(\n    self,\n    name: str,\n    metadata: dict[str, Any] | None = None,\n    embedding_function: chroma_types.EmbeddingFunction[list[str]]\n    | None = chroma_types.ef.DefaultEmbeddingFunction(),\n) -> chroma_types.Collection:\n    \"\"\"\n        Gets or creates a ChromaDB collection with the given name.\n\n        Checks if the collection exists and returns it if it does. Otherwise, creates the collection and returns it.\n\n        Args:\n            - name (str): The name of the collection to get or create.\n            - metadata (dict[str, Any]): The metadata for the collection.\n            - embedding_function (chroma_types.EmbeddingFunction): The embedding function for the collection.\n\n        Returns:\n            - collection (chroma.Collection): The collection object with the given name. The collection object is a Pydantic Model\n                with the following attributes:\n                    - name: str\n                    - id: UUID\n                    - metadata: CollectionMetadata | None\n                    - tenant: str | None\n                    - database: str | None\n\n        Notes:\n            - This is done this way for logging purposes as opposed simply using chromadb's `get_or_create_collection` method\n                directly.\n\n        Examples:\n            ```Python\n            from postcode.databases.chroma import ChromaDBClientBuilder, ChromaDBClientManager\n            import postcode.types.chromadb.types as chroma_types\n\n            from example_module_with_manager_defined import client_manager\n\n            # Create or get a collection using the client_manager instance\n            collection: chroma_types.Collection = client_manager.get_or_create_collection(\"my_collection\")\n            ```\n        \"\"\"\n\n    logging.info(f\"Getting or creating collection: {name}\")\n    return self.client.get_or_create_collection(\n        name,\n        metadata=metadata,\n        embedding_function=embedding_function,  # type: ignore # FIXME: Fix type error in chroma as it Images are not yet supported, and we won't use them\n    )\n",
    "important_comments": [
        {
            "content": "# type: ignore # FIXME: Fix type error in chroma as it Images are not yet supported, and we won't use them",
            "comment_types": [
                "FIXME"
            ]
        }
    ],
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:databases:chroma:chromadb_client_manager.py__*__MODULE__*__CLASS-ChromaDBClientManager__*__FUNCTION-get_or_create_collection\n\n        None, None, None\n        ",
    "children_ids": []
}