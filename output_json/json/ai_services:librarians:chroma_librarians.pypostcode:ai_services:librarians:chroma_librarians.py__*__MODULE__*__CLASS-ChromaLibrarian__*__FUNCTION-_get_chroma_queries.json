{
    "function_name": "_get_chroma_queries",
    "docstring": null,
    "decorators": null,
    "parameters": null,
    "returns": "list[str] | None",
    "is_method": true,
    "is_async": false,
    "id": "postcode:ai_services:librarians:chroma_librarians.py__*__MODULE__*__CLASS-ChromaLibrarian__*__FUNCTION-_get_chroma_queries",
    "file_path": "postcode/ai_services/librarians/chroma_librarians.py",
    "parent_id": "postcode:ai_services:librarians:chroma_librarians.py__*__MODULE__*__CLASS-ChromaLibrarian",
    "block_type": "FUNCTION",
    "start_line_num": 77,
    "end_line_num": 123,
    "code_content": "\ndef _get_chroma_queries(\n    self, user_question: str, queries_count: int = 3, retries: int = 3\n) -> list[str] | None:\n    while retries > 0:\n        retries -= 1\n\n        prompt: str = ChromaLibrarianPromptCreator.create_prompt(\n            user_question,\n            prompt_template=DEFAULT_CHROMA_LIBRARIAN_PROMPT,\n            queries_count=queries_count,\n        )\n\n        try:\n            completion: openai_types.ChatCompletion = (\n                self.client.chat.completions.create(\n                    model=self.model,\n                    response_format={\"type\": \"json_object\"},\n                    messages=[\n                        {\n                            \"role\": \"system\",\n                            \"content\": DEFAULT_CHROMA_LIBRARIAN_SYSTEM_PROMPT,\n                        },\n                        {\"role\": \"user\", \"content\": prompt},\n                    ],\n                )\n            )\n            content: str | None = completion.choices[0].message.content\n            if not content:\n                continue\n\n            content_json = json.loads(content)\n            content_model = OpenAIResponseContent(\n                query_list=content_json[\"query_list\"]\n            )\n            print(content_model)\n\n            if content:\n                queries: list[str] = content_model.query_list\n                if queries and len(queries) == queries_count:\n                    return queries\n\n        except Exception as e:\n            logging.error(f\"An error occurred: {e}\")\n\n    return None\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:ai_services:librarians:chroma_librarians.py__*__MODULE__*__CLASS-ChromaLibrarian__*__FUNCTION-_get_chroma_queries\n\n        None, None, None\n        ",
    "children_ids": []
}