{
    "docstring": null,
    "header": [
        "# DO NOT USE THIS FILE. IT IS NOT FINISHED AND WILL NOT WORK.",
        "# from logging import Logger",
        "# from openai import OpenAI",
        "# from postcode.ai_services.summarizer.openai_summarizer import OpenAISummarizer",
        "# from postcode.ai_services.summarizer.standard_summarization_manager import (",
        "#     StandardSummarizationManager,",
        "# )",
        "# from postcode.databases.chroma.setup_chroma import (",
        "#     ChromaSetupReturnContext,",
        "#     setup_chroma,",
        "# )",
        "# from postcode.json_management.json_handler import JSONHandler",
        "# from postcode.models.models import (",
        "#     ClassModel,",
        "#     DirectoryModel,",
        "#     FunctionModel,",
        "#     ModuleModel,",
        "#     StandaloneCodeBlockModel,",
        "# )",
        "# from postcode.python_parser.visitor_manager.visitor_manager import (",
        "#     VisitorManager,",
        "#     VisitorManagerProcessFilesReturn,",
        "# )",
        "# from postcode.types.postcode import ModelType",
        "# class StandardUpdater:",
        "#     @staticmethod",
        "#     def update_all(",
        "#         directory: str, output_directory: str, logger: Logger",
        "#     ) -> ChromaSetupReturnContext:",
        "#         # ) -> None:",
        "#         visitor_manager = VisitorManager(directory, output_directory)",
        "#         process_files_return: VisitorManagerProcessFilesReturn = (",
        "#             visitor_manager.process_files()",
        "#         )",
        "#         models_tuple: tuple[ModelType, ...] = process_files_return.models_tuple",
        "#         client = OpenAI(max_retries=4)",
        "#         summarizer = OpenAISummarizer(client=client)",
        "#         summarization_manager = StandardSummarizationManager(models_tuple, summarizer)",
        "#         finalized_models: tuple[",
        "#             ModuleModel, ...",
        "#         ] = summarization_manager.create_summarizes_and_return_updated_models()",
        "#         logger.info(\"Summarization complete\")",
        "#         logger.info(\"Saving models as JSON\")",
        "#         directory_modules: dict[str, list[str]] = process_files_return.directory_modules",
        "#         json_manager = JSONHandler(directory, directory_modules, output_directory)",
        "#         for model in models_tuple:",
        "#             if isinstance(model, DirectoryModel):",
        "#                 output_path: str = model.id",
        "#             else:",
        "#                 output_path: str = model.file_path + model.id",
        "#             json_manager.save_model_as_json(model, output_path)",
        "#         json_manager.save_visited_directories()",
        "#         logger.info(\"JSON save complete\")",
        "#         logger.info(\"Directory parsing completed.\")",
        "#         chroma_context: ChromaSetupReturnContext = setup_chroma(",
        "#             finalized_models, logger",
        "#         )",
        "#         return chroma_context"
    ],
    "footer": [],
    "imports": null,
    "id": "postcode:updaters:standard_updater.py__*__MODULE",
    "file_path": "postcode/updaters/standard_updater.py",
    "parent_id": "postcode:updaters__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 75,
    "code_content": "# DO NOT USE THIS FILE. IT IS NOT FINISHED AND WILL NOT WORK.\n\n\n# from logging import Logger\n\n# from openai import OpenAI\n# from postcode.ai_services.summarizer.openai_summarizer import OpenAISummarizer\n# from postcode.ai_services.summarizer.standard_summarization_manager import (\n#     StandardSummarizationManager,\n# )\n\n# from postcode.databases.chroma.setup_chroma import (\n#     ChromaSetupReturnContext,\n#     setup_chroma,\n# )\n# from postcode.json_management.json_handler import JSONHandler\n\n# from postcode.models.models import (\n#     ClassModel,\n#     DirectoryModel,\n#     FunctionModel,\n#     ModuleModel,\n#     StandaloneCodeBlockModel,\n# )\n# from postcode.python_parser.visitor_manager.visitor_manager import (\n#     VisitorManager,\n#     VisitorManagerProcessFilesReturn,\n# )\n# from postcode.types.postcode import ModelType\n\n\n# class StandardUpdater:\n#     @staticmethod\n#     def update_all(\n#         directory: str, output_directory: str, logger: Logger\n#     ) -> ChromaSetupReturnContext:\n#         # ) -> None:\n#         visitor_manager = VisitorManager(directory, output_directory)\n#         process_files_return: VisitorManagerProcessFilesReturn = (\n#             visitor_manager.process_files()\n#         )\n\n#         models_tuple: tuple[ModelType, ...] = process_files_return.models_tuple\n#         client = OpenAI(max_retries=4)\n#         summarizer = OpenAISummarizer(client=client)\n#         summarization_manager = StandardSummarizationManager(models_tuple, summarizer)\n#         finalized_models: tuple[\n#             ModuleModel, ...\n#         ] = summarization_manager.create_summarizes_and_return_updated_models()\n\n#         logger.info(\"Summarization complete\")\n\n#         logger.info(\"Saving models as JSON\")\n#         directory_modules: dict[str, list[str]] = process_files_return.directory_modules\n#         json_manager = JSONHandler(directory, directory_modules, output_directory)\n\n#         for model in models_tuple:\n#             if isinstance(model, DirectoryModel):\n#                 output_path: str = model.id\n\n#             else:\n#                 output_path: str = model.file_path + model.id\n#             json_manager.save_model_as_json(model, output_path)\n\n#         json_manager.save_visited_directories()\n#         logger.info(\"JSON save complete\")\n\n#         logger.info(\"Directory parsing completed.\")\n\n#         chroma_context: ChromaSetupReturnContext = setup_chroma(\n#             finalized_models, logger\n#         )\n\n#         return chroma_context\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nThe `StandardUpdater` class's `update_all` method automates the summarization of Python code in a specified directory. It processes files with `VisitorManager`, generates summaries using `OpenAISummarizer` within `StandardSummarizationManager`, logs the workflow, saves summaries as JSON with `JSONHandler`, and initializes a `ChromaSetupReturnContext` for subsequent processing.",
    "children_ids": []
}