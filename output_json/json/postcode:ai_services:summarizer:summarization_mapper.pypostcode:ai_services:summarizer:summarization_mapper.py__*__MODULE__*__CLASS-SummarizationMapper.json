{
    "class_name": "SummarizationMapper",
    "decorators": null,
    "bases": null,
    "docstring": "A class for generating a summarization map based on specified module IDs and associated models.\n\nThis class facilitates the creation of a summarization map by traversing inbound and outbound relationships\nin a graph structure. It utilizes an ArangoDBManager instance for querying relationships between models.\n\nArgs:\n    - module_ids_to_update (list[str]): The list of module IDs to consider during summarization map creation.\n    - all_models (tuple[ModelType, ...]): Tuple of all models available for summarization.\n    - arangodb_manager (ArangoDBManager): The ArangoDBManager instance for handling database interactions.\n\nMethods:\n    - create_summarization_map(): Creates a summarization map for the specified module IDs.\n\nExample:\n    ```python\n    # Instantiate SummarizationMapper\n    summarization_mapper = SummarizationMapper(\n        module_ids_to_update=[\"module_1\", \"module_2\"],\n        all_models=(ModuleModel(id=\"module_1\"), FunctionModel(id=\"function_1\")),\n        arangodb_manager=my_arangodb_manager_instance\n    )\n\n    # Create a summarization map\n    summarization_map = summarization_mapper.create_summarization_map()\n    ```",
    "keywords": null,
    "id": "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE__*__CLASS-SummarizationMapper",
    "file_path": "postcode/ai_services/summarizer/summarization_mapper.py",
    "parent_id": "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 5,
    "end_line_num": 140,
    "code_content": "\n\nclass SummarizationMapper:\n    \"\"\"\n    A class for generating a summarization map based on specified module IDs and associated models.\n\n    This class facilitates the creation of a summarization map by traversing inbound and outbound relationships\n    in a graph structure. It utilizes an ArangoDBManager instance for querying relationships between models.\n\n    Args:\n        - module_ids_to_update (list[str]): The list of module IDs to consider during summarization map creation.\n        - all_models (tuple[ModelType, ...]): Tuple of all models available for summarization.\n        - arangodb_manager (ArangoDBManager): The ArangoDBManager instance for handling database interactions.\n\n    Methods:\n        - create_summarization_map(): Creates a summarization map for the specified module IDs.\n\n    Example:\n        ```python\n        # Instantiate SummarizationMapper\n        summarization_mapper = SummarizationMapper(\n            module_ids_to_update=[\"module_1\", \"module_2\"],\n            all_models=(ModuleModel(id=\"module_1\"), FunctionModel(id=\"function_1\")),\n            arangodb_manager=my_arangodb_manager_instance\n        )\n\n        # Create a summarization map\n        summarization_map = summarization_mapper.create_summarization_map()\n        ```\n    \"\"\"\n\n    def __init__(\n        self,\n        module_ids_to_update: list[str],\n        all_models: tuple[ModelType, ...],\n        arangodb_manager: ArangoDBManager,\n    ) -> None:\n        self.module_ids_to_update: list[str] = module_ids_to_update\n        self.all_models: tuple[ModelType, ...] = all_models\n        self.arangodb_manager: ArangoDBManager = arangodb_manager\n\n        self.models_to_update: list[ModelType] = self._get_models_to_update()\n        self.model_visited_in_db: set[str] = set()\n        self.summarization_map: list[ModelType] = []\n        self.temp_map: list[ModelType] = []\n\n    def _get_models_to_update(self) -> list[ModelType]:\n        \"\"\"\n        Returns all models that need to be updated.\n\n        Returns:\n            - list[ModelType]: List of models to be updated.\n        \"\"\"\n\n        models_to_update: list[ModelType] = []\n        for model in self.all_models:\n            for module_id in self.module_ids_to_update:\n                if module_id in model.id:\n                    models_to_update.append(model)\n                    break\n\n        return models_to_update\n\n    def _set_inbound_models_in_summarization_map(self, model_id: str) -> None:\n        \"\"\"\n        Sets inbound models in the summarization map recursively.\n\n        Args:\n            - model_id (str): The ID of the model.\n        \"\"\"\n\n        if model_id in self.model_visited_in_db:\n            return\n        self.model_visited_in_db.add(model_id)\n        if inbound_models := self.arangodb_manager.get_inbound_models(model_id):\n            for model in inbound_models:\n                self.model_visited_in_db.add(model_id)\n                self._set_inbound_models_in_summarization_map(model.id)\n\n                self.temp_map.append(model)\n\n    def _set_outbound_models_in_summarization_map(self, model_id: str) -> None:\n        \"\"\"\n        Sets outbound models in the summarization map recursively.\n\n        Args:\n            - model_id (str): The ID of the model.\n        \"\"\"\n\n        if model_id in self.model_visited_in_db:\n            return\n\n        if outbound_models := self.arangodb_manager.get_outbound_models(model_id):\n            for model in outbound_models[::-1]:\n                self.model_visited_in_db.add(model_id)\n\n                if model.id in self.models_to_update:\n                    model.summary = None\n                self.temp_map.append(model)\n\n    def create_summarization_map(self) -> list[ModelType]:\n        \"\"\"\n        Creates a summarization map for the specified module IDs.\n\n        Returns:\n            - list[ModelType]: The summarization map.\n        \"\"\"\n\n        self._get_models_to_update()\n        logging.info(\"Set models to update\")\n\n        for model in self.models_to_update:\n            logging.debug(f\"Setting inbound models in summarization map: {model.id}\")\n            self._set_inbound_models_in_summarization_map(model.id)\n            self.temp_map.append(model)\n\n            self.model_visited_in_db.remove(model.id)\n            self.summarization_map.extend(self.temp_map)\n            self.temp_map = []\n\n        for model in self.models_to_update:\n            logging.debug(f\"Setting outbound models in summarization map: {model.id}\")\n            self._set_outbound_models_in_summarization_map(model.id)\n            self.summarization_map.extend(self.temp_map)\n            self.temp_map = []\n\n        logging.info(\"Created summarization map\")\n        summary_ids: set[str] = set()\n        summary_map: list[ModelType] = []\n        for model in self.summarization_map[::-1]:\n            if model.id not in summary_ids:\n                summary_map.append(model)\n                summary_ids.add(model.id)\n\n        return summary_map[::-1]\n",
    "important_comments": null,
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ArangoDBManager",
                    "as_name": null,
                    "local_block_id": "postcode:databases:arangodb:arangodb_manager.py__*__MODULE__*__CLASS-ArangoDBManager"
                }
            ],
            "imported_from": "postcode.databases.arangodb.arangodb_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:arangodb:arangodb_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModelType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.types.postcode",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:types:postcode.py__*__MODULE"
        }
    ],
    "summary": "\n\nThe `SummarizationMapper` class in the provided Python code is designed to generate a summarization map for a set of module IDs, considering their relationships within a graph structure. It relies on an `ArangoDBManager` instance to query the database for inbound and outbound relationships of models. The class is initialized with a list of module IDs to update, a tuple of all available models, and the database manager. The `create_summarization_map` method is the core function that orchestrates the creation of the map by first identifying models to update using `_get_models_to_update`, then recursively setting inbound and outbound models in the map through `_set_inbound_models_in_summarization_map` and `_set_outbound_models_in_summarization_map`. The summarization map is constructed by appending models to a temporary list and then extending the main summarization map, ensuring no duplicates are added. This map is intended to guide the summarization process by determining the sequence in which models are summarized based on their dependencies.",
    "children_ids": [
        "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE__*__CLASS-SummarizationMapper__*__FUNCTION-__init__",
        "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE__*__CLASS-SummarizationMapper__*__FUNCTION-_get_models_to_update",
        "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE__*__CLASS-SummarizationMapper__*__FUNCTION-_set_inbound_models_in_summarization_map",
        "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE__*__CLASS-SummarizationMapper__*__FUNCTION-_set_outbound_models_in_summarization_map",
        "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE__*__CLASS-SummarizationMapper__*__FUNCTION-create_summarization_map"
    ]
}