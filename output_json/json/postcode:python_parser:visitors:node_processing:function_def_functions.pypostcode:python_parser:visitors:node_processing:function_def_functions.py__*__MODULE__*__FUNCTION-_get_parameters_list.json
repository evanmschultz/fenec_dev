{
    "function_name": "_get_parameters_list",
    "docstring": "Returns a list of ParameterModel representing the parameters in a function definition.\n\nArgs:\n    - parameter_sequence (Sequence[libcst.Param]): The sequence of parameters from the function definition.\n\nReturns:\n    - list[ParameterModel] | None: A list of ParameterModel instances or None if there are no parameters.",
    "decorators": null,
    "parameters": null,
    "returns": "list[ParameterModel] | None",
    "is_method": false,
    "is_async": false,
    "id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE__*__FUNCTION-_get_parameters_list",
    "file_path": "postcode/python_parser/visitors/node_processing/function_def_functions.py",
    "parent_id": "postcode:python_parser:visitors:node_processing:function_def_functions.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 154,
    "end_line_num": 180,
    "code_content": "\n\ndef _get_parameters_list(\n    parameter_sequence: Sequence[libcst.Param],\n) -> list[ParameterModel] | None:\n    \"\"\"\n    Returns a list of ParameterModel representing the parameters in a function definition.\n\n    Args:\n        - parameter_sequence (Sequence[libcst.Param]): The sequence of parameters from the function definition.\n\n    Returns:\n        - list[ParameterModel] | None: A list of ParameterModel instances or None if there are no parameters.\n    \"\"\"\n\n    params: list[ParameterModel] | None = None\n\n    if parameter_sequence:\n        params = []\n        for parameter in parameter_sequence:\n            param: ParameterModel = ParameterModel(\n                content=common_functions.extract_stripped_code_content(parameter)\n            )\n            params.append(param)\n\n    return params if params else None\n",
    "important_comments": null,
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "DecoratorModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ParameterListModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "ParameterModel",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "Sequence",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "typing",
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "libcst",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "postcode.python_parser.visitors.node_processing.common_functions",
                    "as_name": "common_functions",
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:python_parser:visitors:node_processing:common_functions.py__*__MODULE"
        }
    ],
    "summary": "\nThe `_get_parameters_list` function in the code uses type annotations to convert a non-empty sequence of `libcst.Param` objects into a list of `ParameterModel` instances by extracting parameter content with `common_functions.extract_stripped_code_content`, or returns `None` if the sequence is empty.",
    "children_ids": []
}