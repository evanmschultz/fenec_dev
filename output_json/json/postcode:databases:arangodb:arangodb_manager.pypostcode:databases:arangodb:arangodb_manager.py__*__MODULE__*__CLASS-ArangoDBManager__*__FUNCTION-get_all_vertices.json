{
    "function_name": "get_all_vertices",
    "docstring": "Retrieves all vertices from the graph.\n\nReturns:\n    list[ModelType] | None: List of vertices or None if an error occurs.",
    "decorators": null,
    "parameters": null,
    "returns": "list[ModelType] | None",
    "is_method": true,
    "is_async": false,
    "id": "postcode:databases:arangodb:arangodb_manager.py__*__MODULE__*__CLASS-ArangoDBManager__*__FUNCTION-get_all_vertices",
    "file_path": "postcode/databases/arangodb/arangodb_manager.py",
    "parent_id": "postcode:databases:arangodb:arangodb_manager.py__*__MODULE__*__CLASS-ArangoDBManager",
    "block_type": "FUNCTION",
    "start_line_num": 600,
    "end_line_num": 637,
    "code_content": "\ndef get_all_vertices(self) -> list[ModelType] | None:\n    \"\"\"\n        Retrieves all vertices from the graph.\n\n        Returns:\n            list[ModelType] | None: List of vertices or None if an error occurs.\n        \"\"\"\n\n    all_vertices: list[ModelType] = []\n    vertex_collections: list[\n        str\n    ] = helper_functions.pluralized_and_lowered_block_types()\n\n    for collection_name in vertex_collections:\n        try:\n            collection: StandardCollection = self.db_connector.db.collection(\n                collection_name\n            )\n            cursor: Result[Cursor] = collection.all()\n\n            for doc in cursor:  # type: ignore # FIXME: Fix type error\n                model_class: ModelType | None = (\n                    self._get_model_class_from_collection_name(collection_name)\n                )\n                if model_class:\n                    model: ModelType = model_class(**doc)  # type: ignore # FIXME: Fix type error\n                    all_vertices.append(model)\n                else:\n                    logging.warning(\n                        f\"No model class found for collection: {collection_name}\"\n                    )\n\n        except Exception as e:\n            logging.error(f\"Error fetching vertices from {collection_name}: {e}\")\n\n    return all_vertices\n",
    "important_comments": [
        {
            "content": "# type: ignore # FIXME: Fix type error",
            "comment_types": [
                "FIXME"
            ]
        },
        {
            "content": "# type: ignore # FIXME: Fix type error",
            "comment_types": [
                "FIXME"
            ]
        }
    ],
    "dependencies": null,
    "summary": "\nThe `get_all_vertices` method retrieves vertices from a graph database by iterating over collection names obtained from a helper function, using `StandardCollection` objects to query the database, and constructing a list of model instances from the results. It includes type annotations, error handling with logging, and `FIXME` comments to indicate areas needing type error fixes.",
    "children_ids": []
}