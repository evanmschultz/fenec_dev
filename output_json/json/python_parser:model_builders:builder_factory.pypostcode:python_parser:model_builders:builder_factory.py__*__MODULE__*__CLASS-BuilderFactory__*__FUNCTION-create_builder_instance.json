{
    "function_name": "create_builder_instance",
    "docstring": "Creates and returns an instance of a model builder based on the specified block type.\n\nDepending on the block type (module, class, function, standalone code block), it creates an instance of the corresponding model builder class.\n\nArgs:\n    block_type (BlockType): The type of code block for which the builder is to be created.\n    id (str): The unique identifier for the builder.\n    name (str | None): The name of the code block (relevant for class or function blocks).\n    parent_id (str | None): The identifier of the parent model (if applicable).\n    file_path (str | None): The file path of the module (relevant for module blocks).\n\nReturns:\n    Union[ModuleModelBuilder, ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]:\n    An instance of the appropriate model builder class.\n\nRaises:\n    ValueError: If an unknown block type is provided.\n\nExample:\n    >>> builder = BuilderFactory.create_builder_instance(\n            block_type=BlockType.CLASS,\n            id='class1',\n            name='MyClass',\n            parent_id='module1'\n        )\n    # This will create an instance of ClassModelBuilder for a class named 'MyClass'.",
    "decorators": [
        {
            "content": "@logging_decorator()",
            "decorator_name": "logging_decorator",
            "decorator_args": null
        },
        {
            "content": "@staticmethod",
            "decorator_name": "staticmethod",
            "decorator_args": null
        }
    ],
    "parameters": null,
    "returns": "ModuleModelBuilder | ClassModelBuilder | FunctionModelBuilder | StandaloneBlockModelBuilder",
    "is_method": true,
    "is_async": false,
    "id": "postcode:python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory__*__FUNCTION-create_builder_instance",
    "file_path": "postcode/python_parser/model_builders/builder_factory.py",
    "parent_id": "postcode:python_parser:model_builders:builder_factory.py__*__MODULE__*__CLASS-BuilderFactory",
    "block_type": "FUNCTION",
    "start_line_num": 147,
    "end_line_num": 197,
    "code_content": "\n@logging_decorator()\n@staticmethod\ndef create_builder_instance(\n    block_type: BlockType,\n    *,\n    id: str,\n    name: str | None = None,\n    parent_id: str | None = None,\n    file_path: str | None = None,\n) -> (\n    ModuleModelBuilder\n    | ClassModelBuilder\n    | FunctionModelBuilder\n    | StandaloneBlockModelBuilder\n):\n    \"\"\"\n        Creates and returns an instance of a model builder based on the specified block type.\n\n        Depending on the block type (module, class, function, standalone code block), it creates an instance of the corresponding model builder class.\n\n        Args:\n            block_type (BlockType): The type of code block for which the builder is to be created.\n            id (str): The unique identifier for the builder.\n            name (str | None): The name of the code block (relevant for class or function blocks).\n            parent_id (str | None): The identifier of the parent model (if applicable).\n            file_path (str | None): The file path of the module (relevant for module blocks).\n\n        Returns:\n            Union[ModuleModelBuilder, ClassModelBuilder, FunctionModelBuilder, StandaloneBlockModelBuilder]:\n            An instance of the appropriate model builder class.\n\n        Raises:\n            ValueError: If an unknown block type is provided.\n\n        Example:\n            >>> builder = BuilderFactory.create_builder_instance(\n                    block_type=BlockType.CLASS,\n                    id='class1',\n                    name='MyClass',\n                    parent_id='module1'\n                )\n            # This will create an instance of ClassModelBuilder for a class named 'MyClass'.\n        \"\"\"\n\n    if block_type not in BuilderFactory._creation_strategies:\n        raise ValueError(f\"Unknown node type: {block_type}\")\n    return BuilderFactory._creation_strategies[block_type](\n        id=id, name=name, parent_id=parent_id, file_path=file_path\n    )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": null,
    "children_ids": []
}