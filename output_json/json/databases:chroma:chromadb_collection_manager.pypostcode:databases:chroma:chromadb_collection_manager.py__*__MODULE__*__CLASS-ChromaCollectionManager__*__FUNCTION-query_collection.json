{
    "function_name": "query_collection",
    "docstring": "Queries and returns the `n` nearest neighbors from the collection.\n\nArgs:\n    - queries (list[str]): A list of queries to search the collection for.\n    - n_results (int): The number of results to return.\n    - where_filter (chroma_types.Where | None): A TypedDict used to filter the results.\n        - e.g. `{\"block_type\": \"FUNCTION\", \"children\": None}`\n    - where_document_filter (chroma_types.WhereDocument | None): A TypedDict used to filter the results by the document,\n        - e.g. `{$contains: \"binary search\"}`\n    - include_in_result (chroma_types.Include | None): A list used of what to return from the results, e.g. `[\"metadatas\", \"embeddings\", \"documents\"]`\n\nReturns:\n    - results (chroma_types.QueryResult | None): A typed dict of query results from the collection, can have the following keys based on the\n        `include_in_result` parameter:\n        - ids: list[str] # The ids are always returned.\n        - embeddings: List[list[Embedding]] | None\n        - documents: list[list[str]]] | None\n        - uris: list[list[URI]]] | None\n        - data: list[Loadable] | None\n        - metadatas: list[list[Metadata]] | None\n        - distances: list[list[float]] | None\n\nRaises:\n    - ValueError: If you don't provide query_texts.\n\nExamples:\n    ```Python\n    import postcode.types.chromadb.types as chroma\n\n    # define the queries and filters used to search the collection\n    queries: list[str] = [\"binary search\", \"linear search\"]\n    where_filter: chroma_types.Where = {\"block_type\": \"FUNCTION\"}\n\n    # define the data to return from the collection\n    include_in_result: chroma_types.Include = [\"metadatas\", \"documents\", \"distances\"]\n\n    # query the collection and return the results from the collection\n    results: chroma_types.QueryResult = collection_manager.query_collection(\n        queries,\n        where_filter=where_filter,\n        include_in_result=include_in_result\n        )\n    ```",
    "decorators": null,
    "parameters": null,
    "returns": " | None",
    "is_method": true,
    "is_async": false,
    "id": "postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaCollectionManager__*__FUNCTION-query_collection",
    "file_path": "postcode/databases/chroma/chromadb_collection_manager.py",
    "parent_id": "postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaCollectionManager",
    "block_type": "FUNCTION",
    "start_line_num": 178,
    "end_line_num": 251,
    "code_content": "\ndef query_collection(\n    self,\n    queries: list[str],\n    n_results: int = 10,\n    where_filter: chroma_types.Where | None = None,\n    where_document_filter: chroma_types.WhereDocument | None = None,\n    include_in_result: chroma_types.Include = [\"metadatas\", \"documents\"],\n) -> chroma_types.QueryResult | None:\n    \"\"\"\n        Queries and returns the `n` nearest neighbors from the collection.\n\n        Args:\n            - queries (list[str]): A list of queries to search the collection for.\n            - n_results (int): The number of results to return.\n            - where_filter (chroma_types.Where | None): A TypedDict used to filter the results.\n                - e.g. `{\"block_type\": \"FUNCTION\", \"children\": None}`\n            - where_document_filter (chroma_types.WhereDocument | None): A TypedDict used to filter the results by the document,\n                - e.g. `{$contains: \"binary search\"}`\n            - include_in_result (chroma_types.Include | None): A list used of what to return from the results, e.g. `[\"metadatas\", \"embeddings\", \"documents\"]`\n\n        Returns:\n            - results (chroma_types.QueryResult | None): A typed dict of query results from the collection, can have the following keys based on the\n                `include_in_result` parameter:\n                - ids: list[str] # The ids are always returned.\n                - embeddings: List[list[Embedding]] | None\n                - documents: list[list[str]]] | None\n                - uris: list[list[URI]]] | None\n                - data: list[Loadable] | None\n                - metadatas: list[list[Metadata]] | None\n                - distances: list[list[float]] | None\n\n        Raises:\n            - ValueError: If you don't provide query_texts.\n\n        Examples:\n            ```Python\n            import postcode.types.chromadb.types as chroma\n\n            # define the queries and filters used to search the collection\n            queries: list[str] = [\"binary search\", \"linear search\"]\n            where_filter: chroma_types.Where = {\"block_type\": \"FUNCTION\"}\n\n            # define the data to return from the collection\n            include_in_result: chroma_types.Include = [\"metadatas\", \"documents\", \"distances\"]\n\n            # query the collection and return the results from the collection\n            results: chroma_types.QueryResult = collection_manager.query_collection(\n                queries,\n                where_filter=where_filter,\n                include_in_result=include_in_result\n                )\n            ```\n        \"\"\"\n\n    try:\n        logging.info(f\"Querying collection {self.collection.name}\")\n\n        if results := self.collection.query(\n            query_texts=queries,\n            n_results=n_results,\n            where=where_filter,\n            where_document=where_document_filter,\n            include=include_in_result,\n        ):\n            return results\n        else:\n            logging.warning(\n                f\"No results found from collection {self.collection.name}.\"\n            )\n\n    except Exception as exception:\n        raise exception\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:databases:chroma:chromadb_collection_manager.py__*__MODULE__*__CLASS-ChromaCollectionManager__*__FUNCTION-query_collection\n\n        None, None, None\n        ",
    "children_ids": []
}