{
    "function_name": "decorator",
    "docstring": null,
    "decorators": null,
    "parameters": null,
    "returns": "Function has no return annotation",
    "is_method": false,
    "is_async": false,
    "id": "postcode:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator__*__FUNCTION-decorator",
    "file_path": "postcode/utilities/logger/decorators.py",
    "parent_id": "postcode:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator",
    "block_type": "FUNCTION",
    "start_line_num": 39,
    "end_line_num": 63,
    "code_content": "\ndef decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        log_message: str = (\n            message if message else (f\"Calling function: {func.__name__}\")\n        )\n        frame_info: inspect.FrameInfo = inspect.stack()[1]\n        caller_info: LoggingCallerInfo = _get_caller_info(frame_info)\n        code_content: str = _gather_code_content(syntax_highlighting, args)\n        logger: Logger = _get_logger(caller_info.caller_module_name)\n\n        _handle_logging(\n            logger,\n            caller_info,\n            level,\n            log_message,\n            syntax_highlighting,\n            code_content,\n        )\n\n        return func(*args, **kwargs)\n\n    return wrapper\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\n\nThe provided code defines a Python decorator named `decorator`, which wraps a function to add logging functionality. It uses the `@wraps` decorator from the `functools` module to preserve the original function's metadata. The decorator captures the calling function's details using the `inspect` module and logs the function call with optional syntax highlighting and a custom or default message. It leverages a helper function `_handle_logging` to perform the actual logging, which is configured based on the caller's module name and the specified logging `level`. After logging, the original function is executed with its arguments and the result is returned. The decorator enhances the function with logging while maintaining its original interface and behavior.",
    "children_ids": [
        "postcode:utilities:logger:decorators.py__*__MODULE__*__FUNCTION-logging_decorator__*__FUNCTION-decorator__*__FUNCTION-wrapper"
    ]
}