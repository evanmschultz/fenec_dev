{
    "function_name": "_convert_class_attributes_to_metadata_dict",
    "docstring": "Converts the class attributes to a metadata dictionary.",
    "decorators": null,
    "parameters": null,
    "returns": "dict[str, str | int]",
    "is_method": true,
    "is_async": false,
    "id": "postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes__*__FUNCTION-_convert_class_attributes_to_metadata_dict",
    "file_path": "postcode/models/models.py",
    "parent_id": "postcode:models:models.py__*__MODULE__*__CLASS-ClassSpecificAttributes",
    "block_type": "FUNCTION",
    "start_line_num": 284,
    "end_line_num": 295,
    "code_content": "\ndef _convert_class_attributes_to_metadata_dict(self) -> dict[str, str | int]:\n    \"\"\"Converts the class attributes to a metadata dictionary.\"\"\"\n\n    return {\n        \"class_name\": self.class_name,\n        \"decorators\": self._convert_decorators_to_metadata(),\n        \"bases\": self._convert_bases_to_metadata(),\n        \"docstring\": self._convert_docstring_to_metadata(),\n        \"keywords\": self._convert_keywords_to_metadata(),\n    }\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nThe `_convert_class_attributes_to_metadata_dict` method within a Python class compiles a dictionary that encapsulates the class's metadata, with string keys corresponding to attributes like 'class_name', 'decorators', 'bases', 'docstring', and 'keywords'. The values are produced by private methods tailored to transform each class attribute into a standardized metadata format, with the dictionary's values being either strings or integers as indicated by the method's return type hint.",
    "children_ids": []
}