{
    "function_name": "build",
    "docstring": "Builds and returns the function model instance after building and setting the children models.",
    "decorators": [
        {
            "content": "@logging_decorator(message=\"Building function model\")",
            "decorator_name": "logging_decorator",
            "decorator_args": [
                "message=\"Building function model\""
            ]
        }
    ],
    "parameters": null,
    "returns": "FunctionModel",
    "is_method": true,
    "is_async": false,
    "id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder__*__FUNCTION-build",
    "file_path": "postcode/python_parser/model_builders/function_model_builder.py",
    "parent_id": "postcode:python_parser:model_builders:function_model_builder.py__*__MODULE__*__CLASS-FunctionModelBuilder",
    "block_type": "FUNCTION",
    "start_line_num": 89,
    "end_line_num": 99,
    "code_content": "\n@logging_decorator(message=\"Building function model\")\ndef build(self) -> FunctionModel:\n    \"\"\"Builds and returns the function model instance after building and setting the children models.\"\"\"\n    self.build_children()\n    self.set_children_ids()\n    return FunctionModel(\n        **self._get_common_attributes(),\n        **self._get_function_specific_attributes(),\n    )\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nThe `build` method, adorned with a `logging_decorator`, constructs a `FunctionModel` object by first invoking private methods to build child components and assign their IDs. It then combines the results of other private methods that retrieve common and function-specific attributes, ensuring the method's return type is explicitly `FunctionModel`.",
    "children_ids": []
}