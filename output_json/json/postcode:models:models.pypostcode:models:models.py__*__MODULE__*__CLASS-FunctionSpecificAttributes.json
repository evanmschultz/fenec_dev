{
    "class_name": "FunctionSpecificAttributes",
    "decorators": null,
    "bases": [
        "BaseModel"
    ],
    "docstring": "Function specific attributes.",
    "keywords": null,
    "id": "postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes",
    "file_path": "postcode/models/models.py",
    "parent_id": "postcode:models:models.py__*__MODULE",
    "block_type": "CLASS",
    "start_line_num": 331,
    "end_line_num": 375,
    "code_content": "\n\nclass FunctionSpecificAttributes(BaseModel):\n    \"\"\"Function specific attributes.\"\"\"\n\n    function_name: str = Field(min_length=1)\n    docstring: str | None = None\n    decorators: list[DecoratorModel] | None = None\n    parameters: ParameterListModel | None = None\n    returns: str | None = None\n    is_method: bool = False\n    is_async: bool = False\n\n    def _convert_docstring_to_metadata(self) -> str:\n        \"\"\"Converts the docstring to a metadata string.\"\"\"\n        return f\"{self.docstring}\" if self.docstring else \"\"\n\n    def _convert_decorators_to_metadata(self) -> str:\n        \"\"\"Converts the decorators to a metadata string.\"\"\"\n        decorators_str: str = self.model_dump_json() if self.decorators else \"\"\n        return f\"{decorators_str}\"\n\n    def _convert_parameters_to_metadata(self) -> str:\n        \"\"\"Converts the parameters to a metadata string.\"\"\"\n        return (\n            self.parameters.convert_parameters_to_metadata() if self.parameters else \"\"\n        )\n\n    def _convert_returns_to_metadata(self) -> str:\n        \"\"\"Converts the returns to a metadata string.\"\"\"\n        return f\"{self.returns}\" if self.returns else \"\"\n\n    def _convert_function_attributes_to_metadata_dict(self) -> dict[str, str | bool]:\n        \"\"\"Converts the function attributes to a metadata dictionary for ChromaDB.\"\"\"\n\n        return {\n            \"function_name\": self.function_name,\n            \"docstring\": self._convert_docstring_to_metadata(),\n            \"decorators\": self._convert_decorators_to_metadata(),\n            \"parameters\": self._convert_parameters_to_metadata(),\n            \"returns\": self._convert_returns_to_metadata(),\n            \"is_method\": self.is_method,\n            \"is_async\": self.is_async,\n        }\n",
    "important_comments": null,
    "dependencies": [
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DecoratorModel"
        },
        {
            "code_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ParameterListModel"
        },
        {
            "import_names": [
                {
                    "name": "BaseModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Field",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "field_validator",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "pydantic",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "BaseModel",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "Field",
                    "as_name": null,
                    "local_block_id": null
                },
                {
                    "name": "field_validator",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "pydantic",
            "import_module_type": "THIRD_PARTY",
            "local_module_id": null
        }
    ],
    "summary": "\n\nThe `FunctionSpecificAttributes` class, inheriting from `BaseModel`, encapsulates metadata about a function, including its name, docstring, decorators, parameters, return type, and flags indicating if it's a method or asynchronous. It provides methods to convert each attribute into a metadata string: `_convert_docstring_to_metadata`, `_convert_decorators_to_metadata`, `_convert_parameters_to_metadata`, and `_convert_returns_to_metadata`. These methods handle the presence or absence of their respective attributes and format them as strings. The class also includes a method `_convert_function_attributes_to_metadata_dict` that aggregates the metadata from all attributes into a dictionary, which is structured for use with ChromaDB. This dictionary includes the function's name, docstring, decorators, parameters, return type, and the boolean states of `is_method` and `is_async`. The class ensures that each piece of function metadata is consistently formatted and ready for database storage or further processing.",
    "children_ids": [
        "postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes__*__FUNCTION-_convert_docstring_to_metadata",
        "postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes__*__FUNCTION-_convert_decorators_to_metadata",
        "postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes__*__FUNCTION-_convert_parameters_to_metadata",
        "postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes__*__FUNCTION-_convert_returns_to_metadata",
        "postcode:models:models.py__*__MODULE__*__CLASS-FunctionSpecificAttributes__*__FUNCTION-_convert_function_attributes_to_metadata_dict"
    ]
}