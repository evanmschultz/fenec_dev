{
    "docstring": null,
    "header": [],
    "footer": [],
    "imports": [
        {
            "import_names": [
                {
                    "name": "logging",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ArangoDBManager",
                    "as_name": null,
                    "local_block_id": "postcode:databases:arangodb:arangodb_manager.py__*__MODULE__*__CLASS-ArangoDBManager"
                }
            ],
            "imported_from": "postcode.databases.arangodb.arangodb_manager",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:databases:arangodb:arangodb_manager.py__*__MODULE"
        },
        {
            "import_names": [
                {
                    "name": "ModelType",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": "postcode.types.postcode",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:types:postcode.py__*__MODULE"
        }
    ],
    "id": "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE",
    "file_path": "postcode/ai_services/summarizer/summarization_mapper.py",
    "parent_id": "postcode:ai_services:summarizer__*__DIRECTORY",
    "block_type": "MODULE",
    "start_line_num": 1,
    "end_line_num": 86,
    "code_content": "import logging\nfrom postcode.databases.arangodb.arangodb_manager import ArangoDBManager\n\nfrom postcode.types.postcode import ModelType\n\n\nclass SummarizationMapper:\n    def __init__(\n        self,\n        module_ids_to_update: list[str],\n        all_models: tuple[ModelType, ...],\n        arangodb_manager: ArangoDBManager,\n    ) -> None:\n        self.module_ids_to_update: list[str] = module_ids_to_update\n        self.all_models: tuple[ModelType, ...] = all_models\n        self.arangodb_manager: ArangoDBManager = arangodb_manager\n\n        self.models_to_update: list[ModelType] = self._set_models_to_update()\n        self.model_visited_in_db: set[str] = set()\n        self.summarization_map: list[ModelType] = []\n        self.temp_map: list[ModelType] = []\n\n    def _set_models_to_update(self) -> list[ModelType]:\n        \"\"\"Returns all models that need to be updated.\"\"\"\n\n        models_to_update: list[ModelType] = []\n        for model in self.all_models:\n            for module_id in self.module_ids_to_update:\n                if module_id in model.id:\n                    models_to_update.append(model)\n                    break\n\n        return models_to_update\n\n    def _set_inbound_models_in_summarization_map(self, model_id: str) -> None:\n        if model_id in self.model_visited_in_db:\n            return\n        self.model_visited_in_db.add(model_id)\n        if inbound_models := self.arangodb_manager.get_inbound_models(model_id):\n            for model in inbound_models:\n                self.model_visited_in_db.add(model_id)\n                self._set_inbound_models_in_summarization_map(model.id)\n\n                self.temp_map.append(model)\n\n    def _set_outbound_models_in_summarization_map(self, model_id: str) -> None:\n        if model_id in self.model_visited_in_db:\n            return\n\n        if outbound_models := self.arangodb_manager.get_outbound_models(model_id):\n            for model in outbound_models[::-1]:\n                self.model_visited_in_db.add(model_id)\n\n                if model.id in self.models_to_update:\n                    model.summary = None\n                self.temp_map.append(model)\n\n    def create_summarization_map(self) -> list[ModelType]:\n        self._set_models_to_update()\n        logging.info(\"Set models to update\")\n\n        for model in self.models_to_update:\n            logging.debug(f\"Setting inbound models in summarization map: {model.id}\")\n            self._set_inbound_models_in_summarization_map(model.id)\n            self.temp_map.append(model)\n\n            self.model_visited_in_db.remove(model.id)\n            self.summarization_map.extend(self.temp_map)\n            self.temp_map = []\n\n        for model in self.models_to_update:\n            logging.debug(f\"Setting outbound models in summarization map: {model.id}\")\n            self._set_outbound_models_in_summarization_map(model.id)\n            self.summarization_map.extend(self.temp_map)\n            self.temp_map = []\n\n        logging.info(\"Created summarization map\")\n        summary_ids: set[str] = set()\n        summary_map: list[ModelType] = []\n        for model in self.summarization_map[::-1]:\n            if model.id not in summary_ids:\n                summary_map.append(model)\n                summary_ids.add(model.id)\n\n        return summary_map[::-1]\n",
    "important_comments": null,
    "dependencies": null,
    "summary": "\nSummary:\n\n        postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE\n\n        \nChild (postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE__*__CLASS-SummarizationMapper) code content:\n\n\nclass SummarizationMapper:\n    def __init__(\n        self,\n        module_ids_to_update: list[str],\n        all_models: tuple[ModelType, ...],\n        arangodb_manager: ArangoDBManager,\n    ) -> None:\n        self.module_ids_to_update: list[str] = module_ids_to_update\n        self.all_models: tuple[ModelType, ...] = all_models\n        self.arangodb_manager: ArangoDBManager = arangodb_manager\n\n        self.models_to_update: list[ModelType] = self._set_models_to_update()\n        self.model_visited_in_db: set[str] = set()\n        self.summarization_map: list[ModelType] = []\n        self.temp_map: list[ModelType] = []\n\n    def _set_models_to_update(self) -> list[ModelType]:\n        \"\"\"Returns all models that need to be updated.\"\"\"\n\n        models_to_update: list[ModelType] = []\n        for model in self.all_models:\n            for module_id in self.module_ids_to_update:\n                if module_id in model.id:\n                    models_to_update.append(model)\n                    break\n\n        return models_to_update\n\n    def _set_inbound_models_in_summarization_map(self, model_id: str) -> None:\n        if model_id in self.model_visited_in_db:\n            return\n        self.model_visited_in_db.add(model_id)\n        if inbound_models := self.arangodb_manager.get_inbound_models(model_id):\n            for model in inbound_models:\n                self.model_visited_in_db.add(model_id)\n                self._set_inbound_models_in_summarization_map(model.id)\n\n                self.temp_map.append(model)\n\n    def _set_outbound_models_in_summarization_map(self, model_id: str) -> None:\n        if model_id in self.model_visited_in_db:\n            return\n\n        if outbound_models := self.arangodb_manager.get_outbound_models(model_id):\n            for model in outbound_models[::-1]:\n                self.model_visited_in_db.add(model_id)\n\n                if model.id in self.models_to_update:\n                    model.summary = None\n                self.temp_map.append(model)\n\n    def create_summarization_map(self) -> list[ModelType]:\n        self._set_models_to_update()\n        logging.info(\"Set models to update\")\n\n        for model in self.models_to_update:\n            logging.debug(f\"Setting inbound models in summarization map: {model.id}\")\n            self._set_inbound_models_in_summarization_map(model.id)\n            self.temp_map.append(model)\n\n            self.model_visited_in_db.remove(model.id)\n            self.summarization_map.extend(self.temp_map)\n            self.temp_map = []\n\n        for model in self.models_to_update:\n            logging.debug(f\"Setting outbound models in summarization map: {model.id}\")\n            self._set_outbound_models_in_summarization_map(model.id)\n            self.summarization_map.extend(self.temp_map)\n            self.temp_map = []\n\n        logging.info(\"Created summarization map\")\n        summary_ids: set[str] = set()\n        summary_map: list[ModelType] = []\n        for model in self.summarization_map[::-1]:\n            if model.id not in summary_ids:\n                summary_map.append(model)\n                summary_ids.add(model.id)\n\n        return summary_map[::-1]\n\n, None, None\n        ",
    "children_ids": [
        "postcode:ai_services:summarizer:summarization_mapper.py__*__MODULE__*__CLASS-SummarizationMapper"
    ]
}