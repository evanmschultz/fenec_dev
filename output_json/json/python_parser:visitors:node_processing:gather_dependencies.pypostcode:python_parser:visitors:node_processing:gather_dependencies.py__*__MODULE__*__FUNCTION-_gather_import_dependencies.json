{
    "function_name": "_gather_import_dependencies",
    "docstring": "Gathers import dependencies from the provided code content.\n\nThis function checks for the presence of import names (and their aliases) in the given code content\nand returns a list of import models that are dependencies for the code block.\n\nArgs:\n    imports (list[ImportModel] | None): A list of import models to check against the code content.\n    code_content (str): The string content of the code block being analyzed.\n\nReturns:\n    list[ImportModel]: A list of import models that the code content depends on.",
    "decorators": null,
    "parameters": null,
    "returns": "list[ImportModel]",
    "is_method": false,
    "is_async": false,
    "id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_gather_import_dependencies",
    "file_path": "postcode/python_parser/visitors/node_processing/gather_dependencies.py",
    "parent_id": "postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE",
    "block_type": "FUNCTION",
    "start_line_num": 53,
    "end_line_num": 85,
    "code_content": "\n\ndef _gather_import_dependencies(\n    imports: list[ImportModel] | None, code_content: str\n) -> list[ImportModel]:\n    \"\"\"\n    Gathers import dependencies from the provided code content.\n\n    This function checks for the presence of import names (and their aliases) in the given code content\n    and returns a list of import models that are dependencies for the code block.\n\n    Args:\n        imports (list[ImportModel] | None): A list of import models to check against the code content.\n        code_content (str): The string content of the code block being analyzed.\n\n    Returns:\n        list[ImportModel]: A list of import models that the code content depends on.\n    \"\"\"\n\n    block_dependencies: list[ImportModel] = []\n\n    if imports:\n        for import_model in imports:\n            for import_name_model in import_model.import_names:\n                if import_name_model.as_name:\n                    if import_name_model.as_name in code_content:\n                        block_dependencies.append(import_model)\n\n                if import_name_model.name in code_content:\n                    block_dependencies.append(import_model)\n\n    return block_dependencies\n",
    "important_comments": null,
    "dependencies": [
        {
            "import_names": [
                {
                    "name": "re",
                    "as_name": null,
                    "local_block_id": null
                }
            ],
            "imported_from": null,
            "import_module_type": "STANDARD_LIBRARY",
            "local_module_id": null
        },
        {
            "import_names": [
                {
                    "name": "ImportModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-ImportModel"
                },
                {
                    "name": "DependencyModel",
                    "as_name": null,
                    "local_block_id": "postcode:models:models.py__*__MODULE__*__CLASS-DependencyModel"
                }
            ],
            "imported_from": "postcode.models.models",
            "import_module_type": "LOCAL",
            "local_module_id": "postcode:models:models.py__*__MODULE"
        }
    ],
    "summary": "\nSummary:\n\n        postcode:python_parser:visitors:node_processing:gather_dependencies.py__*__MODULE__*__FUNCTION-_gather_import_dependencies\n\n        None, \nImported code block (postcode:models:models.py__*__MODULE) code content:\n\n\nclass ImportModel(BaseModel):\n    \"\"\"Class representing an import statement.\"\"\"\n\n    import_names: list[ImportNameModel]\n    imported_from: str | None = None\n    import_module_type: ImportModuleType = ImportModuleType.STANDARD_LIBRARY\n    local_module_id: str | None = None\n\n    def convert_import_to_metadata(self) -> str:\n        \"\"\"Converts the import to a metadata string.\"\"\"\n        return self.model_dump_json()\n\n, \nimport re\n        ",
    "children_ids": []
}